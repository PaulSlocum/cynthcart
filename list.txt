------- FILE cynthcart2.0.1.asm LEVEL 1 PASS 2
      1  3b67 ????						; Commodore 64 Cynthcart
      2  3b67 ????						; by Paul Slocum
      3  3b67 ????						;------------------------
      4  3b67 ????						; TEXT EDITOR TAB=3
      5  3b67 ????						;------------------------
      6  3b67 ????
      7  3b67 ????						;     ~~~==========================================================================================~~~
      8  3b67 ????						; <<<<<<"MODE" AND "DEVICE_CONFIG" SHOULD BE DEFINED IN DASM CALL (dasm -DMODE=1 -DDEVICE_CONFIG=0) >>>>>>
      9  3b67 ????						;     ~~~==========================================================================================~~~
     10  3b67 ????
     11  3b67 ????						; IMAGE RUN MODES:
     12  3b67 ????	       00 00	   CART_OBSOLETE equ	0	; run at $8000 off cartridge ROM (No longer supported because the ROM is bigger than 8K)
     13  3b67 ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word (PRG format)
     14  3b67 ????	       00 02	   RAM	      equ	2	; run at $3000, needs to be copied or decompressed into $3000 (used for compresed version)
     15  3b67 ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (No longer supported because the ROM is bigger than 8K)
     16  3b67 ????						; -- - -- - -- - -- - -- -
     17  3b67 ????						;;;MODE equ RAM   ; DISK, CART_OBSOLETE, RAM (for compression), or KERNEL_OBSOLETE
     18  3b67 ????						; -- - -- - -- - -- - -- -
     19  3b67 ????
     20  3b67 ????
     21  3b67 ????						; MIDI AND SID2 CONFIGURATION:
     22  3b67 ????	       00 00	   DEFAULT    equ	0	; Midi autodetect, SID2 at $DF00
     23  3b67 ????	       00 01	   KERBEROS   equ	1	; Datel Midi, SID2 at $D420
     24  3b67 ????	       00 02	   EMU	      equ	2	; Midi disabled, SID2 at $D420
     25  3b67 ????	       00 03	   SIDSYMPHONY equ	3	; Midi disabled, SID2 at $DE00
     26  3b67 ????						; -- - -- - -- - -- - -- -
     27  3b67 ????						;;;DEVICE_CONFIG equ DEFAULT
     28  3b67 ????						; -- - -- - -- - -- - -- -
     29  3b67 ????
     30  3b67 ????
     31  3b67 ????	       00 00	   BETA_RELEASE equ	0
     32  3b67 ????
     33  3b67 ????						;=================================------------ - - - -  -   -
     34  3b67 ????						;
     35  3b67 ????						; TODO:
     36  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     37  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     38  3b67 ????						;
     39  3b67 ????						;=================================------------ - - - -  -   -
     40  3b67 ????						;
     41  3b67 ????						; - - - - - - - - - - - - - -
     42  3b67 ????						; Change Log:
     43  3b67 ????						; - - - - - - - - - - - - - -
     44  3b67 ????						; 2.0.1
     45  3b67 ????						; + disabled Restore key, which causes a lock up on a few 64C models
     46  3b67 ????						; + reset paddle2 pitch value when pitch control is turned off
     47  3b67 ????						; 2.0
     48  3b67 ????						; + 7 additional presets
     49  3b67 ????						; + added mono stack portamento modes
     50  3b67 ????						; + wrote new instruction manual
     51  3b67 ????						; + moved secondary SID to $DF00 to work with SIDcart II (note: must build with SID #2 at $D420 for Kerberos)
     52  3b67 ????						; + now supports and autodetects Passport, Datel, Sequential, and Kerberos MIDI adapters (note: autodetect is incompatible with VICE)
     53  3b67 ????						; + created new compression system to fit latest ROM onto 8K cartridge
     54  3b67 ????						; + presets now have independent waveform and sustain/release for each oscillator
     55  3b67 ????						; + added a button to cancel out of the SID editor
     56  3b67 ????						; + help screen now displays even when video is off
     57  3b67 ????						; + fixed SID editor waveform bug
     58  3b67 ????						; + other minor bugfixes
     59  3b67 ????						; + added build switch for alternate midi and SID configurations
     60  3b67 ????						; - - - - - - - - - - - - - -
     61  3b67 ????						; 1.5.1
     62  3b67 ????						; + fixed clock and sysex bytes causing crashes/stuck notes (Midi 0xF0-0xFF)
     63  3b67 ????						; + fixed bad pitch bend startup value		Q
     64  3b67 ????						; + added non-omni modes for channel 1 and 5
     65  3b67 ????						; - - - - - - - - - - - - - -
     66  3b67 ????						; 1.5.0 (major update for Kerberos)
     67  3b67 ????						; + added MIDI support for Kerberos cartridge/DATEL MIDI interface
     68  3b67 ????						; + arpeggiator
     69  3b67 ????						; + mono stack mode and 6-voice mode
     70  3b67 ????						; + new filter and pulse width effects modes
     71  3b67 ????						; + 12 additional presets
     72  3b67 ????						; + improved clarity of help screen text
     73  3b67 ????						; + moved SID location for MIDI version to $D420 since MIDI address overlaps with SID Symphony ($DE00)
     74  3b67 ????						; + refactored much of project source
     75  3b67 ????						; + new smarter note buffering system
     76  3b67 ????						; + reworked patch parameter display
     77  3b67 ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     78  3b67 ????						; + optimized the tuning shift tables for space by overlapping tables
     79  3b67 ????						; + made LFO and all pitch modulations use proper tuning/scaling
     80  3b67 ????						; + fixed some errors in the tuning shift tables
     81  3b67 ????						; + added "RETURN FOR CONTROLS" message at bottom
     82  3b67 ????						; - - - - - - - - - - - - - -
     83  3b67 ????						; 1.2.4
     84  3b67 ????						; + designated paddle 1 and 2 in help screen
     85  3b67 ????						; - - - - - - - - - - - - - -
     86  3b67 ????						; 1.2.3
     87  3b67 ????						; + disable key-commands when 3 piano keys are held
     88  3b67 ????						;		to avoid quirks with keyboard matrix
     89  3b67 ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     90  3b67 ????						; + reinstated shift-lock holding notes
     91  3b67 ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     92  3b67 ????						; + add another octave to tuning charts for 5ths in top octave
     93  3b67 ????						; + auto-paddle on
     94  3b67 ????						; + set up custom test for space bar
     95  3b67 ????						; + disable settings changes w/ space bar
     96  3b67 ????						; + corrected "sine" to "tringl" in patch names
     97  3b67 ????						; + restored startup patch to "saw bass"
     98  3b67 ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     99  3b67 ????						;	+ add key command to switch controls and turn off
    100  3b67 ????						;	+ add display of paddle status
    101  3b67 ????						;	+ add code to run things from the second paddle
    102  3b67 ????						; - - - - - - - - - - - - - -
    103  3b67 ????						; 1.2.2
    104  3b67 ????						; + keyboard driver rewrite
    105  3b67 ????						; + moved tuning from piano to ASDF...
    106  3b67 ????						; + moved filter On/Off to ZXC
    107  3b67 ????						; + keys swap portamento and octave
    108  3b67 ????						; + move video mode to SHFT+FGH and require shift for VIC mode
    109  3b67 ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
    110  3b67 ????						; + separate functions for "show everything" and "variable init"
    111  3b67 ????						; + video mode with no text (shift+:/;)
    112  3b67 ????						; + SID register $20-$26 edits all 3 oscillators at once
    113  3b67 ????						; + write help display routine
    114  3b67 ????						; + add help screen
    115  3b67 ????						; + reverse octave keys
    116  3b67 ????						; + add help for SID edit mode
    117  3b67 ????						; + redo hex editor piano KB layout
    118  3b67 ????						; + save SID edits
    119  3b67 ????						; + added "COPYING TO RAM" text when RAM copy is on
    120  3b67 ????						; - - - - - - - - - - - - - -
    121  3b67 ????						; 1.2.1
    122  3b67 ????						; + pitch fix for PAL
    123  3b67 ????						; + autodetection for PAL/NTSC
    124  3b67 ????						; - - - - - - - - - - - - - -
    125  3b67 ????						; 1.2.0
    126  3b67 ????						; + filter adjustment for SID Symphony
    127  3b67 ????						; - - - - - - - - - - - - - -
    128  3b67 ????						; 1.1 RELEASE
    129  3b67 ????						; + added SID HEX editor
    130  3b67 ????						; + changed tuning keys to avoid accidentally changing the tuning
    131  3b67 ????						; + added ability to turn the SID filter on and off
    132  3b67 ????						; - - - - - - - - - - - - - -
    133  3b67 ????						; 1.0 RELEASE
    134  3b67 ????						; + first official release
    135  3b67 ????						;-----------------------------------------------------
    136  3b67 ????
    137  3b67 ????
    138  3b67 ????						;-----------------------------------------------------
    139  3b67 ????						; FUTURE TODO LIST:
    140  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    141  3b67 ????						; - make port modes respond to pitch wheel
    142  3b67 ????						; - figure out why pulse LFO is so slow
    143  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    144  3b67 ????						; - fix patch saver issue where mode and FX are sometimes not saved
    145  3b67 ????						; - bug is bypassed, but figure out why showScreen messes up the filter setting
    146  3b67 ????						; - figure out why portamento is slower going down than up
    147  3b67 ????						; - make (IRQ) detector that works with VICE?
    148  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    149  3b67 ????						; - make envelope reset on every new note in mono modes
    150  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    151  3b67 ????						; - automatically relocate SID when using Kerberos
    152  3b67 ????						; - move video settings keys to a less used location?
    153  3b67 ????						; - add more FX modes
    154  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    155  3b67 ????						; - add some of Gert's mixed waveform sounds
    156  3b67 ????						; - add a button that resets all settings and turns video on
    157  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    158  3b67 ????						; - automatically turn off paddle when MIDI mod wheel data is received
    159  3b67 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    160  3b67 ????						; - 'O' key specifically may be out of tune
    161  3b67 ????						; - - - - - - - - - - - - - - -
    162  3b67 ????						; - consider adding per-patch filter on/off/disabled setting
    163  3b67 ????						; - midi trigger to turn off/on omni
    164  3b67 ????						; - - - - - - - - - - - - - - -
    165  3b67 ????						; - make rising mod not drop
    166  3b67 ????						; - wire up pwModValue from functions
    167  3b67 ????						; - wire up pwSetValue from midi and paddle
    168  3b67 ????						; - create filter and PW setter that runs every frame
    169  3b67 ????						; - - - - - - - - - - - - - - -
    170  3b67 ????						; - have mono-stack check to make sure notes aren't too low or too high
    171  3b67 ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    172  3b67 ????						; - create system that cycles which spots are favored for new empty or replacement notes
    173  3b67 ????						; - - - - - - - - - - - - - - -
    174  3b67 ????						; - auto-detect secondary SID
    175  3b67 ????						; - automatic setup for Kerberos MIDI
    176  3b67 ????						; - - - - - - - - - - - - - - -
    177  3b67 ????						; - fix note off bug with drum machine?
    178  3b67 ????						; - - - - - - - - - - - - - - -
    179  3b67 ????						; -- show held modifier keys
    180  3b67 ????						; - link SID memory to a controller block
    181  3b67 ????						; - make fifths buttons preserve the portamento setting
    182  3b67 ????						; - - - - - - - - - - - - - - -
    183  3b67 ????						; - new intervals other than 5ths
    184  3b67 ????						; - better mute/noise reduction
    185  3b67 ????						; - alternate set of keybindings for use without the keyboard overlay
    186  3b67 ????						; - - - - - - - - - - - - - - -
    187  3b67 ????						; - more patches
    188  3b67 ????						; - paddle 2 auto-on
    189  3b67 ????						;--------------------------
    190  3b67 ????						; - add echo long/med/short
    191  3b67 ????						; - more extreme variations in video mode
    192  3b67 ????						; - noise reduction
    193  3b67 ????						; - Envelope -> Filter Cutoff
    194  3b67 ????						; - filter type
    195  3b67 ????						; - ring modulation
    196  3b67 ????						; - sync
    197  3b67 ????						; - Whammy speed control
    198  3b67 ????						;--------------------------
    199  3b67 ????						; - filter Q
    200  3b67 ????						; - save patches to disk
    201  3b67 ????						;--------------------------
    202  3b67 ????						;--------------------------
    203  3b67 ????
    204  3b67 ????
    205  3b67 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    206  3b67 ????						;# MEMORY MAP
    207  3b67 ????						;#
    208  3b67 ????						;# $0800-$3800 Program and data
    209  3b67 ????						;# $7000-$7200 Variables and buffers (512 bytes)
    210  3b67 ????						;# $7F00-$7FFF MIDI ring buffer
    211  3b67 ????						;#
    212  3b67 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    213  3b67 ????
    214  3b67 ????
    215  3b67 ????
    216  3b67 ????
    217  3b67 ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    218  3b67 ????				      processor	6502
    219  3b67 ????
    220  3b67 ????
    221  3b67 ????						;**********************************************************
    222  3b67 ????						;**********************************************************
    223  3b67 ????						; PROGRAM CONFIGURATION SWITCHES
    224  3b67 ????						;**********************************************************
    225  3b67 ????						;**********************************************************
    226  3b67 ????
    227  3b67 ????
    228  3b67 ????
    229  3b67 ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running (this should always be enabled)
    230  3b67 ????
    231  3b67 ????				      IF	DEVICE_CONFIG=KERBEROS
    232  3b67 ????	       d4 20	   SID2       equ	$D420
    233  3b67 ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    234  3b67 ????				      ENDIF
    235  3b67 ????			  -	      IF	DEVICE_CONFIG=EMU
    236  3b67 ????			  -SID2       equ	$D420
    237  3b67 ????			  -ENABLE_MIDI_COMMANDS equ	0
    238  3b67 ????				      ENDIF
    239  3b67 ????			  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    240  3b67 ????			  -SID2       equ	$DE00
    241  3b67 ????			  -ENABLE_MIDI_COMMANDS equ	0
    242  3b67 ????				      ENDIF
    243  3b67 ????			  -	      IF	DEVICE_CONFIG=DEFAULT
    244  3b67 ????			  -SID2       equ	$DF00
    245  3b67 ????			  -ENABLE_MIDI_COMMANDS equ	1
    246  3b67 ????				      ENDIF
    247  3b67 ????
    248  3b67 ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    249  3b67 ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    250  3b67 ????
    251  3b67 ????						;ENABLE_MIDI_COMMANDS equ 1
    252  3b67 ????
    253  3b67 ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    254  3b67 ????	       00 00	   DEBUG_DISPLAY equ	0
    255  3b67 ????	       00 00	   OFFSET_CONTROLLERS equ	0
    256  3b67 ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    257  3b67 ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    258  3b67 ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    259  3b67 ????
    260  3b67 ????
    261  3b67 ????						;**********************************************************
    262  3b67 ????						;**********************************************************
    263  3b67 ????						;**********************************************************
    264  3b67 ????
    265  3b67 ????						; *********************************************
    266  3b67 ????						; START OF PROGRAM IN MEMORY
    267  3b67 ????						; *********************************************
    268  3b67 ????
    269  3b67 ????						;==================================================
    270  3b67 ????						; load from disk as PRG with auto-run
    271  3b67 ????				      IF	MODE=DISK
    272  3b67 ????	       07 ff	   BASEADDR   equ	2047	; 2047 = $7FF
    273  07ff					      org	BASEADDR	; the beginning of the BASIC program area
    274  07ff
    275  07ff							; disk load location
    276  07ff		       01 08		      byte.b	$01,$08
    277  0801							; BASIC program to call the cynthcart machine code...
    278  0801							; 10 SYS 2061
    279  0801		       0b 08 0a 00*	      byte.b	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    280  080d							; next effective address after this is 2061 / $80D
    281  080d					      ENDIF
    282  080d
    283  080d							;==================================================
    284  080d							; straight cart ROM
    285  080d				  -	      IF	MODE=CART_OBSOLETE
    286  080d				  -BASEADDR   equ	$8000
    287  080d				  -	      org	BASEADDR
    288  080d				  -	      word	Startup
    289  080d				  -	      word	Startup
    290  080d				  -			; 5 byte cartridge startup code
    291  080d				  -	      byte	$C3, $C2, $CD, $38, $30
    292  080d					      ENDIF
    293  080d
    294  080d							;==================================================
    295  080d							; load from RAM, requires wrapper to load into RAM (used for compressed version)
    296  080d				  -	      IF	MODE=RAM
    297  080d				  -BASEADDR   equ	$3000
    298  080d				  -			;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    299  080d				  -	      org	BASEADDR
    300  080d				  -			;byte $00,$50 ; DEBUG SETUP AS PRG
    301  080d					      ENDIF
    302  080d
    303  080d							;==================================================
    304  080d							; to replace BASIC ROM (NO LONGER SUPPORTED)
    305  080d				  -	      IF	MODE=KERNEL_OBSOLETE
    306  080d				  -BASEADDR   equ	$8000
    307  080d				  -	      org	BASEADDR
    308  080d				  -	      word	$E394	; RESET
    309  080d				  -	      word	$E37B	; Warm Start
    310  080d					      ENDIF
    311  080d
    312  080d							;---------------------------------------
    313  080d							; variables and constants here
    314  080d							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  080d					      include	cynth_vars.asm
      1  080d							; *********************************************
      2  080d							; Constants
      3  080d							; *********************************************
      4  080d
      5  080d							;KEYTIME equ 128
      6  080d							;KEYTIME equ 64
      7  080d		       00 28	   KEYTIME    equ	40
      8  080d
      9  080d		       00 e0	   REL_SHORT  equ	$E0
     10  080d		       00 e9	   REL_MED    equ	$E9
     11  080d		       00 ee	   REL_LONG   equ	$EE
     12  080d
     13  080d		       00 00	   ATK_SHORT  equ	$00
     14  080d		       00 90	   ATK_MED    equ	$90
     15  080d		       00 e0	   ATK_LONG   equ	$E0
     16  080d
     17  080d
     18  080d		       00 00	   VOLOFF     equ	$00
     19  080d		       00 07	   VOLLOW     equ	$07
     20  080d		       00 0b	   VOLMED     equ	$0B
     21  080d		       00 0f	   VOLHIGH    equ	$0F
     22  080d
     23  080d		       00 c5	   CURRENTKEY equ	197
     24  080d
     25  080d		       d0 20	   BACK_COLOR equ	53280
     26  080d		       d0 21	   BORD_COLOR equ	53281
     27  080d
     28  080d		       d4 00	   SID1       equ	$D400
     29  080d
     30  080d
     31  080d							;SID2 equ $DEE0
     32  080d
     33  080d		       00 04	   SID2OFFSET equ	4
     34  080d
     35  080d		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  080d
     37  080d		       00 00	   SV1FL      equ	$00
     38  080d		       00 01	   SV1FH      equ	$01
     39  080d		       00 02	   SV1PWL     equ	$02
     40  080d		       00 03	   SV1PWH     equ	$03
     41  080d		       00 04	   SV1WAVE    equ	$04
     42  080d		       00 05	   SV1AD      equ	$05
     43  080d		       00 06	   SV1SR      equ	$06
     44  080d
     45  080d		       00 07	   SV2FL      equ	$07
     46  080d		       00 08	   SV2FH      equ	$08
     47  080d		       00 09	   SV2PWL     equ	$09
     48  080d		       00 0a	   SV2PWH     equ	$0A
     49  080d		       00 0b	   SV2WAVE    equ	$0B
     50  080d		       00 0c	   SV2AD      equ	$0C
     51  080d		       00 0d	   SV2SR      equ	$0D
     52  080d
     53  080d		       00 0e	   SV3FL      equ	$0E
     54  080d		       00 0f	   SV3FH      equ	$0F
     55  080d		       00 10	   SV3PWL     equ	$10
     56  080d		       00 11	   SV3PWH     equ	$11
     57  080d		       00 12	   SV3WAVE    equ	$12
     58  080d		       00 13	   SV3AD      equ	$13
     59  080d		       00 14	   SV3SR      equ	$14
     60  080d
     61  080d		       00 15	   SFILTL     equ	$15
     62  080d		       00 16	   SFILTH     equ	$16
     63  080d		       00 17	   SFILTC     equ	$17
     64  080d		       00 18	   SVOLMODE   equ	$18
     65  080d
     66  080d		       00 19	   SPAD1      equ	$19
     67  080d		       00 1a	   SPAD2      equ	$1A
     68  080d
     69  080d		       00 1b	   SRAND      equ	$1B
     70  080d
     71  080d		       dc 00	   PortA      equ	$dc00
     72  080d		       dc 02	   Ciddra     equ	$dc02
     73  080d
     74  080d
     75  080d							; *********************************************
     76  080d							; RAM Variables
     77  080d							; *********************************************
     78  080d
     79  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  080d							; ZERO PAGE
     81  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  080d
     83  080d							; FROM SORTING ROUTINE
     84  080d		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  080d		       01 22	   nval       =	$122	;set by calling program
     86  080d		       01 25	   work1      =	$125	;3 bytes used as working area
     87  080d		       01 26	   work2      =	$126
     88  080d		       01 27	   work3      =	$127
     89  080d
     90  080d							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  080d							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  080d							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  080d							;WORK2  = $34
     94  080d							;WORK3  = $35
     95  080d
     96  080d							; CYNTHCART
     97  080d		       00 22	   tunePtrL   equ	34	;2 bytes
     98  080d		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  080d		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  080d		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  080d
    102  080d		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  080d		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  080d
    105  080d		       00 2f	   helpReadPointerL equ	47
    106  080d		       00 30	   helpReadPointerM equ	48
    107  080d		       00 31	   helpWritePointerL equ	49
    108  080d		       00 32	   helpWritePointerM equ	50
    109  080d		       00 33	   helpColorPointerL equ	51
    110  080d		       00 34	   helpColorPointerM equ	52
    111  080d
    112  080d		       00 35	   portPtrL   equ	53	;2 bytes
    113  080d		       00 47	   portPtrH   equ	71	;2 bytes
    114  080d
    115  080d		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  080d		       00 c3	   keyPtrH    equ	195
    117  080d
    118  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  080d							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  080d							; private addresses ======
    121  080d		       00 64	   midiControl equ	$64	; $64 = 100
    122  080d		       00 66	   midiStatus =	$66	; 102
    123  080d		       00 68	   midiTx     =	$68	;104
    124  080d		       00 6a	   midiRx     =	$6a	;106
    125  080d		       00 6f	   keyTestIndex =	$6f	; 111
    126  080d		       00 70	   keyPressedIntern =	$70	; 112
    127  080d		       00 72	   shiftPressed =	$72	; 114
    128  080d							; public addresses ======
    129  080d		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  080d		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  080d		       00 6e	   midiInterfaceType =	$6e	;110
    132  080d		       00 71	   keyPressed =	$71	; 113
    133  080d							; this module ======
    134  080d		       00 59	   midiMessage equ	$59	; 95
    135  080d		       00 5a	   lastWaveform equ	$5a	; 90
    136  080d							; - - - - - - - - - - - - - -
    137  080d							; - - - - - - - - - - - - - -
    138  080d							; Non-zero page
    139  080d		       7f 00	   midiRingbuffer =	$7F00
    140  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  080d
    142  080d							;-------------------------------------
    143  080d
    144  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  080d							; NON-ZERO PAGE ($7000-$7FFF)
    146  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  080d
    148  080d		       70 00	   Trem       equ	$7000
    149  080d
    150  080d		       70 02	   FrameH     equ	$7002
    151  080d		       70 03	   Frame      equ	$7003
    152  080d
    153  080d		       70 04	   EchoPtr    equ	$7004
    154  080d		       70 05	   EchoCur    equ	$7005
    155  080d
    156  080d		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  080d
    158  080d		       70 07	   MagicVoice equ	$7007
    159  080d
    160  080d		       70 08	   LastKey    equ	$7008
    161  080d
    162  080d		       70 09	   Button     equ	$7009
    163  080d
    164  080d		       70 0a	   LFO	      equ	$700A
    165  080d
    166  080d		       70 0b	   PatchTune  equ	$700B
    167  080d
    168  080d		       70 0c	   temp       equ	$700C
    169  080d
    170  080d							;KeyA	equ $700D
    171  080d							;KeyB	equ $700E
    172  080d							;KeyC	equ $700F
    173  080d
    174  080d							;lastKeyA equ $7010
    175  080d							;lastKeyB equ $7011
    176  080d							;lastKeyC equ $7012
    177  080d
    178  080d		       70 13	   portDirA   equ	$7013
    179  080d		       70 14	   portDirB   equ	$7014
    180  080d		       70 15	   portDirC   equ	$7015
    181  080d
    182  080d		       70 16	   pitchLA    equ	$7016
    183  080d		       70 17	   pitchLB    equ	$7017
    184  080d		       70 18	   pitchLC    equ	$7018
    185  080d
    186  080d		       70 19	   pitchHA    equ	$7019
    187  080d		       70 1a	   pitchHB    equ	$701A
    188  080d		       70 1b	   pitchHC    equ	$701B
    189  080d
    190  080d		       70 1c	   volume     equ	$701C
    191  080d
    192  080d							; soundModes
    193  080d							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  080d		       00 00	   MODE_NORMAL equ	$00
    195  080d		       00 08	   MODE_6CHAN equ	$08
    196  080d		       00 10	   MODE_PORT1 equ	$10
    197  080d		       00 11	   MODE_PORT2 equ	$11
    198  080d		       00 12	   MODE_PORT3 equ	$12
    199  080d		       00 20	   MODE_MONO1 equ	$20
    200  080d		       00 21	   MODE_MONO2 equ	$21
    201  080d		       00 31	   MODE_MONOPORT1 equ	$31
    202  080d		       00 32	   MODE_MONOPORT2 equ	$32
    203  080d		       00 40	   MODE_ARP1  equ	$40
    204  080d		       00 41	   MODE_ARP2  equ	$41
    205  080d		       00 42	   MODE_ARP3  equ	$42
    206  080d		       00 43	   MODE_ARP4  equ	$43
    207  080d		       00 44	   MODE_ARP5  equ	$44
    208  080d		       00 01	   MODE_5THS  equ	$01
    209  080d		       00 02	   MODE_5PORT equ	$02
    210  080d							;- - - - - - - - - - -
    211  080d
    212  080d		       00 10	   PORT_MASK  equ	$10
    213  080d		       00 20	   MONO_MASK  equ	$20
    214  080d		       00 40	   ARP_MASK   equ	$40
    215  080d		       00 08	   CHAN6_MASK equ	$08
    216  080d
    217  080d
    218  080d		       70 1d	   soundMode  equ	$701D
    219  080d		       70 1e	   arpSpeed   equ	$701E
    220  080d
    221  080d		       70 1f	   dispOn     equ	$701F
    222  080d
    223  080d		       70 20	   VICMode    equ	$7020
    224  080d
    225  080d		       70 21	   patPtr     equ	$7021
    226  080d
    227  080d		       70 22	   keyOffset  equ	$7022
    228  080d
    229  080d		       70 24	   volModeRAM equ	$7024
    230  080d
    231  080d		       70 25	   shiftL1    equ	$7025
    232  080d		       70 26	   shiftH1    equ	$7026
    233  080d		       70 27	   shiftL2    equ	$7027
    234  080d		       70 28	   shiftH2    equ	$7028
    235  080d
    236  080d							;$7025 - $7028 free
    237  080d
    238  080d		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    239  080d
    240  080d		       70 30	   WaveType   equ	$7030
    241  080d		       70 37	   WaveType2  equ	$7037
    242  080d		       70 3e	   WaveType3  equ	$703E
    243  080d
    244  080d		       70 3f	   LFObend    equ	$703F
    245  080d		       70 40	   bender     equ	$7040
    246  080d
    247  080d		       70 43	   pitchTmpL  equ	$7043
    248  080d		       70 44	   pitchTmpH  equ	$7044
    249  080d
    250  080d		       70 45	   videoMode  equ	$7045
    251  080d
    252  080d		       70 46	   textTemp   equ	$7046
    253  080d
    254  080d		       70 47	   patchSetY  equ	$7047
    255  080d
    256  080d		       70 48	   LFORate    equ	$7048
    257  080d		       70 49	   LFODepth   equ	$7049
    258  080d
    259  080d		       70 50	   videoModeNum equ	$7050
    260  080d
    261  080d		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    262  080d		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    263  080d
    264  080d		       70 57	   filter     equ	$7057
    265  080d
    266  080d		       70 58	   keyTimer   equ	$7058
    267  080d
    268  080d		       70 59	   bendSpd    equ	$7059
    269  080d
    270  080d		       70 5a	   SIDeditAddr equ	$705A
    271  080d		       70 5b	   SIDeditValue equ	$705B
    272  080d
    273  080d		       70 5c	   filterDisable equ	$705C
    274  080d
    275  080d		       70 5d	   lastKey    equ	$705D
    276  080d
    277  080d		       70 60	   hexKeyMode equ	$7060
    278  080d
    279  080d		       70 61	   NTSCmode   equ	$7061
    280  080d
    281  080d		       70 62	   temp16L    equ	$7062
    282  080d		       70 63	   temp16H    equ	$7063
    283  080d
    284  080d		       70 64	   saveX      equ	$7064
    285  080d
    286  080d							;EchoBuffer	equ 1184 ; 256 bytes
    287  080d
    288  080d		       70 65	   keyTemp    equ	$7065
    289  080d
    290  080d		       70 66	   lastOsc    equ	$7066
    291  080d
    292  080d		       70 67	   fullScreenMode equ	$7067
    293  080d
    294  080d		       70 68	   videoText  equ	$7068
    295  080d
    296  080d		       70 69	   attack     equ	$7069
    297  080d		       70 6a	   release    equ	$706A
    298  080d		       70 6b	   octave     equ	$706B
    299  080d		       70 6c	   filterStatus equ	$706C
    300  080d
    301  080d		       70 6d	   helpColor  equ	$706D
    302  080d		       70 6e	   helpYIn    equ	$706E
    303  080d		       70 6f	   helpYOut   equ	$706F
    304  080d
    305  080d		       70 70	   helpMode   equ	$7070
    306  080d
    307  080d		       70 71	   tuneSetting equ	$7071
    308  080d
    309  080d		       70 72	   hexDispTemp equ	$7072
    310  080d
    311  080d		       70 73	   sidTemp1   equ	$7073
    312  080d		       70 74	   sidTemp2   equ	$7074
    313  080d
    314  080d		       70 75	   customPatchSaved equ	$7075
    315  080d
    316  080d		       70 76	   paddleTop  equ	$7076
    317  080d		       70 77	   paddleBottom equ	$7077
    318  080d
    319  080d		       70 78	   paddleX    equ	$7078
    320  080d		       70 79	   paddleY    equ	$7079
    321  080d
    322  080d		       70 7a	   paddle2    equ	$707A
    323  080d		       70 7b	   lastPad2   equ	$707B
    324  080d
    325  080d		       70 7c	   debugOffset equ	$707C
    326  080d		       70 7d	   savedMidiStatus equ	$707D
    327  080d		       70 7e	   firstDataByte equ	$707E
    328  080d		       70 7f	   tempVelocity equ	$707F
    329  080d		       70 80	   bufferSize equ	$7080
    330  080d		       70 81	   noteTempA  equ	$7081
    331  080d		       70 82	   noteTempB  equ	$7082
    332  080d
    333  080d		       70 83	   benderAutoreset equ	$7083
    334  080d		       70 84	   polyphony  equ	$7084
    335  080d
    336  080d		       70 85	   arpOffset  equ	$7085
    337  080d
    338  080d		       70 86	   fxType     equ	$7086
    339  080d		       70 87	   modValue1  equ	$7087
    340  080d		       70 89	   modDirection equ	$7089
    341  080d		       70 8a	   modCounter equ	$708A
    342  080d		       70 8b	   modLFOMinValue equ	$708B
    343  080d		       70 8a	   modLFOMaxValue equ	$708A
    344  080d
    345  080d		       00 00	   MOD_NONE   equ	0
    346  080d		       00 01	   MOD_FILT_LFO equ	1
    347  080d		       00 02	   MOD_FILT_ENV equ	2
    348  080d		       00 03	   MOD_FILT3  equ	3
    349  080d		       00 04	   MOD_FILT4  equ	4
    350  080d		       00 05	   MOD_FILT5  equ	5
    351  080d		       00 06	   MOD_PW_LFO equ	6
    352  080d		       00 07	   MOD_PW2    equ	7
    353  080d
    354  080d		       70 8b	   noteOffCount equ	$708B
    355  080d		       70 8c	   noteOnCount equ	$708C
    356  080d
    357  080d		       70 8d	   hexDispColor equ	$708D
    358  080d
    359  080d		       70 8e	   midiBendValue equ	$708E
    360  080d
    361  080d		       70 8f	   temp2      equ	$708F
    362  080d
    363  080d
    364  080d		       70 97	   resonance  equ	$7097
    365  080d
    366  080d		       70 98	   resetValue equ	$7098
    367  080d
    368  080d		       70 99	   lastNoteCount equ	$7099
    369  080d		       70 9a	   lastNote   equ	$709A
    370  080d
    371  080d		       70 9b	   keyCount   equ	$709B
    372  080d
    373  080d		       70 9c	   filterModValue equ	$709C
    374  080d		       70 9d	   filterSetValue equ	$709D
    375  080d		       70 9e	   pwModValue equ	$709E
    376  080d		       70 9f	   pwSetValue equ	$709F
    377  080d
    378  080d		       70 f0	   midiTuning equ	$70F0
    379  080d		       70 f1	   benderTuning equ	$70F1
    380  080d		       70 f2	   lfoTuning  equ	$70F2
    381  080d		       70 f3	   systemTuning equ	$70F3
    382  080d		       70 f4	   masterTuning equ	$70F4
    383  080d		       70 f5	   finalTuning equ	$70F5
    384  080d		       70 f6	   noteShift  equ	$70F6
    385  080d
    386  080d		       70 f7	   midiMode   equ	$70F7
    387  080d
    388  080d
    389  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    390  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  080d							; BUFFERS
    392  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    393  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    394  080d
    395  080d		       00 08	   NOTE_BUF_SIZE equ	8
    396  080d		       70 a0	   noteNumArray equ	$70A0
    397  080d		       70 b0	   playNoteArray equ	$70B0
    398  080d
    399  080d							;noteVelArray equ $70C0
    400  080d
    401  080d		       70 d0	   kbBuffer   equ	$70D0
    402  080d		       70 e0	   lastKbBuffer equ	$70E0
    403  080d
    404  080d		       70 e1	   tempA      equ	$70E1
    405  080d		       70 e2	   tempX      equ	$70E2
    406  080d		       70 e3	   tempY      equ	$70E3
    407  080d
    408  080d
    409  080d							;-----------------------------------------------
    410  080d
    411  080d							; SID editor custom preset data...
    412  080d		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    413  080d
    414  080d		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    415  080d		       71 41	   savePaddle equ	$7141
    416  080d		       71 42	   saveOctave equ	$7142
    417  080d		       71 43	   saveSoundMode equ	$7143
    418  080d		       71 43	   saveFXType equ	$7143
    419  080d		       71 44	   saveArpSpeed equ	$7144
    420  080d		       71 46	   saveLFODepth equ	$7146
    421  080d		       71 47	   saveLFORate equ	$7147
    422  080d		       71 48	   saveVolume equ	$7148
    423  080d		       71 49	   saveVolMode equ	$7149
    424  080d		       71 4a	   saveFilter equ	$714A
    425  080d
    426  080d							;--------------------------------------------------
    427  080d
    428  080d		       71 50	   midiEnabled equ	$7150
    429  080d		       71 51	   dummyMidiIncrementer equ	$7151
    430  080d
    431  080d		       70 52	   sidEditSaveTemp1 equ	$7052
    432  080d		       70 54	   sidEditSaveTemp5 equ	$7054
    433  080d
    434  080d							;pulseModulationValue equ $7056
    435  080d							;pulseMidiValue equ $7057
------- FILE cynthcart2.0.1.asm
    316  080d
    317  080d
    318  080d							; *********************************************
    319  080d							; Start of program
    320  080d							; *********************************************
    321  080d				   Startup
    322  080d
    323  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    324  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    329  080d							; switch to (upper?) lowercase mode
    330  080d		       a9 17		      lda	#23
    331  080f		       8d 18 d0 	      sta	$d018
    332  0812
    333  0812		       a9 c1		      lda	#193
    334  0814		       8d 18 03 	      sta	792
    335  0817
    336  0817							; clear screen and show info
    337  0817							;	ldx #0
    338  0817							;	stx $d020
    339  0817							;	stx $d021
    340  0817							;loop1:	; clear screen...
    341  0817							;	lda #32
    342  0817							;	sta $0400,x
    343  0817							;	sta $0400+250,x
    344  0817							;	sta $0400+500,x
    345  0817							;	sta $0400+750,x
    346  0817							;	lda #14
    347  0817							;	sta $d800,x
    348  0817							;	sta $d800+250,x
    349  0817							;	sta $d800+500,x
    350  0817							;	sta $d800+750,x
    351  0817							;	inx
    352  0817							;	cpx #250
    353  0817							;	bne loop1
    354  0817							;	ldx #0
    355  0817							;loop2:	; show info...
    356  0817							;	lda #1
    357  0817							;	sta $0400+10*40,x
    358  0817							;	inx
    359  0817							;	cpx #80
    360  0817							;	bne loop2
    361  0817
    362  0817							; init SID...
    363  0817		       a9 00		      lda	#0
    364  0819		       a2 00		      ldx	#0
    365  081b		       9d 00 d4    initSid    sta	$d400,x
    366  081e		       e8		      inx
    367  081f		       e0 19		      cpx	#25
    368  0821		       d0 f8		      bne	initSid
    369  0823		       a9 0f		      lda	#15
    370  0825		       8d 18 d4 	      sta	$d418
    371  0828		       a9 01		      lda	#1
    372  082a		       8d 03 d4 	      sta	$d403
    373  082d
    374  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    375  082d							;lock: jmp lock
    376  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    377  082d
    378  082d					      IF	ENABLE_MIDI_COMMANDS=1
    379  082d		       20 f4 39 	      jsr	midiDetect	; AUTODETECT MIDI IF NOT KERBEROS BUILD
    380  0830				  -	      ELSE
    381  0830				  -	      lda	#0
    382  0830					      ENDIF
    383  0830		       8d 50 71 	      sta	midiEnabled
    384  0833		       20 6c 3a 	      jsr	midiInit
    385  0836							;ENDIF
    386  0836
    387  0836							; Set default hex color
    388  0836		       a9 0e		      lda	#$E
    389  0838		       8d 8d 70 	      sta	hexDispColor
    390  083b
    391  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    392  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    393  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    394  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    395  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    396  083b							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    397  083b
    398  083b				   skipTest
    399  083b
    400  083b							; Copy program into RAM if running from cartridge...
    401  083b				  -	      IF	MODE=CART_OBSOLETE
    402  083b				  -	      ldx	#0
    403  083b				  -RAMTextCopy
    404  083b				  -	      lda	RAMText,x
    405  083b				  -	      beq	quitRAMTextCopy
    406  083b				  -	      cmp	#64
    407  083b				  -	      bmi	showSpaceRAM
    408  083b				  -	      sbc	#64
    409  083b				  -showSpaceRAM
    410  083b				  -	      sta	1024,x
    411  083b				  -	      inx
    412  083b				  -	      jmp	RAMTextCopy
    413  083b				  -RAMText
    414  083b				  -	      byte	"COPYING TO RAM...",0
    415  083b				  -quitRAMTextCopy
    416  083b				  -			;------------
    417  083b				  -	      ldx	#8*4
    418  083b				  -	      lda	#<copyStart
    419  083b				  -	      sta	copyPtrS
    420  083b				  -	      lda	#>copyStart
    421  083b				  -	      sta	copyPtrS+1
    422  083b				  -	      lda	#<ramStart
    423  083b				  -	      sta	copyPtrD
    424  083b				  -	      lda	#>ramStart
    425  083b				  -	      sta	copyPtrD+1
    426  083b				  -ramCopy1
    427  083b				  -	      ldy	#0
    428  083b				  -ramCopy2
    429  083b				  -	      lda	(copyPtrS),y
    430  083b				  -	      sta	(copyPtrD),y
    431  083b				  -	      dey
    432  083b				  -	      bne	ramCopy2
    433  083b				  -	      inc	copyPtrS+1
    434  083b				  -	      inc	copyPtrD+1
    435  083b				  -	      dex
    436  083b				  -	      bne	ramCopy1
    437  083b				  -	      jmp	ramStart
    438  083b				  -copyStart
    439  083b				  -	      rorg	$3000	; RAM destination
    440  083b				  -ramStart
    441  083b					      ENDIF
    442  083b
    443  083b				  -	      IF	MODE=CART_OBSOLETE
    444  083b				  -			; System Startup Stuff
    445  083b				  -			; (not needed if starting from disk)
    446  083b				  -	      sei
    447  083b				  -	      jsr	$FF84	; initialize I/O devices
    448  083b				  -	      jsr	$FF87	; initalise memory pointers
    449  083b				  -	      jsr	$FF8A	; restore I/O vectors
    450  083b				  -	      jsr	$FF81	; initalise screen and keyboard
    451  083b				  -	      cli
    452  083b					      ENDIF
    453  083b
    454  083b				  -	      IF	MODE=KERNEL_OBSOLETE
    455  083b				  -	      org	$A483
    456  083b					      ENDIF
    457  083b
    458  083b		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    459  083e		       29 ef		      AND	#$EF	; badlines
    460  0840		       8d 11 d0 	      STA	$D011
    461  0843
    462  0843							; Disable RESTORE key
    463  0843		       a9 c1		      lda	#193
    464  0845		       8d 18 03 	      sta	792
    465  0848
    466  0848		       a9 00		      lda	#0
    467  084a		       8d 20 d0 	      sta	BACK_COLOR
    468  084d		       8d 21 d0 	      sta	BORD_COLOR
    469  0850
    470  0850							;*****************************
    471  0850							; Detect PAL/NTSC
    472  0850							;*****************************
    473  0850							;palntsc:
    474  0850		       78		      sei		; disable interrupts
    475  0851				   wait
    476  0851		       ad 12 d0 	      lda	$d012
    477  0854		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    478  0856				   wait1
    479  0856		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    480  0859		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    481  085b				   wait2
    482  085b		       a0 00		      ldy	#$00
    483  085d				   synch1
    484  085d		       ad 12 d0 	      lda	$d012
    485  0860		       c9 37		      cmp	#$37	; top PAL rasterline
    486  0862		       d0 f9		      bne	synch1
    487  0864		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    488  0867				   synch2
    489  0867		       cd 12 d0 	      cmp	$d012
    490  086a		       f0 fb		      beq	synch2
    491  086c		       ad 12 d0 	      lda	$d012
    492  086f		       58		      cli		; enable interrupts
    493  0870
    494  0870		       8d 61 70 	      sta	NTSCmode
    495  0873
    496  0873
    497  0873
    498  0873
    499  0873							;****************************************************
    500  0873							; init screen and variables
    501  0873							;****************************************************
    502  0873		       a9 00		      lda	#0
    503  0875		       8d 97 70 	      sta	resonance
    504  0878		       8d 8c 70 	      sta	noteOnCount
    505  087b		       8d 8b 70 	      sta	noteOffCount
    506  087e		       20 f8 10 	      jsr	setFullScreenMode
    507  0881		       20 7a 0a 	      jsr	variableInit
    508  0884		       20 ef 0b 	      jsr	displayInit
    509  0887
    510  0887							; Clear note buffer...
    511  0887		       a2 08		      ldx	#8
    512  0889		       a9 ff		      lda	#255
    513  088b				   clearBufferLoop
    514  088b		       ca		      dex
    515  088c		       9d a0 70 	      sta	noteNumArray,x
    516  088f							;sta noteAgeArray,x
    517  088f							;sta noteVelArray,x
    518  088f		       d0 fa		      bne	clearBufferLoop
    519  0891
    520  0891
    521  0891				  -	      IF	DEBUG_DISPLAY=1
    522  0891				  -	      ldx	#>debugOverlay	;low/MSB
    523  0891				  -	      ldy	#<debugOverlay	;high/LSB
    524  0891				  -	      jsr	displayPage
    525  0891					      ENDIF
    526  0891
    527  0891		       a9 00		      lda	#0
    528  0893		       a0 00		      ldy	#0
    529  0895		       20 a4 13 	      jsr	setPatch
    530  0898
    531  0898		       a9 00		      lda	#0
    532  089a		       8d f0 70 	      sta	midiTuning
    533  089d
    534  089d		       a9 ff		      lda	#$FF
    535  089f		       20 fe 11 	      jsr	setMidiMode
    536  08a2							;sta midiMode
    537  08a2
    538  08a2							;===========================================
    539  08a2							;===========================================
    540  08a2							;===========================================
    541  08a2							; Main Loop
    542  08a2							;===========================================
    543  08a2							;===========================================
    544  08a2							;===========================================
    545  08a2				   Loop
    546  08a2							; Increment frame counter
    547  08a2		       ee 03 70 	      inc	Frame
    548  08a5		       ad 03 70 	      lda	Frame
    549  08a8		       29 3f		      and	#%00111111
    550  08aa		       d0 03		      bne	SkipHFrame
    551  08ac		       ee 02 70 	      inc	FrameH
    552  08af				   SkipHFrame
    553  08af
    554  08af
    555  08af		       20 ed 08 	      jsr	processLFO
    556  08b2		       20 72 0d 	      jsr	processFX
    557  08b5
    558  08b5					      IF	ENABLE_MIDI_COMMANDS=1
    559  08b5		       20 5b 1c 	      jsr	processMIDI
    560  08b8					      ENDIF
    561  08b8
    562  08b8		       20 d0 1a 	      jsr	readKeyboard
    563  08bb		       20 ac 09 	      jsr	processBender
    564  08be		       20 01 15 	      jsr	processSoundDriver
    565  08c1		       20 e9 09 	      jsr	processPaddles
    566  08c4		       20 28 0b 	      jsr	processVideoMode
    567  08c7		       20 cd 08 	      jsr	updateFilterAndPW
    568  08ca		       4c a2 08 	      jmp	Loop
    569  08cd							;-------- BOTTOM OF MAIN LOOP ---------------------------
    570  08cd							;--------------------------------------------------------
    571  08cd							;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
    572  08cd
    573  08cd				   updateFilterAndPW
    574  08cd		       ad 9c 70 	      lda	filterModValue
    575  08d0		       38		      sec
    576  08d1		       e9 7f		      sbc	#127
    577  08d3		       30 0a		      bmi	negativeFilterMod
    578  08d5							; Positive
    579  08d5		       6d 9d 70 	      adc	filterSetValue
    580  08d8		       90 0f		      bcc	doSetFilter
    581  08da		       a9 ff		      lda	#255
    582  08dc		       4c e9 08 	      jmp	doSetFilter
    583  08df
    584  08df				   negativeFilterMod
    585  08df							; Negative
    586  08df		       6d 9d 70 	      adc	filterSetValue
    587  08e2		       b0 05		      bcs	doSetFilter
    588  08e4		       a9 00		      lda	#0
    589  08e6		       4c e9 08 	      jmp	doSetFilter
    590  08e9
    591  08e9							;and #$F0
    592  08e9				   doSetFilter
    593  08e9		       20 e9 12 	      jsr	setFilter
    594  08ec							; TODO: add PW setting
    595  08ec		       60		      rts
    596  08ed
    597  08ed
    598  08ed							;-------------------------------
    599  08ed							; LFO
    600  08ed							;-------------------------------
    601  08ed				   processLFO
    602  08ed							; Set current LFO modulation
    603  08ed							; into (pitch) shift variables
    604  08ed
    605  08ed							;---------------------------
    606  08ed							; get pitch bend from paddle2
    607  08ed		       ad 7a 70 	      lda	paddle2
    608  08f0		       c9 04		      cmp	#4
    609  08f2		       d0 06		      bne	noPadBend
    610  08f4		       ad 79 70 	      lda	paddleY
    611  08f7		       8d 40 70 	      sta	bender
    612  08fa				   noPadBend
    613  08fa
    614  08fa							;----------------------------
    615  08fa							; get depth from paddle2
    616  08fa		       ad 7a 70 	      lda	paddle2
    617  08fd		       c9 03		      cmp	#3
    618  08ff		       d0 0a		      bne	noPadLFO
    619  0901		       ad 79 70 	      lda	paddleY
    620  0904		       4a		      lsr
    621  0905		       4a		      lsr
    622  0906		       4a		      lsr
    623  0907		       a8		      tay
    624  0908		       4c 11 09 	      jmp	skipFixedLFODepth
    625  090b							;---------------------
    626  090b							; calculate LFO depth
    627  090b							; increases per octave
    628  090b				   noPadLFO
    629  090b		       ae 49 70 	      ldx	LFODepth
    630  090e		       bc e2 33 	      ldy	LFODepthArray,x
    631  0911				   skipFixedLFODepth
    632  0911		       ad 22 70 	      lda	keyOffset	; current octave offset
    633  0914		       c9 0c		      cmp	#12
    634  0916		       30 08		      bmi	endDepth
    635  0918		       c8		      iny
    636  0919		       c9 24		      cmp	#36
    637  091b		       d0 03		      bne	endDepth
    638  091d		       98		      tya
    639  091e		       0a		      asl
    640  091f		       a8		      tay
    641  0920				   endDepth		; y now contains the depth value
    642  0920
    643  0920
    644  0920							; figure out LFO position
    645  0920		       ad 02 70 	      lda	FrameH
    646  0923		       ae 48 70 	      ldx	LFORate
    647  0926		       f0 0e		      beq	LFOSkip
    648  0928		       ad 03 70 	      lda	Frame
    649  092b		       ca		      dex
    650  092c		       ca		      dex
    651  092d		       ca		      dex
    652  092e		       f0 06		      beq	LFOSkip
    653  0930		       4a		      lsr
    654  0931		       e8		      inx
    655  0932		       f0 02		      beq	LFOSkip
    656  0934		       4a		      lsr
    657  0935		       4a		      lsr
    658  0936				   LFOSkip
    659  0936		       4a		      lsr
    660  0937
    661  0937		       29 0f		      and	#$0F
    662  0939		       aa		      tax
    663  093a		       bd 06 34 	      lda	LFOArrH,x
    664  093d		       8d 26 70 	      sta	shiftH1
    665  0940		       d0 10		      bne	negativeLFO
    666  0942
    667  0942		       18		      clc
    668  0943		       bd f6 33 	      lda	LFOArrL,x
    669  0946				   depthLoop
    670  0946		       7d f6 33 	      adc	LFOArrL,x
    671  0949		       88		      dey
    672  094a		       d0 fa		      bne	depthLoop
    673  094c		       8d 25 70 	      sta	shiftL1
    674  094f		       4c 67 09 	      jmp	endLFO
    675  0952
    676  0952				   negativeLFO
    677  0952		       bd f6 33 	      lda	LFOArrL,x
    678  0955				   depthLoopN
    679  0955		       7d f6 33 	      adc	LFOArrL,x
    680  0958		       88		      dey
    681  0959		       d0 fa		      bne	depthLoopN
    682  095b		       8d 0c 70 	      sta	temp
    683  095e		       a9 ff		      lda	#255
    684  0960		       38		      sec
    685  0961		       ed 0c 70 	      sbc	temp
    686  0964		       8d 25 70 	      sta	shiftL1
    687  0967				   endLFO
    688  0967
    689  0967							; if depth=0 then cancel LFO
    690  0967		       ad 7a 70 	      lda	paddle2
    691  096a		       c9 03		      cmp	#3
    692  096c		       f0 0d		      beq	doLFO
    693  096e		       ad 49 70 	      lda	LFODepth
    694  0971		       d0 08		      bne	doLFO
    695  0973		       a9 00		      lda	#0
    696  0975		       8d 25 70 	      sta	shiftL1
    697  0978		       8d 26 70 	      sta	shiftH1
    698  097b				   doLFO
    699  097b
    700  097b		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    701  097e		       d0 05		      bne	showLFO
    702  0980		       ad 67 70 	      lda	fullScreenMode
    703  0983		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    704  0985							;--------
    705  0985							; Show it
    706  0985				   showLFO
    707  0985		       bd 16 34 	      lda	LFOdisp,x
    708  0988		       aa		      tax
    709  0989		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    710  098b							;adc #10
    711  098b
    712  098b							;lda #160
    713  098b							;sta 1063,x
    714  098b		       9d ff d7 	      sta	55296-1,x
    715  098e
    716  098e							;clear the previous one
    717  098e							;lda #32
    718  098e		       a9 02		      lda	#CYNTHCART_COLOR
    719  0990							;sta 1064,x
    720  0990		       9d 00 d8 	      sta	55296+0,x
    721  0993		       e0 01		      cpx	#1
    722  0995		       f0 03		      beq	dontErase
    723  0997							;sta 1062,x
    724  0997		       9d fe d7 	      sta	55296-2,x
    725  099a				   dontErase
    726  099a
    727  099a							; set up shift for second SID
    728  099a							; chip, pitch a tad higher for
    729  099a							; awesome chorus effect
    730  099a		       18		      clc
    731  099b		       ad 25 70 	      lda	shiftL1
    732  099e		       69 04		      adc	#SID2OFFSET
    733  09a0		       8d 27 70 	      sta	shiftL2
    734  09a3		       ad 26 70 	      lda	shiftH1
    735  09a6		       69 00		      adc	#0
    736  09a8		       8d 28 70 	      sta	shiftH2
    737  09ab
    738  09ab							; LFO->filter
    739  09ab							;	lda shiftL1
    740  09ab							;	clc
    741  09ab							;	adc #128
    742  09ab							;	sta SID1+SFILTH
    743  09ab							;	sta SID2+SFILTH
    744  09ab
    745  09ab				   skipLFO
    746  09ab		       60		      rts
    747  09ac
    748  09ac
    749  09ac
    750  09ac
    751  09ac							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    752  09ac							; PROCESS BENDER
    753  09ac							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    754  09ac				   processBender
    755  09ac							; Update space-bar pitch bend...
    756  09ac		       ad 83 70 	      lda	benderAutoreset
    757  09af		       f0 13		      beq	endBenderReset
    758  09b1		       ad 40 70 	      lda	bender
    759  09b4		       d0 08		      bne	doBenderReset
    760  09b6		       a9 00		      lda	#0
    761  09b8		       8d 83 70 	      sta	benderAutoreset
    762  09bb		       4c c4 09 	      jmp	endBenderReset
    763  09be				   doBenderReset
    764  09be		       ce 40 70 	      dec	bender
    765  09c1		       ce 40 70 	      dec	bender
    766  09c4				   endBenderReset
    767  09c4
    768  09c4
    769  09c4							; Insert bender into LFO offset...
    770  09c4		       ad 25 70 	      lda	shiftL1
    771  09c7		       38		      sec
    772  09c8		       ed 40 70 	      sbc	bender
    773  09cb		       8d 25 70 	      sta	shiftL1
    774  09ce		       ad 26 70 	      lda	shiftH1
    775  09d1		       e9 00		      sbc	#0
    776  09d3		       8d 26 70 	      sta	shiftH1
    777  09d6
    778  09d6		       ad 27 70 	      lda	shiftL2
    779  09d9		       38		      sec
    780  09da		       ed 40 70 	      sbc	bender
    781  09dd		       8d 27 70 	      sta	shiftL2
    782  09e0		       ad 28 70 	      lda	shiftH2
    783  09e3		       e9 00		      sbc	#0
    784  09e5		       8d 28 70 	      sta	shiftH2
    785  09e8		       60		      rts
    786  09e9
    787  09e9							;DEBUG -- disable LFO/bender
    788  09e9							;	lda #0
    789  09e9							;	sta shiftL1
    790  09e9							;	sta shiftL2
    791  09e9							;	sta shiftH1
    792  09e9							;	sta shiftH2
    793  09e9
    794  09e9							;----------------------------
    795  09e9
    796  09e9
    797  09e9
    798  09e9
    799  09e9
    800  09e9							;-------------------------------------
    801  09e9							; Reading paddles from Prog Ref Guide
    802  09e9							;-------------------------------------
    803  09e9				   processPaddles
    804  09e9				   pdlrd0		; entry point for one pair (condition x 1st)
    805  09e9							; -  -  -  -  -
    806  09e9							;sei				; disable interrupts
    807  09e9		       a9 e0		      lda	#224	; disable keyboard scan
    808  09eb		       8d 02 dc 	      sta	56322	; disable keyboard scan
    809  09ee							; -  -  -  -  -
    810  09ee		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
    811  09f1		       8d 06 70 	      sta	Buffer	; save it away
    812  09f4		       a9 c0		      lda	#$c0
    813  09f6		       8d 02 dc 	      sta	Ciddra	; set port a for input
    814  09f9		       a9 80		      lda	#$80
    815  09fb
    816  09fb				   pdlrd1
    817  09fb		       8d 00 dc 	      sta	PortA	; address a pair of paddles
    818  09fe		       a0 80		      ldy	#$80	; wait a while
    819  0a00				   pdlrd2
    820  0a00		       ea		      nop
    821  0a01		       88		      dey
    822  0a02		       10 fc		      bpl	pdlrd2
    823  0a04
    824  0a04		       ae 19 d4 	      ldx	SID1+25	; get x value
    825  0a07		       8e 78 70 	      stx	paddleX
    826  0a0a		       ac 1a d4 	      ldy	SID1+26	; get y value
    827  0a0d		       8c 79 70 	      sty	paddleY
    828  0a10
    829  0a10		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
    830  0a13		       09 50		      ora	#80	; make it the same as other pair
    831  0a15		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
    832  0a18
    833  0a18		       ad 06 70 	      lda	Buffer
    834  0a1b		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
    835  0a1e							; -  -  -  -  -
    836  0a1e							;cli			; enable interrupts
    837  0a1e		       a9 ff		      lda	#255	; enable keyboard scan
    838  0a20		       8d 02 dc 	      sta	56322	; enable keyboard scan
    839  0a23							; -  -  -  -  -
    840  0a23
    841  0a23							;-------------------------------------
    842  0a23							; Auto paddle on - turn on paddle control if it's wiggled...
    843  0a23		       ad 29 70 	      lda	paddle
    844  0a26		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
    845  0a28		       e0 a0		      cpx	#160
    846  0a2a		       90 05		      bcc	noPaddleTop
    847  0a2c		       a9 01		      lda	#1
    848  0a2e		       8d 76 70 	      sta	paddleTop
    849  0a31				   noPaddleTop
    850  0a31		       e0 60		      cpx	#96
    851  0a33		       b0 05		      bcs	noPaddleBottom
    852  0a35		       a9 01		      lda	#1
    853  0a37		       8d 77 70 	      sta	paddleBottom
    854  0a3a				   noPaddleBottom
    855  0a3a							;-----------
    856  0a3a		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
    857  0a3d		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
    858  0a3f		       ad 77 70 	      lda	paddleBottom
    859  0a42		       f0 05		      beq	noPaddleAutoOn
    860  0a44		       a9 01		      lda	#1	; turn paddle on
    861  0a46		       20 36 11 	      jsr	setPaddles
    862  0a49				   noPaddleAutoOn
    863  0a49
    864  0a49							;-------------------------------------
    865  0a49							; check to see if paddle control is on
    866  0a49		       ad 29 70 	      lda	paddle
    867  0a4c		       f0 04		      beq	processPaddle2
    868  0a4e
    869  0a4e							; paddle1 -> filter
    870  0a4e		       8a		      txa
    871  0a4f		       8d 9d 70 	      sta	filterSetValue
    872  0a52							;jsr setFilterFromA
    873  0a52
    874  0a52
    875  0a52							;sta SID1+SFILTH
    876  0a52							;sta sidData+SFILTH
    877  0a52							;clc
    878  0a52							;adc #SID_SYMPHONY_FILTER_OFFSET
    879  0a52							;bcc noPaddleRoll
    880  0a52							;lda #255
    881  0a52							;noPaddleRoll:
    882  0a52							;sta SID2+SFILTH
    883  0a52							;noPaddleControl
    884  0a52
    885  0a52							;-------------------------------------
    886  0a52							; paddle 2
    887  0a52
    888  0a52							;	paddle 2 -> Pulse Width
    889  0a52				   processPaddle2
    890  0a52		       ad 7a 70 	      lda	paddle2
    891  0a55		       c9 01		      cmp	#1
    892  0a57		       d0 15		      bne	skipPW
    893  0a59		       ad 79 70 	      lda	paddleY
    894  0a5c		       c9 f5		      cmp	#245	; check for top limit (= no sound)
    895  0a5e		       90 05		      bcc	notPTop
    896  0a60		       a9 f5		      lda	#245	; limit to maximum
    897  0a62		       8d 79 70 	      sta	paddleY
    898  0a65				   notPTop
    899  0a65		       ad 79 70 	      lda	paddleY
    900  0a68		       20 63 10 	      jsr	setPulseWidth
    901  0a6b							;-------------
    902  0a6b							;inc 1024+80
    903  0a6b		       ad 79 70 	      lda	paddleY
    904  0a6e				   skipPW
    905  0a6e		       60		      rts
    906  0a6f							;END paddle ------------------------------
    907  0a6f
    908  0a6f
    909  0a6f
    910  0a6f
    911  0a6f
    912  0a6f							; All notes off
    913  0a6f				   midiPanic
    914  0a6f		       a2 08		      ldx	#NOTE_BUF_SIZE
    915  0a71		       a9 ff		      lda	#255
    916  0a73				   midiPanicLoop
    917  0a73		       9d a0 70 	      sta	noteNumArray,x
    918  0a76		       ca		      dex
    919  0a77		       10 fa		      bpl	midiPanicLoop
    920  0a79		       60		      rts
    921  0a7a
    922  0a7a
    923  0a7a
    924  0a7a
    925  0a7a
    926  0a7a
    927  0a7a
    928  0a7a							; ***************************
    929  0a7a							; Variable Setup
    930  0a7a							; ***************************
    931  0a7a				   variableInit
    932  0a7a		       a9 00		      lda	#0
    933  0a7c		       8d 7a 70 	      sta	paddle2
    934  0a7f		       8d 5c 70 	      sta	filterDisable
    935  0a82		       8d 6c 70 	      sta	filterStatus
    936  0a85		       8d 58 70 	      sta	keyTimer
    937  0a88		       8d 40 70 	      sta	bender
    938  0a8b		       8d 70 70 	      sta	helpMode
    939  0a8e		       8d 21 70 	      sta	patPtr
    940  0a91		       8d 03 70 	      sta	Frame
    941  0a94		       8d 02 70 	      sta	FrameH
    942  0a97		       8d 05 70 	      sta	EchoCur
    943  0a9a		       8d 75 70 	      sta	customPatchSaved
    944  0a9d		       8d 76 70 	      sta	paddleTop
    945  0aa0		       8d 77 70 	      sta	paddleBottom
    946  0aa3
    947  0aa3		       a9 02		      lda	#2
    948  0aa5		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
    949  0aa8
    950  0aa8		       a9 04		      lda	#4	; set normal tuning
    951  0aaa		       8d 71 70 	      sta	tuneSetting
    952  0aad
    953  0aad		       a9 00		      lda	#0
    954  0aaf		       20 57 11 	      jsr	setLFODepth	;********************************
    955  0ab2		       a9 00		      lda	#0
    956  0ab4		       20 6d 11 	      jsr	setLFORate	;********************************
    957  0ab7
    958  0ab7							; set up tuning array pointers
    959  0ab7		       a9 60		      lda	#<tuningL4
    960  0ab9		       85 22		      sta	tunePtrL
    961  0abb		       a9 37		      lda	#>tuningL4
    962  0abd		       85 23		      sta	tunePtrL+1
    963  0abf
    964  0abf		       a9 60		      lda	#<tuningH4
    965  0ac1		       85 24		      sta	tunePtrH
    966  0ac3		       a9 37		      lda	#>tuningH4
    967  0ac5		       85 25		      sta	tunePtrH+1
    968  0ac7
    969  0ac7		       a9 02		      lda	#2
    970  0ac9		       8d 20 70 	      sta	VICMode
    971  0acc		       a9 00		      lda	#0
    972  0ace		       8d 1d 70 	      sta	soundMode
    973  0ad1							;lda #40
    974  0ad1							;sta portSpd
    975  0ad1
    976  0ad1							; Video Mode
    977  0ad1		       a9 03		      lda	#3
    978  0ad3		       a0 02		      ldy	#2
    979  0ad5		       20 28 11 	      jsr	setVideoMode	;********************************
    980  0ad8
    981  0ad8							; Default full volume
    982  0ad8		       a9 0f		      lda	#$0F
    983  0ada		       8d 1c 70 	      sta	volume
    984  0add
    985  0add							; Echo?
    986  0add		       a9 70		      lda	#$70
    987  0adf		       8d 04 70 	      sta	EchoPtr
    988  0ae2
    989  0ae2		       a0 00		      ldy	#0
    990  0ae4		       20 a4 13 	      jsr	setPatch	;set bass sound
    991  0ae7
    992  0ae7							; Set up starting portamento values
    993  0ae7		       a2 0c		      ldx	#12
    994  0ae9		       bd 26 34 	      lda	NSoundLArr,x
    995  0aec		       8d 16 70 	      sta	pitchLA
    996  0aef		       8d 17 70 	      sta	pitchLB
    997  0af2		       8d 18 70 	      sta	pitchLC
    998  0af5							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    999  0af5							;sta lastKeyB
   1000  0af5							;sta lastKeyC
   1001  0af5		       bd 6e 34 	      lda	NSoundHArr,x
   1002  0af8		       8d 19 70 	      sta	pitchHA
   1003  0afb		       8d 1a 70 	      sta	pitchHB
   1004  0afe		       8d 1b 70 	      sta	pitchHC
   1005  0b01							;----------
   1006  0b01		       60		      rts
   1007  0b02
   1008  0b02							;__________________________________________________________
   1009  0b02							;
   1010  0b02							; DISABLE RESTORE KEY
   1011  0b02							;
   1012  0b02				   disableRestoreKey
   1013  0b02		       a9 27		      lda	#<nmiRestoreKey	;Set NMI vector
   1014  0b04		       8d 18 03 	      sta	$0318
   1015  0b07		       8d fa ff 	      sta	$fffa
   1016  0b0a		       a9 0b		      lda	#>nmiRestoreKey
   1017  0b0c		       8d 19 03 	      sta	$0319
   1018  0b0f		       8d fb ff 	      sta	$fffb
   1019  0b12		       a9 81		      lda	#$81
   1020  0b14		       8d 0d dd 	      sta	$dd0d	;Use Timer A
   1021  0b17		       a9 01		      lda	#$01	;Timer A count ($0001)
   1022  0b19		       8d 04 dd 	      sta	$dd04
   1023  0b1c		       a9 00		      lda	#$00
   1024  0b1e		       8d 05 dd 	      sta	$dd05
   1025  0b21		       a9 19		      lda	#%00011001	;Run Timer A
   1026  0b23		       8d 0e dd 	      sta	$dd0e
   1027  0b26		       60		      rts
   1028  0b27
   1029  0b27				   nmiRestoreKey
   1030  0b27		       40		      rti
   1031  0b28
   1032  0b28
   1033  0b28
------- FILE cynth_display.asm LEVEL 2 PASS 2
      0  0b28					      include	"cynth_display.asm"
      1  0b28
      2  0b28							; ***************************
      3  0b28							; Process Video Mode
      4  0b28							; ***************************
      5  0b28
      6  0b28				   processVideoMode
      7  0b28							; Turn off Vic when no notes are playing
      8  0b28		       ad 70 70 	      lda	helpMode
      9  0b2b		       d0 2e		      bne	vicOn
     10  0b2d
     11  0b2d		       ad 20 70 	      lda	VICMode
     12  0b30		       f0 1e		      beq	vicOff
     13  0b32		       c9 02		      cmp	#2
     14  0b34		       f0 25		      beq	vicOn
     15  0b36		       ad 1f 70 	      lda	dispOn
     16  0b39		       d0 20		      bne	vicOn
     17  0b3b		       ad a0 70 	      lda	noteNumArray+0
     18  0b3e							;lda KeyA
     19  0b3e
     20  0b3e		       c9 ff		      cmp	#255
     21  0b40		       d0 19		      bne	vicOn
     22  0b42		       ad a1 70 	      lda	noteNumArray+1
     23  0b45							;lda KeyB
     24  0b45		       c9 ff		      cmp	#255
     25  0b47		       d0 12		      bne	vicOn
     26  0b49		       ad a2 70 	      lda	noteNumArray+2
     27  0b4c							;lda KeyC
     28  0b4c		       c9 ff		      cmp	#255
     29  0b4e		       d0 0b		      bne	vicOn
     30  0b50				   vicOff
     31  0b50							; Vic off
     32  0b50		       ad 11 d0 	      lda	$d011
     33  0b53		       29 ef		      and	#$EF
     34  0b55		       8d 11 d0 	      sta	$D011
     35  0b58
     36  0b58		       4c 63 0b 	      jmp	endVic
     37  0b5b				   vicOn
     38  0b5b							; Vic on
     39  0b5b		       ad 11 d0 	      lda	$d011
     40  0b5e		       09 10		      ora	#$10
     41  0b60		       8d 11 d0 	      sta	$d011
     42  0b63
     43  0b63				   endVic
     44  0b63		       a9 00		      lda	#0
     45  0b65		       8d 1f 70 	      sta	dispOn
     46  0b68
     47  0b68		       ad a0 70 	      lda	noteNumArray+0
     48  0b6b							;lda KeyA
     49  0b6b		       8d 0c 70 	      sta	temp
     50  0b6e		       20 84 0b 	      jsr	drawPattern
     51  0b71		       ad a1 70 	      lda	noteNumArray+1
     52  0b74							;lda KeyB
     53  0b74		       8d 0c 70 	      sta	temp
     54  0b77		       20 84 0b 	      jsr	drawPattern
     55  0b7a		       ad a2 70 	      lda	noteNumArray+2
     56  0b7d							;lda KeyC
     57  0b7d		       8d 0c 70 	      sta	temp
     58  0b80		       20 84 0b 	      jsr	drawPattern
     59  0b83
     60  0b83		       60		      rts
     61  0b84							;jmp Loop
     62  0b84							;====================================================
     63  0b84							; bottom of main loop
     64  0b84							;====================================================
     65  0b84
     66  0b84
     67  0b84							; ***************************
     68  0b84							; code to draw colored character patterns
     69  0b84							; ***************************
     70  0b84							;PTRNTEXTBASE equ 1224
     71  0b84		       04 00	   PTRNTEXTBASE equ	1224-40*5
     72  0b84							;PTRNCOLORBASE equ 55496
     73  0b84		       d8 00	   PTRNCOLORBASE equ	55496-40*5
     74  0b84
     75  0b84
     76  0b84				   drawPattern
     77  0b84							; don't draw video when in help mode
     78  0b84		       ad 70 70 	      lda	helpMode
     79  0b87		       f0 01		      beq	continueVideo
     80  0b89		       60		      rts
     81  0b8a				   continueVideo
     82  0b8a							;---------
     83  0b8a							; setup
     84  0b8a		       ae 21 70 	      ldx	patPtr
     85  0b8d		       e8		      inx
     86  0b8e		       e0 28		      cpx	#40
     87  0b90		       d0 02		      bne	noPatReset
     88  0b92		       a2 00		      ldx	#0
     89  0b94				   noPatReset
     90  0b94		       8e 21 70 	      stx	patPtr
     91  0b97							;---------
     92  0b97		       a2 05		      ldx	#5
     93  0b99							; main pattern loop
     94  0b99				   patternLoop
     95  0b99				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
     96  0b99				  -	      rts		; DEBUG! disable patterns
     97  0b99					      endif
     98  0b99
     99  0b99		       bd 37 29 	      lda	patOffset,x
    100  0b9c							;	clc
    101  0b9c		       6d 21 70 	      adc	patPtr
    102  0b9f		       a8		      tay
    103  0ba0							;	clc
    104  0ba0		       ad 0c 70 	      lda	temp
    105  0ba3		       c9 ff		      cmp	#255
    106  0ba5		       f0 0a		      beq	skipExtraColors
    107  0ba7		       ad 03 70 	      lda	Frame
    108  0baa		       2d 45 70 	      and	videoMode
    109  0bad		       18		      clc
    110  0bae		       6d 0c 70 	      adc	temp
    111  0bb1				   skipExtraColors
    112  0bb1		       69 be		      adc	#190
    113  0bb3		       8d 8f 70 	      sta	temp2
    114  0bb6		       ad 0c 70 	      lda	temp
    115  0bb9		       c9 ff		      cmp	#255
    116  0bbb		       d0 05		      bne	reloadValue
    117  0bbd		       a9 7f		      lda	#127
    118  0bbf		       4c c5 0b 	      jmp	afterReloadValue
    119  0bc2				   reloadValue
    120  0bc2		       ad 8f 70 	      lda	temp2
    121  0bc5				   afterReloadValue
    122  0bc5		       91 2b		      sta	(lowTextPtr),y
    123  0bc7		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
    124  0bca		       99 90 05 	      sta	PTRNTEXTBASE+400,y
    125  0bcd		       99 58 06 	      sta	PTRNTEXTBASE+600,y
    126  0bd0		       c0 f8		      cpy	#248
    127  0bd2		       30 03		      bmi	noTopText
    128  0bd4		       99 20 07 	      sta	PTRNTEXTBASE+800,y
    129  0bd7				   noTopText
    130  0bd7							;sbc #13
    131  0bd7		       69 0c		      adc	#12
    132  0bd9		       91 2d		      sta	(lowColorPtr),y
    133  0bdb		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
    134  0bde		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
    135  0be1		       99 58 da 	      sta	PTRNCOLORBASE+600,y
    136  0be4		       c0 f8		      cpy	#248
    137  0be6		       30 03		      bmi	noTopColor
    138  0be8		       99 20 db 	      sta	PTRNCOLORBASE+800,y
    139  0beb				   noTopColor
    140  0beb		       ca		      dex
    141  0bec		       10 ab		      bpl	patternLoop
    142  0bee		       60		      rts
    143  0bef							;--------------------- end of draw patterns
    144  0bef
    145  0bef
    146  0bef
    147  0bef							; ***************************
    148  0bef							; Display Setup
    149  0bef							; ***************************
    150  0bef				   displayInit
    151  0bef
    152  0bef		       a9 15		      lda	#21
    153  0bf1		       8d 18 d0 	      sta	53272	; UPPERCASE mode
    154  0bf4
    155  0bf4							; draw static text at the top of the screen
    156  0bf4		       a2 31		      ldx	#>mainColorText	;low/MSB
    157  0bf6		       a0 1c		      ldy	#<mainColorText	;high/LSB
    158  0bf8		       20 05 0d 	      jsr	displayPage
    159  0bfb
    160  0bfb							; Draw bottom text (version number+PAL/NTSC setting)
    161  0bfb		       03 dd	   BOTTOMTEXT equ	40*24+29
    162  0bfb
    163  0bfb		       20 e3 0f 	      jsr	showHelpMessage
    164  0bfe
    165  0bfe							; SHOW BETA MESSAGE IF IN BETA MODE
    166  0bfe		       a2 0c		      ldx	#12
    167  0c00				   betaInfoLoop
    168  0c00		       bd ac 33 	      lda	betaInfo,x
    169  0c03		       c9 40		      cmp	#64
    170  0c05		       30 02		      bmi	showSpaceBeta
    171  0c07		       e9 40		      sbc	#64
    172  0c09				   showSpaceBeta
    173  0c09		       9d b2 07 	      sta	1024+BOTTOMTEXT-40-3,x
    174  0c0c		       ca		      dex
    175  0c0d		       10 f1		      bpl	betaInfoLoop
    176  0c0f
    177  0c0f							; choose which text to show from PAL/NTSC test at startup
    178  0c0f		       a2 00		      ldx	#0
    179  0c11		       a0 00		      ldy	#0
    180  0c13		       ad 61 70 	      lda	NTSCmode
    181  0c16		       f0 02		      beq	showPAL
    182  0c18		       a2 0c		      ldx	#12
    183  0c1a				   showPAL
    184  0c1a							; Show version number and NTSC/PAL designation...
    185  0c1a				   TextLoop2
    186  0c1a		       bd 94 33 	      lda	bottomText,x
    187  0c1d		       f0 12		      beq	endText2
    188  0c1f		       c9 40		      cmp	#64
    189  0c21		       30 02		      bmi	showSpace2
    190  0c23		       e9 40		      sbc	#64
    191  0c25				   showSpace2
    192  0c25		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
    193  0c28		       a9 0b		      lda	#11
    194  0c2a		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
    195  0c2d				   notBlank2
    196  0c2d		       e8		      inx
    197  0c2e		       c8		      iny
    198  0c2f		       d0 e9		      bne	TextLoop2
    199  0c31				   endText2
    200  0c31
    201  0c31					      IF	DEVICE_CONFIG=KERBEROS
    202  0c31		       a9 0b		      lda	#11	; "K"
    203  0c33		       8d e6 07 	      sta	2022
    204  0c36					      ENDIF
    205  0c36				  -	      IF	DEVICE_CONFIG=EMU
    206  0c36				  -	      lda	#5	; "E"
    207  0c36				  -	      sta	2022
    208  0c36					      ENDIF
    209  0c36				  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    210  0c36				  -	      lda	#19	; "S"
    211  0c36				  -	      sta	2022
    212  0c36					      ENDIF
    213  0c36
    214  0c36		       20 01 12 	      jsr	showMidiMode
    215  0c39
    216  0c39							;---------------------------------------------
    217  0c39							; Display current sound parameter values
    218  0c39
    219  0c39							; set tuning text
    220  0c39		       ac 71 70 	      ldy	tuneSetting
    221  0c3c		       20 e2 10 	      jsr	ksetTune
    222  0c3f
    223  0c3f							; Video Mode
    224  0c3f		       ad 45 70 	      lda	videoMode
    225  0c42		       ac 68 70 	      ldy	videoText
    226  0c45		       20 28 11 	      jsr	setVideoMode	;********************************
    227  0c48
    228  0c48		       ad 49 70 	      lda	LFODepth
    229  0c4b		       20 57 11 	      jsr	setLFODepth	;********************************
    230  0c4e		       ad 48 70 	      lda	LFORate
    231  0c51		       20 6d 11 	      jsr	setLFORate	;********************************
    232  0c54
    233  0c54		       ad 29 70 	      lda	paddle
    234  0c57		       20 36 11 	      jsr	setPaddles
    235  0c5a
    236  0c5a		       ad 57 70 	      lda	filter
    237  0c5d		       8d 9d 70 	      sta	filterSetValue
    238  0c60							;jsr setFilter
    239  0c60
    240  0c60		       20 54 13 	      jsr	setMode
    241  0c63
    242  0c63		       20 2c 13 	      jsr	setFX
    243  0c66
    244  0c66		       ad 69 70 	      lda	attack
    245  0c69		       20 68 12 	      jsr	showAttack
    246  0c6c
    247  0c6c		       20 01 12 	      jsr	showMidiMode
    248  0c6f
    249  0c6f		       ad 6a 70 	      lda	release
    250  0c72		       20 bb 11 	      jsr	showRelease
    251  0c75
    252  0c75		       ac 6c 70 	      ldy	filterStatus
    253  0c78		       20 cd 10 	      jsr	showFiltOnOff
    254  0c7b
    255  0c7b		       20 80 12 	      jsr	setVolume
    256  0c7e
    257  0c7e		       ad 6b 70 	      lda	octave
    258  0c81		       20 d0 12 	      jsr	setOctave
    259  0c84
    260  0c84		       20 b6 14 	      jsr	showPatchName
    261  0c87
    262  0c87		       ad 7a 70 	      lda	paddle2
    263  0c8a		       20 41 10 	      jsr	ksetPad2
    264  0c8d
    265  0c8d		       60		      rts
    266  0c8e							;---------------------------------------------------
    267  0c8e
    268  0c8e							;************************************
    269  0c8e							; update text
    270  0c8e							;************************************
    271  0c8e							; Show text out of the textData array.
    272  0c8e							; x=textData, y=screen position
    273  0c8e				   updateText
    274  0c8e		       ad 70 70 	      lda	helpMode
    275  0c91		       f0 01		      beq	doUpdateText
    276  0c93		       60		      rts
    277  0c94				   doUpdateText
    278  0c94							;	lda helpMode
    279  0c94							;	bne doUpdateText
    280  0c94							;	rts
    281  0c94							;doUpdateText:
    282  0c94		       18		      clc
    283  0c95		       a9 04		      lda	#4
    284  0c97		       8d 46 70 	      sta	textTemp
    285  0c9a				   updateTextLoop
    286  0c9a		       bd 4c 32 	      lda	textData,x
    287  0c9d		       c9 40		      cmp	#64
    288  0c9f		       30 02		      bmi	showSpaceU
    289  0ca1		       e9 40		      sbc	#64
    290  0ca3				   showSpaceU
    291  0ca3		       99 00 04 	      sta	1024,y
    292  0ca6		       e8		      inx
    293  0ca7		       c8		      iny
    294  0ca8		       ce 46 70 	      dec	textTemp
    295  0cab		       d0 ed		      bne	updateTextLoop
    296  0cad		       60		      rts
    297  0cae
    298  0cae
    299  0cae							;************************************
    300  0cae							; clrScr - Clear Screen
    301  0cae							;************************************
    302  0cae				   clrScr
    303  0cae		       a2 00		      ldx	#0
    304  0cb0		       a9 20		      lda	#32
    305  0cb2				   clrScrLoop
    306  0cb2		       9d 00 04 	      sta	$400,x
    307  0cb5		       9d 00 05 	      sta	$500,x
    308  0cb8		       9d 00 06 	      sta	$600,x
    309  0cbb		       9d 00 07 	      sta	$700,x
    310  0cbe		       ca		      dex
    311  0cbf		       d0 f1		      bne	clrScrLoop
    312  0cc1		       60		      rts
    313  0cc2
    314  0cc2
    315  0cc2							;************************************
    316  0cc2							; DisplayHex - draw hex value on screen
    317  0cc2							;************************************
    318  0cc2							; note uses helpWritePointer so can't be
    319  0cc2							; used within displayPage routine
    320  0cc2							; X = horizontal location
    321  0cc2							; Y = vertical location
    322  0cc2							; A = value
    323  0cc2							; hexDispColor = color
    324  0cc2				   displayHex
    325  0cc2							; figure out screen location
    326  0cc2							; and store in word pointer
    327  0cc2		       8e 72 70 	      stx	hexDispTemp
    328  0cc5		       aa		      tax		; save the hex value in X
    329  0cc6		       b9 40 29 	      lda	lineOffsetL,y
    330  0cc9		       18		      clc
    331  0cca		       6d 72 70 	      adc	hexDispTemp
    332  0ccd		       85 31		      sta	helpWritePointerL
    333  0ccf		       85 33		      sta	helpColorPointerL
    334  0cd1
    335  0cd1		       b9 5a 29 	      lda	lineOffsetM,y
    336  0cd4		       69 00		      adc	#0
    337  0cd6		       85 32		      sta	helpWritePointerM
    338  0cd8		       18		      clc
    339  0cd9		       69 d4		      adc	#$D4
    340  0cdb		       85 34		      sta	helpColorPointerM
    341  0cdd							;--------------------
    342  0cdd		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
    343  0ce0		       8a		      txa
    344  0ce1		       29 0f		      and	#$0F	; isolate the LS nibble
    345  0ce3		       aa		      tax
    346  0ce4		       bd e6 33 	      lda	hexDisplay,x	; get character to display
    347  0ce7		       a0 01		      ldy	#1
    348  0ce9		       91 31		      sta	(helpWritePointerL),y
    349  0ceb							;lda #$E
    350  0ceb		       ad 8d 70 	      lda	hexDispColor
    351  0cee		       91 33		      sta	(helpColorPointerL),y
    352  0cf0							;-------------------
    353  0cf0		       ad 72 70 	      lda	hexDispTemp
    354  0cf3		       4a		      lsr		; get the MS nibble
    355  0cf4		       4a		      lsr
    356  0cf5		       4a		      lsr
    357  0cf6		       4a		      lsr
    358  0cf7		       aa		      tax
    359  0cf8		       bd e6 33 	      lda	hexDisplay,x	; get character to display
    360  0cfb		       a0 00		      ldy	#0
    361  0cfd		       91 31		      sta	(helpWritePointerL),y
    362  0cff							;lda #$E
    363  0cff		       ad 8d 70 	      lda	hexDispColor
    364  0d02		       91 33		      sta	(helpColorPointerL),y
    365  0d04							;-------------------
    366  0d04		       60		      rts
    367  0d05
    368  0d05
    369  0d05							;************************************
    370  0d05							; DisplayPage - display an entire
    371  0d05							; page of help info with color support
    372  0d05							;************************************
    373  0d05							; X = LSB of data address
    374  0d05							; Y = MSB of data address
    375  0d05							; data format:
    376  0d05							; line_number, color, text, 0
    377  0d05							; line_number, color, text, 0
    378  0d05							; 255
    379  0d05				   displayPage
    380  0d05		       84 2f		      sty	helpReadPointerL
    381  0d07		       86 30		      stx	helpReadPointerM
    382  0d09
    383  0d09							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    384  0d09							;lda filterSetValue
    385  0d09							;sta sidEditSaveTemp1
    386  0d09
    387  0d09		       a9 01		      lda	#1
    388  0d0b		       8d 6d 70 	      sta	helpColor	; default to white
    389  0d0e				   helpLoop
    390  0d0e		       a0 00		      ldy	#0
    391  0d10							; get line number and set up output pointers
    392  0d10		       b1 2f		      lda	(helpReadPointerL),y
    393  0d12		       c9 ff		      cmp	#255
    394  0d14		       f0 5b		      beq	quitHelp
    395  0d16		       aa		      tax
    396  0d17		       bd 5a 29 	      lda	lineOffsetM,x
    397  0d1a		       85 32		      sta	helpWritePointerM
    398  0d1c		       18		      clc
    399  0d1d		       69 d4		      adc	#$D4
    400  0d1f		       85 34		      sta	helpColorPointerM
    401  0d21		       bd 40 29 	      lda	lineOffsetL,x
    402  0d24		       85 31		      sta	helpWritePointerL
    403  0d26		       85 33		      sta	helpColorPointerL
    404  0d28							;--------------------
    405  0d28		       a0 01		      ldy	#1
    406  0d2a		       8c 6e 70 	      sty	helpYIn
    407  0d2d		       a0 00		      ldy	#0
    408  0d2f		       8c 6f 70 	      sty	helpYOut
    409  0d32				   helpTextLoop
    410  0d32							; get the first character
    411  0d32		       ac 6e 70 	      ldy	helpYIn
    412  0d35		       b1 2f		      lda	(helpReadPointerL),y
    413  0d37		       f0 28		      beq	quitTextLoop
    414  0d39		       c8		      iny
    415  0d3a		       8c 6e 70 	      sty	helpYIn
    416  0d3d							; see if it's a color command
    417  0d3d		       c9 80		      cmp	#128
    418  0d3f		       10 17		      bpl	setColor	;---
    419  0d41		       c9 40		      cmp	#64
    420  0d43		       30 02		      bmi	showSpaceHelp
    421  0d45		       e9 40		      sbc	#64
    422  0d47							;lda #126
    423  0d47				   showSpaceHelp
    424  0d47							; write the color and character to the screen
    425  0d47		       ac 6f 70 	      ldy	helpYOut
    426  0d4a		       91 31		      sta	(helpWritePointerL),y
    427  0d4c		       ad 6d 70 	      lda	helpColor
    428  0d4f		       91 33		      sta	(helpColorPointerL),y
    429  0d51		       c8		      iny
    430  0d52		       8c 6f 70 	      sty	helpYOut
    431  0d55		       4c 32 0d 	      jmp	helpTextLoop
    432  0d58				   setColor
    433  0d58		       38		      sec
    434  0d59		       e9 80		      sbc	#128
    435  0d5b		       8d 6d 70 	      sta	helpColor
    436  0d5e		       4c 32 0d 	      jmp	helpTextLoop
    437  0d61							;---------------
    438  0d61				   quitTextLoop
    439  0d61							; update the input pointer
    440  0d61		       c8		      iny
    441  0d62		       98		      tya
    442  0d63		       18		      clc
    443  0d64		       65 2f		      adc	helpReadPointerL
    444  0d66		       85 2f		      sta	helpReadPointerL
    445  0d68		       a5 30		      lda	helpReadPointerM
    446  0d6a		       69 00		      adc	#0
    447  0d6c		       85 30		      sta	helpReadPointerM
    448  0d6e		       4c 0e 0d 	      jmp	helpLoop	;/\/\/\/\/\
    449  0d71				   quitHelp
    450  0d71
    451  0d71							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    452  0d71							;lda sidEditSaveTemp1
    453  0d71							;sta filterSetValue
    454  0d71
    455  0d71		       60		      rts		; END OF DISPLAY PAGE
------- FILE cynthcart2.0.1.asm
------- FILE cynth_modulation.asm LEVEL 2 PASS 2
      0  0d72					      include	"cynth_modulation.asm"
      1  0d72
      2  0d72
      3  0d72							;-------------------------------------
      4  0d72							; Process FX
      5  0d72							;-------------------------------------
      6  0d72							;fxType equ $7086
      7  0d72							;modValue1 equ $7087
      8  0d72							;modDirection equ $7089
      9  0d72							;modCounter equ $708A
     10  0d72							;modMinValue equ $708B
     11  0d72							;modMaxValue equ $708A
     12  0d72							; - - - - - - - - - -
     13  0d72							;MOD_NONE equ 0
     14  0d72							;MOD_PW_LFO equ 1
     15  0d72							;MOD_FILT_LFO equ 2
     16  0d72							;MOD_FILT_OPEN equ 3
     17  0d72							;MOD_FILT_CLOSE equ 4
     18  0d72							;MOD_FILT_WOW equ 5
     19  0d72
     20  0d72				   processFX
     21  0d72		       ad 86 70 	      lda	fxType
     22  0d75		       d0 0b		      bne	doFX
     23  0d77		       a9 7f		      lda	#127	; Set default mod values...
     24  0d79		       8d 9e 70 	      sta	pwModValue
     25  0d7c		       8d 9c 70 	      sta	filterModValue
     26  0d7f		       4c aa 0d 	      jmp	quitFX
     27  0d82							; - - - - - - - -
     28  0d82				   doFX
     29  0d82		       c9 06		      cmp	#MOD_PW_LFO
     30  0d84		       d0 03		      bne	notModPulseLFO
     31  0d86		       4c 94 0e 	      jmp	modPulseLFO	;------->
     32  0d89				   notModPulseLFO
     33  0d89		       c9 01		      cmp	#MOD_FILT_LFO
     34  0d8b		       d0 03		      bne	notModFiltLFO
     35  0d8d		       4c 80 0e 	      jmp	modFiltLFO	;------->
     36  0d90				   notModFiltLFO
     37  0d90		       c9 02		      cmp	#MOD_FILT_ENV
     38  0d92		       d0 03		      bne	noModFiltEnv
     39  0d94		       4c 50 0e 	      jmp	modFiltEnv	;------->
     40  0d97				   noModFiltEnv
     41  0d97		       c9 03		      cmp	#MOD_FILT3
     42  0d99		       f0 10		      beq	modFilt3	;------->
     43  0d9b		       c9 04		      cmp	#MOD_FILT4
     44  0d9d		       f0 67		      beq	modFilt4	;------->
     45  0d9f		       c9 05		      cmp	#MOD_FILT5
     46  0da1		       f0 76		      beq	modFilt5	;------->
     47  0da3		       c9 07		      cmp	#MOD_PW2
     48  0da5		       d0 03		      bne	quitFX
     49  0da7		       4c 2c 0e 	      jmp	modPW2	;------->
     50  0daa				   quitFX
     51  0daa		       60		      rts
     52  0dab
     53  0dab
     54  0dab							;---------------------
     55  0dab				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
     56  0dab		       ad 03 70 	      lda	Frame
     57  0dae		       ad 87 70 	      lda	modValue1
     58  0db1		       29 f8		      and	#%11111000
     59  0db3		       f0 0b		      beq	noDecModValue2
     60  0db5		       ae 87 70 	      ldx	modValue1
     61  0db8		       ca		      dex
     62  0db9		       ca		      dex
     63  0dba		       ca		      dex
     64  0dbb		       ca		      dex
     65  0dbc		       ca		      dex
     66  0dbd		       8e 87 70 	      stx	modValue1
     67  0dc0				   noDecModValue2
     68  0dc0		       ad 87 70 	      lda	modValue1
     69  0dc3		       8d 9c 70 	      sta	filterModValue
     70  0dc6							;jsr setFilterFromA
     71  0dc6							;rts ; DEBUG!!
     72  0dc6
     73  0dc6		       a9 b4		      lda	#180
     74  0dc8		       8d 98 70 	      sta	resetValue
     75  0dcb							;jmp filtEnvReset ;---- end
     76  0dcb
     77  0dcb				   filtEnvResetFast
     78  0dcb		       ad 1d 70 	      lda	soundMode
     79  0dce		       c9 20		      cmp	#MODE_MONO1
     80  0dd0		       f0 22		      beq	handleMonoMode
     81  0dd2		       c9 21		      cmp	#MODE_MONO2
     82  0dd4		       f0 1e		      beq	handleMonoMode
     83  0dd6
     84  0dd6							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
     85  0dd6		       a2 05		      ldx	#5
     86  0dd8		       a0 00		      ldy	#0
     87  0dda				   countNotesLoop
     88  0dda		       bd a0 70 	      lda	noteNumArray,x
     89  0ddd		       c9 ff		      cmp	#255
     90  0ddf		       d0 01		      bne	skipCountingNote
     91  0de1		       c8		      iny
     92  0de2				   skipCountingNote
     93  0de2		       ca		      dex
     94  0de3		       10 f5		      bpl	countNotesLoop
     95  0de5		       cc 99 70 	      cpy	lastNoteCount
     96  0de8		       f0 09		      beq	noNewNotes
     97  0dea		       8c 99 70 	      sty	lastNoteCount
     98  0ded		       ad 98 70 	      lda	resetValue	; Reset filter envelope
     99  0df0		       8d 87 70 	      sta	modValue1
    100  0df3				   noNewNotes
    101  0df3		       60		      rts
    102  0df4
    103  0df4				   handleMonoMode
    104  0df4		       ac a0 70 	      ldy	noteNumArray+0
    105  0df7		       cc 9a 70 	      cpy	lastNote
    106  0dfa		       f0 09		      beq	sameOldNote
    107  0dfc		       8c 9a 70 	      sty	lastNote
    108  0dff		       ad 98 70 	      lda	resetValue	; Reset filter envelope
    109  0e02		       8d 87 70 	      sta	modValue1
    110  0e05				   sameOldNote
    111  0e05		       60		      rts
    112  0e06
    113  0e06							; Reset filter env when no notes are held...
    114  0e06							;	ldx #5
    115  0e06							;filtEnvResetLoop2
    116  0e06							;lda noteNumArray,x
    117  0e06							;cmp #255
    118  0e06							;bne quitFiltEnv2
    119  0e06							;dex
    120  0e06							;bpl filtEnvResetLoop2
    121  0e06							;lda resetValue
    122  0e06							;sta modValue1
    123  0e06							;quitFiltEnv2:
    124  0e06							;rts
    125  0e06
    126  0e06							;---------------------
    127  0e06				   modFilt4		; Filter chopper FAST
    128  0e06		       ad 03 70 	      lda	Frame
    129  0e09		       29 08		      and	#%1000
    130  0e0b		       f0 06		      beq	filterClosed
    131  0e0d		       a9 e6		      lda	#230
    132  0e0f		       8d 9c 70 	      sta	filterModValue
    133  0e12		       60		      rts
    134  0e13							;jmp setFilterFromA
    135  0e13				   filterClosed
    136  0e13		       a9 00		      lda	#0
    137  0e15		       8d 9c 70 	      sta	filterModValue
    138  0e18		       60		      rts
    139  0e19							;jmp setFilterFromA
    140  0e19
    141  0e19
    142  0e19							;---------------------
    143  0e19				   modFilt5		; Filter chopper MEDIUM
    144  0e19		       ad 03 70 	      lda	Frame
    145  0e1c		       29 02		      and	#%10
    146  0e1e		       f0 06		      beq	filterClosed2
    147  0e20		       a9 96		      lda	#150
    148  0e22							;jmp setFilterFromA
    149  0e22		       8d 9c 70 	      sta	filterModValue
    150  0e25		       60		      rts
    151  0e26				   filterClosed2
    152  0e26		       a9 32		      lda	#50
    153  0e28							;jmp setFilterFromA
    154  0e28		       8d 9c 70 	      sta	filterModValue
    155  0e2b		       60		      rts
    156  0e2c
    157  0e2c							;---------------------
    158  0e2c				   modPW2		; PW Envelope
    159  0e2c		       ad 03 70 	      lda	Frame
    160  0e2f		       ad 87 70 	      lda	modValue1
    161  0e32							;and #%11111000
    162  0e32		       29 e0		      and	#%11100000
    163  0e34		       f0 0b		      beq	noDecModValue3
    164  0e36		       ae 87 70 	      ldx	modValue1
    165  0e39		       ca		      dex
    166  0e3a		       ca		      dex
    167  0e3b		       ca		      dex
    168  0e3c		       ca		      dex
    169  0e3d		       ca		      dex
    170  0e3e		       8e 87 70 	      stx	modValue1
    171  0e41				   noDecModValue3
    172  0e41		       ad 87 70 	      lda	modValue1
    173  0e44		       20 63 10 	      jsr	setPulseWidth
    174  0e47
    175  0e47		       a9 b4		      lda	#180
    176  0e49		       8d 98 70 	      sta	resetValue
    177  0e4c
    178  0e4c		       4c cb 0d 	      jmp	filtEnvResetFast
    179  0e4f		       60		      rts
    180  0e50
    181  0e50
    182  0e50
    183  0e50
    184  0e50							;---------------------
    185  0e50				   modFiltEnv
    186  0e50		       ad 03 70 	      lda	Frame
    187  0e53		       29 01		      and	#%1
    188  0e55		       f0 01		      beq	doEnvLFO
    189  0e57		       60		      rts
    190  0e58				   doEnvLFO
    191  0e58		       ad 87 70 	      lda	modValue1
    192  0e5b		       c9 ff		      cmp	#255
    193  0e5d		       f0 03		      beq	noIncreaseModValue
    194  0e5f		       ee 87 70 	      inc	modValue1
    195  0e62				   noIncreaseModValue
    196  0e62		       ad 87 70 	      lda	modValue1
    197  0e65		       8d 9c 70 	      sta	filterModValue
    198  0e68							;jsr setFilterFromA
    199  0e68		       a9 00		      lda	#0
    200  0e6a		       8d 98 70 	      sta	resetValue
    201  0e6d							; jmp filtEnvReset
    202  0e6d
    203  0e6d				   filtEnvReset
    204  0e6d		       a2 05		      ldx	#5
    205  0e6f				   filtEnvResetLoop
    206  0e6f		       bd a0 70 	      lda	noteNumArray,x
    207  0e72		       c9 ff		      cmp	#255
    208  0e74		       d0 09		      bne	quitFiltEnv
    209  0e76		       ca		      dex
    210  0e77		       10 f6		      bpl	filtEnvResetLoop
    211  0e79							;lda #0
    212  0e79		       ad 98 70 	      lda	resetValue
    213  0e7c		       8d 87 70 	      sta	modValue1
    214  0e7f				   quitFiltEnv
    215  0e7f		       60		      rts
    216  0e80
    217  0e80							;---------------------
    218  0e80				   modFiltLFO
    219  0e80		       a9 96		      lda	#150
    220  0e82		       8d 8b 70 	      sta	modLFOMinValue
    221  0e85		       a9 fe		      lda	#254
    222  0e87		       8d 8a 70 	      sta	modLFOMaxValue
    223  0e8a		       20 b8 0e 	      jsr	doModulationLFO
    224  0e8d		       ad 87 70 	      lda	modValue1
    225  0e90		       8d 9c 70 	      sta	filterModValue
    226  0e93							;jsr setFilterFromA
    227  0e93		       60		      rts
    228  0e94
    229  0e94
    230  0e94
    231  0e94							;---------------------
    232  0e94				   modPulseLFO
    233  0e94
    234  0e94							; Reset into range if way off value...
    235  0e94		       ad 87 70 	      lda	modValue1
    236  0e97		       30 05		      bmi	noResetValue
    237  0e99		       a9 c8		      lda	#200
    238  0e9b		       8d 87 70 	      sta	modValue1
    239  0e9e				   noResetValue
    240  0e9e
    241  0e9e							;inc 1025 ; DEBUG!
    242  0e9e		       a9 96		      lda	#150
    243  0ea0		       8d 8b 70 	      sta	modLFOMinValue
    244  0ea3		       a9 fe		      lda	#254
    245  0ea5		       8d 8a 70 	      sta	modLFOMaxValue
    246  0ea8		       20 b8 0e 	      jsr	doModulationLFO
    247  0eab		       ae 87 70 	      ldx	modValue1
    248  0eae		       8e 79 70 	      stx	paddleY
    249  0eb1
    250  0eb1		       ad 87 70 	      lda	modValue1
    251  0eb4		       20 63 10 	      jsr	setPulseWidth
    252  0eb7		       60		      rts
    253  0eb8
    254  0eb8							; Process special LFO for modulation
    255  0eb8							; Store modLFOMaxValue and modLFOMinValue first
    256  0eb8				   doModulationLFO
    257  0eb8		       ad 03 70 	      lda	Frame
    258  0ebb		       29 07		      and	#%111
    259  0ebd		       f0 01		      beq	doModLFO
    260  0ebf		       60		      rts
    261  0ec0				   doModLFO
    262  0ec0		       ad 89 70 	      lda	modDirection
    263  0ec3		       f0 12		      beq	LFODown
    264  0ec5				   LFOUp
    265  0ec5		       ae 87 70 	      ldx	modValue1
    266  0ec8		       e8		      inx
    267  0ec9		       8e 87 70 	      stx	modValue1
    268  0ecc							;jsr setPWValue
    269  0ecc		       8e 79 70 	      stx	paddleY
    270  0ecf							;jsr setPulseWidth
    271  0ecf		       ae 87 70 	      ldx	modValue1
    272  0ed2
    273  0ed2		       e0 f5		      cpx	#245
    274  0ed4		       f0 0d		      beq	switchDirections
    275  0ed6		       60		      rts
    276  0ed7
    277  0ed7				   LFODown
    278  0ed7		       ae 87 70 	      ldx	modValue1
    279  0eda		       ca		      dex
    280  0edb		       8e 87 70 	      stx	modValue1
    281  0ede		       e0 96		      cpx	#150
    282  0ee0		       f0 01		      beq	switchDirections
    283  0ee2		       60		      rts
    284  0ee3
    285  0ee3				   switchDirections
    286  0ee3		       ad 89 70 	      lda	modDirection
    287  0ee6		       18		      clc
    288  0ee7		       69 01		      adc	#1
    289  0ee9		       29 01		      and	#1
    290  0eeb		       8d 89 70 	      sta	modDirection
    291  0eee		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_setshow.asm LEVEL 2 PASS 2
      0  0eef					      include	"cynth_setshow.asm"
      1  0eef
      2  0eef							;-------------------------------------------
      3  0eef							; new key-based set functions
      4  0eef							;-------------------------------------------
      5  0eef
      6  0eef				   ksavePatch
      7  0eef		       a9 01		      lda	#1
      8  0ef1		       8d 75 70 	      sta	customPatchSaved
      9  0ef4							;-------------------
     10  0ef4		       a9 1e		      lda	#SAVED_PATCH_MESSAGE
     11  0ef6		       8d 47 70 	      sta	patchSetY
     12  0ef9		       20 b6 14 	      jsr	showPatchName
     13  0efc							;----------------
     14  0efc		       a2 19		      ldx	#$19
     15  0efe				   saveLoop
     16  0efe		       bd 00 71 	      lda	sidData,x
     17  0f01		       9d 20 71 	      sta	sidSaveData,x
     18  0f04		       ca		      dex
     19  0f05		       10 f7		      bpl	saveLoop
     20  0f07							;----------------
     21  0f07		       ad 29 70 	      lda	paddle
     22  0f0a		       8d 41 71 	      sta	savePaddle
     23  0f0d		       ad 6b 70 	      lda	octave
     24  0f10		       8d 42 71 	      sta	saveOctave
     25  0f13		       ad 1d 70 	      lda	soundMode
     26  0f16		       8d 43 71 	      sta	saveSoundMode
     27  0f19		       ad 86 70 	      lda	fxType
     28  0f1c		       8d 43 71 	      sta	saveFXType
     29  0f1f		       ad 1e 70 	      lda	arpSpeed
     30  0f22		       8d 44 71 	      sta	saveArpSpeed
     31  0f25		       ad 49 70 	      lda	LFODepth
     32  0f28		       8d 46 71 	      sta	saveLFODepth
     33  0f2b		       ad 48 70 	      lda	LFORate
     34  0f2e		       8d 47 71 	      sta	saveLFORate
     35  0f31		       ad 1c 70 	      lda	volume
     36  0f34		       8d 48 71 	      sta	saveVolume
     37  0f37		       ad 24 70 	      lda	volModeRAM
     38  0f3a		       8d 49 71 	      sta	saveVolMode
     39  0f3d		       ad 57 70 	      lda	filter
     40  0f40		       8d 4a 71 	      sta	saveFilter
     41  0f43							;----------------
     42  0f43		       60		      rts
     43  0f44
     44  0f44				   kloadPatch
     45  0f44							; don't load patch if none has been saved
     46  0f44		       ad 75 70 	      lda	customPatchSaved
     47  0f47		       d0 01		      bne	contLoadPatch
     48  0f49		       60		      rts
     49  0f4a				   contLoadPatch
     50  0f4a							; Maybe show this name with direct text instead?...
     51  0f4a							;lda #SAVED_PATCH_MESSAGE
     52  0f4a							;sta patchSetY
     53  0f4a							;jsr showPatchName
     54  0f4a							;----------------
     55  0f4a		       a9 1f		      lda	#CUSTOM_PATCH_NUMBER
     56  0f4c		       8d 47 70 	      sta	patchSetY
     57  0f4f		       20 b6 14 	      jsr	showPatchName
     58  0f52							;-----------------------
     59  0f52		       ad 49 71 	      lda	saveVolMode
     60  0f55		       8d 24 70 	      sta	volModeRAM
     61  0f58							;.....................
     62  0f58		       ad 48 71 	      lda	saveVolume
     63  0f5b		       8d 1c 70 	      sta	volume
     64  0f5e							;.....................
     65  0f5e		       ad 41 71 	      lda	savePaddle
     66  0f61		       20 36 11 	      jsr	setPaddles
     67  0f64							;.....................
     68  0f64		       ad 42 71 	      lda	saveOctave
     69  0f67		       20 d0 12 	      jsr	setOctave
     70  0f6a							;.....................
     71  0f6a		       ad 43 71 	      lda	saveSoundMode
     72  0f6d		       8d 1d 70 	      sta	soundMode
     73  0f70							;lda saveArpSpeed
     74  0f70		       20 54 13 	      jsr	setMode
     75  0f73							;.....................
     76  0f73		       ad 43 71 	      lda	saveFXType
     77  0f76		       8d 86 70 	      sta	fxType
     78  0f79		       20 2c 13 	      jsr	setFX
     79  0f7c							;.....................
     80  0f7c		       ad 46 71 	      lda	saveLFODepth
     81  0f7f		       20 57 11 	      jsr	setLFODepth
     82  0f82							;.....................
     83  0f82		       ad 47 71 	      lda	saveLFORate
     84  0f85		       20 6d 11 	      jsr	setLFORate
     85  0f88							;.....................
     86  0f88		       ad 4a 71 	      lda	saveFilter
     87  0f8b		       8d 57 70 	      sta	filter
     88  0f8e							;----------------
     89  0f8e		       a2 19		      ldx	#$19
     90  0f90				   loadLoop
     91  0f90		       bd 20 71 	      lda	sidSaveData,x
     92  0f93		       9d 00 d4 	      sta	SID1,x
     93  0f96		       9d 20 d4 	      sta	SID2,x
     94  0f99		       9d 00 71 	      sta	sidData,x
     95  0f9c		       ca		      dex
     96  0f9d		       10 f1		      bpl	loadLoop
     97  0f9f							;----------------
     98  0f9f		       ad 04 71 	      lda	sidData+SV1WAVE
     99  0fa2		       8d 30 70 	      sta	WaveType
    100  0fa5		       ad 0b 71 	      lda	sidData+SV2WAVE
    101  0fa8		       8d 37 70 	      sta	WaveType2
    102  0fab		       ad 12 71 	      lda	sidData+SV3WAVE
    103  0fae		       8d 3e 70 	      sta	WaveType3
    104  0fb1							;----------------
    105  0fb1		       60		      rts
    106  0fb2
    107  0fb2				   khelp
    108  0fb2							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    109  0fb2		       ad 9d 70 	      lda	filterSetValue
    110  0fb5		       8d 52 70 	      sta	sidEditSaveTemp1
    111  0fb8
    112  0fb8
    113  0fb8		       a9 00		      lda	#0
    114  0fba		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
    115  0fbd
    116  0fbd		       20 ae 0c 	      jsr	clrScr
    117  0fc0		       a9 28		      lda	#KEYTIME
    118  0fc2		       8d 58 70 	      sta	keyTimer
    119  0fc5		       ad 70 70 	      lda	helpMode
    120  0fc8		       49 01		      eor	#1
    121  0fca							;sta helpMode
    122  0fca		       20 24 11 	      jsr	setHelpMode
    123  0fcd		       20 ef 0b 	      jsr	displayInit
    124  0fd0		       ad 70 70 	      lda	helpMode
    125  0fd3		       f0 0e		      beq	showHelpMessage
    126  0fd5							;---------------
    127  0fd5							; Show full help page...
    128  0fd5		       a2 2d		      ldx	#>normalHelp	;low/MSB
    129  0fd7		       a0 30		      ldy	#<normalHelp	;high/LSB
    130  0fd9		       20 05 0d 	      jsr	displayPage	; <--- Draw full help page
    131  0fdc
    132  0fdc							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    133  0fdc		       ad 52 70 	      lda	sidEditSaveTemp1
    134  0fdf		       8d 9d 70 	      sta	filterSetValue
    135  0fe2		       60		      rts
    136  0fe3
    137  0fe3							; \/ Show help message at bottom of screen
    138  0fe3				   showHelpMessage
    139  0fe3							; Show help key...
    140  0fe3		       a2 00		      ldx	#0
    141  0fe5				   helpMessageLoop
    142  0fe5		       bd 12 2d 	      lda	helpMessage,x
    143  0fe8		       f0 11		      beq	endHelpMsgLoop
    144  0fea		       c9 40		      cmp	#64
    145  0fec		       30 02		      bmi	showSpace99
    146  0fee		       e9 40		      sbc	#64
    147  0ff0				   showSpace99
    148  0ff0		       9d c0 07 	      sta	1024+24*40,x
    149  0ff3		       a9 0b		      lda	#11
    150  0ff5		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
    151  0ff8		       e8		      inx
    152  0ff9		       d0 ea		      bne	helpMessageLoop
    153  0ffb				   endHelpMsgLoop
    154  0ffb
    155  0ffb		       20 01 12 	      jsr	showMidiMode
    156  0ffe
    157  0ffe
    158  0ffe							;	jsr displayInit
    159  0ffe
    160  0ffe
    161  0ffe							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    162  0ffe		       ad 52 70 	      lda	sidEditSaveTemp1
    163  1001		       8d 9d 70 	      sta	filterSetValue
    164  1004
    165  1004							;	ldx #39
    166  1004							;	lda #32
    167  1004							;clearLastRow:
    168  1004							;	sta 1024+23*40,x
    169  1004							;	dex
    170  1004							;	bpl clearLastRow
    171  1004		       60		      rts
    172  1005
    173  1005				   kclearModulation
    174  1005		       a9 00		      lda	#0
    175  1007		       20 29 13 	      jsr	ksetFX
    176  100a		       a9 00		      lda	#0
    177  100c		       20 57 11 	      jsr	setLFODepth
    178  100f		       a9 00		      lda	#0
    179  1011		       4c 6d 11 	      jmp	setLFORate
    180  1014
    181  1014
    182  1014							;ksetBlackBG
    183  1014							;	lda #0
    184  1014							;	sta 53281
    185  1014							;	sta 53280
    186  1014							;	rts
    187  1014
    188  1014							;ksetBlueBG
    189  1014							;	lda #6
    190  1014							;	sta 53281
    191  1014							;	lda #14
    192  1014							;	sta 53280
    193  1014							;	rts
    194  1014
    195  1014
    196  1014				   ksetPalNtsc
    197  1014		       8d 61 70 	      sta	NTSCmode
    198  1017		       4c ef 0b 	      jmp	displayInit
    199  101a
    200  101a							; bend the bender down
    201  101a				   bendBender
    202  101a		       ad 40 70 	      lda	bender
    203  101d		       c9 fc		      cmp	#252
    204  101f		       f0 11		      beq	notBender
    205  1021		       ee 40 70 	      inc	bender
    206  1024		       ee 40 70 	      inc	bender
    207  1027		       ee 40 70 	      inc	bender
    208  102a		       ee 40 70 	      inc	bender
    209  102d		       a9 01		      lda	#1
    210  102f		       8d 83 70 	      sta	benderAutoreset
    211  1032				   notBender
    212  1032		       60		      rts
    213  1033
    214  1033							; set VIC video chip mode
    215  1033				   setVIC
    216  1033		       8d 20 70 	      sta	VICMode
    217  1036		       60		      rts
    218  1037
    219  1037							; set paddle on/off
    220  1037				   ksetPaddles
    221  1037		       20 36 11 	      jsr	setPaddles
    222  103a		       ad 57 70 	      lda	filter
    223  103d		       8d 9d 70 	      sta	filterSetValue
    224  1040							;jmp setFilter
    225  1040		       60		      rts
    226  1041
    227  1041				   ksetPad2
    228  1041		       8d 7a 70 	      sta	paddle2
    229  1044		       c9 00		      cmp	#0
    230  1046		       f0 03		      beq	skipLastPadSave
    231  1048		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
    232  104b				   skipLastPadSave
    233  104b		       0a		      asl
    234  104c		       0a		      asl
    235  104d		       18		      clc
    236  104e		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
    237  1050		       aa		      tax
    238  1051		       a0 c4		      ldy	#PAD2TEXT	; screen position
    239  1053		       4c 8e 0c 	      jmp	updateText
    240  1056
    241  1056				   ksetFilter
    242  1056		       a2 00		      ldx	#0
    243  1058		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
    244  105b							;jsr setFilter
    245  105b		       8d 9d 70 	      sta	filterSetValue
    246  105e		       a9 00		      lda	#0
    247  1060		       4c 36 11 	      jmp	setPaddles
    248  1063
    249  1063
    250  1063							;------------------
    251  1063							; Set pulse width
    252  1063							;------------------
    253  1063							; MIDI CONTROLLER	      <- 1 1 1	1 1 1 1
    254  1063							; PULSE WIDTH	      1 1 1 1  1 1 1 1	1 1 1 1
    255  1063							; -----------------------------------------------
    256  1063				   setPulseWidth
    257  1063							; write pulse high byte
    258  1063		       aa		      tax
    259  1064		       4a		      lsr
    260  1065		       4a		      lsr
    261  1066		       4a		      lsr
    262  1067		       4a		      lsr
    263  1068							;sta 1025+40 ; DEBUG!
    264  1068		       8d 03 d4 	      sta	SID1+SV1PWH
    265  106b		       8d 0a d4 	      sta	SID1+SV2PWH
    266  106e		       8d 11 d4 	      sta	SID1+SV3PWH
    267  1071		       8d 23 d4 	      sta	SID2+SV1PWH
    268  1074		       8d 2a d4 	      sta	SID2+SV2PWH
    269  1077		       8d 31 d4 	      sta	SID2+SV3PWH
    270  107a		       8d 03 71 	      sta	sidData+SV1PWH
    271  107d		       8d 0a 71 	      sta	sidData+SV2PWH
    272  1080		       8d 11 71 	      sta	sidData+SV3PWH
    273  1083
    274  1083							; write pulse low byte
    275  1083		       8a		      txa
    276  1084		       0a		      asl
    277  1085		       0a		      asl
    278  1086		       0a		      asl
    279  1087		       0a		      asl
    280  1088							;asl ; extra ?
    281  1088		       09 0f		      ora	#$0F
    282  108a							;sta 1024+40 ; DEBUG!
    283  108a		       8d 02 d4 	      sta	SID1+SV1PWL
    284  108d		       8d 09 d4 	      sta	SID1+SV2PWL
    285  1090		       8d 10 d4 	      sta	SID1+SV3PWL
    286  1093		       8d 22 d4 	      sta	SID2+SV1PWL
    287  1096		       8d 29 d4 	      sta	SID2+SV2PWL
    288  1099		       8d 30 d4 	      sta	SID2+SV3PWL
    289  109c		       8d 02 71 	      sta	sidData+SV1PWL
    290  109f		       8d 09 71 	      sta	sidData+SV2PWL
    291  10a2		       8d 10 71 	      sta	sidData+SV3PWL
    292  10a5		       60		      rts
    293  10a6
    294  10a6
    295  10a6							;setAllOscillators:
    296  10a6							;sta SID1+0,y
    297  10a6							;sta SID1+7,y
    298  10a6							;sta SID1+14,y
    299  10a6							;sta SID2+0,y
    300  10a6							;sta SID2+7,y
    301  10a6							;sta SID2+14,y
    302  10a6							;sta sidData+0,y
    303  10a6							;sta sidData+7,y
    304  10a6							;sta sidData+14,y
    305  10a6							;rts
    306  10a6
    307  10a6
    308  10a6
    309  10a6				   kfiltOnOff
    310  10a6		       8c 6c 70 	      sty	filterStatus
    311  10a9				   setResonance
    312  10a9		       ac 6c 70 	      ldy	filterStatus
    313  10ac							;------------------
    314  10ac							;lda sidData+SFILTC
    315  10ac		       ad 97 70 	      lda	resonance
    316  10af		       19 d6 10 	      ora	filtOrValue,y
    317  10b2		       39 d9 10 	      and	filtAndValue,y
    318  10b5		       8d 17 d4 	      sta	SID1+SFILTC
    319  10b8		       8d 17 71 	      sta	sidData+SFILTC
    320  10bb							;------------------
    321  10bb		       ad 17 71 	      lda	sidData+SFILTC
    322  10be		       19 d6 10 	      ora	filtOrValue,y
    323  10c1		       39 d9 10 	      and	filtAndValue,y
    324  10c4		       8d 37 d4 	      sta	SID2+SFILTC
    325  10c7							;------------------
    326  10c7		       b9 dc 10 	      lda	filtDisableValue,y
    327  10ca		       8d 5c 70 	      sta	filterDisable
    328  10cd							;------------------
    329  10cd				   showFiltOnOff
    330  10cd		       b9 df 10 	      lda	filtTextValue,y
    331  10d0		       aa		      tax
    332  10d1		       a0 4c		      ldy	#FILTERTEXT2
    333  10d3		       4c 8e 0c 	      jmp	updateText
    334  10d6
    335  10d6
    336  10d6				   filtOrValue
    337  10d6		       0f 00 00 	      byte.b	$0F,0,0
    338  10d9				   filtAndValue
    339  10d9		       ff f0 f0 	      byte.b	$FF,$F0,$F0
    340  10dc				   filtDisableValue
    341  10dc		       00 00 01 	      byte.b	0,0,1
    342  10df				   filtTextValue
    343  10df		       04 00 60 	      byte.b	4,0,DISABLED
    344  10e2
    345  10e2				   ksetTune
    346  10e2		       8c 71 70 	      sty	tuneSetting
    347  10e5
    348  10e5		       98		      tya
    349  10e6		       38		      sec
    350  10e7		       e9 04		      sbc	#4
    351  10e9		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
    352  10ec
    353  10ec							;lda tuneArrPtrLL,y
    354  10ec							;sta tunePtrL
    355  10ec							;lda tuneArrPtrLH,y
    356  10ec							;sta tunePtrL+1
    357  10ec							;lda tuneArrPtrHL,y
    358  10ec							;sta tunePtrH
    359  10ec							;lda tuneArrPtrHH,y
    360  10ec							;sta tunePtrH+1
    361  10ec		       98		      tya
    362  10ed		       0a		      asl
    363  10ee		       0a		      asl
    364  10ef		       18		      clc
    365  10f0		       69 14		      adc	#TUNING
    366  10f2		       aa		      tax
    367  10f3		       a0 57		      ldy	#TUNINGTEXT
    368  10f5		       4c 8e 0c 	      jmp	updateText
    369  10f8
    370  10f8
    371  10f8				   setFullScreenMode
    372  10f8		       8d 67 70 	      sta	fullScreenMode
    373  10fb		       c9 00		      cmp	#0
    374  10fd		       f0 11		      beq	notFullScreen
    375  10ff							;--------
    376  10ff		       a9 00		      lda	#<(PTRNTEXTBASE)
    377  1101		       85 2b		      sta	lowTextPtr
    378  1103		       a9 04		      lda	#>(PTRNTEXTBASE)
    379  1105		       85 2c		      sta	lowTextPtr+1
    380  1107		       a9 00		      lda	#<(PTRNCOLORBASE)
    381  1109		       85 2d		      sta	lowColorPtr
    382  110b		       a9 d8		      lda	#>(PTRNCOLORBASE)
    383  110d		       85 2e		      sta	lowColorPtr+1
    384  110f		       60		      rts
    385  1110							;--------
    386  1110				   notFullScreen
    387  1110		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
    388  1112		       85 2b		      sta	lowTextPtr
    389  1114		       a9 04		      lda	#>(PTRNTEXTBASE+200)
    390  1116		       85 2c		      sta	lowTextPtr+1
    391  1118		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
    392  111a		       85 2d		      sta	lowColorPtr
    393  111c		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
    394  111e		       85 2e		      sta	lowColorPtr+1
    395  1120		       20 ef 0b 	      jsr	displayInit
    396  1123		       60		      rts
    397  1124
    398  1124				   setHelpMode
    399  1124		       8d 70 70 	      sta	helpMode
    400  1127		       60		      rts
    401  1128
    402  1128							;--------------------------------
    403  1128							; Set Video Mode
    404  1128							;--------------------------------
    405  1128				   setVideoMode
    406  1128		       8d 45 70 	      sta	videoMode
    407  112b		       8c 68 70 	      sty	videoText
    408  112e		       98		      tya
    409  112f		       18		      clc
    410  1130		       69 30		      adc	#"0"
    411  1132		       8d bc 04 	      sta	1024+VIDEOTEXT
    412  1135		       60		      rts
    413  1136
    414  1136							;--------------------------------
    415  1136							; Set Paddles
    416  1136							;--------------------------------
    417  1136				   setPaddles
    418  1136		       8d 29 70 	      sta	paddle
    419  1139		       0a		      asl
    420  113a		       d0 0c		      bne	noFilterReset
    421  113c		       ae 57 70 	      ldx	filter
    422  113f		       8e 16 d4 	      stx	SID1+SFILTH
    423  1142		       8e 36 d4 	      stx	SID2+SFILTH
    424  1145		       8d 16 71 	      sta	sidData+SFILTH
    425  1148				   noFilterReset
    426  1148		       a0 00		      ldy	#0
    427  114a		       8c 76 70 	      sty	paddleTop
    428  114d		       8c 77 70 	      sty	paddleBottom
    429  1150				   showPaddle
    430  1150		       0a		      asl
    431  1151		       aa		      tax
    432  1152		       a0 9c		      ldy	#PADDLETEXT
    433  1154		       4c 8e 0c 	      jmp	updateText
    434  1157
    435  1157
    436  1157							;--------------------------------
    437  1157							; Set LFO Depth
    438  1157							;--------------------------------
    439  1157				   setLFODepth
    440  1157		       8d 49 70 	      sta	LFODepth
    441  115a							;showLFO:
    442  115a		       ac 70 70 	      ldy	helpMode
    443  115d		       f0 01		      beq	doShowLFO
    444  115f		       60		      rts
    445  1160				   doShowLFO
    446  1160		       a0 6c		      ldy	#LFODEPTHTEXT
    447  1162		       18		      clc
    448  1163		       69 30		      adc	#"0"
    449  1165		       99 00 04 	      sta	1024,y
    450  1168		       a9 20		      lda	#32
    451  116a		       a2 08		      ldx	#8
    452  116c		       60		      rts
    453  116d
    454  116d
    455  116d							;--------------------------------
    456  116d							; Set LFO Rate
    457  116d							;--------------------------------
    458  116d				   setLFORate
    459  116d		       8d 48 70 	      sta	LFORate
    460  1170				   showLFORate
    461  1170		       ac 70 70 	      ldy	helpMode
    462  1173		       f0 01		      beq	doShowLFORate
    463  1175		       60		      rts
    464  1176				   doShowLFORate
    465  1176		       a0 94		      ldy	#LFORATETEXT
    466  1178		       18		      clc
    467  1179		       69 30		      adc	#"0"
    468  117b		       99 00 04 	      sta	1024,y
    469  117e							;lda #32
    470  117e		       a9 02		      lda	#CYNTHCART_COLOR
    471  1180		       a2 08		      ldx	#8
    472  1182				   LFOClear
    473  1182							;sta 1064,x
    474  1182		       9d 00 d8 	      sta	55296,x
    475  1185		       ca		      dex
    476  1186		       10 fa		      bpl	LFOClear
    477  1188		       60		      rts
    478  1189
    479  1189							;--------------------------------
    480  1189							; Set Release for each OSC2 indpendently
    481  1189							;--------------------------------
    482  1189							; A = release OSC2 value
    483  1189				   setReleaseOSC2
    484  1189							;sta release
    485  1189		       8d 0d d4 	      sta	SID1+SV2SR
    486  118c		       8d 2d d4 	      sta	SID2+SV2SR
    487  118f		       8d 0d 71 	      sta	sidData+SV2SR
    488  1192		       60		      rts
    489  1193							;jmp showRelease
    490  1193							;----------------
    491  1193
    492  1193							;--------------------------------
    493  1193							; Set Release for each OSC3 indpendently
    494  1193							;--------------------------------
    495  1193							; A = release OSC2 value
    496  1193				   setReleaseOSC3
    497  1193							;sta release
    498  1193		       8d 14 d4 	      sta	SID1+SV3SR
    499  1196		       8d 34 d4 	      sta	SID2+SV3SR
    500  1199		       8d 14 71 	      sta	sidData+SV3SR
    501  119c		       60		      rts
    502  119d							;jmp showRelease
    503  119d							;----------------
    504  119d							;--------------------------------
    505  119d							; Set Release
    506  119d							;--------------------------------
    507  119d							; A = release OSC1 value
    508  119d							; X = release OSC2 value
    509  119d							; Y = release OSC3 value
    510  119d				   setRelease
    511  119d		       8d 6a 70 	      sta	release
    512  11a0		       8d 06 d4 	      sta	SID1+SV1SR
    513  11a3		       8d 0d d4 	      sta	SID1+SV2SR
    514  11a6		       8d 14 d4 	      sta	SID1+SV3SR
    515  11a9		       8d 26 d4 	      sta	SID2+SV1SR
    516  11ac		       8d 2d d4 	      sta	SID2+SV2SR
    517  11af		       8d 34 d4 	      sta	SID2+SV3SR
    518  11b2		       8d 06 71 	      sta	sidData+SV1SR
    519  11b5		       8d 0d 71 	      sta	sidData+SV2SR
    520  11b8		       8d 14 71 	      sta	sidData+SV3SR
    521  11bb							;----------------
    522  11bb				   showRelease
    523  11bb		       ac 70 70 	      ldy	helpMode
    524  11be		       f0 01		      beq	doShowRelease
    525  11c0		       60		      rts
    526  11c1				   doShowRelease
    527  11c1		       29 0f		      and	#$0F
    528  11c3		       a8		      tay
    529  11c4		       b9 ee 11 	      lda	sixteenToTen,y
    530  11c7		       18		      clc
    531  11c8		       69 30		      adc	#"0"
    532  11ca		       8d 8a 04 	      sta	1024+RELTEXT
    533  11cd		       60		      rts
    534  11ce
    535  11ce		       a0 8a		      ldy	#RELTEXT
    536  11d0		       a9 e0		      lda	#REL_SHORT
    537  11d2		       cd 6a 70 	      cmp	release
    538  11d5		       30 05		      bmi	notRel0
    539  11d7		       a9 30		      lda	#"0"
    540  11d9		       4c ea 11 	      jmp	setReleaseText
    541  11dc				   notRel0
    542  11dc		       a9 e9		      lda	#REL_MED
    543  11de		       cd 6a 70 	      cmp	release
    544  11e1		       30 05		      bmi	notRel1
    545  11e3		       a9 31		      lda	#"1"
    546  11e5		       4c ea 11 	      jmp	setReleaseText
    547  11e8				   notRel1
    548  11e8		       a9 32		      lda	#"2"
    549  11ea				   setReleaseText
    550  11ea		       99 00 04 	      sta	1024,y
    551  11ed		       60		      rts
    552  11ee
    553  11ee				   sixteenToTen
    554  11ee		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
    555  11fe
    556  11fe
    557  11fe				   setMidiMode
    558  11fe		       8d f7 70 	      sta	midiMode
    559  1201				   showMidiMode
    560  1201		       a9 2f		      lda	#47
    561  1203		       8d e1 07 	      sta	2017
    562  1206		       ad 50 71 	      lda	midiEnabled
    563  1209		       d0 01		      bne	doShowMidiMode
    564  120b		       60		      rts
    565  120c				   doShowMidiMode
    566  120c		       a9 2f		      lda	#47
    567  120e		       8d dc 07 	      sta	2012
    568  1211		       8d d7 07 	      sta	2007
    569  1214		       ae f7 70 	      ldx	midiMode
    570  1217		       30 19		      bmi	showOmni
    571  1219							;sta 2010
    572  1219				   showChannel
    573  1219		       a9 20		      lda	#32
    574  121b		       8d d8 07 	      sta	2008
    575  121e		       a9 03		      lda	#3
    576  1220		       8d d9 07 	      sta	2009
    577  1223		       a9 08		      lda	#8
    578  1225		       8d da 07 	      sta	2010
    579  1228		       a9 31		      lda	#49
    580  122a		       18		      clc
    581  122b		       6d f7 70 	      adc	midiMode
    582  122e		       8d db 07 	      sta	2011
    583  1231		       60		      rts
    584  1232				   showOmni
    585  1232		       a9 0f		      lda	#15
    586  1234		       8d d8 07 	      sta	2008
    587  1237		       a9 0d		      lda	#13
    588  1239		       8d d9 07 	      sta	2009
    589  123c		       a9 0e		      lda	#14
    590  123e		       8d da 07 	      sta	2010
    591  1241		       a9 09		      lda	#9
    592  1243		       8d db 07 	      sta	2011
    593  1246
    594  1246		       20 0d 13 	      jsr	showAdapter
    595  1249		       60		      rts
    596  124a
    597  124a							;--------------------------------
    598  124a							; Set Attack
    599  124a							;--------------------------------
    600  124a							; A = Attack value
    601  124a				   setAttack
    602  124a		       8d 69 70 	      sta	attack
    603  124d		       8d 0c d4 	      sta	SID1+SV2AD
    604  1250		       8d 13 d4 	      sta	SID1+SV3AD
    605  1253		       8d 2c d4 	      sta	SID2+SV2AD
    606  1256		       8d 33 d4 	      sta	SID2+SV3AD
    607  1259		       8d 05 d4 	      sta	SID1+SV1AD
    608  125c		       8d 25 d4 	      sta	SID2+SV1AD
    609  125f		       8d 0c 71 	      sta	sidData+SV2AD
    610  1262		       8d 13 71 	      sta	sidData+SV3AD
    611  1265		       8d 05 71 	      sta	sidData+SV1AD
    612  1268							;----------------
    613  1268				   showAttack
    614  1268		       ac 70 70 	      ldy	helpMode
    615  126b		       f0 01		      beq	doShowAttack
    616  126d		       60		      rts
    617  126e				   doShowAttack
    618  126e		       4a		      lsr
    619  126f		       4a		      lsr
    620  1270		       4a		      lsr
    621  1271		       4a		      lsr
    622  1272		       a8		      tay
    623  1273		       b9 ee 11 	      lda	sixteenToTen,y
    624  1276		       18		      clc
    625  1277		       69 30		      adc	#"0"
    626  1279		       8d 62 04 	      sta	1024+ATKTEXT
    627  127c		       60		      rts
    628  127d
    629  127d
    630  127d							;-----------------------------------
    631  127d							; Set Volume to A (for key command)
    632  127d							;-----------------------------------
    633  127d				   ksetVolume
    634  127d		       8d 1c 70 	      sta	volume
    635  1280
    636  1280
    637  1280							;-----------------------------------
    638  1280							; Set Volume
    639  1280							;-----------------------------------
    640  1280				   setVolume
    641  1280		       ad 24 70 	      lda	volModeRAM
    642  1283		       29 f0		      and	#$F0
    643  1285		       0d 1c 70 	      ora	volume
    644  1288		       8d 18 d4 	      sta	SID1+SVOLMODE
    645  128b		       8d 38 d4 	      sta	SID2+SVOLMODE
    646  128e		       8d 18 71 	      sta	sidData+SVOLMODE
    647  1291				   showVolume
    648  1291		       ac 70 70 	      ldy	helpMode
    649  1294		       f0 01		      beq	doShowVolume
    650  1296		       60		      rts
    651  1297				   doShowVolume
    652  1297		       29 0f		      and	#$0F
    653  1299		       aa		      tax
    654  129a		       bd ee 11 	      lda	sixteenToTen,x
    655  129d		       18		      clc
    656  129e		       69 30		      adc	#"0"
    657  12a0		       8d a7 04 	      sta	1024+VOLTEXT
    658  12a3		       60		      rts
    659  12a4
    660  12a4		       aa		      tax
    661  12a5		       bd ee 11 	      lda	sixteenToTen,x
    662  12a8		       aa		      tax
    663  12a9		       a0 a7		      ldy	#VOLTEXT
    664  12ab		       a9 07		      lda	#VOLLOW
    665  12ad		       20 8e 0c 	      jsr	updateText
    666  12b0		       60		      rts
    667  12b1
    668  12b1
    669  12b1							; set volume text
    670  12b1		       a0 a7		      ldy	#VOLTEXT
    671  12b3		       a9 07		      lda	#VOLLOW
    672  12b5		       cd 1c 70 	      cmp	volume
    673  12b8		       30 05		      bmi	notLow
    674  12ba		       a2 50		      ldx	#VLOW
    675  12bc		       4c 8e 0c 	      jmp	updateText
    676  12bf				   notLow
    677  12bf		       a9 0b		      lda	#VOLMED
    678  12c1		       cd 1c 70 	      cmp	volume
    679  12c4		       30 05		      bmi	notMed
    680  12c6		       a2 54		      ldx	#VMED
    681  12c8		       4c 8e 0c 	      jmp	updateText
    682  12cb				   notMed
    683  12cb		       a2 58		      ldx	#VHIGH
    684  12cd		       4c 8e 0c 	      jmp	updateText
    685  12d0							;-------------------------------------
    686  12d0
    687  12d0
    688  12d0							;-----------------------------------
    689  12d0							; Set Octave
    690  12d0							;-----------------------------------
    691  12d0				   setOctave
    692  12d0		       8d 6b 70 	      sta	octave
    693  12d3		       aa		      tax
    694  12d4		       bd 22 29 	      lda	octaveTable,x
    695  12d7		       8d 22 70 	      sta	keyOffset
    696  12da				   showOctave
    697  12da		       ac 70 70 	      ldy	helpMode
    698  12dd		       f0 01		      beq	doShowOctave
    699  12df		       60		      rts
    700  12e0				   doShowOctave
    701  12e0		       8a		      txa
    702  12e1		       18		      clc
    703  12e2		       69 30		      adc	#"0"
    704  12e4		       aa		      tax
    705  12e5		       8d 7f 04 	      sta	1024+OCTAVETEXT
    706  12e8		       60		      rts
    707  12e9
    708  12e9							;-----------------------------------
    709  12e9							; Set Filter
    710  12e9							;-----------------------------------
    711  12e9				   setFilter
    712  12e9		       8d 16 d4 	      sta	SID1+SFILTH
    713  12ec		       8d 36 d4 	      sta	SID2+SFILTH
    714  12ef		       8d 16 71 	      sta	sidData+SFILTH
    715  12f2
    716  12f2		       8d 57 70 	      sta	filter
    717  12f5				   showFilter
    718  12f5		       ac 70 70 	      ldy	helpMode
    719  12f8		       f0 01		      beq	testFullScreenMode
    720  12fa							;beq doShowFilter
    721  12fa		       60		      rts
    722  12fb				   testFullScreenMode
    723  12fb		       ac 67 70 	      ldy	fullScreenMode
    724  12fe		       f0 01		      beq	doShowFilter
    725  1300		       60		      rts
    726  1301				   doShowFilter
    727  1301		       4a		      lsr
    728  1302		       4a		      lsr
    729  1303		       4a		      lsr
    730  1304		       4a		      lsr
    731  1305		       4a		      lsr
    732  1306		       18		      clc
    733  1307		       69 30		      adc	#"0"
    734  1309				   endFilter
    735  1309		       8d 75 04 	      sta	1024+FILTERTEXT
    736  130c		       60		      rts
    737  130d
    738  130d
    739  130d							;-----------------------------------
    740  130d							; Set Midi mode
    741  130d							;-----------------------------------
    742  130d				   showAdapter
    743  130d							; Draw name of new sound mode on screen...
    744  130d		       ad 50 71 	      lda	midiEnabled
    745  1310		       0a		      asl
    746  1311		       0a		      asl
    747  1312		       0a		      asl
    748  1313							;lda modeNameOffsets,x
    749  1313							;lda fxNames,x
    750  1313		       aa		      tax
    751  1314		       a0 00		      ldy	#0
    752  1316				   drawMidiModeLoop
    753  1316							;lda modeNamesPolyphony,x
    754  1316		       bd f0 29 	      lda	midiModeNames,x
    755  1319		       c9 40		      cmp	#64
    756  131b		       30 02		      bmi	showSpaceZMidiMode
    757  131d		       e9 40		      sbc	#64
    758  131f				   showSpaceZMidiMode
    759  131f		       99 cf 07 	      sta	1024+40*24+15,y
    760  1322		       e8		      inx
    761  1323		       c8		      iny
    762  1324		       c0 08		      cpy	#8
    763  1326		       d0 ee		      bne	drawMidiModeLoop
    764  1328							; - - - - -
    765  1328							;inx ; Get polyphony value at end of name string...
    766  1328							;inx
    767  1328							;lda modeNamesPolyphony,x
    768  1328							;sta polyphony
    769  1328
    770  1328							;lda #8
    771  1328							;sta bufferSize
    772  1328
    773  1328		       60		      rts
    774  1329
    775  1329
    776  1329
    777  1329							;-----------------------------------
    778  1329							; Set FX mode with A,Y (for key command)
    779  1329							;-----------------------------------
    780  1329				   ksetFX
    781  1329		       8d 86 70 	      sta	fxType
    782  132c							;-----------------------------------
    783  132c							; Set FX mode
    784  132c							;-----------------------------------
    785  132c				   setFX
    786  132c		       ad 70 70 	      lda	helpMode
    787  132f		       f0 01		      beq	doShowFX
    788  1331		       60		      rts
    789  1332				   doShowFX
    790  1332							;lda fxType
    791  1332
    792  1332							; Draw name of new sound mode on screen...
    793  1332		       ad 86 70 	      lda	fxType
    794  1335		       0a		      asl
    795  1336		       0a		      asl
    796  1337		       0a		      asl
    797  1338							;lda modeNameOffsets,x
    798  1338							;lda fxNames,x
    799  1338		       aa		      tax
    800  1339		       a0 00		      ldy	#0
    801  133b				   drawModeLoopFX
    802  133b							;lda modeNamesPolyphony,x
    803  133b		       bd 18 2a 	      lda	fxNames,x
    804  133e		       c9 40		      cmp	#64
    805  1340		       30 02		      bmi	showSpaceZFX
    806  1342		       e9 40		      sbc	#64
    807  1344				   showSpaceZFX
    808  1344		       99 af 04 	      sta	1024+FXTEXT,y
    809  1347		       e8		      inx
    810  1348		       c8		      iny
    811  1349		       c0 05		      cpy	#5
    812  134b		       d0 ee		      bne	drawModeLoopFX
    813  134d							; - - - - -
    814  134d							;inx ; Get polyphony value at end of name string...
    815  134d							;inx
    816  134d							;lda modeNamesPolyphony,x
    817  134d							;sta polyphony
    818  134d
    819  134d							;lda #8
    820  134d							;sta bufferSize
    821  134d
    822  134d		       60		      rts
    823  134e
    824  134e
    825  134e
    826  134e				   portSpeedTable
    827  134e		       06 07 09 	      byte.b	6,7,9
    828  1351							;byte 5,7,9
    829  1351
    830  1351							;-----------------------------------
    831  1351							; set port with A,Y (for key command)
    832  1351							;-----------------------------------
    833  1351				   ksetMode
    834  1351							;sta portOn
    835  1351		       8d 1d 70 	      sta	soundMode
    836  1354							;sty portSpd
    837  1354							; . . . . . . . . . .
    838  1354							;-----------------------------------
    839  1354							; Set sound mode
    840  1354							;-----------------------------------
    841  1354				   setMode
    842  1354				   showModeName
    843  1354		       ac 70 70 	      ldy	helpMode
    844  1357		       f0 01		      beq	doShowModeName
    845  1359		       60		      rts
    846  135a				   doShowModeName
    847  135a
    848  135a		       ad 1d 70 	      lda	soundMode	; This probably needs work
    849  135d
    850  135d							; Draw name of new sound mode on screen...
    851  135d		       ae 1d 70 	      ldx	soundMode
    852  1360		       bd 44 33 	      lda	modeNameOffsets,x
    853  1363		       aa		      tax
    854  1364		       a0 00		      ldy	#0
    855  1366				   drawModeLoop
    856  1366		       bd c4 32 	      lda	modeNamesPolyphony,x
    857  1369		       c9 40		      cmp	#64
    858  136b		       30 02		      bmi	showSpaceZ
    859  136d		       e9 40		      sbc	#64
    860  136f				   showSpaceZ
    861  136f		       99 2d 04 	      sta	1024+MODETEXT,y
    862  1372		       e8		      inx
    863  1373		       c8		      iny
    864  1374		       c0 05		      cpy	#5
    865  1376		       d0 ee		      bne	drawModeLoop
    866  1378							; - - - - -
    867  1378		       e8		      inx		; Get polyphony value at end of name string...
    868  1379		       e8		      inx
    869  137a		       bd c4 32 	      lda	modeNamesPolyphony,x
    870  137d		       8d 84 70 	      sta	polyphony
    871  1380
    872  1380		       a9 08		      lda	#8
    873  1382		       8d 80 70 	      sta	bufferSize
    874  1385
    875  1385
    876  1385							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    877  1385							;sta 1024+161 ;DEBUG
    878  1385							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    879  1385
    880  1385
    881  1385							; set up pointer to portamento speed array
    882  1385							; (which is the tuning array)
    883  1385							;lda portSpd
    884  1385							;clc
    885  1385							;adc #4
    886  1385
    887  1385							; New version of code above...
    888  1385		       ad 1d 70 	      lda	soundMode
    889  1388		       29 0f		      and	#$0F	; Get portamento speed
    890  138a		       a8		      tay
    891  138b		       b9 4e 13 	      lda	portSpeedTable,y
    892  138e
    893  138e							;clc
    894  138e							;asl ; X2
    895  138e							;adc #5
    896  138e
    897  138e		       a8		      tay
    898  138f							;	ldy #5 ; portSpd DEBUG
    899  138f		       b9 ba 33 	      lda	tuneArrPtrLL,y
    900  1392		       85 35		      sta	portPtrL
    901  1394		       b9 c4 33 	      lda	tuneArrPtrLH,y
    902  1397		       85 36		      sta	portPtrL+1
    903  1399		       b9 ce 33 	      lda	tuneArrPtrHL,y
    904  139c		       85 47		      sta	portPtrH
    905  139e		       b9 d8 33 	      lda	tuneArrPtrHH,y
    906  13a1		       85 48		      sta	portPtrH+1
    907  13a3		       60		      rts
    908  13a4
    909  13a4
    910  13a4							;----------------------------------------
    911  13a4							; subroutine to set up patch
    912  13a4							; (patch # stored in Y)
    913  13a4							;----------------------------------------
    914  13a4				   setPatch
    915  13a4		       8c 47 70 	      sty	patchSetY
    916  13a7
    917  13a7		       b9 32 28 	      lda	patchVol,y
    918  13aa		       8d 1c 70 	      sta	volume
    919  13ad
    920  13ad		       b9 f6 27 	      lda	patchPaddle,y
    921  13b0		       20 36 11 	      jsr	setPaddles
    922  13b3
    923  13b3							;.....................
    924  13b3		       20 6f 0a 	      jsr	midiPanic
    925  13b6							;.....................
    926  13b6
    927  13b6							; Reset modulation values
    928  13b6		       a9 7f		      lda	#127
    929  13b8		       8d 9c 70 	      sta	filterModValue
    930  13bb		       8d 9e 70 	      sta	pwModValue
    931  13be
    932  13be		       ac 47 70 	      ldy	patchSetY
    933  13c1		       b9 14 28 	      lda	newPatchFiltCut,y
    934  13c4		       8d 9d 70 	      sta	filterSetValue
    935  13c7							;jsr setFilter
    936  13c7
    937  13c7							;lda patchFilt,y
    938  13c7							;sta SID1+SV1PWL
    939  13c7
    940  13c7
    941  13c7		       ac 47 70 	      ldy	patchSetY
    942  13ca		       b9 05 27 	      lda	patchSoundMode,y
    943  13cd		       8d 1d 70 	      sta	soundMode
    944  13d0		       20 54 13 	      jsr	setMode
    945  13d3
    946  13d3		       ac 47 70 	      ldy	patchSetY
    947  13d6		       b9 50 28 	      lda	patchPWL,y
    948  13d9		       8d 02 d4 	      sta	SID1+SV1PWL
    949  13dc		       8d 09 d4 	      sta	SID1+SV2PWL
    950  13df		       8d 10 d4 	      sta	SID1+SV3PWL
    951  13e2		       8d 22 d4 	      sta	SID2+SV1PWL
    952  13e5		       8d 29 d4 	      sta	SID2+SV2PWL
    953  13e8		       8d 30 d4 	      sta	SID2+SV3PWL
    954  13eb		       8d 02 71 	      sta	sidData+SV1PWL
    955  13ee		       8d 09 71 	      sta	sidData+SV2PWL
    956  13f1		       8d 10 71 	      sta	sidData+SV3PWL
    957  13f4
    958  13f4		       ac 47 70 	      ldy	patchSetY
    959  13f7		       b9 6e 28 	      lda	patchPWH,y
    960  13fa		       8d 03 d4 	      sta	SID1+SV1PWH
    961  13fd		       8d 0a d4 	      sta	SID1+SV2PWH
    962  1400		       8d 11 d4 	      sta	SID1+SV3PWH
    963  1403		       8d 23 d4 	      sta	SID2+SV1PWH
    964  1406		       8d 2a d4 	      sta	SID2+SV2PWH
    965  1409		       8d 31 d4 	      sta	SID2+SV3PWH
    966  140c		       8d 03 71 	      sta	sidData+SV1PWH
    967  140f		       8d 0a 71 	      sta	sidData+SV2PWH
    968  1412		       8d 11 71 	      sta	sidData+SV3PWH
    969  1415
    970  1415		       ac 47 70 	      ldy	patchSetY
    971  1418		       b9 8c 28 	      lda	patchWave1,y
    972  141b		       8d 30 70 	      sta	WaveType
    973  141e		       b9 aa 28 	      lda	patchWave2,y
    974  1421		       8d 37 70 	      sta	WaveType2
    975  1424		       b9 c8 28 	      lda	patchWave3,y
    976  1427		       8d 3e 70 	      sta	WaveType3
    977  142a
    978  142a		       ac 47 70 	      ldy	patchSetY
    979  142d		       b9 42 27 	      lda	patchLFO,y
    980  1430		       29 0f		      and	#$0F
    981  1432		       8c 0c 70 	      sty	temp
    982  1435		       20 6d 11 	      jsr	setLFORate
    983  1438		       ac 0c 70 	      ldy	temp
    984  143b		       b9 42 27 	      lda	patchLFO,y
    985  143e		       29 f0		      and	#$F0
    986  1440		       4a		      lsr
    987  1441		       4a		      lsr
    988  1442		       4a		      lsr
    989  1443		       4a		      lsr
    990  1444							;lda #2
    991  1444		       20 57 11 	      jsr	setLFODepth
    992  1447
    993  1447		       ac 0c 70 	      ldy	temp
    994  144a		       b9 7e 27 	      lda	patchAD,y
    995  144d							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
    996  144d							;lda #$F0
    997  144d		       20 4a 12 	      jsr	setAttack
    998  1450		       ac 47 70 	      ldy	patchSetY
    999  1453
   1000  1453		       ac 0c 70 	      ldy	temp
   1001  1456		       b9 9c 27 	      lda	patchSR1,y
   1002  1459		       20 9d 11 	      jsr	setRelease
   1003  145c		       ac 0c 70 	      ldy	temp
   1004  145f		       b9 ba 27 	      lda	patchSR2,y
   1005  1462		       20 89 11 	      jsr	setReleaseOSC2
   1006  1465		       b9 d8 27 	      lda	patchSR3,y
   1007  1468		       20 93 11 	      jsr	setReleaseOSC3
   1008  146b
   1009  146b		       ac 47 70 	      ldy	patchSetY
   1010  146e
   1011  146e		       b9 e6 28 	      lda	patchFilt,y
   1012  1471		       ae 5c 70 	      ldx	filterDisable
   1013  1474		       f0 02		      beq	skipFilterDisable
   1014  1476		       29 f0		      and	#$F0
   1015  1478				   skipFilterDisable
   1016  1478		       8d 17 d4 	      sta	SID1+SFILTC
   1017  147b		       8d 37 d4 	      sta	SID2+SFILTC
   1018  147e		       8d 17 71 	      sta	sidData+SFILTC
   1019  1481		       29 01		      and	#$01
   1020  1483		       f0 07		      beq	skipFilterOnText
   1021  1485		       a0 4c		      ldy	#FILTERTEXT2
   1022  1487		       a2 04		      ldx	#4
   1023  1489		       20 8e 0c 	      jsr	updateText
   1024  148c				   skipFilterOnText
   1025  148c		       ac 47 70 	      ldy	patchSetY
   1026  148f
   1027  148f		       b9 04 29 	      lda	patchVolMode,y
   1028  1492		       29 f0		      and	#$F0
   1029  1494		       0d 1c 70 	      ora	volume
   1030  1497		       8d 24 70 	      sta	volModeRAM
   1031  149a		       20 80 12 	      jsr	setVolume
   1032  149d		       ac 47 70 	      ldy	patchSetY
   1033  14a0
   1034  14a0		       b9 60 27 	      lda	patchOctave,y
   1035  14a3		       20 d0 12 	      jsr	setOctave
   1036  14a6		       ac 47 70 	      ldy	patchSetY
   1037  14a9
   1038  14a9		       b9 24 27 	      lda	patchFX,y
   1039  14ac		       8d 86 70 	      sta	fxType
   1040  14af		       20 2c 13 	      jsr	setFX
   1041  14b2
   1042  14b2		       20 b6 14 	      jsr	showPatchName
   1043  14b5
   1044  14b5		       60		      rts
   1045  14b6							;------------------------ end of setpatch
   1046  14b6
   1047  14b6				   showPatchName
   1048  14b6		       ad 70 70 	      lda	helpMode
   1049  14b9		       f0 01		      beq	doShowPatchName
   1050  14bb		       60		      rts
   1051  14bc				   doShowPatchName
   1052  14bc		       ad 47 70 	      lda	patchSetY
   1053  14bf		       29 f0		      and	#%11110000
   1054  14c1		       d0 1f		      bne	patchNameSecondBank
   1055  14c3							;tay
   1056  14c3		       ac 47 70 	      ldy	patchSetY
   1057  14c6		       c8		      iny
   1058  14c7		       98		      tya
   1059  14c8		       0a		      asl
   1060  14c9		       0a		      asl
   1061  14ca		       0a		      asl
   1062  14cb		       0a		      asl
   1063  14cc		       a8		      tay
   1064  14cd		       88		      dey
   1065  14ce		       a2 0f		      ldx	#15
   1066  14d0				   patchText
   1067  14d0		       b9 05 25 	      lda	patchName,y
   1068  14d3		       c9 40		      cmp	#64
   1069  14d5		       30 03		      bmi	pshowSpace
   1070  14d7		       38		      sec
   1071  14d8		       e9 40		      sbc	#64
   1072  14da				   pshowSpace
   1073  14da		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1074  14dd		       88		      dey
   1075  14de		       ca		      dex
   1076  14df		       10 ef		      bpl	patchText
   1077  14e1		       60		      rts
   1078  14e2
   1079  14e2				   patchNameSecondBank
   1080  14e2							;tay
   1081  14e2		       ac 47 70 	      ldy	patchSetY
   1082  14e5		       c8		      iny
   1083  14e6		       98		      tya
   1084  14e7		       0a		      asl
   1085  14e8		       0a		      asl
   1086  14e9		       0a		      asl
   1087  14ea		       0a		      asl
   1088  14eb		       a8		      tay
   1089  14ec		       88		      dey
   1090  14ed		       a2 0f		      ldx	#15
   1091  14ef				   patchText2
   1092  14ef		       b9 05 26 	      lda	patchName2,y
   1093  14f2		       c9 40		      cmp	#64
   1094  14f4		       30 03		      bmi	pshowSpace2
   1095  14f6		       38		      sec
   1096  14f7		       e9 40		      sbc	#64
   1097  14f9				   pshowSpace2
   1098  14f9		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1099  14fc		       88		      dey
   1100  14fd		       ca		      dex
   1101  14fe		       10 ef		      bpl	patchText2
   1102  1500		       60		      rts
   1103  1501
   1104  1501
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sound.asm LEVEL 2 PASS 2
      0  1501					      include	"cynth_sound.asm"
      1  1501				   processSoundDriver
      2  1501							; determine whether to use portamento player
      3  1501							; or regular player...
      4  1501		       ad 1d 70 	      lda	soundMode
      5  1504		       f0 28		      beq	polyMode
      6  1506		       29 20		      and	#MONO_MASK
      7  1508		       f0 03		      beq	nextSoundModeCheck1
      8  150a		       4c 4e 15 	      jmp	playMono
      9  150d				   nextSoundModeCheck1
     10  150d		       ad 1d 70 	      lda	soundMode
     11  1510		       29 10		      and	#PORT_MASK
     12  1512		       f0 03		      beq	nextSoundModeCheck2
     13  1514		       4c bd 19 	      jmp	playPort
     14  1517				   nextSoundModeCheck2
     15  1517		       ad 1d 70 	      lda	soundMode
     16  151a		       29 40		      and	#ARP_MASK
     17  151c		       f0 03		      beq	nextSoundModeCheck3
     18  151e		       4c 0e 16 	      jmp	playArp
     19  1521				   nextSoundModeCheck3
     20  1521		       ad 1d 70 	      lda	soundMode
     21  1524		       29 08		      and	#CHAN6_MASK
     22  1526		       f0 03		      beq	nextSoundModeCheck4
     23  1528		       4c 8d 16 	      jmp	play6Chan
     24  152b				   nextSoundModeCheck4
     25  152b		       4c a9 15 	      jmp	playFifths	; Otherwise, it's a 5ths mode
     26  152e							;lda soundMode
     27  152e							;cmp #MODE_5THS
     28  152e							;bne endSoundMode
     29  152e							;jmp playFifths
     30  152e							;endSoundMode:
     31  152e							;brk ; Shouldn't ever reach this point in code
     32  152e
     33  152e
     34  152e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     35  152e							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
     36  152e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     37  152e				   polyMode
     38  152e		       a2 02		      ldx	#2
     39  1530				   polyCopyLoop
     40  1530		       bd a0 70 	      lda	noteNumArray,x
     41  1533		       9d b0 70 	      sta	playNoteArray,x
     42  1536		       ca		      dex
     43  1537		       10 f7		      bpl	polyCopyLoop
     44  1539
     45  1539		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
     46  153c		       8d b3 70 	      sta	playNoteArray+3
     47  153f		       ad a1 70 	      lda	noteNumArray+1
     48  1542		       8d b4 70 	      sta	playNoteArray+4
     49  1545		       ad a2 70 	      lda	noteNumArray+2
     50  1548		       8d b5 70 	      sta	playNoteArray+5
     51  154b
     52  154b		       4c b3 18 	      jmp	sixVoicePlayer
     53  154e
     54  154e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     55  154e							; MONO-STACK SOUND DRIVER
     56  154e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     57  154e				   playMono
     58  154e		       ad a0 70 	      lda	noteNumArray
     59  1551				   playMonoWithA
     60  1551		       8d 0c 70 	      sta	temp
     61  1554		       8d b0 70 	      sta	playNoteArray+0
     62  1557		       c9 ff		      cmp	#255
     63  1559		       f0 29		      beq	monoMute
     64  155b		       ae 1d 70 	      ldx	soundMode
     65  155e							;dex
     66  155e							;beq noRaiseOctave
     67  155e		       e0 21		      cpx	#MODE_MONO2
     68  1560		       f0 07		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
     69  1562		       e0 32		      cpx	#MODE_MONOPORT2
     70  1564		       f0 03		      beq	noRaiseOctave
     71  1566							;-------------------------------------
     72  1566		       18		      clc
     73  1567		       69 0c		      adc	#12
     74  1569				   noRaiseOctave
     75  1569		       8d b1 70 	      sta	playNoteArray+1
     76  156c							;lda noteNumArray
     77  156c		       ad 0c 70 	      lda	temp
     78  156f		       ae 1d 70 	      ldx	soundMode
     79  1572		       e0 21		      cpx	#MODE_MONO2
     80  1574		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
     81  1576		       38		      sec
     82  1577		       e9 0c		      sbc	#12
     83  1579		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
     84  157b		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
     85  157e							;-------------------------------------
     86  157e				   noDropOctave
     87  157e		       8d b2 70 	      sta	playNoteArray+2
     88  1581		       4c 8a 15 	      jmp	doubleToStereo
     89  1584				   monoMute
     90  1584		       8d b1 70 	      sta	playNoteArray+1
     91  1587		       8d b2 70 	      sta	playNoteArray+2
     92  158a
     93  158a				   doubleToStereo
     94  158a		       ad b0 70 	      lda	playNoteArray+0
     95  158d		       8d b3 70 	      sta	playNoteArray+3
     96  1590		       ad b1 70 	      lda	playNoteArray+1
     97  1593		       8d b4 70 	      sta	playNoteArray+4
     98  1596		       ad b2 70 	      lda	playNoteArray+2
     99  1599		       8d b5 70 	      sta	playNoteArray+5
    100  159c
    101  159c							;;- NEW! ------------------------------;;
    102  159c		       ad 1d 70 	      lda	soundMode
    103  159f		       29 10		      and	#PORT_MASK
    104  15a1		       f0 03		      beq	continueToSixVoice7
    105  15a3		       4c c8 19 	      jmp	portPlayer	; SKIP TO PLAYER
    106  15a6							;jmp playPort ; ORIGINAL
    107  15a6							;;-------------------------------------;;
    108  15a6
    109  15a6				   continueToSixVoice7
    110  15a6		       4c b3 18 	      jmp	sixVoicePlayer
    111  15a9
    112  15a9							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    113  15a9							; 5THS SOUND DRIVER (DEFAULT)
    114  15a9							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    115  15a9				   playFifths
    116  15a9							;jmp polyMode ; DEBUG!
    117  15a9		       20 18 21 	      jsr	doSort
    118  15ac		       a2 02		      ldx	#2
    119  15ae				   fifthsCopyLoop
    120  15ae		       bd a0 70 	      lda	noteNumArray,x
    121  15b1		       9d b0 70 	      sta	playNoteArray,x
    122  15b4		       ca		      dex
    123  15b5		       10 f7		      bpl	fifthsCopyLoop
    124  15b7							; Add 5th
    125  15b7		       ad b0 70 	      lda	playNoteArray
    126  15ba		       c9 ff		      cmp	#255
    127  15bc		       f0 26		      beq	end5ths
    128  15be		       ad b1 70 	      lda	playNoteArray+1
    129  15c1		       c9 ff		      cmp	#255
    130  15c3		       d0 0c		      bne	checkThird
    131  15c5							; Found a note and an empty slot, put 5th in second slot
    132  15c5		       ad b0 70 	      lda	playNoteArray
    133  15c8		       18		      clc
    134  15c9		       69 07		      adc	#7
    135  15cb		       8d b1 70 	      sta	playNoteArray+1
    136  15ce		       4c e4 15 	      jmp	end5ths
    137  15d1
    138  15d1				   checkThird
    139  15d1		       ad b2 70 	      lda	playNoteArray+2
    140  15d4		       c9 ff		      cmp	#255
    141  15d6		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
    142  15d8							; Third slot is free, so put 5th is 3rd slot
    143  15d8		       ad b1 70 	      lda	playNoteArray+1
    144  15db		       18		      clc
    145  15dc		       69 07		      adc	#7
    146  15de		       8d b2 70 	      sta	playNoteArray+2
    147  15e1		       4c e4 15 	      jmp	end5ths
    148  15e4
    149  15e4				   end5ths
    150  15e4		       ad b0 70 	      lda	playNoteArray+0
    151  15e7		       8d b3 70 	      sta	playNoteArray+3
    152  15ea		       ad b1 70 	      lda	playNoteArray+1
    153  15ed		       8d b4 70 	      sta	playNoteArray+4
    154  15f0		       ad b2 70 	      lda	playNoteArray+2
    155  15f3		       8d b5 70 	      sta	playNoteArray+5
    156  15f6
    157  15f6		       ad 1d 70 	      lda	soundMode
    158  15f9		       c9 02		      cmp	#MODE_5PORT
    159  15fb		       f0 03		      beq	playPort5th
    160  15fd		       4c b3 18 	      jmp	sixVoicePlayer
    161  1600				   playPort5th
    162  1600		       4c c8 19 	      jmp	portPlayer
    163  1603
    164  1603
    165  1603
    166  1603
    167  1603				   arpSpeedTable
    168  1603		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
    169  160e
    170  160e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    171  160e							; ARP STEREO SOUND DRIVER
    172  160e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    173  160e				   playArp
    174  160e
    175  160e							; Figure out arp speed setting...
    176  160e		       ad 1d 70 	      lda	soundMode
    177  1611		       29 0f		      and	#$0F
    178  1613		       aa		      tax
    179  1614		       bd 03 16 	      lda	arpSpeedTable,x
    180  1617		       8d 0c 70 	      sta	temp
    181  161a
    182  161a		       ae 1d 70 	      ldx	soundMode
    183  161d		       e0 43		      cpx	#MODE_ARP4
    184  161f		       f0 35		      beq	playArpDown
    185  1621		       e0 44		      cpx	#MODE_ARP5
    186  1623		       f0 31		      beq	playArpDown
    187  1625
    188  1625							;***********
    189  1625							; ARP UP
    190  1625							;***********
    191  1625							; Increment arpOffset pointer...
    192  1625		       ad 03 70 	      lda	Frame
    193  1628		       2d 0c 70 	      and	temp	; Arp speed
    194  162b		       d0 03		      bne	skipArpAdvance
    195  162d		       ee 85 70 	      inc	arpOffset
    196  1630				   skipArpAdvance
    197  1630
    198  1630							; Sort note buffer
    199  1630		       20 18 21 	      jsr	doSort
    200  1633
    201  1633							; Count the number of notes...
    202  1633		       a2 00		      ldx	#0
    203  1635		       a9 ff		      lda	#255
    204  1637				   noteCount
    205  1637		       dd a0 70 	      cmp	noteNumArray,x
    206  163a		       f0 06		      beq	quitNoteCount
    207  163c		       e8		      inx
    208  163d		       ec 80 70 	      cpx	bufferSize
    209  1640		       d0 f5		      bne	noteCount
    210  1642				   quitNoteCount
    211  1642							; X now contains the note count
    212  1642
    213  1642							; Make sure arpOffset isn't past end...
    214  1642		       ca		      dex
    215  1643		       ec 85 70 	      cpx	arpOffset
    216  1646		       10 05		      bpl	noArpOffsetReset
    217  1648		       a9 00		      lda	#0	; Reset to zero
    218  164a		       8d 85 70 	      sta	arpOffset
    219  164d				   noArpOffsetReset
    220  164d
    221  164d							; Play single arp note...
    222  164d		       ac 85 70 	      ldy	arpOffset
    223  1650		       b9 a0 70 	      lda	noteNumArray,y
    224  1653
    225  1653		       4c 51 15 	      jmp	playMonoWithA
    226  1656
    227  1656							;lda soundMode
    228  1656							;and #PORT_MASK
    229  1656							;beq nextSoundModeCheck2
    230  1656							;jmp playPort
    231  1656
    232  1656
    233  1656							;***********
    234  1656							; ARP DOWN
    235  1656							;***********
    236  1656				   playArpDown
    237  1656							; Decrement arpOffset pointer...
    238  1656		       ad 03 70 	      lda	Frame
    239  1659		       2d 0c 70 	      and	temp	; Arp speed
    240  165c		       d0 03		      bne	skipArpAdvance2
    241  165e		       ce 85 70 	      dec	arpOffset
    242  1661				   skipArpAdvance2
    243  1661
    244  1661							; Sort note buffer
    245  1661		       20 18 21 	      jsr	doSort
    246  1664
    247  1664							; Count the number of notes...
    248  1664		       a2 00		      ldx	#0
    249  1666		       a9 ff		      lda	#255
    250  1668				   noteCount2
    251  1668		       dd a0 70 	      cmp	noteNumArray,x
    252  166b		       f0 06		      beq	quitNoteCount2
    253  166d		       e8		      inx
    254  166e		       ec 80 70 	      cpx	bufferSize
    255  1671		       30 f5		      bmi	noteCount2
    256  1673				   quitNoteCount2
    257  1673							; X now contains the note count
    258  1673		       8e 0c 70 	      stx	temp
    259  1676
    260  1676							; Make sure arpOffset isn't at zero...
    261  1676		       ad 85 70 	      lda	arpOffset
    262  1679		       10 09		      bpl	noArpOffsetReset2
    263  167b		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
    264  167e		       f0 01		      beq	skipTempDecrement
    265  1680		       ca		      dex
    266  1681				   skipTempDecrement
    267  1681		       8e 85 70 	      stx	arpOffset
    268  1684				   noArpOffsetReset2
    269  1684
    270  1684							; Play single arp note...
    271  1684		       ac 85 70 	      ldy	arpOffset
    272  1687		       b9 a0 70 	      lda	noteNumArray,y
    273  168a
    274  168a		       4c 51 15 	      jmp	playMonoWithA
    275  168d
    276  168d
    277  168d							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    278  168d							; 6-CHANNEL MONO SOUND DRIVER
    279  168d							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    280  168d				   play6Chan
    281  168d		       ad a0 70 	      lda	noteNumArray+0
    282  1690		       8d b0 70 	      sta	playNoteArray+0
    283  1693		       ad a1 70 	      lda	noteNumArray+1
    284  1696		       8d b4 70 	      sta	playNoteArray+4
    285  1699		       ad a2 70 	      lda	noteNumArray+2
    286  169c		       8d b2 70 	      sta	playNoteArray+2
    287  169f
    288  169f		       ad a3 70 	      lda	noteNumArray+3
    289  16a2		       8d b3 70 	      sta	playNoteArray+3
    290  16a5		       ad a4 70 	      lda	noteNumArray+4
    291  16a8		       8d b1 70 	      sta	playNoteArray+1
    292  16ab		       ad a5 70 	      lda	noteNumArray+5
    293  16ae		       8d b5 70 	      sta	playNoteArray+5
    294  16b1
    295  16b1		       4c b3 18 	      jmp	sixVoicePlayer
    296  16b4
    297  16b4
    298  16b4				   retuneNoteShiftTable
    299  16b4		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
    300  16cd		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
    301  16e6		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
    302  16ff		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
    303  1717		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    304  171d		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    305  1736		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    306  174f
    307  174f							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    308  174f							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    309  174f							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
    310  174f							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
    311  174f		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
    312  1768		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
    313  1781		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
    314  179a		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
    315  17b3
    316  17b3				   retuneTable
    317  17b3		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    318  17cc		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    319  17e5		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    320  17fe		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    321  1817		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    322  181d		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    323  1836		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    324  184f		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    325  1868		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    326  1881		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    327  189a		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    328  18b3							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    329  18b3
    330  18b3							;************************************************
    331  18b3							; 6-VOICE SOUND DRIVER
    332  18b3							;************************************************
    333  18b3				   sixVoicePlayer
    334  18b3
    335  18b3							;inc 1024 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    336  18b3
    337  18b3							; Calculate master tuning...
    338  18b3		       ad f3 70 	      lda	systemTuning
    339  18b6		       18		      clc
    340  18b7		       6d f0 70 	      adc	midiTuning
    341  18ba		       8d f4 70 	      sta	masterTuning
    342  18bd		       a8		      tay
    343  18be
    344  18be							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    345  18be							; DEBUG - SHOW TUNING DATA
    346  18be				  -	      IF	DEBUG_DISPLAY=1
    347  18be				  -	      tya
    348  18be				  -	      sta	temp
    349  18be				  -	      ldy	#20
    350  18be				  -	      ldx	#20
    351  18be				  -	      jsr	displayHex
    352  18be				  -	      lda	temp
    353  18be				  -	      ldy	temp
    354  18be					      ENDIF
    355  18be							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  18be
    357  18be		       b9 b3 17 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
    358  18c1		       18		      clc
    359  18c2		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
    360  18c4
    361  18c4							;inc 1025 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    362  18c4
    363  18c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  18c4							; DEBUG - SHOW TUNING DATA
    365  18c4				  -	      IF	DEBUG_DISPLAY=1
    366  18c4				  -	      sta	temp
    367  18c4				  -	      ldy	#21
    368  18c4				  -	      ldx	#20
    369  18c4				  -	      jsr	displayHex
    370  18c4				  -	      lda	temp
    371  18c4				  -	      ldy	temp
    372  18c4					      ENDIF
    373  18c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    374  18c4
    375  18c4		       a8		      tay
    376  18c5		       b9 ba 33 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
    377  18c8		       85 22		      sta	tunePtrL
    378  18ca		       b9 c4 33 	      lda	tuneArrPtrLH,y
    379  18cd		       85 23		      sta	tunePtrL+1
    380  18cf		       b9 ce 33 	      lda	tuneArrPtrHL,y
    381  18d2		       85 24		      sta	tunePtrH
    382  18d4		       b9 d8 33 	      lda	tuneArrPtrHH,y
    383  18d7		       85 25		      sta	tunePtrH+1
    384  18d9
    385  18d9							;inc 1026 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    386  18d9
    387  18d9							; Look up note shift from master tuning...
    388  18d9		       ac f4 70 	      ldy	masterTuning
    389  18dc		       b9 b4 16 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
    390  18df		       8d f6 70 	      sta	noteShift
    391  18e2							; - - - - - - - - - - - - -
    392  18e2		       a2 05		      ldx	#5
    393  18e4				   shiftNoteLoop
    394  18e4		       bd b0 70 	      lda	playNoteArray,x
    395  18e7		       c9 ff		      cmp	#255
    396  18e9		       f0 07		      beq	skipShiftNote
    397  18eb		       18		      clc
    398  18ec		       6d f6 70 	      adc	noteShift
    399  18ef		       9d b0 70 	      sta	playNoteArray,x
    400  18f2				   skipShiftNote
    401  18f2		       ca		      dex
    402  18f3		       10 ef		      bpl	shiftNoteLoop
    403  18f5
    404  18f5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  18f5							; DEBUG - SHOW TUNING DATA
    406  18f5				  -	      IF	DEBUG_DISPLAY=1
    407  18f5				  -	      sta	temp
    408  18f5				  -	      ldy	#22
    409  18f5				  -	      ldx	#20
    410  18f5				  -	      jsr	displayHex
    411  18f5				  -	      lda	temp
    412  18f5				  -	      ldy	temp
    413  18f5					      ENDIF
    414  18f5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    415  18f5
    416  18f5							; For each voice on SID #1...
    417  18f5		       a2 02		      ldx	#2
    418  18f7				   NsetRegsSidA
    419  18f7		       8e 0c 70 	      stx	temp	; save current voice number
    420  18fa		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
    421  18fd		       bd 3d 29 	      lda	voiceOffset,x	;
    422  1900		       aa		      tax
    423  1901		       c0 ff		      cpy	#255
    424  1903		       d0 04		      bne	NsoundOnSidA
    425  1905		       a9 00		      lda	#0
    426  1907		       f0 3f		      beq	NsoundOffSidA
    427  1909				   NsoundOnSidA
    428  1909
    429  1909							;inc 1027 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    430  1909
    431  1909							; load note and deal
    432  1909							; with tuning ------;
    433  1909		       ad 61 70 	      lda	NTSCmode	;
    434  190c		       f0 14		      beq	palPlaySidA	;
    435  190e				   ntscPlaySidA 		;
    436  190e		       18		      clc		;
    437  190f		       b9 26 34 	      lda	NSoundLArr,y	;
    438  1912		       71 22		      adc	(tunePtrL),y	;
    439  1914		       8d 43 70 	      sta	pitchTmpL	;
    440  1917		       b9 6e 34 	      lda	NSoundHArr,y	;
    441  191a		       71 24		      adc	(tunePtrH),y	;
    442  191c		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    443  191f		       4c 33 19 	      jmp	skipPalPlaySidA	;
    444  1922							;- - - - - - - - -;
    445  1922				   palPlaySidA		;
    446  1922		       18		      clc		;
    447  1923		       b9 b6 34 	      lda	PSoundLArr,y	;
    448  1926		       71 22		      adc	(tunePtrL),y	;
    449  1928		       8d 43 70 	      sta	pitchTmpL	;
    450  192b		       b9 09 35 	      lda	PSoundHArr,y	;
    451  192e		       71 24		      adc	(tunePtrH),y	;
    452  1930		       8d 44 70 	      sta	pitchTmpH	;
    453  1933				   skipPalPlaySidA		;;;;;
    454  1933
    455  1933							;inc 1024+40 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    456  1933							;lda shiftL1
    457  1933							;sta 1024+120
    458  1933							;lda shiftH1
    459  1933							;sta 1025+120
    460  1933
    461  1933							; play SID #1
    462  1933		       18		      clc
    463  1934		       ad 43 70 	      lda	pitchTmpL
    464  1937		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
    465  193a		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
    466  193d		       ad 44 70 	      lda	pitchTmpH
    467  1940		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
    468  1943		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
    469  1946
    470  1946		       a9 01		      lda	#1
    471  1948							; Set voice gates on or off
    472  1948				   NsoundOffSidA
    473  1948		       1d 30 70 	      ora	WaveType,x	; changed to Y
    474  194b		       9d 04 d4 	      sta	SID1+SV1WAVE,x	; SID 1 ONLY  changed to Y
    475  194e							;sta SID2+SV1WAVE,y ; changed to Y (why was this line disabled?)
    476  194e		       9d 04 71 	      sta	sidData+SV1WAVE,x	;BUG BUG BUG BUG BUG BUG  changed to Y
    477  1951		       ae 0c 70 	      ldx	temp
    478  1954		       ca		      dex
    479  1955		       30 03		      bmi	quitPlayLoop
    480  1957		       4c f7 18 	      jmp	NsetRegsSidA
    481  195a				   quitPlayLoop
    482  195a
    483  195a							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    484  195a							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    485  195a							; For each voice on SID #2...
    486  195a		       a2 02		      ldx	#2
    487  195c				   NsetRegsSidB
    488  195c		       8e 0c 70 	      stx	temp
    489  195f							;lda playNoteArray+3,x
    490  195f
    491  195f		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
    492  1962		       bd 3d 29 	      lda	voiceOffset,x
    493  1965
    494  1965		       aa		      tax
    495  1966		       c0 ff		      cpy	#255
    496  1968		       d0 04		      bne	NsoundOnSidB
    497  196a		       a9 00		      lda	#0
    498  196c		       f0 3f		      beq	NsoundOffSidB
    499  196e				   NsoundOnSidB
    500  196e
    501  196e							; load note and deal
    502  196e							; with tuning ------;
    503  196e		       ad 61 70 	      lda	NTSCmode	;
    504  1971		       f0 14		      beq	palPlaySidB	;
    505  1973				   ntscPlaySidB 		;
    506  1973		       18		      clc		;
    507  1974		       b9 26 34 	      lda	NSoundLArr,y	;
    508  1977		       71 22		      adc	(tunePtrL),y	;
    509  1979		       8d 43 70 	      sta	pitchTmpL	;
    510  197c		       b9 6e 34 	      lda	NSoundHArr,y	;
    511  197f		       71 24		      adc	(tunePtrH),y	;
    512  1981		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    513  1984		       4c 98 19 	      jmp	skipPalPlaySidB	;
    514  1987				   palPlaySidB		;
    515  1987		       18		      clc		;
    516  1988		       b9 b6 34 	      lda	PSoundLArr,y	;
    517  198b		       71 22		      adc	(tunePtrL),y	;
    518  198d		       8d 43 70 	      sta	pitchTmpL	;
    519  1990		       b9 09 35 	      lda	PSoundHArr,y	;
    520  1993		       71 24		      adc	(tunePtrH),y	;
    521  1995		       8d 44 70 	      sta	pitchTmpH	;
    522  1998				   skipPalPlaySidB		;;;;;
    523  1998
    524  1998							; play SID #2
    525  1998		       18		      clc
    526  1999		       ad 43 70 	      lda	pitchTmpL
    527  199c		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
    528  199f		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
    529  19a2		       ad 44 70 	      lda	pitchTmpH
    530  19a5		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
    531  19a8		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
    532  19ab
    533  19ab		       a9 01		      lda	#1
    534  19ad							; Set voice gates on or off
    535  19ad				   NsoundOffSidB
    536  19ad		       1d 30 70 	      ora	WaveType,x	; changed to Y
    537  19b0							;sta SID1+SV1WAVE,x ; changed to Y
    538  19b0		       9d 24 d4 	      sta	SID2+SV1WAVE,x	; SID2 ONLY changed to Y
    539  19b3		       9d 04 71 	      sta	sidData+SV1WAVE,x	; changed to Y
    540  19b6		       ae 0c 70 	      ldx	temp
    541  19b9		       ca		      dex
    542  19ba		       10 a0		      bpl	NsetRegsSidB
    543  19bc
    544  19bc							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    545  19bc							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    546  19bc		       60		      rts
    547  19bd
    548  19bd
    549  19bd
    550  19bd							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    551  19bd							; PORTAMENTO SOUND SETUP
    552  19bd							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    553  19bd				   playPort
    554  19bd
    555  19bd		       a2 02		      ldx	#2
    556  19bf				   portCopyLoop
    557  19bf		       bd a0 70 	      lda	noteNumArray,x
    558  19c2		       9d b0 70 	      sta	playNoteArray,x
    559  19c5		       ca		      dex
    560  19c6		       10 f7		      bpl	portCopyLoop
    561  19c8
    562  19c8							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
    563  19c8							;sta playNoteArray+3
    564  19c8							;lda noteNumArray+1
    565  19c8							;sta playNoteArray+4
    566  19c8							;lda noteNumArray+2
    567  19c8							;sta playNoteArray+5
    568  19c8
    569  19c8							;jmp sixVoicePlayer
    570  19c8
    571  19c8							;jmp portPlayer
    572  19c8
    573  19c8
    574  19c8
    575  19c8							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    576  19c8							; PORTAMENTO 3-VOICE SOUND DRIVER
    577  19c8							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    578  19c8				   portPlayer
    579  19c8							; set up pointer to portamento speed array
    580  19c8							; (which is the tuning array)
    581  19c8		       a2 02		      ldx	#2
    582  19ca				   portLoop
    583  19ca		       bc b0 70 	      ldy	playNoteArray,x
    584  19cd							;ldy KeyA,x
    585  19cd		       c0 ff		      cpy	#255
    586  19cf		       d0 03		      bne	noPlayNote
    587  19d1		       4c e4 19 	      jmp	playNote
    588  19d4				   noPlayNote
    589  19d4		       ad 03 70 	      lda	Frame
    590  19d7		       29 01		      and	#1
    591  19d9		       f0 03		      beq	noPlayNote2
    592  19db		       4c e4 19 	      jmp	playNote
    593  19de				   noPlayNote2
    594  19de
    595  19de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  19de							; DEBUG - SHOW DATA
    597  19de				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    598  19de				  -	      lda	pitchHA,x	;
    599  19de				  -	      stx	tempX
    600  19de				  -	      sty	tempY
    601  19de				  -	      sta	tempA
    602  19de				  -			;- - - - -
    603  19de				  -			;sta temp
    604  19de				  -	      ldx	#20
    605  19de				  -	      ldy	#6
    606  19de				  -	      jsr	displayHex
    607  19de				  -			;lda temp
    608  19de				  -			;ldy temp
    609  19de				  -			;- - - - -
    610  19de				  -	      ldx	tempX
    611  19de				  -	      ldy	tempY
    612  19de				  -	      lda	tempA
    613  19de					      ENDIF
    614  19de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    615  19de
    616  19de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    617  19de							; DEBUG - SHOW DATA
    618  19de				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    619  19de				  -	      lda	NSoundHArr,y	;
    620  19de				  -	      stx	tempX
    621  19de				  -	      sty	tempY
    622  19de				  -	      sta	tempA
    623  19de				  -			;- - - - -
    624  19de				  -			;sta temp
    625  19de				  -	      ldx	#20
    626  19de				  -	      ldy	#7
    627  19de				  -	      jsr	displayHex
    628  19de				  -			;lda temp
    629  19de				  -			;ldy temp
    630  19de				  -			;- - - - -
    631  19de				  -	      ldx	tempX
    632  19de				  -	      ldy	tempY
    633  19de				  -	      lda	tempA
    634  19de					      ENDIF
    635  19de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    636  19de
    637  19de
    638  19de		       20 3c 1a 	      jsr	updatePortPosition
    639  19e1		       20 3c 1a 	      jsr	updatePortPosition
    640  19e4
    641  19e4
    642  19e4				   playNote
    643  19e4
    644  19e4							;inc 1024+80 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    645  19e4
    646  19e4							; deal with tuning
    647  19e4		       18		      clc
    648  19e5		       bd 16 70 	      lda	pitchLA,x
    649  19e8		       71 22		      adc	(tunePtrL),y
    650  19ea		       8d 43 70 	      sta	pitchTmpL
    651  19ed		       bd 19 70 	      lda	pitchHA,x
    652  19f0		       71 24		      adc	(tunePtrH),y
    653  19f2		       8d 44 70 	      sta	pitchTmpH
    654  19f5
    655  19f5		       98		      tya		; Move the current key to ACC
    656  19f6		       bc 3d 29 	      ldy	voiceOffset,x
    657  19f9		       c9 ff		      cmp	#255	; Check for note off
    658  19fb		       d0 04		      bne	soundOn
    659  19fd		       a9 00		      lda	#0
    660  19ff		       f0 28		      beq	soundOff
    661  1a01				   soundOn
    662  1a01
    663  1a01							;inc 1025+80 ; DEBUG !!!!!!!!!!!!!!!!!!!!
    664  1a01
    665  1a01							;lda shiftL1
    666  1a01							;sta 1024+120
    667  1a01							;lda shiftH1
    668  1a01							;sta 1025+120
    669  1a01
    670  1a01							; play SID #1
    671  1a01		       18		      clc
    672  1a02		       ad 43 70 	      lda	pitchTmpL
    673  1a05		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
    674  1a08		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
    675  1a0b		       ad 44 70 	      lda	pitchTmpH
    676  1a0e		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
    677  1a11		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
    678  1a14
    679  1a14							; play SID #2
    680  1a14		       18		      clc
    681  1a15		       ad 43 70 	      lda	pitchTmpL
    682  1a18		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
    683  1a1b		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
    684  1a1e		       ad 44 70 	      lda	pitchTmpH
    685  1a21		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
    686  1a24		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
    687  1a27
    688  1a27				   afterDStep
    689  1a27
    690  1a27		       a9 01		      lda	#1
    691  1a29							; Set voice gates on or off
    692  1a29				   soundOff
    693  1a29							;ldy voiceOffset,x ; added this line for copying, but implemented above...
    694  1a29		       19 30 70 	      ora	WaveType,y
    695  1a2c		       99 04 d4 	      sta	SID1+SV1WAVE,y
    696  1a2f		       99 24 d4 	      sta	SID2+SV1WAVE,y
    697  1a32		       99 04 71 	      sta	sidData+SV1WAVE,y	; changed to Y
    698  1a35
    699  1a35		       ca		      dex
    700  1a36		       30 03		      bmi	quitPort
    701  1a38		       4c ca 19 	      jmp	portLoop
    702  1a3b				   quitPort
    703  1a3b				   skipPort
    704  1a3b		       60		      rts
    705  1a3c							;--------------------------------------------------------------------
    706  1a3c							;end of portamento play loop
    707  1a3c							;--------------------------------------------------------------------
    708  1a3c
    709  1a3c
    710  1a3c				   updatePortPosition
    711  1a3c							;check portamn direction;
    712  1a3c		       ad 61 70 	      lda	NTSCmode	;
    713  1a3f		       f0 0c		      beq	palPortH	;
    714  1a41				   ntscPortH		;
    715  1a41		       bd 19 70 	      lda	pitchHA,x	;
    716  1a44		       d9 6e 34 	      cmp	NSoundHArr,y	;
    717  1a47		       f0 10		      beq	portCheckL	;
    718  1a49		       30 2a		      bmi	portUp	; PAL/NTSC split
    719  1a4b		       10 3e		      bpl	portDown	;
    720  1a4d							;bpl portUp				; PAL/NTSC split
    721  1a4d							;bmi portDown			;
    722  1a4d				   palPortH		;
    723  1a4d		       bd 19 70 	      lda	pitchHA,x	;
    724  1a50		       d9 09 35 	      cmp	PSoundHArr,y	;
    725  1a53		       f0 04		      beq	portCheckL	;
    726  1a55		       30 1e		      bmi	portUp	;
    727  1a57		       10 32		      bpl	portDown	;;;;;
    728  1a59							;bpl portUp				;
    729  1a59							;bmi portDown		;;;;;
    730  1a59
    731  1a59				   portCheckL
    732  1a59
    733  1a59							;check portamn lowbyte--;
    734  1a59		       ad 61 70 	      lda	NTSCmode	;
    735  1a5c		       f0 0d		      beq	palPortL	;
    736  1a5e				   ntscPortL		;
    737  1a5e		       bd 16 70 	      lda	pitchLA,x	;
    738  1a61		       d9 26 34 	      cmp	NSoundLArr,y	;
    739  1a64		       f0 69		      beq	endPortUpdate
    740  1a66							;beq playNote ; note on	;
    741  1a66							;the stop so play	;
    742  1a66		       b0 23		      bcs	portDown	; PAL/NTSC split
    743  1a68							;bcs portUp			; PAL/NTSC split
    744  1a68		       4c 75 1a 	      jmp	skipPalPortL	;
    745  1a6b				   palPortL		;
    746  1a6b		       bd 16 70 	      lda	pitchLA,x	;
    747  1a6e		       d9 b6 34 	      cmp	PSoundLArr,y	;
    748  1a71		       f0 5c		      beq	endPortUpdate
    749  1a73							;beq playNote ; note on	;
    750  1a73							;the stop so play	;
    751  1a73		       b0 16		      bcs	portDown	;
    752  1a75							;bcs portUp				;
    753  1a75				   skipPalPortL 		;;;;;
    754  1a75
    755  1a75
    756  1a75				   portUp
    757  1a75		       bd 16 70 	      lda	pitchLA,x
    758  1a78		       18		      clc
    759  1a79		       71 35		      adc	(portPtrL),y
    760  1a7b		       9d 16 70 	      sta	pitchLA,x
    761  1a7e		       bd 19 70 	      lda	pitchHA,x
    762  1a81		       71 47		      adc	(portPtrH),y
    763  1a83		       9d 19 70 	      sta	pitchHA,x
    764  1a86							;inc 1025 ; DEBUG!!
    765  1a86		       a9 00		      lda	#0	; indicate port direction
    766  1a88		       4c 9e 1a 	      jmp	oscCheck
    767  1a8b				   portDown
    768  1a8b		       bd 16 70 	      lda	pitchLA,x
    769  1a8e		       38		      sec
    770  1a8f		       f1 35		      sbc	(portPtrL),y
    771  1a91		       9d 16 70 	      sta	pitchLA,x
    772  1a94		       bd 19 70 	      lda	pitchHA,x
    773  1a97		       f1 47		      sbc	(portPtrH),y
    774  1a99		       9d 19 70 	      sta	pitchHA,x
    775  1a9c							;inc 1024 ; DEBUG!!
    776  1a9c		       a9 01		      lda	#1	; indicate port direction
    777  1a9e
    778  1a9e							; check for pitch oscillation
    779  1a9e							; (which means it's at the correct note)
    780  1a9e							; it's oscillating if: the port direction
    781  1a9e							; has changed and the note hasn't.
    782  1a9e				   oscCheck
    783  1a9e		       dd 54 70 	      cmp	portLastDir,x
    784  1aa1		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
    785  1aa4		       f0 29		      beq	skipOsc
    786  1aa6		       98		      tya
    787  1aa7		       dd 51 70 	      cmp	portLastNote,x
    788  1aaa		       9d 51 70 	      sta	portLastNote,x	; save it...
    789  1aad		       d0 20		      bne	skipOsc
    790  1aaf
    791  1aaf							; it's oscilating at;
    792  1aaf							; the note, so lock ;
    793  1aaf							; it onto the actual;
    794  1aaf							; note				;
    795  1aaf		       ad 61 70 	      lda	NTSCmode	;
    796  1ab2		       f0 0f		      beq	palLock	;
    797  1ab4				   ntscLock		;
    798  1ab4		       b9 26 34 	      lda	NSoundLArr,y	;
    799  1ab7		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
    800  1aba		       b9 6e 34 	      lda	NSoundHArr,y	;
    801  1abd		       9d 19 70 	      sta	pitchHA,x	;
    802  1ac0		       4c cf 1a 	      jmp	skipPalLock	;
    803  1ac3				   palLock		;
    804  1ac3		       b9 b6 34 	      lda	PSoundLArr,y	;
    805  1ac6		       9d 16 70 	      sta	pitchLA,x	;
    806  1ac9		       b9 09 35 	      lda	PSoundHArr,y	;
    807  1acc		       9d 19 70 	      sta	pitchHA,x	;
    808  1acf				   skipPalLock		;;;;;
    809  1acf
    810  1acf				   skipOsc
    811  1acf				   endPortUpdate
    812  1acf		       60		      rts
    813  1ad0
------- FILE cynthcart2.0.1.asm
------- FILE cynth_keyboard.asm LEVEL 2 PASS 2
      0  1ad0					      include	"cynth_keyboard.asm"
      1  1ad0							;------------------------------------------
      2  1ad0							; Read the keyboard
      3  1ad0							;------------------------------------------
      4  1ad0				   readKeyboard
      5  1ad0							; Keyboard read setup
      6  1ad0		       a9 7f		      lda	#127
      7  1ad2		       8d 0d dc 	      sta	56333
      8  1ad5
      9  1ad5							;------------------------------------------
     10  1ad5							; determine which keyset to use
     11  1ad5							; (raw/shift/commodorekey/runstop)
     12  1ad5							;------------------------------------------
     13  1ad5
     14  1ad5							; default is raw key functions (no modified keys)
     15  1ad5		       a9 0d		      lda	#<rawKeyFunctions	;-
     16  1ad7		       85 c2		      sta	keyPtrL	;
     17  1ad9		       a9 22		      lda	#>rawKeyFunctions	;
     18  1adb		       85 c3		      sta	keyPtrH	;-
     19  1add
     20  1add							; Check for Shift/C=
     21  1add		       a9 bf		      lda	#~64	; (Right Shift)
     22  1adf		       8d 00 dc 	      sta	56320
     23  1ae2		       ad 01 dc 	      lda	56321
     24  1ae5		       29 10		      and	#16
     25  1ae7		       d0 08		      bne	notAltKeys	;-
     26  1ae9		       a9 81		      lda	#<shiftKeyFunctions	;
     27  1aeb		       85 c2		      sta	keyPtrL	;
     28  1aed		       a9 23		      lda	#>shiftKeyFunctions	;-
     29  1aef		       85 c3		      sta	keyPtrH
     30  1af1				   notAltKeys
     31  1af1		       a9 fd		      lda	#~2	; (Left Shift)
     32  1af3		       8d 00 dc 	      sta	56320
     33  1af6		       ad 01 dc 	      lda	56321
     34  1af9		       29 80		      and	#128
     35  1afb		       d0 0b		      bne	notAltKeys2	;-
     36  1afd		       a9 81		      lda	#<shiftKeyFunctions	;
     37  1aff		       85 c2		      sta	keyPtrL	;
     38  1b01		       a9 23		      lda	#>shiftKeyFunctions	;-
     39  1b03		       85 c3		      sta	keyPtrH
     40  1b05		       4c 0a 1c 	      jmp	doKeyCheck
     41  1b08				   notAltKeys2
     42  1b08		       a9 7f		      lda	#~128	; (C= key)
     43  1b0a		       8d 00 dc 	      sta	56320
     44  1b0d		       ad 01 dc 	      lda	56321
     45  1b10		       29 20		      and	#32
     46  1b12		       d0 08		      bne	notAltKeys3
     47  1b14		       a9 fd		      lda	#<commKeyFunctions	;-
     48  1b16		       85 c2		      sta	keyPtrL	;
     49  1b18		       a9 23		      lda	#>commKeyFunctions	;
     50  1b1a		       85 c3		      sta	keyPtrH	;-
     51  1b1c				   notAltKeys3
     52  1b1c		       a9 7f		      lda	#~128	; (Run Stop)
     53  1b1e		       8d 00 dc 	      sta	56320
     54  1b21		       ad 01 dc 	      lda	56321
     55  1b24		       29 80		      and	#128
     56  1b26		       d0 08		      bne	notAltKeys4
     57  1b28		       a9 79		      lda	#<runstopKeyFunctions	;-
     58  1b2a		       85 c2		      sta	keyPtrL	;
     59  1b2c		       a9 24		      lda	#>runstopKeyFunctions	;
     60  1b2e		       85 c3		      sta	keyPtrH	;-
     61  1b30				   notAltKeys4
     62  1b30		       a9 7f		      lda	#~128	; (CTRL key)
     63  1b32		       8d 00 dc 	      sta	56320
     64  1b35		       ad 01 dc 	      lda	56321
     65  1b38		       29 04		      and	#4	; CTRL
     66  1b3a							;and #2 ; BACK ARROW
     67  1b3a		       d0 08		      bne	notAltKeys5
     68  1b3c		       a9 05		      lda	#<CTRLKeyFunctions	;-
     69  1b3e		       85 c2		      sta	keyPtrL	;
     70  1b40		       a9 23		      lda	#>CTRLKeyFunctions	;
     71  1b42		       85 c3		      sta	keyPtrH	;-
     72  1b44				   notAltKeys5
     73  1b44
     74  1b44							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75  1b44				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
     76  1b44				  -	      lda	#0
     77  1b44				  -	      sta	keyTimer	; DEBUG!  Disable key timer
     78  1b44					      ENDIF
     79  1b44							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  1b44
     81  1b44							; handle keytimer
     82  1b44							; (to avoid accidental keypresses on shifted keys)
     83  1b44		       ad 58 70 	      lda	keyTimer
     84  1b47		       f0 06		      beq	readKeys
     85  1b49		       ce 58 70 	      dec	keyTimer
     86  1b4c		       4c 4f 1b 	      jmp	startCheck
     87  1b4f				   readKeys
     88  1b4f
     89  1b4f							;********************************
     90  1b4f							; Check for Notes Being Pressed
     91  1b4f							;********************************
     92  1b4f				   startCheck
     93  1b4f		       a9 00		      lda	#0
     94  1b51		       8d 9b 70 	      sta	keyCount
     95  1b54
     96  1b54							; Save last notes and clear note buffer
     97  1b54		       ae 80 70 	      ldx	bufferSize
     98  1b57							;dex
     99  1b57		       e8		      inx
    100  1b58		       e8		      inx
    101  1b59				   clearKeys
    102  1b59		       bd d0 70 	      lda	kbBuffer,x
    103  1b5c				  -	      IF	DEBUG_DISPLAY=1
    104  1b5c				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
    105  1b5c					      ENDIF
    106  1b5c		       9d e0 70 	      sta	lastKbBuffer,x
    107  1b5f		       a9 ff		      lda	#255
    108  1b61		       9d d0 70 	      sta	kbBuffer,x
    109  1b64		       ca		      dex
    110  1b65		       10 f2		      bpl	clearKeys
    111  1b67
    112  1b67							;lda #255
    113  1b67							;sta KeyA
    114  1b67							;sta KeyB
    115  1b67							;sta KeyC
    116  1b67
    117  1b67		       ae 80 70 	      ldx	bufferSize
    118  1b6a							;dex
    119  1b6a		       e8		      inx
    120  1b6b		       e8		      inx
    121  1b6c		       a0 00		      ldy	#0
    122  1b6e							; check for note keys being pressed
    123  1b6e				   checkLoop
    124  1b6e		       b9 9d 21 	      lda	col,y
    125  1b71		       f0 1c		      beq	quitCheck
    126  1b73		       8d 00 dc 	      sta	56320
    127  1b76		       ad 01 dc 	      lda	56321
    128  1b79		       39 b6 21 	      and	row,y
    129  1b7c		       d0 0e		      bne	notPressed
    130  1b7e		       98		      tya
    131  1b7f		       18		      clc
    132  1b80		       6d 22 70 	      adc	keyOffset
    133  1b83							;sta KeyA,x
    134  1b83		       9d d0 70 	      sta	kbBuffer,x
    135  1b86		       ca		      dex
    136  1b87		       ee 9b 70 	      inc	keyCount
    137  1b8a		       30 03		      bmi	quitCheck
    138  1b8c				   notPressed
    139  1b8c		       c8		      iny
    140  1b8d		       d0 df		      bne	checkLoop
    141  1b8f
    142  1b8f				   quitCheck
    143  1b8f							;-- -- -- -- -- -- -- -- -- -- -- -- --
    144  1b8f							; Generate note on/offs from keyboard data
    145  1b8f							;-- -- -- -- -- -- -- -- -- -- -- -- --
    146  1b8f							; FIND NOTE ONS...
    147  1b8f		       ae 80 70 	      ldx	bufferSize
    148  1b92							;dex
    149  1b92		       e8		      inx
    150  1b93		       e8		      inx
    151  1b94				   noteOnCheck
    152  1b94		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
    153  1b97		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    154  1b9a							;dey
    155  1b9a		       c8		      iny
    156  1b9b		       c8		      iny
    157  1b9c				   innerNoteOnCheck
    158  1b9c		       d9 e0 70 	      cmp	lastKbBuffer,y
    159  1b9f		       f0 12		      beq	checkNextNote
    160  1ba1		       88		      dey
    161  1ba2		       10 f8		      bpl	innerNoteOnCheck
    162  1ba4							;Found new note-on!
    163  1ba4							;inc 53280
    164  1ba4		       8d 81 70 	      sta	noteTempA
    165  1ba7		       8e 82 70 	      stx	noteTempB
    166  1baa		       20 92 1e 	      jsr	doNoteOn
    167  1bad		       ad 81 70 	      lda	noteTempA
    168  1bb0		       ae 82 70 	      ldx	noteTempB
    169  1bb3							; TODO: call note on function
    170  1bb3				   checkNextNote
    171  1bb3		       ca		      dex
    172  1bb4		       10 de		      bpl	noteOnCheck
    173  1bb6
    174  1bb6							; FIND NOTE OFF...
    175  1bb6		       ae 80 70 	      ldx	bufferSize
    176  1bb9							;dex
    177  1bb9		       e8		      inx
    178  1bba		       e8		      inx
    179  1bbb				   noteOnCheck2
    180  1bbb		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
    181  1bbe		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    182  1bc1							;dey
    183  1bc1		       c8		      iny
    184  1bc2		       c8		      iny
    185  1bc3				   innerNoteOnCheck2
    186  1bc3		       d9 d0 70 	      cmp	kbBuffer,y
    187  1bc6		       f0 12		      beq	checkNextNote2
    188  1bc8		       88		      dey
    189  1bc9		       10 f8		      bpl	innerNoteOnCheck2
    190  1bcb							;Found new note-on!
    191  1bcb							;inc 53280
    192  1bcb		       8d 81 70 	      sta	noteTempA
    193  1bce		       8e 82 70 	      stx	noteTempB
    194  1bd1		       20 c0 1e 	      jsr	doNoteOff
    195  1bd4		       ad 81 70 	      lda	noteTempA
    196  1bd7		       ae 82 70 	      ldx	noteTempB
    197  1bda							; TODO: call note on function
    198  1bda				   checkNextNote2
    199  1bda		       ca		      dex
    200  1bdb		       10 de		      bpl	noteOnCheck2
    201  1bdd							;-- -- -- -- -- -- -- -- -- -- -- -- --
    202  1bdd							; End of note on/off generation
    203  1bdd							;-- -- -- -- -- -- -- -- -- -- -- -- --
    204  1bdd
    205  1bdd							; Skip key command check if 3 or more piano keys
    206  1bdd							; are held to avoid quirks with C64 keyboard
    207  1bdd							; matrix hardware.
    208  1bdd		       ae 9b 70 	      ldx	keyCount
    209  1be0		       f0 0d		      beq	skipMinimalKeyboard
    210  1be2							; default is raw key functions (no modified keys)
    211  1be2		       a9 89		      lda	#<minimalKeyFunctions	;-
    212  1be4		       85 c2		      sta	keyPtrL	;
    213  1be6		       a9 22		      lda	#>minimalKeyFunctions	;
    214  1be8		       85 c3		      sta	keyPtrH	;-
    215  1bea							; also disable keytimer...
    216  1bea		       a9 00		      lda	#0
    217  1bec		       8d 58 70 	      sta	keyTimer
    218  1bef				   skipMinimalKeyboard
    219  1bef
    220  1bef							; Check key timer...
    221  1bef		       ad 58 70 	      lda	keyTimer
    222  1bf2		       f0 01		      beq	contReadKeys
    223  1bf4		       60		      rts
    224  1bf5				   contReadKeys
    225  1bf5		       8e 66 70 	      stx	lastOsc
    226  1bf8
    227  1bf8							; Check for space bar (pitch bender)...
    228  1bf8		       a9 7f		      lda	#~$80
    229  1bfa		       8d 00 dc 	      sta	56320
    230  1bfd		       ad 01 dc 	      lda	56321
    231  1c00		       29 10		      and	#$10
    232  1c02		       d0 06		      bne	noSpace
    233  1c04		       20 1a 10 	      jsr	bendBender
    234  1c07		       4c 5a 1c 	      jmp	skipKeyCheck
    235  1c0a				   noSpace
    236  1c0a
    237  1c0a
    238  1c0a				   doKeyCheck
    239  1c0a							;********************************
    240  1c0a							; Generic command key check
    241  1c0a							;********************************
    242  1c0a
    243  1c0a		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
    244  1c0c				   keyChkLoop
    245  1c0c		       bd cf 21 	      lda	commandKeys,x
    246  1c0f		       8d 00 dc 	      sta	56320
    247  1c12		       ad 01 dc 	      lda	56321
    248  1c15		       3d d0 21 	      and	commandKeys+1,x
    249  1c18		       d0 3c		      bne	keyNotDown
    250  1c1a
    251  1c1a							; key down!
    252  1c1a							;-----------
    253  1c1a		       8a		      txa		;multiply x by 2
    254  1c1b		       0a		      asl		;  to get the offset
    255  1c1c		       a8		      tay		;  into the key functions array
    256  1c1d
    257  1c1d							; get address of function to call
    258  1c1d		       b1 c2		      lda	(keyPtrL),y
    259  1c1f		       8d 62 70 	      sta	temp16L
    260  1c22		       c8		      iny
    261  1c23		       b1 c2		      lda	(keyPtrL),y
    262  1c25		       8d 63 70 	      sta	temp16H
    263  1c28		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
    264  1c2a							;  no function assigned to this key so quit
    265  1c2a
    266  1c2a							; put return address onto stack to simulate JSR with a JMP()
    267  1c2a		       a9 1c		      lda	#>returnAddress
    268  1c2c		       48		      pha
    269  1c2d		       a9 44		      lda	#<returnAddress
    270  1c2f		       48		      pha
    271  1c30
    272  1c30							; save the value of X
    273  1c30		       8e 64 70 	      stx	saveX
    274  1c33
    275  1c33		       c8		      iny
    276  1c34		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
    277  1c36		       8d 65 70 	      sta	keyTemp
    278  1c39		       c8		      iny
    279  1c3a		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
    280  1c3c		       a8		      tay
    281  1c3d		       ad 65 70 	      lda	keyTemp
    282  1c40
    283  1c40							; indirect jump to function, which acts as a JSR since
    284  1c40							;   we pushed the return address onto the stack
    285  1c40		       6c 62 70 	      jmp	(temp16L)
    286  1c43
    287  1c43		       ea		      nop
    288  1c44				   returnAddress
    289  1c44		       ea		      nop
    290  1c45
    291  1c45		       ae 64 70 	      ldx	saveX	; restore X
    292  1c48
    293  1c48							; only set the keytimer when a raw key is used
    294  1c48		       a5 c2		      lda	keyPtrL
    295  1c4a		       c9 0d		      cmp	#<rawKeyFunctions
    296  1c4c		       f0 08		      beq	keyNotDown
    297  1c4e
    298  1c4e		       a9 28		      lda	#KEYTIME
    299  1c50		       8d 58 70 	      sta	keyTimer
    300  1c53							;-----------
    301  1c53		       4c 5a 1c 	      jmp	skipKeyCheck	; quit keycheck after a key is found
    302  1c56
    303  1c56				   keyNotDown
    304  1c56		       ca		      dex
    305  1c57		       ca		      dex
    306  1c58		       10 b2		      bpl	keyChkLoop
    307  1c5a
    308  1c5a				   skipKeyCheck
    309  1c5a
    310  1c5a							; done
    311  1c5a		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_midirecv.asm LEVEL 2 PASS 2
      0  1c5b					      include	"cynth_midirecv.asm"
      1  1c5b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      2  1c5b							; Read MIDI
      3  1c5b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      4  1c5b							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
      5  1c5b					      IF	ENABLE_MIDI_COMMANDS=1
      6  1c5b				   processMIDI
      7  1c5b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  1c5b							; Debug - show main note buffer
      9  1c5b				  -	      IF	DEBUG_DISPLAY=1
     10  1c5b				  -	      lda	noteNumArray+0
     11  1c5b				  -	      sta	1744+125
     12  1c5b				  -	      lda	noteNumArray+1
     13  1c5b				  -	      sta	1744+126
     14  1c5b				  -	      lda	noteNumArray+2
     15  1c5b				  -	      sta	1744+127
     16  1c5b				  -	      lda	noteNumArray+3
     17  1c5b				  -	      sta	1744+128
     18  1c5b				  -
     19  1c5b				  -	      lda	noteNumArray+4
     20  1c5b				  -	      sta	1744+129
     21  1c5b				  -	      lda	noteNumArray+5
     22  1c5b				  -	      sta	1744+130
     23  1c5b				  -	      lda	noteNumArray+6
     24  1c5b				  -	      sta	1744+131
     25  1c5b				  -	      lda	noteNumArray+7
     26  1c5b				  -	      sta	1744+132
     27  1c5b					      ENDIF
     28  1c5b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  1c5b
     30  1c5b							; get next MIDI byte
     31  1c5b				   check
     32  1c5b					      IF	ENABLE_MIDI_COMMANDS=1
     33  1c5b		       ad 50 71 	      lda	midiEnabled
     34  1c5e		       f0 03		      beq	skipMidiRead
     35  1c60		       20 f2 3a 	      jsr	midiRead	; Midi byte will be in A and Y
     36  1c63				   skipMidiRead
     37  1c63					      ENDIF
     38  1c63		       d0 03		      bne	continueReading
     39  1c65		       4c e1 1e 	      jmp	endMIDI
     40  1c68				   continueReading
     41  1c68
     42  1c68
     43  1c68							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  1c68							; DEBUG - SHOW MIDI DATA
     45  1c68				  -	      IF	DEBUG_DISPLAY=1
     46  1c68				  -	      inc	1824+81
     47  1c68				  -	      sta	temp
     48  1c68				  -	      ldx	#34
     49  1c68				  -	      ldy	debugOffset
     50  1c68				  -	      iny
     51  1c68				  -	      iny
     52  1c68				  -	      iny
     53  1c68				  -	      iny
     54  1c68				  -	      iny
     55  1c68				  -	      iny
     56  1c68				  -	      jsr	displayHex
     57  1c68				  -	      ldy	debugOffset
     58  1c68				  -	      iny
     59  1c68				  -	      tya
     60  1c68				  -	      and	#$0F
     61  1c68				  -	      sta	debugOffset
     62  1c68				  -	      adc	#5
     63  1c68				  -	      tay
     64  1c68				  -	      lda	temp
     65  1c68				  -	      ldy	temp
     66  1c68					      ENDIF
     67  1c68							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  1c68
     69  1c68							; If bit 7 isn't set, then it's a running mode byte...
     70  1c68		       10 68		      bpl	runningModeByte
     71  1c6a		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
     72  1c6d		       a8		      tay
     73  1c6e		       29 f0		      and	#$F0
     74  1c70		       c9 f0		      cmp	#$F0
     75  1c72		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
     76  1c74							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     77  1c74
     78  1c74							;tya
     79  1c74
     80  1c74							; If bit 7 isn't set, then it's a running mode byte...
     81  1c74							;bpl runningModeByte
     82  1c74
     83  1c74
     84  1c74							;tay
     85  1c74							;and #$F0
     86  1c74							;cmp #$F0
     87  1c74							;beq processSysex ;Skip saving status if it's sysex
     88  1c74							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     89  1c74							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
     90  1c74					      IF	ENABLE_MIDI_COMMANDS=1
     91  1c74		       20 f9 3a 	      jsr	midiReadWait	; Midi byte will be in A and Y
     92  1c77					      ENDIF
     93  1c77		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
     94  1c7a		       ad 7d 70 	      lda	savedMidiStatus
     95  1c7d		       20 ea 1c 	      jsr	processMidiMessage	; handle the rest of the message...
     96  1c80		       4c 5b 1c 	      jmp	check	; End of loop - - -
     97  1c83
     98  1c83				   processSysex
     99  1c83		       98		      tya		; Get systex byte
    100  1c84		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    101  1c86		       d0 0a		      bne	checkF1
    102  1c88				   sysexReadingLoop
    103  1c88		       20 f9 3a 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    104  1c8b		       c9 f7		      cmp	#$F7
    105  1c8d		       d0 f9		      bne	sysexReadingLoop
    106  1c8f		       4c 5b 1c 	      jmp	check
    107  1c92							; - - - - - -
    108  1c92				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    109  1c92		       c9 f1		      cmp	#$F1
    110  1c94		       d0 06		      bne	checkF2
    111  1c96		       20 f9 3a 	      jsr	midiReadWait
    112  1c99		       4c 5b 1c 	      jmp	check
    113  1c9c							; - - - - - -
    114  1c9c				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    115  1c9c		       c9 f2		      cmp	#$F2
    116  1c9e		       d0 09		      bne	checkF3
    117  1ca0					      IF	ENABLE_MIDI_COMMANDS=1
    118  1ca0		       20 f9 3a 	      jsr	midiReadWait
    119  1ca3		       20 f9 3a 	      jsr	midiReadWait
    120  1ca6					      ENDIF
    121  1ca6		       4c 5b 1c 	      jmp	check
    122  1ca9							; - - - - - -
    123  1ca9				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    124  1ca9		       c9 f3		      cmp	#$F3
    125  1cab		       d0 09		      bne	checkF8
    126  1cad		       20 f9 3a 	      jsr	midiReadWait
    127  1cb0		       4c 5b 1c 	      jmp	check
    128  1cb3							; - - - - - -
    129  1cb3							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    130  1cb3		       4c 5b 1c 	      jmp	check
    131  1cb6
    132  1cb6
    133  1cb6				   checkF8
    134  1cb6		       c9 f8		      cmp	#$F8
    135  1cb8		       d0 03		      bne	checkFA
    136  1cba							; NO EXTRA BYTES TO READ
    137  1cba		       4c 5b 1c 	      jmp	check
    138  1cbd							; - - - - - -
    139  1cbd				   checkFA
    140  1cbd		       c9 fa		      cmp	#$FA
    141  1cbf		       d0 03		      bne	checkFC
    142  1cc1							; NO EXTRA BYTES TO READ
    143  1cc1		       4c 5b 1c 	      jmp	check
    144  1cc4							; - - - - - -
    145  1cc4				   checkFC
    146  1cc4		       c9 fc		      cmp	#$FC
    147  1cc6		       d0 03		      bne	checkFF
    148  1cc8							; NO EXTRA BYTES TO READ
    149  1cc8		       4c 5b 1c 	      jmp	check
    150  1ccb							; - - - - - -
    151  1ccb				   checkFF
    152  1ccb		       c9 ff		      cmp	#$FF
    153  1ccd		       d0 00		      bne	endSysex
    154  1ccf							;---- END SYSTEM/CLOCK ----
    155  1ccf				   endSysex
    156  1ccf		       4c 5b 1c 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    157  1cd2
    158  1cd2
    159  1cd2				   runningModeByte
    160  1cd2		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    161  1cd5		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    162  1cd8		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    163  1cda		       c9 f0		      cmp	#$F0
    164  1cdc		       d0 03		      bne	normalRunningMode
    165  1cde							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    166  1cde							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    167  1cde		       4c 5b 1c 	      jmp	check
    168  1ce1							;-----------------------
    169  1ce1							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    170  1ce1							;jsr midiReadWait ; Now need to get a new "status byte"
    171  1ce1							;jmp runningModeByte
    172  1ce1
    173  1ce1				   normalRunningMode
    174  1ce1		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    175  1ce4		       20 ea 1c 	      jsr	processMidiMessage
    176  1ce7		       4c 5b 1c 	      jmp	check
    177  1cea
    178  1cea				   processMidiMessage
    179  1cea		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    180  1ceb
    181  1ceb							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    182  1ceb		       ad f7 70 	      lda	midiMode
    183  1cee		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    184  1cf0		       98		      tya
    185  1cf1		       29 0f		      and	#$0F
    186  1cf3		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    187  1cf6		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    188  1cf8
    189  1cf8							;---------------------------------------------
    190  1cf8							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    191  1cf8							;---------------------------------------------
    192  1cf8		       98		      tya
    193  1cf9		       09 40		      ora	#%01000000
    194  1cfb		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    195  1cfd		       98		      tya
    196  1cfe		       09 20		      ora	#%00100000
    197  1d00		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    198  1d02
    199  1d02				   twoParameters
    200  1d02		       20 f9 3a 	      jsr	midiReadWait
    201  1d05				   oneParameter
    202  1d05							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    203  1d05		       60		      rts
    204  1d06							;jmp check
    205  1d06
    206  1d06
    207  1d06				   endChannelCheck
    208  1d06							; Status byte should be in A
    209  1d06							; Ignoring channel for now
    210  1d06							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    211  1d06		       98		      tya
    212  1d07
    213  1d07		       29 f0		      and	#$F0
    214  1d09		       c9 80		      cmp	#$80	; Note off
    215  1d0b		       d0 03		      bne	notNoteOff
    216  1d0d		       4c ae 1e 	      jmp	noteOff
    217  1d10				   notNoteOff
    218  1d10		       c9 90		      cmp	#$90	; Note on
    219  1d12		       d0 03		      bne	notNoteOn
    220  1d14		       4c 78 1e 	      jmp	noteOn
    221  1d17				   notNoteOn
    222  1d17		       c9 e0		      cmp	#$E0	; Pitch bend
    223  1d19		       f0 3a		      beq	pitchBend
    224  1d1b		       c9 b0		      cmp	#$B0	; Control change
    225  1d1d		       d0 03		      bne	notControlChange
    226  1d1f		       4c 75 1d 	      jmp	controlChange
    227  1d22				   notControlChange
    228  1d22		       c9 d0		      cmp	#$D0	; Channel pressure
    229  1d24		       f0 2b		      beq	channelPressure
    230  1d26		       c9 a0		      cmp	#$A0	; Key pressure
    231  1d28		       f0 0f		      beq	keyPressure
    232  1d2a		       c9 c0		      cmp	#$C0	; Patch change
    233  1d2c		       f0 12		      beq	patchChange
    234  1d2e							;cmp #$F0 ; Sysex
    235  1d2e							;beq sysex
    236  1d2e		       8d e4 07 	      sta	2020
    237  1d31		       a9 02		      lda	#2
    238  1d33		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    239  1d36		       4c e1 1e 	      jmp	endMIDI
    240  1d39
    241  1d39
    242  1d39				   keyPressure
    243  1d39				  -	      IF	DEBUG_DISPLAY=1
    244  1d39				  -	      inc	1824+86
    245  1d39					      ENDIF
    246  1d39		       ad 7e 70 	      lda	firstDataByte
    247  1d3c					      IF	ENABLE_MIDI_COMMANDS=1
    248  1d3c		       20 f9 3a 	      jsr	midiReadWait
    249  1d3f					      ENDIF
    250  1d3f		       60		      rts
    251  1d40
    252  1d40
    253  1d40
    254  1d40							;REL_SHORT equ $E0
    255  1d40							;REL_MED	equ $E9
    256  1d40							;REL_LONG equ $EE
    257  1d40
    258  1d40							;ATK_SHORT equ $00
    259  1d40							;ATK_MED	equ $90
    260  1d40							;ATK_LONG equ $E0
    261  1d40
    262  1d40				   patchChange
    263  1d40				  -	      IF	DEBUG_DISPLAY=1
    264  1d40				  -	      inc	1824+88
    265  1d40					      ENDIF
    266  1d40		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    267  1d43		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    268  1d45		       a0 1d		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    269  1d47				   skipPatchDefault1
    270  1d47		       c0 1e		      cpy	#MAX_PATCH_NUMBER+1
    271  1d49		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    272  1d4b		       a0 00		      ldy	#0	; Saw Bass (because sending patch change zero doesn't work)
    273  1d4d				   skipPatchDefault2
    274  1d4d		       20 a4 13 	      jsr	setPatch
    275  1d50		       60		      rts
    276  1d51
    277  1d51				   channelPressure
    278  1d51				  -	      IF	DEBUG_DISPLAY=1
    279  1d51				  -	      inc	1824+89
    280  1d51					      ENDIF
    281  1d51		       ad 7e 70 	      lda	firstDataByte
    282  1d54		       60		      rts
    283  1d55
    284  1d55				   pitchBend
    285  1d55							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    286  1d55							; DEBUG - SHOW MIDI DATA
    287  1d55				  -	      IF	DEBUG_DISPLAY=1
    288  1d55				  -			;sta temp
    289  1d55				  -	      ldx	#25
    290  1d55				  -	      ldy	#22
    291  1d55				  -	      jsr	displayHex
    292  1d55				  -	      lda	temp
    293  1d55				  -	      ldy	temp
    294  1d55				  -	      inc	1824+90
    295  1d55					      ENDIF
    296  1d55							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  1d55
    298  1d55		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    299  1d58		       4a		      lsr
    300  1d59		       4a		      lsr
    301  1d5a		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    302  1d5d		       38		      sec
    303  1d5e		       e9 50		      sbc	#$50	; Center on zero
    304  1d60		       30 09		      bmi	negPitch	; If negative...
    305  1d62		       c9 46		      cmp	#70	; Max value
    306  1d64		       30 0b		      bmi	setTuningValue
    307  1d66		       a9 46		      lda	#70	; Over max, so set to max value (50)
    308  1d68		       4c 71 1d 	      jmp	setTuningValue
    309  1d6b
    310  1d6b		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
    311  1d6b				   negPitch
    312  1d6b		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
    313  1d6d		       10 02		      bpl	setTuningValue
    314  1d6f		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
    315  1d71
    316  1d71				   setTuningValue
    317  1d71		       8d f0 70 	      sta	midiTuning
    318  1d74
    319  1d74
    320  1d74							;	lda firstDataByte
    321  1d74
    322  1d74							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  1d74							; DEBUG - SHOW MIDI DATA
    324  1d74				  -	      IF	DEBUG_DISPLAY=1
    325  1d74				  -	      sta	temp
    326  1d74				  -	      ldx	#25
    327  1d74				  -	      ldy	#23
    328  1d74				  -	      jsr	displayHex
    329  1d74				  -	      lda	temp
    330  1d74				  -	      ldy	temp
    331  1d74					      ENDIF
    332  1d74							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    333  1d74
    334  1d74		       60		      rts
    335  1d75
    336  1d75
    337  1d75				   controlChange
    338  1d75				  -	      IF	DEBUG_DISPLAY=1
    339  1d75				  -	      inc	1824+87
    340  1d75					      ENDIF
    341  1d75							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  1d75							; DEBUG - SHOW MIDI DATA
    343  1d75				  -	      IF	DEBUG_DISPLAY=1
    344  1d75				  -	      sta	temp
    345  1d75				  -	      lda	firstDataByte
    346  1d75				  -	      ldy	#21
    347  1d75				  -	      ldx	#17
    348  1d75				  -	      jsr	displayHex
    349  1d75				  -	      lda	temp
    350  1d75				  -	      ldy	temp
    351  1d75					      ENDIF
    352  1d75							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  1d75
    354  1d75					      IF	ENABLE_MIDI_COMMANDS=1
    355  1d75		       20 f9 3a 	      jsr	midiReadWait	; Read controller value
    356  1d78					      ENDIF
    357  1d78		       a8		      tay
    358  1d79							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  1d79							; DEBUG - SHOW MIDI DATA
    360  1d79				  -	      IF	DEBUG_DISPLAY=1
    361  1d79				  -	      sta	temp
    362  1d79				  -			;lda firstDataByte
    363  1d79				  -	      ldy	#22
    364  1d79				  -	      ldx	#17
    365  1d79				  -	      jsr	displayHex
    366  1d79				  -	      lda	temp
    367  1d79				  -	      ldy	temp
    368  1d79					      ENDIF
    369  1d79							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  1d79		       ad 7e 70 	      lda	firstDataByte	; Get controller number
    371  1d7c				  -	      IF	OFFSET_CONTROLLERS=1
    372  1d7c				  -	      sec
    373  1d7c				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
    374  1d7c					      ENDIF
    375  1d7c							;and #$0F ; Repeat every 16 controllers
    376  1d7c		       29 ef		      and	#%11101111	; Repeat every 16 controllers
    377  1d7e		       d0 0a		      bne	notResonance
    378  1d80							;---- Resonance----
    379  1d80		       98		      tya
    380  1d81		       29 f0		      and	#$F0
    381  1d83		       8d 97 70 	      sta	resonance
    382  1d86		       20 a9 10 	      jsr	setResonance
    383  1d89		       60		      rts
    384  1d8a				   notResonance
    385  1d8a		       c9 01		      cmp	#1
    386  1d8c		       d0 11		      bne	notModWheel
    387  1d8e							;----Mod wheel (filter)----
    388  1d8e		       98		      tya
    389  1d8f		       0a		      asl
    390  1d90		       a8		      tay
    391  1d91		       8d 9d 70 	      sta	filterSetValue
    392  1d94		       ad 29 70 	      lda	paddle
    393  1d97		       f0 05		      beq	skipTurnOffPaddle
    394  1d99		       a9 00		      lda	#0	; turn paddle off
    395  1d9b		       20 36 11 	      jsr	setPaddles
    396  1d9e				   skipTurnOffPaddle
    397  1d9e
    398  1d9e							;jsr ksetFilter
    399  1d9e		       60		      rts
    400  1d9f				   notModWheel
    401  1d9f		       c9 02		      cmp	#2
    402  1da1		       d0 0e		      bne	notMode
    403  1da3							;---- Sound Mode----
    404  1da3		       98		      tya
    405  1da4		       4a		      lsr
    406  1da5		       4a		      lsr
    407  1da6		       4a		      lsr
    408  1da7		       29 0f		      and	#$0F
    409  1da9		       aa		      tax
    410  1daa		       bd f5 24 	      lda	modeList,x
    411  1dad		       20 51 13 	      jsr	ksetMode
    412  1db0		       60		      rts
    413  1db1				   notMode
    414  1db1		       c9 03		      cmp	#3
    415  1db3		       d0 0b		      bne	notFX
    416  1db5							;---- FX----
    417  1db5		       98		      tya
    418  1db6		       4a		      lsr
    419  1db7		       4a		      lsr
    420  1db8		       4a		      lsr
    421  1db9		       4a		      lsr
    422  1dba		       29 07		      and	#$07
    423  1dbc		       20 29 13 	      jsr	ksetFX
    424  1dbf		       60		      rts
    425  1dc0				   notFX
    426  1dc0		       c9 04		      cmp	#4
    427  1dc2		       d0 08		      bne	notAttack
    428  1dc4							;--- Attack----
    429  1dc4		       98		      tya
    430  1dc5		       0a		      asl
    431  1dc6		       29 f0		      and	#$F0
    432  1dc8		       20 4a 12 	      jsr	setAttack
    433  1dcb		       60		      rts
    434  1dcc				   notAttack
    435  1dcc		       c9 05		      cmp	#5
    436  1dce		       d0 0c		      bne	notRelease
    437  1dd0							;---- Release----
    438  1dd0		       98		      tya
    439  1dd1		       4a		      lsr
    440  1dd2		       4a		      lsr
    441  1dd3		       4a		      lsr
    442  1dd4		       29 0f		      and	#$0F
    443  1dd6		       09 f0		      ora	#$F0
    444  1dd8		       20 9d 11 	      jsr	setRelease
    445  1ddb		       60		      rts
    446  1ddc				   notRelease
    447  1ddc		       c9 06		      cmp	#6
    448  1dde		       d0 2d		      bne	notPW
    449  1de0							;--- Pulse Width----
    450  1de0		       98		      tya
    451  1de1		       0a		      asl
    452  1de2		       09 10		      ora	#%10000
    453  1de4		       20 63 10 	      jsr	setPulseWidth
    454  1de7		       ee 00 04 	      inc	1024
    455  1dea		       ad 86 70 	      lda	fxType	; if pulse modulation is on...
    456  1ded		       c9 07		      cmp	#MOD_PW2
    457  1def		       f0 04		      beq	fxReset
    458  1df1		       c9 06		      cmp	#MOD_PW_LFO
    459  1df3		       d0 0b		      bne	noFXReset
    460  1df5				   fxReset
    461  1df5		       ee 01 04 	      inc	1025
    462  1df8		       a9 00		      lda	#0
    463  1dfa		       8d 86 70 	      sta	fxType
    464  1dfd		       20 2c 13 	      jsr	setFX	; Turn off pulse modulation modes
    465  1e00				   noFXReset
    466  1e00		       ad 7a 70 	      lda	paddle2	; if paddle2 pulse width control is on...
    467  1e03		       c9 01		      cmp	#1
    468  1e05		       d0 05		      bne	noPaddle2Reset	;
    469  1e07		       a9 00		      lda	#0
    470  1e09							;sta paddle2 ; Turn off paddle 2 pulse control
    471  1e09		       20 41 10 	      jsr	ksetPad2
    472  1e0c				   noPaddle2Reset
    473  1e0c		       60		      rts
    474  1e0d				   notPW
    475  1e0d		       c9 07		      cmp	#7
    476  1e0f		       d0 08		      bne	notVolume
    477  1e11							; ----Volume----
    478  1e11		       98		      tya
    479  1e12		       4a		      lsr
    480  1e13		       4a		      lsr
    481  1e14		       4a		      lsr
    482  1e15		       20 7d 12 	      jsr	ksetVolume
    483  1e18		       60		      rts
    484  1e19				   notVolume
    485  1e19		       c9 08		      cmp	#8
    486  1e1b		       d0 0b		      bne	notTremolo
    487  1e1d							;---- Tremolo level----
    488  1e1d		       98		      tya
    489  1e1e		       4a		      lsr
    490  1e1f		       4a		      lsr
    491  1e20		       4a		      lsr
    492  1e21		       4a		      lsr
    493  1e22		       29 03		      and	#$03
    494  1e24		       20 57 11 	      jsr	setLFODepth
    495  1e27		       60		      rts
    496  1e28				   notTremolo
    497  1e28		       c9 09		      cmp	#9
    498  1e2a		       d0 0b		      bne	notTremRate
    499  1e2c							;---- Tremolo level----
    500  1e2c		       98		      tya
    501  1e2d		       4a		      lsr
    502  1e2e		       4a		      lsr
    503  1e2f		       4a		      lsr
    504  1e30		       4a		      lsr
    505  1e31		       29 03		      and	#$03
    506  1e33		       20 6d 11 	      jsr	setLFORate
    507  1e36		       60		      rts
    508  1e37				   notTremRate
    509  1e37		       c9 0d		      cmp	#13
    510  1e39		       d0 14		      bne	notWaveform
    511  1e3b							;--- Waveform (all voices)---
    512  1e3b		       98		      tya
    513  1e3c		       4a		      lsr
    514  1e3d		       4a		      lsr
    515  1e3e		       4a		      lsr
    516  1e3f		       29 03		      and	#$03
    517  1e41		       aa		      tax
    518  1e42		       bd 74 1e 	      lda	waveForms,x
    519  1e45		       8d 37 70 	      sta	WaveType2
    520  1e48		       8d 3e 70 	      sta	WaveType3
    521  1e4b		       8d 30 70 	      sta	WaveType
    522  1e4e		       60		      rts
    523  1e4f				   notWaveform
    524  1e4f		       c9 0e		      cmp	#14
    525  1e51		       d0 0e		      bne	notWaveform2
    526  1e53							;--- Waveform (voice 2 only)----
    527  1e53		       98		      tya
    528  1e54		       4a		      lsr
    529  1e55		       4a		      lsr
    530  1e56		       4a		      lsr
    531  1e57		       29 03		      and	#$03
    532  1e59		       aa		      tax
    533  1e5a		       bd 74 1e 	      lda	waveForms,x
    534  1e5d		       8d 37 70 	      sta	WaveType2
    535  1e60		       60		      rts
    536  1e61				   notWaveform2
    537  1e61		       c9 0f		      cmp	#15
    538  1e63		       d0 0e		      bne	notWaveform3
    539  1e65							;---- Waveform (voice 3 only)----
    540  1e65		       98		      tya
    541  1e66		       4a		      lsr
    542  1e67		       4a		      lsr
    543  1e68		       4a		      lsr
    544  1e69		       29 03		      and	#$03
    545  1e6b		       aa		      tax
    546  1e6c		       bd 74 1e 	      lda	waveForms,x
    547  1e6f		       8d 3e 70 	      sta	WaveType3
    548  1e72		       60		      rts
    549  1e73				   notWaveform3
    550  1e73		       60		      rts
    551  1e74
    552  1e74				   waveForms
    553  1e74		       10 20 40 80	      byte.b	$10,$20,$40,$80
    554  1e78							;-  -	-  -  -  -  -  -
    555  1e78
    556  1e78							;IF ENABLE_MIDI_COMMANDS=1
    557  1e78					      ENDIF
    558  1e78
    559  1e78
    560  1e78
    561  1e78							; note is in Y
    562  1e78				   noteOn
    563  1e78
    564  1e78		       8d 0c 70 	      sta	temp
    565  1e7b					      IF	ENABLE_MIDI_COMMANDS=1
    566  1e7b		       20 f9 3a 	      jsr	midiReadWait	; Read velocity byte
    567  1e7e					      ENDIF
    568  1e7e		       8d 7f 70 	      sta	tempVelocity
    569  1e81		       d0 09		      bne	almostNoteOn
    570  1e83							; Zero-velocity, so it's really a note-off...
    571  1e83							;inc 53280
    572  1e83		       ad 7e 70 	      lda	firstDataByte
    573  1e86		       38		      sec
    574  1e87		       e9 0c		      sbc	#12	; Down one octave
    575  1e89		       4c c0 1e 	      jmp	doNoteOff
    576  1e8c				   almostNoteOn
    577  1e8c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    578  1e8c							; DEBUG - SHOW MIDI DATA
    579  1e8c				  -	      IF	DEBUG_DISPLAY=1
    580  1e8c				  -	      sta	temp
    581  1e8c				  -	      lda	noteOnCount
    582  1e8c				  -	      and	#1
    583  1e8c				  -	      asl
    584  1e8c				  -	      asl
    585  1e8c				  -	      asl
    586  1e8c				  -	      ora	#$F4
    587  1e8c				  -	      sta	hexDispColor
    588  1e8c				  -	      lda	noteOnCount
    589  1e8c				  -	      and	#%1111
    590  1e8c				  -	      asl
    591  1e8c				  -	      tax
    592  1e8c				  -			;lda temp
    593  1e8c				  -	      lda	savedMidiStatus
    594  1e8c				  -	      ldy	#6
    595  1e8c				  -	      jsr	displayHex
    596  1e8c				  -	      lda	temp
    597  1e8c				  -	      ldy	temp
    598  1e8c				  -	      inc	1824+83	; DEBUG INDICATOR
    599  1e8c					      ENDIF
    600  1e8c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    601  1e8c		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
    602  1e8f		       38		      sec
    603  1e90		       e9 0c		      sbc	#12	; Down one octave
    604  1e92				   doNoteOn
    605  1e92							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    606  1e92							; DEBUG - SHOW MIDI DATA
    607  1e92				  -	      IF	DEBUG_DISPLAY=1
    608  1e92				  -	      sta	temp
    609  1e92				  -	      lda	noteOnCount
    610  1e92				  -	      and	#%1111
    611  1e92				  -	      asl
    612  1e92				  -	      tax
    613  1e92				  -	      lda	temp
    614  1e92				  -	      ldy	#7
    615  1e92				  -	      jsr	displayHex
    616  1e92				  -	      lda	temp
    617  1e92				  -	      ldy	temp
    618  1e92					      ENDIF
    619  1e92							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    620  1e92
    621  1e92							; Find empty note slot...
    622  1e92		       ae 80 70 	      ldx	bufferSize	;3
    623  1e95		       a8		      tay
    624  1e96							;ldx #3 ; DEBUG!
    625  1e96		       ca		      dex
    626  1e97				   noteOnLoop
    627  1e97		       bd a0 70 	      lda	noteNumArray,x
    628  1e9a		       c9 ff		      cmp	#255
    629  1e9c		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
    630  1e9e		       ca		      dex
    631  1e9f		       10 f6		      bpl	noteOnLoop
    632  1ea1		       a2 00		      ldx	#0
    633  1ea3				   quitNoteOnLoop
    634  1ea3
    635  1ea3		       98		      tya
    636  1ea4		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
    637  1ea7
    638  1ea7							;jsr midiReadWait ; Read velocity byte
    639  1ea7		       ad 7f 70 	      lda	tempVelocity
    640  1eaa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    641  1eaa							; DEBUG - SHOW MIDI DATA
    642  1eaa				  -	      IF	DEBUG_DISPLAY=1
    643  1eaa				  -	      sta	temp
    644  1eaa				  -	      lda	noteOnCount
    645  1eaa				  -	      and	#%1111
    646  1eaa				  -	      asl
    647  1eaa				  -	      tax
    648  1eaa				  -	      lda	temp
    649  1eaa				  -	      ldy	#8
    650  1eaa				  -	      jsr	displayHex
    651  1eaa				  -	      lda	temp
    652  1eaa				  -	      ldy	temp
    653  1eaa					      ENDIF
    654  1eaa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    655  1eaa							;/----------------------
    656  1eaa		       ee 8c 70 	      inc	noteOnCount
    657  1ead		       60		      rts
    658  1eae
    659  1eae				   noteOff
    660  1eae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  1eae							; DEBUG - SHOW MIDI DATA
    662  1eae				  -	      IF	DEBUG_DISPLAY=1
    663  1eae				  -	      sta	temp
    664  1eae				  -	      lda	noteOffCount
    665  1eae				  -	      and	#1
    666  1eae				  -			;eor #1
    667  1eae				  -	      asl
    668  1eae				  -	      asl
    669  1eae				  -	      asl
    670  1eae				  -	      ora	#$F4
    671  1eae				  -	      sta	hexDispColor
    672  1eae				  -	      lda	noteOffCount
    673  1eae				  -	      and	#%1111
    674  1eae				  -	      asl
    675  1eae				  -	      tax
    676  1eae				  -	      lda	temp
    677  1eae				  -	      ldy	#10
    678  1eae				  -	      jsr	displayHex
    679  1eae				  -	      lda	temp
    680  1eae				  -	      ldy	temp
    681  1eae					      ENDIF
    682  1eae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    683  1eae
    684  1eae							;jmp endMIDI
    685  1eae
    686  1eae		       8d 0c 70 	      sta	temp
    687  1eb1					      IF	ENABLE_MIDI_COMMANDS=1
    688  1eb1		       20 f9 3a 	      jsr	midiReadWait	; Read velocity byte
    689  1eb4					      ENDIF
    690  1eb4		       8d 7f 70 	      sta	tempVelocity
    691  1eb7		       ad 0c 70 	      lda	temp
    692  1eba
    693  1eba		       ad 7e 70 	      lda	firstDataByte
    694  1ebd		       38		      sec
    695  1ebe		       e9 0c		      sbc	#12	; Down one octave
    696  1ec0							;jsr midiReadWait ; Note number
    697  1ec0
    698  1ec0				   doNoteOff
    699  1ec0							; Find matching note number to turn note off...
    700  1ec0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    701  1ec0							; DEBUG - SHOW MIDI DATA
    702  1ec0				  -	      IF	DEBUG_DISPLAY=1
    703  1ec0				  -	      sta	temp
    704  1ec0				  -	      lda	noteOffCount
    705  1ec0				  -	      and	#%1111
    706  1ec0				  -	      asl
    707  1ec0				  -	      tax
    708  1ec0				  -	      lda	temp
    709  1ec0				  -	      ldy	#11
    710  1ec0				  -	      jsr	displayHex
    711  1ec0				  -	      lda	temp
    712  1ec0				  -	      ldy	temp
    713  1ec0					      ENDIF
    714  1ec0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    715  1ec0
    716  1ec0		       ae 80 70 	      ldx	bufferSize	;3
    717  1ec3		       8d 0c 70 	      sta	temp
    718  1ec6							;ldx #3 ; DEBUG!
    719  1ec6		       ca		      dex
    720  1ec7				   killNoteLoop
    721  1ec7		       bd a0 70 	      lda	noteNumArray,x
    722  1eca		       cd 0c 70 	      cmp	temp	; Note match?
    723  1ecd		       f0 06		      beq	foundNote	; Then go turn off note
    724  1ecf		       ca		      dex		; next slot
    725  1ed0		       10 f5		      bpl	killNoteLoop	; loop through all slots
    726  1ed2							;Not found, so ignore
    727  1ed2		       4c da 1e 	      jmp	endNoteOff
    728  1ed5
    729  1ed5				   foundNote
    730  1ed5		       a9 ff		      lda	#255
    731  1ed7		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
    732  1eda
    733  1eda				   endNoteOff
    734  1eda		       ad 7f 70 	      lda	tempVelocity
    735  1edd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    736  1edd							; DEBUG - SHOW MIDI DATA
    737  1edd				  -	      IF	DEBUG_DISPLAY=1
    738  1edd				  -	      sta	temp
    739  1edd				  -	      lda	noteOffCount
    740  1edd				  -	      and	#%1111
    741  1edd				  -	      asl
    742  1edd				  -	      tax
    743  1edd				  -	      lda	temp
    744  1edd				  -	      ldy	#12
    745  1edd				  -	      jsr	displayHex
    746  1edd				  -	      lda	temp
    747  1edd				  -	      ldy	temp
    748  1edd					      ENDIF
    749  1edd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    750  1edd							;/----------------------
    751  1edd		       ee 8b 70 	      inc	noteOffCount
    752  1ee0		       60		      rts
    753  1ee1
    754  1ee1
    755  1ee1				   endMIDI
    756  1ee1							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    757  1ee1							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  1ee1							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    759  1ee1							; FILL EMPTY PLAYABLE NOTES WITH ANY
    760  1ee1							; NON-PLAYING NOTES IN THE BUFFER
    761  1ee1							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    762  1ee1							;jsr doSort
    763  1ee1
    764  1ee1		       ae 84 70 	      ldx	polyphony
    765  1ee4		       ca		      dex
    766  1ee5							;ldx #2 ; DEBUG
    767  1ee5				   noteScan
    768  1ee5		       bd a0 70 	      lda	noteNumArray,x
    769  1ee8		       c9 ff		      cmp	#255	; Is note off?
    770  1eea		       f0 06		      beq	searchCopyNote
    771  1eec				   contNoteScan
    772  1eec		       ca		      dex
    773  1eed		       10 f6		      bpl	noteScan	; Loop...
    774  1eef		       4c 0e 1f 	      jmp	quitNoteScan	; Done, jump to end
    775  1ef2
    776  1ef2				   searchCopyNote
    777  1ef2							;ldy bufferSize
    778  1ef2							;dey
    779  1ef2							;ldy #3
    780  1ef2		       ac 84 70 	      ldy	polyphony
    781  1ef5				   copyNoteLoop
    782  1ef5		       b9 a0 70 	      lda	noteNumArray,y
    783  1ef8		       c9 ff		      cmp	#255
    784  1efa		       d0 07		      bne	replaceNote
    785  1efc		       c8		      iny
    786  1efd		       c0 08		      cpy	#NOTE_BUF_SIZE
    787  1eff		       f0 eb		      beq	contNoteScan
    788  1f01		       d0 f2		      bne	copyNoteLoop
    789  1f03
    790  1f03				   replaceNote
    791  1f03		       9d a0 70 	      sta	noteNumArray,x
    792  1f06		       a9 ff		      lda	#255
    793  1f08		       99 a0 70 	      sta	noteNumArray,y
    794  1f0b		       4c ec 1e 	      jmp	contNoteScan
    795  1f0e
    796  1f0e				   quitNoteScan
    797  1f0e		       60		      rts
    798  1f0f							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    799  1f0f
    800  1f0f
    801  1f0f
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sidedit.asm LEVEL 2 PASS 2
      0  1f0f					      include	"cynth_sidedit.asm"
      1  1f0f		       00 04	   HEX_DISP_OFFSET equ	4
      2  1f0f
      3  1f0f
      4  1f0f							;---------------------------------
      5  1f0f							; Wait until no hex key is down
      6  1f0f							; (doesn't check all keys, only hex keys!)
      7  1f0f				   waitForKeyRelease
      8  1f0f		       20 df 20 	      jsr	readHexKey
      9  1f12		       c9 ff		      cmp	#255
     10  1f14		       d0 f9		      bne	waitForKeyRelease
     11  1f16		       a2 ff		      ldx	#255	; Always 255
     12  1f18		       a0 60		      ldy	#96	; Delay amount
     13  1f1a				   delay		; Delay a short time to avoid catching key bounce...
     14  1f1a		       ca		      dex
     15  1f1b		       d0 fd		      bne	delay
     16  1f1d		       88		      dey
     17  1f1e		       d0 fa		      bne	delay
     18  1f20		       60		      rts
     19  1f21
     20  1f21
     21  1f21							;===============================================
     22  1f21							; Allow the user to hex edit the SID registers
     23  1f21							; directly.
     24  1f21				   SIDEdit
     25  1f21
     26  1f21							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
     27  1f21		       ae 9d 70 	      ldx	filterSetValue
     28  1f24		       8e 54 70 	      stx	sidEditSaveTemp5
     29  1f27
     30  1f27		       8d 60 70 	      sta	hexKeyMode
     31  1f2a
     32  1f2a							;jsr beep
     33  1f2a							;jsr beep
     34  1f2a							;jsr beep
     35  1f2a
     36  1f2a		       20 ae 0c 	      jsr	clrScr
     37  1f2d		       20 ef 0b 	      jsr	displayInit
     38  1f30
     39  1f30							; X = low data address
     40  1f30							; Y = high data address
     41  1f30		       a2 2a		      ldx	#>hexEditHelp	;low/MSB
     42  1f32		       a0 60		      ldy	#<hexEditHelp	;high/LSB
     43  1f34		       20 05 0d 	      jsr	displayPage
     44  1f37
     45  1f37		       20 64 20 	      jsr	showSidValues
     46  1f3a
     47  1f3a
     48  1f3a							;enable keyboard interrupt
     49  1f3a							;	lda #129
     50  1f3a							;	sta 56333
     51  1f3a							; wait for all keys to be released first
     52  1f3a							;waitForNoKey:
     53  1f3a							;	lda 197
     54  1f3a							;	cmp #64
     55  1f3a							;	bne waitForNoKey
     56  1f3a
     57  1f3a
     58  1f3a							; clear top line
     59  1f3a		       a2 09		      ldx	#9
     60  1f3c		       a9 20		      lda	#32
     61  1f3e				   hexClearA
     62  1f3e		       9d 00 04 	      sta	1024,x
     63  1f41		       ca		      dex
     64  1f42		       10 fa		      bpl	hexClearA
     65  1f44
     66  1f44							; display "sid edit" text
     67  1f44		       a2 5c		      ldx	#92
     68  1f46		       a0 00		      ldy	#0
     69  1f48		       20 8e 0c 	      jsr	updateText
     70  1f4b
     71  1f4b							;jsr waitForKeyRelease
     72  1f4b
     73  1f4b							; get/display the first hex digit of the address to edit
     74  1f4b		       a9 24		      lda	#36
     75  1f4d		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     76  1f50		       20 d4 20 	      jsr	getHexKey
     77  1f53		       c9 10		      cmp	#16	; cancelled
     78  1f55		       d0 03		      bne	notCancelled
     79  1f57		       4c 4c 20 	      jmp	waitKeyRelease
     80  1f5a				   notCancelled
     81  1f5a		       aa		      tax
     82  1f5b		       0a		      asl
     83  1f5c		       0a		      asl
     84  1f5d		       0a		      asl
     85  1f5e		       0a		      asl
     86  1f5f		       8d 5a 70 	      sta	SIDeditAddr
     87  1f62		       bd e6 33 	      lda	hexDisplay,x
     88  1f65		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     89  1f68
     90  1f68							;sta 1024
     91  1f68							;jsr waitForKeyRelease
     92  1f68							;sta 1024
     93  1f68
     94  1f68							; get/display the second hex digit of the address to edit
     95  1f68		       a9 24		      lda	#36
     96  1f6a		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
     97  1f6d		       20 d4 20 	      jsr	getHexKey
     98  1f70		       c9 10		      cmp	#16	; cancelled
     99  1f72		       d0 03		      bne	notCancelled2
    100  1f74		       4c 4c 20 	      jmp	waitKeyRelease
    101  1f77				   notCancelled2
    102  1f77		       aa		      tax
    103  1f78		       0d 5a 70 	      ora	SIDeditAddr
    104  1f7b		       8d 5a 70 	      sta	SIDeditAddr
    105  1f7e		       bd e6 33 	      lda	hexDisplay,x
    106  1f81		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
    107  1f84
    108  1f84							; display a '>' between
    109  1f84		       a9 3e		      lda	#62
    110  1f86		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
    111  1f89
    112  1f89							; get/display the first hex digit of the value to write
    113  1f89		       a9 24		      lda	#36
    114  1f8b		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    115  1f8e		       20 d4 20 	      jsr	getHexKey
    116  1f91		       c9 10		      cmp	#16	; cancelled
    117  1f93		       d0 03		      bne	notCancelled3
    118  1f95		       4c 4c 20 	      jmp	waitKeyRelease
    119  1f98				   notCancelled3
    120  1f98		       aa		      tax
    121  1f99		       0a		      asl
    122  1f9a		       0a		      asl
    123  1f9b		       0a		      asl
    124  1f9c		       0a		      asl
    125  1f9d		       8d 5b 70 	      sta	SIDeditValue
    126  1fa0		       bd e6 33 	      lda	hexDisplay,x
    127  1fa3		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    128  1fa6
    129  1fa6							; get/display the second hex digit of the value to write
    130  1fa6		       a9 24		      lda	#36
    131  1fa8		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    132  1fab		       20 d4 20 	      jsr	getHexKey
    133  1fae		       c9 10		      cmp	#16	; cancelled
    134  1fb0		       d0 03		      bne	notCancelled4
    135  1fb2		       4c 4c 20 	      jmp	waitKeyRelease
    136  1fb5				   notCancelled4
    137  1fb5		       aa		      tax
    138  1fb6		       0d 5b 70 	      ora	SIDeditValue
    139  1fb9		       8d 5b 70 	      sta	SIDeditValue
    140  1fbc		       bd e6 33 	      lda	hexDisplay,x
    141  1fbf		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    142  1fc2
    143  1fc2							; if <=$20 then write to all 3 SID oscillator regs
    144  1fc2		       ae 5a 70 	      ldx	SIDeditAddr
    145  1fc5		       e0 20		      cpx	#$20
    146  1fc7		       30 2e		      bmi	normalWrite
    147  1fc9							;--------------
    148  1fc9		       ad 5b 70 	      lda	SIDeditValue
    149  1fcc		       9d e0 d3 	      sta	SID1-32,x
    150  1fcf		       9d 00 d4 	      sta	SID2-32,x
    151  1fd2		       9d e0 70 	      sta	sidData-32,x
    152  1fd5		       9d e7 d3 	      sta	SID1-32+#$7,x
    153  1fd8		       9d 07 d4 	      sta	SID2-32+#$7,x
    154  1fdb		       9d e7 70 	      sta	sidData-32+#$7,x
    155  1fde		       9d ee d3 	      sta	SID1-32+#$E,x
    156  1fe1		       9d 0e d4 	      sta	SID2-32+#$E,x
    157  1fe4		       9d ee 70 	      sta	sidData-32+#$E,x
    158  1fe7		       e0 24		      cpx	#SV1WAVE+32
    159  1fe9		       d0 09		      bne	no3Wave
    160  1feb		       8d 30 70 	      sta	WaveType
    161  1fee		       8d 37 70 	      sta	WaveType2
    162  1ff1		       8d 3e 70 	      sta	WaveType3
    163  1ff4				   no3Wave
    164  1ff4		       4c 32 20 	      jmp	skipNormalWrite
    165  1ff7							;...............
    166  1ff7				   normalWrite
    167  1ff7							; write the value to both sids
    168  1ff7		       ae 5a 70 	      ldx	SIDeditAddr
    169  1ffa		       ad 5b 70 	      lda	SIDeditValue
    170  1ffd		       9d 00 d4 	      sta	SID1,x
    171  2000		       9d 20 d4 	      sta	SID2,x
    172  2003		       9d 00 71 	      sta	sidData,x
    173  2006
    174  2006		       e0 04		      cpx	#SV1WAVE
    175  2008		       d0 03		      bne	noWave1
    176  200a		       8d 30 70 	      sta	WaveType
    177  200d				   noWave1
    178  200d
    179  200d		       e0 0b		      cpx	#SV2WAVE
    180  200f		       d0 03		      bne	noWave2
    181  2011		       8d 37 70 	      sta	WaveType2
    182  2014				   noWave2
    183  2014
    184  2014		       e0 12		      cpx	#SV3WAVE
    185  2016		       d0 03		      bne	noWave3
    186  2018		       8d 3e 70 	      sta	WaveType3
    187  201b				   noWave3
    188  201b
    189  201b		       e0 16		      cpx	#SFILTH
    190  201d		       d0 03		      bne	noFiltSave
    191  201f		       8d 57 70 	      sta	filter
    192  2022				   noFiltSave
    193  2022
    194  2022							; turn off paddles if filter was adjusted
    195  2022		       e0 15		      cpx	#SFILTL
    196  2024		       f0 04		      beq	paddleOffhex
    197  2026		       e0 16		      cpx	#SFILTH
    198  2028		       d0 08		      bne	noPaddleOff
    199  202a				   paddleOffhex
    200  202a		       a9 00		      lda	#0
    201  202c		       8d 29 70 	      sta	paddle	; turn off paddle controller first
    202  202f		       20 50 11 	      jsr	showPaddle
    203  2032				   noPaddleOff
    204  2032
    205  2032				   skipNormalWrite
    206  2032		       ae 5a 70 	      ldx	SIDeditAddr
    207  2035		       ad 5b 70 	      lda	SIDeditValue
    208  2038
    209  2038							; check for a volume/mode change...
    210  2038							; if changed, write it to related variables too
    211  2038		       e0 18		      cpx	#SVOLMODE
    212  203a		       d0 10		      bne	noVolumeSetting
    213  203c		       8d 0c 70 	      sta	temp
    214  203f		       29 f0		      and	#$F0
    215  2041		       8d 24 70 	      sta	volModeRAM
    216  2044		       ad 0c 70 	      lda	temp
    217  2047		       29 0f		      and	#$0F
    218  2049		       8d 1c 70 	      sta	volume
    219  204c				   noVolumeSetting
    220  204c							;	lda volModeRAM
    221  204c							;	and #$F0
    222  204c							;	ora volume
    223  204c
    224  204c							; wait for key to be released before returning
    225  204c				   waitKeyRelease
    226  204c		       a5 c5		      lda	197
    227  204e		       c9 40		      cmp	#64
    228  2050		       d0 fa		      bne	waitKeyRelease
    229  2052
    230  2052							; reset volume (messed up from clicks)
    231  2052		       20 80 12 	      jsr	setVolume
    232  2055
    233  2055		       a9 00		      lda	#0
    234  2057							;sta helpMode
    235  2057		       20 24 11 	      jsr	setHelpMode
    236  205a		       20 ef 0b 	      jsr	displayInit
    237  205d							; X = low data address
    238  205d							; Y = high data address
    239  205d							;	ldx #>hexEditHelp ;low/MSB
    240  205d							;	ldy #<hexEditHelp ;high/LSB
    241  205d							;	jsr displayPage
    242  205d							;	jsr showSidValues
    243  205d
    244  205d							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
    245  205d		       ad 54 70 	      lda	sidEditSaveTemp5
    246  2060		       8d 9d 70 	      sta	filterSetValue
    247  2063
    248  2063
    249  2063		       60		      rts		; EXIT HEX EDIT MODE
    250  2064							; -------------------------------------------------- /
    251  2064
    252  2064
    253  2064
    254  2064							;************************************
    255  2064				   showSidValues
    256  2064		       a0 02		      ldy	#2
    257  2066				   sidDispLoop1
    258  2066		       8c 73 70 	      sty	sidTemp1
    259  2069		       b9 00 71 	      lda	sidData,y
    260  206c		       8d 74 70 	      sta	sidTemp2
    261  206f		       98		      tya
    262  2070		       0a		      asl
    263  2071		       18		      clc
    264  2072		       69 04		      adc	#4
    265  2074		       a8		      tay
    266  2075		       ad 74 70 	      lda	sidTemp2
    267  2078		       a2 06		      ldx	#6
    268  207a		       20 c2 0c 	      jsr	displayHex
    269  207d		       ac 73 70 	      ldy	sidTemp1
    270  2080							;---------------
    271  2080		       b9 07 71 	      lda	sidData+7,y
    272  2083		       8d 74 70 	      sta	sidTemp2
    273  2086		       98		      tya
    274  2087		       0a		      asl
    275  2088		       18		      clc
    276  2089		       69 04		      adc	#4
    277  208b		       a8		      tay
    278  208c		       ad 74 70 	      lda	sidTemp2
    279  208f		       a2 0a		      ldx	#10
    280  2091		       20 c2 0c 	      jsr	displayHex
    281  2094		       ac 73 70 	      ldy	sidTemp1
    282  2097							;---------------
    283  2097		       b9 0e 71 	      lda	sidData+14,y
    284  209a		       8d 74 70 	      sta	sidTemp2
    285  209d		       98		      tya
    286  209e		       0a		      asl
    287  209f		       18		      clc
    288  20a0		       69 04		      adc	#4
    289  20a2		       a8		      tay
    290  20a3		       ad 74 70 	      lda	sidTemp2
    291  20a6		       a2 0e		      ldx	#14
    292  20a8		       20 c2 0c 	      jsr	displayHex
    293  20ab		       ac 73 70 	      ldy	sidTemp1
    294  20ae
    295  20ae		       c8		      iny
    296  20af		       c0 07		      cpy	#7
    297  20b1		       d0 b3		      bne	sidDispLoop1
    298  20b3							;---------------
    299  20b3							;---------------
    300  20b3		       a0 15		      ldy	#$15
    301  20b5				   sidDispLoop2
    302  20b5		       8c 73 70 	      sty	sidTemp1
    303  20b8		       b9 00 71 	      lda	sidData,y
    304  20bb		       8d 74 70 	      sta	sidTemp2
    305  20be		       98		      tya
    306  20bf		       38		      sec
    307  20c0		       e9 02		      sbc	#2
    308  20c2		       a8		      tay
    309  20c3		       ad 74 70 	      lda	sidTemp2
    310  20c6		       a2 05		      ldx	#5
    311  20c8		       20 c2 0c 	      jsr	displayHex
    312  20cb		       ac 73 70 	      ldy	sidTemp1
    313  20ce
    314  20ce		       c8		      iny
    315  20cf		       c0 19		      cpy	#$19
    316  20d1		       d0 e2		      bne	sidDispLoop2
    317  20d3							;---------------
    318  20d3		       60		      rts
    319  20d4
    320  20d4
    321  20d4
    322  20d4							;=======================================================================
    323  20d4							; waits for user to press a key (0-F) and returns
    324  20d4							; the value in A
    325  20d4				   getHexKey
    326  20d4		       20 0f 1f 	      jsr	waitForKeyRelease
    327  20d7				   getHexLoop
    328  20d7							;inc 1024
    329  20d7		       20 df 20 	      jsr	readHexKey
    330  20da		       c9 ff		      cmp	#255	; No key pressed
    331  20dc		       f0 f9		      beq	getHexLoop
    332  20de							;inc 1025
    333  20de		       60		      rts
    334  20df
    335  20df
    336  20df
    337  20df							;=======================================================================
    338  20df							; Returns the currently pressed hex key, or #255 if none
    339  20df							; is currently pressed
    340  20df				   readHexKey
    341  20df
    342  20df		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
    343  20e2		       f0 1a		      beq	normalHexKey
    344  20e4
    345  20e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    346  20e4							; Use piano keys to enter hex numbers
    347  20e4				   pianoHexKey
    348  20e4		       a0 00		      ldy	#0
    349  20e6				   checkLoop2
    350  20e6		       b9 55 21 	      lda	hexColPiano,y
    351  20e9		       f0 10		      beq	quitCheck2
    352  20eb		       8d 00 dc 	      sta	56320
    353  20ee		       ad 01 dc 	      lda	56321
    354  20f1		       39 79 21 	      and	hexRowPiano,y
    355  20f4		       d0 02		      bne	notPressed2
    356  20f6		       98		      tya
    357  20f7							;sta 1027
    358  20f7		       60		      rts
    359  20f8							;jmp quitCheck2
    360  20f8				   notPressed2
    361  20f8		       c8		      iny
    362  20f9		       d0 eb		      bne	checkLoop2
    363  20fb				   quitCheck2
    364  20fb		       a9 ff		      lda	#255	; no key pressed
    365  20fd		       60		      rts
    366  20fe							;jmp pianoHexKey
    367  20fe							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  20fe
    369  20fe							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  20fe							; Use normal keys (0-9,A-F) to enter hex numbers
    371  20fe				   normalHexKey
    372  20fe		       a0 00		      ldy	#0
    373  2100				   checkLoop3
    374  2100		       b9 67 21 	      lda	hexCol,y
    375  2103		       f0 10		      beq	quitCheck3
    376  2105		       8d 00 dc 	      sta	56320
    377  2108		       ad 01 dc 	      lda	56321
    378  210b		       39 8b 21 	      and	hexRow,y
    379  210e		       d0 02		      bne	notPressed3
    380  2110		       98		      tya
    381  2111							;sta 1027
    382  2111		       60		      rts
    383  2112							;jmp quitCheck3
    384  2112				   notPressed3
    385  2112		       c8		      iny
    386  2113		       d0 eb		      bne	checkLoop3
    387  2115				   quitCheck3
    388  2115		       a9 ff		      lda	#255	; no key pressed
    389  2117		       60		      rts
    390  2118
    391  2118							;beep:
    392  2118							;ldx #3
    393  2118							;beepLoop:
    394  2118							;	lda volModeRAM
    395  2118							;	ora #$0F
    396  2118							;	sta SID1+SVOLMODE
    397  2118							;	sta SID2+SVOLMODE
    398  2118							;	sta sidData+SVOLMODE
    399  2118							;	jsr clickDelay
    400  2118							;	lda volModeRAM
    401  2118							;	and #$F0
    402  2118							;	sta SID1+SVOLMODE
    403  2118							;	sta SID2+SVOLMODE
    404  2118							;	sta sidData+SVOLMODE
    405  2118							;	dex
    406  2118							;	bne beepLoop
    407  2118							;	rts
    408  2118
    409  2118
    410  2118							; ------------------------------------
    411  2118							; delay for click (for beep) -- uses Y
    412  2118							;clickDelay:
    413  2118							;ldy #$10
    414  2118							;sty temp
    415  2118							;mainDelayLoop:
    416  2118							;	ldy #0
    417  2118							;innerDelayLoop:
    418  2118							;	dey
    419  2118							;	bne innerDelayLoop
    420  2118							;	dec temp
    421  2118							;	bne mainDelayLoop
    422  2118							;	rts
    423  2118
------- FILE cynthcart2.0.1.asm
   1041  2118
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  2118					      include	"cynth_subroutines.asm"	; Extra subroutines - currently just note sorting routine
      1  2118							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  2118							;
      3  2118							; input:
      4  2118							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  2118							;			 should point to the byte just before the first byte to be sorted
      6  2118							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  2118							;nval	 - number of values,  1<= nval <= 255
      8  2118							;			 value will be destroyed (set to zero)
      9  2118							;
     10  2118
     11  2118
     12  2118							;*=$6000			;code anywhere in ram or rom
     13  2118
     14  2118							;=====================================================================
     15  2118							; CUSTOM SORT FOR NOTE ARRAY
     16  2118				   doSort
     17  2118		       a9 08		      lda	#8
     18  211a		       8d 22 01 	      sta	nval
     19  211d				   sort
     20  211d		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  2120		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  2123		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  2126		       4c 34 21 	      jmp	l2
     24  2129				   l1
     25  2129		       88		      dey
     26  212a		       f0 11		      beq	l3
     27  212c		       b9 9f 70 	      lda	noteNumArray-1,y
     28  212f		       cd 26 01 	      cmp	work2
     29  2132		       90 f5		      bcc	l1
     30  2134				   l2
     31  2134		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  2137		       8d 26 01 	      sta	work2	;potentially largest value
     33  213a		       4c 29 21 	      jmp	l1
     34  213d				   l3
     35  213d		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  2140		       ad 26 01 	      lda	work2	;the largest value
     37  2143		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  2146		       ac 25 01 	      ldy	work1	;index of free space
     39  2149		       ad 27 01 	      lda	work3	;the over-written value
     40  214c		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  214f		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  2152		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  2154		       60		      rts
     44  2155							;=====================================================================
     45  2155
     46  2155
     47  2155
     48  2155
     49  2155							;=====================================================================
     50  2155							; ORIGINAL VERSION
     51  2155							;originalSort:
     52  2155							;ldy nval			 ;start of subroutine sort
     53  2155							;;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  2155							;sta work3			;save value. will be over-written by largest number
     55  2155							;jmp l2
     56  2155							;l1:
     57  2155							;dey
     58  2155							;beq l3
     59  2155							;;lda (zpadd),y
     60  2155							;cmp work2
     61  2155							;bcc l1
     62  2155							;l2:
     63  2155							;sty work1			;index of potentially largest value
     64  2155							;sta work2			;potentially largest value
     65  2155							;jmp l1
     66  2155							;l3:
     67  2155							;ldy nval				;where the largest value shall be put
     68  2155							;lda work2			;the largest value
     69  2155							;;sta (zpadd),y		;put largest value in place
     70  2155							;ldy work1			;index of free space
     71  2155							;lda work3			;the over-written value
     72  2155							;;sta (zpadd),y		;put the over-written value in the free space
     73  2155							;dec nval				;end of the shorter sequence still left
     74  2155							;bne sort				;start working with the shorter sequence
     75  2155							;rts
     76  2155							;=====================================================================
     77  2155
     78  2155
------- FILE cynthcart2.0.1.asm
   1043  2155
------- FILE cynth_keycommands.asm LEVEL 2 PASS 2
      0  2155					      include	"cynth_keycommands.asm"	; key matrix tables and key command tables
      1  2155
      2  2155							;------------------------------------------
      3  2155							; Keyboard Reading Data
      4  2155							;------------------------------------------
      5  2155
      6  2155				   hexColPiano
      7  2155		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB, $FB,$F7,$EF,$EF, $DF,$BF, $F7,$F7, $EF,$EF,$DF,$DF, $7F,0	; PIANO KEYBOARD
      8  2167				   hexCol
      9  2167		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04, $7F,0
     10  2179							; 0   1   2   3     4	 5   6	 7     8   9	A   B	    C	D   E	F    SPACEBAR (cancel)
     11  2179				   hexRowPiano
     12  2179		       08 08 01 01*	      byte.b	$08,$08,$01,$01, $08,$01,$01,$08, $08,$01,$02,$40, $02,$40,$02,$40, $02,0	; PIANO KEYBOARD ($10 = space) ($02 = backarrow)
     13  218b				   hexRow
     14  218b		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, $02,0
     15  219d							; 0   1   2   3     4	 5   6	 7     8   9   A   B	 C   D	 E   F	   SPACEBAR (cancel)
     16  219d
     17  219d							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     18  219d							; Column activation data
     19  219d				   col			;	   x	     x		      x 	  x    A    x	 B
     20  219d		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     21  21a9		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     22  21b6							;    C    x	D    x	    E	 F    x 	  x	    x
     23  21b6
     24  21b6							; Row testing data
     25  21b6				   row			;	   x	     x		      x 	  x    A    x	 B
     26  21b6		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     27  21c2		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     28  21cf							;    C    x	D    x	    E	 F    x 	  x	    x
     29  21cf							;-----------------------------------------------
     30  21cf							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     31  21cf							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     32  21cf							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     33  21cf							;-----------------------------------------------
     34  21cf							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     35  21cf							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     36  21cf							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     37  21cf							;-----------------------------------------------
     38  21cf
     39  21cf				   commandKeys		; row, column
     40  21cf		       7f 10		      byte.b	~$80, $10	;spc 28
     41  21d1		       fd 04		      byte.b	~$02, $04	;A   0
     42  21d3		       fd 20		      byte.b	~$02, $20	;S   1
     43  21d5		       fb 04		      byte.b	~$04, $04	;D   2
     44  21d7		       fb 20		      byte.b	~$04, $20	;F   3
     45  21d9		       f7 04		      byte.b	~$08, $04	;G   4
     46  21db		       f7 20		      byte.b	~$08, $20	;H   5
     47  21dd		       ef 04		      byte.b	~$10, $04	;J   6
     48  21df		       ef 20		      byte.b	~$10, $20	;K   7
     49  21e1		       df 04		      byte.b	~$20, $04	;L   8
     50  21e3		       df 20		      byte.b	~$20, $20	;:   9
     51  21e5		       bf 04		      byte.b	~$40, $04	;;   10
     52  21e7		       bf 20		      byte.b	~$40, $20	;=   11
     53  21e9		       fd 10		      byte.b	~$02, $10	;Z   12
     54  21eb		       fb 80		      byte.b	~$04, $80	;X   13
     55  21ed		       fb 10		      byte.b	~$04, $10	;C   14
     56  21ef		       f7 80		      byte.b	~$08, $80	;V   15
     57  21f1		       f7 10		      byte.b	~$08, $10	;B   16
     58  21f3		       ef 80		      byte.b	~$10, $80	;N   17
     59  21f5		       ef 10		      byte.b	~$10, $10	;M   18
     60  21f7		       df 80		      byte.b	~$20, $80	;,   19
     61  21f9		       df 10		      byte.b	~$20, $10	;.   20
     62  21fb		       bf 80		      byte.b	~$40, $80	;/   21
     63  21fd		       fe 80		      byte.b	~$01, $80	;u/d 22
     64  21ff		       fe 04		      byte.b	~$01, $04	;l/r 23
     65  2201		       fe 10		      byte.b	~$01, $10	;F1  24
     66  2203		       fe 20		      byte.b	~$01, $20	;F3  25
     67  2205		       fe 40		      byte.b	~$01, $40	;F5  26
     68  2207		       fe 08		      byte.b	~$01, $08	;F7  27
     69  2209		       fe 02		      byte.b	~$01, $02	;ret 29
     70  220b		       7f 02		      byte.b	~$80, $02	;Larr 30
     71  220d							;byte ~$80, $04		;Larr 30
     72  220d
     73  220d				   rawKeyFunctions
     74  220d							;    functionPointer, inputData:Y,A
     75  220d		       1a 10 00 00	      word.w	bendBender, $0000	;space
     76  2211		       a4 13 00 0a	      word.w	setPatch, $0A00	;A
     77  2215		       a4 13 00 0b	      word.w	setPatch, $0B00	;S
     78  2219		       a4 13 00 0c	      word.w	setPatch, $0C00	;D
     79  221d		       a4 13 00 0d	      word.w	setPatch, $0D00	;F
     80  2221		       a4 13 00 0e	      word.w	setPatch, $0E00	;G
     81  2225		       a4 13 00 0f	      word.w	setPatch, $0F00	;H
     82  2229		       a4 13 00 10	      word.w	setPatch, $1000	;J
     83  222d		       a4 13 00 11	      word.w	setPatch, $1100	;K
     84  2231		       a4 13 00 12	      word.w	setPatch, $1200	;L
     85  2235		       a4 13 00 13	      word.w	setPatch, $1300	;:
     86  2239		       a4 13 00 15	      word.w	setPatch, $1500	;;
     87  223d		       a4 13 00 14	      word.w	setPatch, $1400	;=
     88  2241		       a4 13 00 00	      word.w	setPatch, $0000	;Z
     89  2245		       a4 13 00 01	      word.w	setPatch, $0100	;X
     90  2249		       a4 13 00 02	      word.w	setPatch, $0200	;C
     91  224d		       a4 13 00 03	      word.w	setPatch, $0300	;V
     92  2251		       a4 13 00 04	      word.w	setPatch, $0400	;B
     93  2255		       a4 13 00 05	      word.w	setPatch, $0500	;N
     94  2259		       a4 13 00 06	      word.w	setPatch, $0600	;M
     95  225d		       a4 13 00 07	      word.w	setPatch, $0700	;,
     96  2261		       a4 13 00 08	      word.w	setPatch, $0800	;.
     97  2265		       a4 13 00 09	      word.w	setPatch, $0900	;/
     98  2269		       51 13 00 00	      word.w	ksetMode, $0000	;up/down
     99  226d		       51 13 01 00	      word.w	ksetMode, $0001	;left/right
    100  2271		       d0 12 03 00	      word.w	setOctave, 3	;F1
    101  2275		       d0 12 02 00	      word.w	setOctave, 2	;F3
    102  2279		       d0 12 01 00	      word.w	setOctave, 1	;F5
    103  227d		       d0 12 00 00	      word.w	setOctave, 0	;F7
    104  2281		       b2 0f 00 00	      word.w	khelp,0	;return
    105  2285		       44 0f 00 00	      word.w	kloadPatch,0	;Larrow
    106  2289
    107  2289				   minimalKeyFunctions
    108  2289							;    functionPointer, inputData:Y,A
    109  2289		       1a 10 00 00	      word.w	bendBender, $0000	;space
    110  228d		       00 00 00 00	      word.w	0, 0	;A
    111  2291		       00 00 00 00	      word.w	0, 0	;S
    112  2295		       00 00 00 00	      word.w	0, 0	;D
    113  2299		       00 00 00 00	      word.w	0, 0	;F
    114  229d		       00 00 00 00	      word.w	0, 0	;G
    115  22a1		       00 00 00 00	      word.w	0, 0	;H
    116  22a5		       00 00 00 00	      word.w	0, 0	;J
    117  22a9		       00 00 00 00	      word.w	0, 0	;K
    118  22ad		       00 00 00 00	      word.w	0, 0	;L
    119  22b1		       00 00 00 00	      word.w	0, 0	;:
    120  22b5		       00 00 00 00	      word.w	0, 0	;;
    121  22b9		       00 00 00 00	      word.w	0, 0	;=
    122  22bd		       00 00 00 00	      word.w	0, 0	;Z
    123  22c1		       00 00 00 00	      word.w	0, 0	;X
    124  22c5		       00 00 00 00	      word.w	0, 0	;C
    125  22c9		       00 00 00 00	      word.w	0, 0	;V
    126  22cd		       00 00 00 00	      word.w	0, 0	;B
    127  22d1		       00 00 00 00	      word.w	0, 0	;N
    128  22d5		       00 00 00 00	      word.w	0, 0	;M
    129  22d9		       00 00 00 00	      word.w	0, 0	;,
    130  22dd		       00 00 00 00	      word.w	0, 0	;.
    131  22e1		       00 00 00 00	      word.w	0, 0	;/
    132  22e5		       00 00 00 00	      word.w	0, 0	;up/down
    133  22e9		       00 00 00 00	      word.w	0, 0	;left/right
    134  22ed		       d0 12 03 00	      word.w	setOctave, 3	;F1
    135  22f1		       d0 12 02 00	      word.w	setOctave, 2	;F3
    136  22f5		       d0 12 01 00	      word.w	setOctave, 1	;F5
    137  22f9		       d0 12 00 00	      word.w	setOctave, 0	;F7
    138  22fd		       00 00 00 00	      word.w	0,0	;return
    139  2301		       00 00 00 00	      word.w	0,0	;Larrow
    140  2305
    141  2305				   CTRLKeyFunctions
    142  2305							;    functionPointer, inputData:Y,A
    143  2305		       00 00 00 00	      word.w	0, $0000	;space
    144  2309		       9d 11 e0 00	      word.w	setRelease, REL_SHORT	;A
    145  230d		       9d 11 e9 00	      word.w	setRelease, REL_MED	;S
    146  2311		       9d 11 ee 00	      word.w	setRelease, REL_LONG	;D
    147  2315		       51 13 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    148  2319		       51 13 01 00	      word.w	ksetMode, MODE_5THS	;G
    149  231d		       51 13 02 00	      word.w	ksetMode, MODE_5PORT	;H
    150  2321		       51 13 20 00	      word.w	ksetMode, MODE_MONO1	;J
    151  2325		       51 13 40 00	      word.w	ksetMode, MODE_ARP1	;K
    152  2329		       51 13 41 00	      word.w	ksetMode, MODE_ARP2	;L
    153  232d		       51 13 42 00	      word.w	ksetMode, MODE_ARP3	;:
    154  2331		       51 13 43 00	      word.w	ksetMode, MODE_ARP4	;;
    155  2335		       51 13 44 00	      word.w	ksetMode, MODE_ARP5	;=
    156  2339		       29 13 00 00	      word.w	ksetFX, $0000	;Z
    157  233d		       29 13 01 00	      word.w	ksetFX, $0001	;X
    158  2341		       29 13 02 00	      word.w	ksetFX, $0002	;C
    159  2345		       29 13 03 00	      word.w	ksetFX, $0003	;V
    160  2349		       29 13 04 00	      word.w	ksetFX, $0004	;B
    161  234d		       29 13 05 00	      word.w	ksetFX, $0005	;N
    162  2351		       29 13 06 00	      word.w	ksetFX, $0006	;M
    163  2355		       29 13 07 00	      word.w	ksetFX, $0007	;,
    164  2359		       29 13 08 00	      word.w	ksetFX, $0008	;.
    165  235d							;word ksetFX,	$0009	;/
    166  235d		       51 13 21 00	      word.w	ksetMode, MODE_MONO2	;/
    167  2361		       51 13 31 00	      word.w	ksetMode, MODE_MONOPORT1	;up/down
    168  2365		       51 13 32 00	      word.w	ksetMode, MODE_MONOPORT2	;left/right
    169  2369		       7d 12 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    170  236d		       7d 12 0b 00	      word.w	ksetVolume, VOLMED	;F3
    171  2371		       7d 12 07 00	      word.w	ksetVolume, VOLLOW	;F5
    172  2375		       7d 12 00 00	      word.w	ksetVolume, VOLOFF	;F7
    173  2379		       51 13 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    174  237d		       00 00 00 00	      word.w	0,0	;Larrow
    175  2381
    176  2381				   shiftKeyFunctions
    177  2381							;    functionPointer, inputData:Y,A
    178  2381		       00 00 00 00	      word.w	0, $0000	;space
    179  2385		       4a 12 00 00	      word.w	setAttack,ATK_SHORT	;A
    180  2389		       4a 12 90 00	      word.w	setAttack,ATK_MED	;S
    181  238d		       4a 12 e0 00	      word.w	setAttack,ATK_LONG	;D
    182  2391		       28 11 08 01	      word.w	setVideoMode,$0108	;F
    183  2395		       28 11 03 02	      word.w	setVideoMode,$0203	;G
    184  2399		       28 11 15 03	      word.w	setVideoMode,$0315	;H
    185  239d		       33 10 02 00	      word.w	setVIC, 2	;J
    186  23a1		       33 10 01 00	      word.w	setVIC, 1	;K
    187  23a5		       33 10 00 00	      word.w	setVIC, 0	;L
    188  23a9		       f8 10 01 00	      word.w	setFullScreenMode, $0001	;:
    189  23ad		       f8 10 00 00	      word.w	setFullScreenMode, $0000	;;
    190  23b1		       00 00 00 00	      word.w	0, $0000	;=
    191  23b5		       6d 11 00 00	      word.w	setLFORate,0	;Z
    192  23b9		       6d 11 01 00	      word.w	setLFORate,1	;X
    193  23bd		       6d 11 02 00	      word.w	setLFORate,2	;C
    194  23c1		       6d 11 03 00	      word.w	setLFORate,3	;V
    195  23c5		       57 11 00 00	      word.w	setLFODepth,0	;B
    196  23c9		       57 11 01 00	      word.w	setLFODepth,1	;N
    197  23cd		       57 11 02 00	      word.w	setLFODepth,2	;M
    198  23d1		       57 11 03 00	      word.w	setLFODepth,3	;,
    199  23d5		       00 00 00 00	      word.w	0, $0000	;.
    200  23d9		       00 00 00 00	      word.w	0, $0000	;/
    201  23dd		       37 10 00 00	      word.w	ksetPaddles, 0	;up/down
    202  23e1		       37 10 01 00	      word.w	ksetPaddles, 1	;left/right
    203  23e5		       51 13 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    204  23e9		       51 13 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    205  23ed		       51 13 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    206  23f1		       51 13 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    207  23f5		       05 10 00 00	      word.w	kclearModulation,0	;return
    208  23f9		       00 00 00 00	      word.w	0,0	;Larrow
    209  23fd
    210  23fd				   commKeyFunctions
    211  23fd							;    functionPointer, inputData:Y,A
    212  23fd		       00 00 00 00	      word.w	0, $0000	;space
    213  2401		       56 10 00 00	      word.w	ksetFilter, $0000	;A
    214  2405		       56 10 20 00	      word.w	ksetFilter, $0020	;S
    215  2409		       56 10 40 00	      word.w	ksetFilter, $0040	;D
    216  240d		       56 10 60 00	      word.w	ksetFilter, $0060	;F
    217  2411		       56 10 80 00	      word.w	ksetFilter, $0080	;G
    218  2415		       56 10 a0 00	      word.w	ksetFilter, $00A0	;H
    219  2419		       56 10 c0 00	      word.w	ksetFilter, $00C0	;J
    220  241d		       56 10 e0 00	      word.w	ksetFilter, $00E0	;K
    221  2421		       00 00 00 00	      word.w	0, $0000	;L
    222  2425		       00 00 00 00	      word.w	0, $0000	;:
    223  2429		       00 00 00 00	      word.w	0, $0000	;;
    224  242d		       00 00 00 00	      word.w	0, $0000	;=
    225  2431		       a6 10 00 00	      word.w	kfiltOnOff,$0000	;Z
    226  2435		       a6 10 00 01	      word.w	kfiltOnOff,$0100	;X
    227  2439		       a6 10 00 02	      word.w	kfiltOnOff,$0200	;C
    228  243d		       41 10 00 00	      word.w	ksetPad2, $0000	;V
    229  2441		       41 10 01 00	      word.w	ksetPad2, $0001	;B
    230  2445		       41 10 03 00	      word.w	ksetPad2, $0003	;N
    231  2449		       41 10 04 00	      word.w	ksetPad2, $0004	;M
    232  244d		       fe 11 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    233  2451		       fe 11 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    234  2455		       fe 11 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    235  2459		       00 00 00 00	      word.w	0, $0000	;up/down
    236  245d		       00 00 00 00	      word.w	0, $0000	;left/right
    237  2461		       14 10 01 00	      word.w	ksetPalNtsc,$0001	;F1
    238  2465		       14 10 00 00	      word.w	ksetPalNtsc,$0000	;F3
    239  2469							;word 0, $0000			;F1
    240  2469							;word 0, $0000			;F3
    241  2469		       00 00 00 00	      word.w	0, $0000	;F5
    242  246d		       00 00 00 00	      word.w	0, $0000	;F7
    243  2471		       00 00 00 00	      word.w	0,0	;return
    244  2475		       00 00 00 00	      word.w	0,0	;Larrow
    245  2479
    246  2479
    247  2479
    248  2479				   runstopKeyFunctions
    249  2479							;    functionPointer, inputData:Y,A
    250  2479		       00 00 00 00	      word.w	0, $0000	;space
    251  247d		       e2 10 00 00	      word.w	ksetTune,$0000	;A
    252  2481		       e2 10 00 01	      word.w	ksetTune,$0100	;S
    253  2485		       e2 10 00 02	      word.w	ksetTune,$0200	;D
    254  2489		       e2 10 00 03	      word.w	ksetTune,$0300	;F
    255  248d		       e2 10 00 04	      word.w	ksetTune,$0400	;G
    256  2491		       e2 10 00 05	      word.w	ksetTune,$0500	;H
    257  2495		       e2 10 00 06	      word.w	ksetTune,$0600	;J
    258  2499		       e2 10 00 07	      word.w	ksetTune,$0700	;K
    259  249d		       e2 10 00 08	      word.w	ksetTune,$0800	;L
    260  24a1		       e2 10 00 09	      word.w	ksetTune,$0900	;:
    261  24a5		       00 00 00 00	      word.w	0, $0000	;;
    262  24a9							;word ksetTune,$0A00	;;
    263  24a9		       00 00 00 00	      word.w	0, $0000	;=
    264  24ad		       a4 13 00 16	      word.w	setPatch, $1600	;Z
    265  24b1		       a4 13 00 17	      word.w	setPatch, $1700	;X
    266  24b5		       a4 13 00 18	      word.w	setPatch, $1800	;C
    267  24b9		       a4 13 00 19	      word.w	setPatch, $1900	;V
    268  24bd		       a4 13 00 1a	      word.w	setPatch, $1A00	;B
    269  24c1		       a4 13 00 1b	      word.w	setPatch, $1B00	;N
    270  24c5		       a4 13 00 1c	      word.w	setPatch, $1C00	;M
    271  24c9		       a4 13 00 1d	      word.w	setPatch, $1D00	;,
    272  24cd		       00 00 00 00	      word.w	0, $0000	;.
    273  24d1		       00 00 00 00	      word.w	0, $0000	;/
    274  24d5							;word ksetBlackBG, $0000	;.
    275  24d5							;word ksetBlueBG, $0000  ;/
    276  24d5		       00 00 00 00	      word.w	0, $0000	;up/down
    277  24d9		       00 00 00 00	      word.w	0, $0000	;left/right
    278  24dd		       21 1f 00 00	      word.w	SIDEdit,$0000	;F1
    279  24e1		       ef 0e 00 00	      word.w	ksavePatch,0	;F3
    280  24e5		       00 00 00 00	      word.w	0,0	;F5
    281  24e9		       21 1f ff ff	      word.w	SIDEdit,$FFFF	;F7
    282  24ed		       00 00 00 00	      word.w	0,0	;return
    283  24f1		       00 00 00 00	      word.w	0,0	;Larrow
    284  24f5
    285  24f5				   modeList
    286  24f5		       00		      byte.b	MODE_NORMAL
    287  24f6		       01		      byte.b	MODE_5THS
    288  24f7		       02		      byte.b	MODE_5PORT
    289  24f8		       10		      byte.b	MODE_PORT1
    290  24f9		       11		      byte.b	MODE_PORT2
    291  24fa		       12		      byte.b	MODE_PORT3
    292  24fb		       20		      byte.b	MODE_MONO1
    293  24fc		       21		      byte.b	MODE_MONO2
    294  24fd		       31		      byte.b	MODE_MONOPORT1	; new
    295  24fe		       32		      byte.b	MODE_MONOPORT2	; new
    296  24ff		       40		      byte.b	MODE_ARP1
    297  2500		       41		      byte.b	MODE_ARP2
    298  2501		       42		      byte.b	MODE_ARP3
    299  2502		       43		      byte.b	MODE_ARP4
    300  2503		       44		      byte.b	MODE_ARP5
    301  2504		       08		      byte.b	MODE_6CHAN	;16
    302  2505							;byte MODE_MONOPORT1
    303  2505							;byte MODE_MONOPORT2 ;16
------- FILE cynthcart2.0.1.asm
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  2505					      include	"cynth_data.asm"	; Screen text, data tables, note tuning tables, etc.
      1  2505
      2  2505
      3  2505		       00 1d	   MAX_PATCH_NUMBER equ	29
      4  2505
      5  2505
      6  2505				   patchName
      7  2505		       53 41 57 54*	      byte.b	"SAWTOOTH BASS   "	;0
      8  2515		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
      9  2525		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
     10  2535		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
     11  2545		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
     12  2555		       50 55 4c 53*	      byte.b	"PULSE HIGH PORT "	;5
     13  2565		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
     14  2575		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
     15  2585		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
     16  2595		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
     17  25a5		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
     18  25b5		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
     19  25c5		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
     20  25d5		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
     21  25e5		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
     22  25f5		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
     23  2605
     24  2605				   patchName2
     25  2605		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
     26  2615		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
     27  2625		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
     28  2635		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
     29  2645		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
     30  2655		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
     31  2665		       4c 41 53 45*	      byte.b	"LASER BASS	  "	;22
     32  2675		       54 52 4f 4d*	      byte.b	"TROMBONE BLAST  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
     33  2685		       4e 4f 49 53*	      byte.b	"NOISY SQUARE ARP"	;24
     34  2695		       54 52 49 41*	      byte.b	"TRIANGLE SYNC   "	;25
     35  26a5		       4d 4f 4e 4f*	      byte.b	"MONO SYNC ECHO  "	;26
     36  26b5		       43 4c 45 41*	      byte.b	"CLEAN SAWTOOTH  "	;27 ; To ADD: TRI+SAW 30 30 30    TRI-RINGMOD 14 14 14    TRI+PULSE-RINGMOD 54 54 54
     37  26c5		       43 4c 45 41*	      byte.b	"CLEAN TRIANGLE  "	;28
     38  26d5		       43 4c 45 41*	      byte.b	"CLEAN SQUARE	  "	;29
     39  26e5		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;30
     40  26f5		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;31
     41  2705
     42  2705
     43  2705							;SAVED_PATCH_MESSAGE equ 29
     44  2705							;CUSTOM_PATCH_NUMBER equ 30
     45  2705		       00 1e	   SAVED_PATCH_MESSAGE equ	MAX_PATCH_NUMBER+1
     46  2705		       00 1f	   CUSTOM_PATCH_NUMBER equ	MAX_PATCH_NUMBER+2
     47  2705
     48  2705
     49  2705				   patchSoundMode
     50  2705		       00		      byte.b	MODE_NORMAL	;0
     51  2706		       00		      byte.b	MODE_NORMAL	;1
     52  2707		       02		      byte.b	MODE_5PORT	;2
     53  2708		       11		      byte.b	MODE_PORT2	;3
     54  2709		       01		      byte.b	MODE_5THS	;4
     55  270a		       11		      byte.b	MODE_PORT2	;5
     56  270b		       00		      byte.b	MODE_NORMAL	;6
     57  270c		       20		      byte.b	MODE_MONO1	;7
     58  270d		       10		      byte.b	MODE_PORT1	;8
     59  270e		       00		      byte.b	MODE_NORMAL	;9
     60  270f		       00		      byte.b	MODE_NORMAL	;10 <--- start of new 1.5.0 patches
     61  2710		       40		      byte.b	MODE_ARP1	;11
     62  2711		       41		      byte.b	MODE_ARP2	;12
     63  2712		       42		      byte.b	MODE_ARP3	;13
     64  2713		       20		      byte.b	MODE_MONO1	;14
     65  2714		       21		      byte.b	MODE_MONO2	;15
     66  2715		       00		      byte.b	MODE_NORMAL	;16
     67  2716		       20		      byte.b	MODE_MONO1	;17
     68  2717		       00		      byte.b	MODE_NORMAL	;18
     69  2718		       12		      byte.b	MODE_PORT3	;19
     70  2719		       08		      byte.b	MODE_6CHAN	;20
     71  271a		       44		      byte.b	MODE_ARP5	;21
     72  271b		       31		      byte.b	MODE_MONOPORT1	;22 <---- start of 2.0 patches
     73  271c		       32		      byte.b	MODE_MONOPORT2	;23
     74  271d		       40		      byte.b	MODE_ARP1	;24
     75  271e		       32		      byte.b	MODE_MONOPORT2	;25
     76  271f		       32		      byte.b	MODE_MONOPORT2	;26
     77  2720		       00		      byte.b	MODE_NORMAL	;27
     78  2721		       00		      byte.b	MODE_NORMAL	;28
     79  2722		       00		      byte.b	MODE_NORMAL	;29
     80  2723		       00		      byte.b	MODE_NORMAL	;30
     81  2724
     82  2724
     83  2724							;     0     1	   2	 3     4     5	   6	 7     8     9
     84  2724				   patchFX
     85  2724		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
     86  272e		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
     87  2738		       00 03 01 03*	      byte.b	0, 3, 1, 3, 3, 0, 3, 0, 0, 0
     88  2742				   patchLFO		; (TREMOLO)
     89  2742		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $00, $01, $02, $13, $00
     90  274c		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
     91  2756		       10 12 13 00*	      byte.b	$10, $12, $13, $00, $00, $13, $13, $00, $00, $00
     92  2760				   patchOctave
     93  2760		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
     94  276a		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
     95  2774		       01 03 00 03*	      byte.b	1, 3, 0, 3, 3, 1, 1, 1, 3, 1
     96  277e				   patchAD
     97  277e		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
     98  2788		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
     99  2792		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    100  279c				   patchSR1
    101  279c		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    102  27a6		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    103  27b0		       f0 f5 f5 86*	      byte.b	$F0, $F5, $F5, $86, $F6, $F2, $F8, $F2, $F2, $F0
    104  27ba				   patchSR2
    105  27ba		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    106  27c4		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    107  27ce		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $54, $F2, $F8, $F2, $F2, $F0
    108  27d8				   patchSR3
    109  27d8		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    110  27e2		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    111  27ec		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $F6, $F2, $F8, $F2, $F2, $F0
    112  27f6				   patchPaddle
    113  27f6		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    114  2800		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    115  280a		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    116  2814				   newPatchFiltCut
    117  2814		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    118  281e		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    119  2828		       c0 f0 c0 b0*	      byte.b	$c0, $F0, $c0, $b0, $A0, $50, $50, $c0, $c0, $80
    120  2832				   patchVol
    121  2832		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $9, $7, $F, $C, $c, 0
    122  283c		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $F, $8
    123  2846		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $F, $F, $C, $F, $F, $c
    124  2850				   patchPWL
    125  2850		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    126  285a		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    127  2864		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    128  286e				   patchPWH
    129  286e		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    130  2878		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    131  2882		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    132  288c
    133  288c				   patchWave1
    134  288c		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    135  2896		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    136  28a0		       20 20 14 80*	      byte.b	$20, $20, $14, $80, $40, $12, $14, $20, $10, $40
    137  28aa				   patchWave2
    138  28aa		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    139  28b4		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    140  28be		       20 20 14 20*	      byte.b	$20, $20, $14, $20, $80, $12, $14, $20, $10, $40
    141  28c8				   patchWave3
    142  28c8		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    143  28d2		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    144  28dc		       20 20 14 10*	      byte.b	$20, $20, $14, $10, $10, $12, $14, $20, $10, $40
    145  28e6
    146  28e6				   patchFilt
    147  28e6		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    148  28f0		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    149  28fa		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $EF, $0F, $0F, $EF
    150  2904				   patchVolMode
    151  2904		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    152  290e		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    153  2918		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $10, $10, $20, $10, $10, $10
    154  2922
    155  2922				   octaveTable
    156  2922		       00 0c 18 24*	      byte.b	0,12,24,36,48
    157  2927
    158  2927
    159  2927				   pwLFO
    160  2927		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    161  292b		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    162  292f		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    163  2933		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    164  2937
    165  2937				   patOffset
    166  2937		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    167  293d
    168  293d				   voiceOffset
    169  293d		       00 07 0e 	      byte.b	$0,$7,$E
    170  2940
    171  2940
    172  2940
    173  2940							;---------------------------- displayPage
    174  2940
    175  2940							; This chart references each line
    176  2940							; on the standard character based screen.
    177  2940							; = value x 40 + 0x400
    178  2940				   lineOffsetL
    179  2940		       00		      byte.b	$00
    180  2941		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    181  2947		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    182  294d		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    183  2953		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    184  2959		       e8		      byte.b	$E8
    185  295a				   lineOffsetM
    186  295a		       04		      byte.b	$04
    187  295b		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    188  2961		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    189  2967		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    190  296d		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    191  2973		       07		      byte.b	$07
    192  2974
    193  2974				   debugOverlay
    194  2974		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    195  297f		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    196  298b		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    197  29b6		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    198  29e1							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    199  29e1							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    200  29e1							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    201  29e1							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    202  29e1		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    203  29ef		       ff		      byte.b	255
    204  29f0
    205  29f0				   midiModeNames
    206  29f0		       20 20 20 20*	      byte.b	"	  "	;0
    207  29f8		       53 45 51 55*	      byte.b	"SEQUENTL"	;1
    208  2a00		       50 41 53 53*	      byte.b	"PASSPORT"	;2
    209  2a08		       20 20 20 44*	      byte.b	"   DATEL"	;3
    210  2a10		       4e 41 4d 45*	      byte.b	"NAMESOFT"	;4
    211  2a18
    212  2a18				   fxNames
    213  2a18		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    214  2a20		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    215  2a28		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    216  2a30		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    217  2a38		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    218  2a40		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    219  2a48		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    220  2a50		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    221  2a58		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    222  2a60
    223  2a60				   hexEditHelp
    224  2a60		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    225  2a8b		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    226  2ab7		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    227  2ac8		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    228  2af4		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    229  2b05		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    230  2b31		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    231  2b42		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    232  2b6e		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    233  2b7f		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    234  2bab		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    235  2bbc		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    236  2be7		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",$8B,"  PRESS",0
    237  2c12		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",$8B,"	'_' TO",0
    238  2c40		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",$8B,"	CANCEL",0
    239  2c6e		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",$8B,"	",0
    240  2c96		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    241  2cbb		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    242  2ce6		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    243  2d11		       ff		      byte.b	255
    244  2d12
    245  2d12				   helpMessage
    246  2d12							;byte "RETURN FOR COMMANDS	     ",0
    247  2d12							;byte "RETURN FOR HELP 	     ",0
    248  2d12		       52 45 54 55*	      byte.b	"RETURN=HELP		       ",0
    249  2d30				   normalHelp
    250  2d30		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81,"KEY COMMANDS",$82,"-",$8B,"  RETURN TO EXIT012345",0
    251  2d64		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    252  2d8f		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS ROWS",$8F," ARE ",$81,"PIANO KEYS  ",0
    253  2dbe		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV ROWS",$8F," SELECT",$81," SOUND PRESETS ",0
    254  2ded		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS-ON/OFF",0
    255  2e1a		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83," _",$8F,"=LOAD-CUSTOM-SOUND",0
    256  2e48		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    257  2e73		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    258  2e82		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND-MODE",0
    259  2eac		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNM",$8F,"=MOD-MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    260  2eda		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    261  2f04		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    262  2f14		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A," JKL",$8F,"=VID-ON/OFF"
    263  2f43		       00		      byte.b	0
    264  2f44		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    265  2f73		       00		      byte.b	0
    266  2f74		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    267  2f92		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR-MODULATION",0
    268  2fc0		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    269  2fea		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    270  3002		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF  ",$8E,",./",$8F,"=OMNI/CH1/CH5"
    271  302e		       00		      byte.b	0
    272  302f		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    273  3058		       00		      byte.b	0
    274  3059		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    275  3083		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    276  3096		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ./",$8F,"=PAL/NTSC"
    277  30ba		       00		      byte.b	0
    278  30bb		       17 87 5a 58*	      byte.b	23,$87,"ZXCVBNM",$8F,"=",$81,"MORE",$8F,"-",$81,"PRESETS  ",$87,"F1",$8F,"=SID-EDIT-C64KEYS"
    279  30ec		       00		      byte.b	0
    280  30ed		       18 87 46 33*	      byte.b	24,$87,"F3",$8F,"=SAVE-CUSTOM-SOUND  ",$87,"F7",$8F,"=SID-EDIT-PIANO "
    281  311a		       00		      byte.b	0
    282  311b		       ff		      byte.b	255
    283  311c
    284  311c				   mainColorText
    285  311c		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    286  314b		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83," ------",$8D,"-------",$8F,"----- ",$8D,"FILTR",$8C,"=",$81,"X	",0
    287  317e		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    288  31b4		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    289  31ea		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"MOD",$8C,"=",$81,"XXXXX ",$8F," VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    290  3220		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    291  324b
    292  324b							; OLD LAYOUT
    293  324b							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    294  324b							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    295  324b							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    296  324b							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    297  324b							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    298  324b							;byte 255
    299  324b
    300  324b		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    301  324b		       00 02	   CYNTHCART_COLOR equ	2
    302  324b
    303  324b
    304  324b		       00 2d	   MODETEXT   equ	40*1+5
    305  324b		       00 57	   TUNINGTEXT equ	40*2+7
    306  324b		       00 7f	   OCTAVETEXT equ	40*3+7
    307  324b		       00 a7	   VOLTEXT    equ	40*4+7
    308  324b
    309  324b		       00 62	   ATKTEXT    equ	40*2+18
    310  324b		       00 8a	   RELTEXT    equ	40*3+18
    311  324b		       00 12	   PATCHTEXT  equ	40*0+18
    312  324b
    313  324b		       00 94	   LFORATETEXT equ	40*3+28
    314  324b		       00 6c	   LFODEPTHTEXT equ	40*2+28
    315  324b		       00 bc	   VIDEOTEXT  equ	40*4+28
    316  324b
    317  324b		       00 af	   FXTEXT     equ	40*4+15
    318  324b
    319  324b		       00 4c	   FILTERTEXT2 equ	40*1+36
    320  324b		       00 75	   FILTERTEXT equ	40*2+37
    321  324b		       00 9c	   PADDLETEXT equ	40*3+36
    322  324b		       00 c4	   PAD2TEXT   equ	40*4+36
    323  324b
    324  324b		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    325  324b
    326  324b
    327  324b		       ff		      byte.b	255
    328  324c
    329  324c
    330  324c
    331  324c				   textData		; can contain 64 four byte texts
    332  324c		       4f 46 46 20	      byte.b	"OFF "	;0
    333  3250		       4f 4e 20 20	      byte.b	"ON  "	;4
    334  3254		       53 4c 4f 57	      byte.b	"SLOW"	;8
    335  3258		       4d 45 44 20	      byte.b	"MED "	;12
    336  325c		       46 41 53 54	      byte.b	"FAST"	;16
    337  3260		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    338  3264		       2d 33 30 20	      byte.b	"-30 "	;24
    339  3268		       2d 32 30 20	      byte.b	"-20 "	;28
    340  326c		       2d 31 30 20	      byte.b	"-10 "	;32
    341  3270		       30 20 20 20	      byte.b	"0   "	;36
    342  3274		       2b 31 30 20	      byte.b	"+10 "	;40
    343  3278		       2b 32 30 20	      byte.b	"+20 "	;44
    344  327c		       2b 33 30 20	      byte.b	"+30 "	;48
    345  3280		       2b 34 30 20	      byte.b	"+40 "	;52
    346  3284		       2b 35 30 20	      byte.b	"+50 "	;56
    347  3288		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    348  328c		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    349  3290		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    350  3294		       46 49 4c 54	      byte.b	"FILT"	;72
    351  3298		       56 4f 4c 20	      byte.b	"VOL "	;76
    352  329c		       4c 4f 57 20	      byte.b	"LOW "	;80
    353  32a0		       4d 45 44 20	      byte.b	"MED "	;84
    354  32a4		       48 49 47 48	      byte.b	"HIGH"	;88
    355  32a8		       53 49 44 3a	      byte.b	"SID:"	;92
    356  32ac		       44 49 53 20	      byte.b	"DIS "	;96
    357  32b0		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    358  32b4		       50 55 4c 53	      byte.b	"PULS"	;104
    359  32b8		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    360  32bc		       4c 46 4f 20	      byte.b	"LFO "	;112
    361  32c0		       42 45 4e 44	      byte.b	"BEND"	;116
    362  32c4
    363  32c4
    364  32c4				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    365  32c4		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00 0
    366  32cc		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08 1
    367  32d4		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10 2
    368  32dc		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18 3
    369  32e4		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20 4
    370  32ec		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28 5
    371  32f4		       4d 4f 4e 50*	      byte.b	"MONP1  ",1	;$30 6
    372  32fc		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38 7
    373  3304		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40 8
    374  330c		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48 9
    375  3314		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50 10
    376  331c		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58 11
    377  3324		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60 12
    378  332c		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68 13
    379  3334		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70 14
    380  333c		       4d 4f 4e 50*	      byte.b	"MONP2  ",1	;$78 15
    381  3344
    382  3344				   modeNameOffsets
    383  3344							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    384  3344		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    385  3354		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    386  3364		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    387  3374		       30 30 78 78*	      byte.b	$30,$30,$78,$78, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    388  3384		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    389  3394
    390  3394
    391  3394							; VERSION NUMBER
    392  3394				   bottomText
    393  3394		       20 50 41 4c*	      byte.b	" PAL V2.0.1",0
    394  33a0		       4e 54 53 43*	      byte.b	"NTSC V2.0.1",0
    395  33ac
    396  33ac				  -	      IF	BETA_RELEASE=1
    397  33ac				  -betaInfo
    398  33ac				  -	      byte	"V2.0 BETA RC4",0	;13 bytes of text
    399  33ac					      ELSE
    400  33ac				   betaInfo
    401  33ac		       20 20 20 20*	      byte.b	"	       ",0	;13 bytes of text
    402  33ba					      ENDIF
    403  33ba
    404  33ba							; contant pointers into the textData array
    405  33ba		       00 00	   ON	      equ	0
    406  33ba		       00 04	   OFF	      equ	4
    407  33ba		       00 08	   SLOW       equ	8
    408  33ba		       00 0c	   MED	      equ	12
    409  33ba		       00 10	   FAST       equ	16
    410  33ba		       00 14	   TUNING     equ	20
    411  33ba		       00 3c	   POLY       equ	60
    412  33ba		       00 40	   MONO       equ	64
    413  33ba		       00 44	   FREQ       equ	68
    414  33ba		       00 48	   FILT       equ	72
    415  33ba		       00 4c	   VOL	      equ	76
    416  33ba		       00 50	   VLOW       equ	80
    417  33ba		       00 54	   VMED       equ	84
    418  33ba		       00 58	   VHIGH      equ	88
    419  33ba		       00 60	   DISABLED   equ	96
    420  33ba		       00 64	   PAD2VALTEXT equ	100
    421  33ba
    422  33ba
    423  33ba
    424  33ba
    425  33ba				   tuneArrPtrLL
    426  33ba		       5c ec 7c c4*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    427  33c4				   tuneArrPtrLH
    428  33c4		       35 35 36 36*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    429  33ce				   tuneArrPtrHL
    430  33ce		       a4 34 18 0c*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    431  33d8				   tuneArrPtrHH
    432  33d8		       35 36 37 37*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    433  33e2
    434  33e2				   LFODepthArray
    435  33e2		       00 02 05 0f	      byte.b	0,2,5,15
    436  33e6
    437  33e6
    438  33e6
    439  33e6
    440  33e6				   hexDisplay
    441  33e6		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    442  33f6
    443  33f6							;keyData ; numbers 0-9 and letters a-f
    444  33f6							;	byte 35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    445  33f6
    446  33f6							; key set for piano keyboard: black keys + middle A-F on the white keys
    447  33f6							;	byte 51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    448  33f6
    449  33f6							; array of LFO values
    450  33f6				   LFOArrL
    451  33f6		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    452  3406				   LFOArrH
    453  3406		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    454  3416				   LFOdisp
    455  3416		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    456  3426
    457  3426							; NTSC Note Table
    458  3426				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    459  3426		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    460  3432		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    461  343e		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    462  344a		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    463  3456		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    464  3462		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    465  346e							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    466  346e				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    467  346e		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    468  347a		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    469  3486		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    470  3492		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    471  349e		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    472  34aa		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    473  34b6
    474  34b6							; PAL Note Table
    475  34b6				   PSoundLArr
    476  34b6		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    477  34c2		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    478  34ce		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    479  34da		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    480  34e6		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    481  34f2		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    482  34fe		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    483  3509
    484  3509				   PSoundHArr
    485  3509		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    486  3515		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    487  3521		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    488  352d		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    489  3539		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    490  3545		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    491  3551		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart2.0.1.asm
   1046  355c
   1047  355c							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  355c					      include	"cynth_tuning.asm"
      1  355c
      2  355c				   tuningL0
      3  355c		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  3568		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  3574		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  3580		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  358c		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  3598		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  35a4				   tuningH0
     10  35a4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  35b0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  35bc		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  35c8		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  35d4		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  35e0		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  35ec
     17  35ec				   tuningL1
     18  35ec		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  35f8		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  3604		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  3610		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  361c		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  3628		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  3634				   tuningH1
     25  3634		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  3640		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  364c		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  3658		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  3664		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  3670		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  367c
     32  367c				   tuningL2
     33  367c		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  3688		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  3694		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  36a0		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  36ac		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  36b8		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  36c4							;tuningH2
     40  36c4							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  36c4							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  36c4							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  36c4							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  36c4							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  36c4							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  36c4
     47  36c4				   tuningL3
     48  36c4		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  36d0		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  36dc		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  36e8		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  36f4		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  3700		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  370c				   tuningH3
     55  370c		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  3718				   tuningH2
     57  3718		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  3724		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  3730		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  373c		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  3748		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  3754		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  3760
     64  3760				   tuningL4
     65  3760				   tuningH4
     66  3760				   tuningH5
     67  3760		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  376c				   tuningH6
     69  376c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  3778		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  3784		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  3790		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  379c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  37a8		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  37b4							;tuningH4
     76  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  37b4							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  37b4
     83  37b4				   tuningL5
     84  37b4		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  37c0		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  37cc		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  37d8		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  37e4		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  37f0		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  37fc
     91  37fc							;tuningH5
     92  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  37fc							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  37fc
     99  37fc				   tuningL6
    100  37fc		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  3808		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  3814		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  3820		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  382c		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  3838		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  3844							;tuningH6
    107  3844							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  3844							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  3844							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  3844							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  3844							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  3844							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  3844
    114  3844				   tuningL7
    115  3844		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  3850		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  385c		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  3868		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  3874		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  3880		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  388c				   tuningH7
    122  388c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  3898		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  38a4		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  38b0		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  38bc		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  38c8		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  38d4
    129  38d4				   tuningL8
    130  38d4		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  38e0		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  38ec		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  38f8		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  3904		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  3910		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  391c				   tuningH8
    137  391c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  3928		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  3934		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  3940		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  394c		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  3958		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  3964
    144  3964				   tuningL9
    145  3964		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  3970		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  397c		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  3988		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  3994		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  39a0		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  39ac				   tuningH9
    152  39ac		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  39b8		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  39c4		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  39d0		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  39dc		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  39e8		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart2.0.1.asm
   1049  39f4
   1050  39f4							; Frank's MIDI interface code
   1051  39f4				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   1052  39f4				  -	      include	"cynth_midi_dummy.asm"
   1053  39f4					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  39f4					      include	"cynth_midi.asm"
      1  39f4							; public MIDI interface routines:
      2  39f4							; midiDetect
      3  39f4							; midiInit
      4  39f4							; midiRead
      5  39f4							; midiWrite
      6  39f4
      7  39f4							; interface type for midiDetect and midiInit:
      8  39f4							; 0: no MIDI interface was detected
      9  39f4							; 1: Sequential Circuits Inc.
     10  39f4							; 2: Passport & Syntech
     11  39f4							; 3: DATEL/Siel/JMS
     12  39f4							; 4: Namesoft
     13  39f4
     14  39f4							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  39f4		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  39f4
     17  39f4
     18  39f4					      processor	6502
     19  39f4
     20  39f4		       00 01	   TRUE       equ	1
     21  39f4		       00 00	   FALSE      equ	0
     22  39f4
     23  39f4		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     24  39f4		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     25  39f4
     26  39f4		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     27  39f4		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     28  39f4
     29  39f4							;loopCount equ 1104
     30  39f4							;irqCountTotal equ 1105
     31  39f4							;irqCountMidi equ 1106
     32  39f4							;irqCountTDREmpty equ 1107
     33  39f4							;saveY equ 1140
     34  39f4							;firstPass equ 1141
     35  39f4		       04 50	   statusSample1 equ	1104
     36  39f4		       04 51	   statusSample2 equ	1105
     37  39f4
     38  39f4		       00 00	   TEST_KEYBOARD equ	FALSE
     39  39f4		       00 00	   INCLUDE_DETECT_IRQ equ	FALSE
     40  39f4
     41  39f4							;=========================================================================
     42  39f4							; MIDI DETECT
     43  39f4							; =========================================================================
     44  39f4
     45  39f4							; detect MIDI interface, return type in accu
     46  39f4				   midiDetect		; TODO
     47  39f4							;lda #0
     48  39f4							;sta irqCountTotal
     49  39f4							;sta irqCountMidi
     50  39f4							;sta loopCount
     51  39f4
     52  39f4
     53  39f4
     54  39f4							; old code to manually set interface type
     55  39f4		       a9 03		      lda	#3	; DATEL (DEFAULT, THIS ONE SHOULD BE SELECTED UNLESS DEBUGGING)
     56  39f6							;lda #2 ; PASSPORT
     57  39f6							;lda #4 ; NAMESOFT (NOT SUPPORTED YET!)
     58  39f6							;lda #0 ; MIDI OFF
     59  39f6					      IF	DEVICE_CONFIG=KERBEROS
     60  39f6		       60		      rts		; <--DETECT FUNCTION DISABLED
     61  39f7					      ENDIF
     62  39f7
     63  39f7		       85 6e		      sta	midiInterfaceType
     64  39f9				   testingLoop
     65  39f9							; save interface type from ACC
     66  39f9		       a5 6e		      lda	midiInterfaceType
     67  39fb		       aa		      tax
     68  39fc		       ca		      dex
     69  39fd
     70  39fd		       78		      sei		; disable IRQ interrupts
     71  39fe							;cli ; enable IRQ interrupts
     72  39fe
     73  39fe							; init addresses
     74  39fe		       bd 4f 3b 	      lda	midiControlOfs,x
     75  3a01		       85 64		      sta	midiControl
     76  3a03		       bd 53 3b 	      lda	midiStatusOfs,x
     77  3a06		       85 66		      sta	midiStatus
     78  3a08		       bd 57 3b 	      lda	midiTxOfs,x
     79  3a0b		       85 68		      sta	midiTx
     80  3a0d		       bd 5b 3b 	      lda	midiRxOfs,x
     81  3a10		       85 6a		      sta	midiRx
     82  3a12		       a9 de		      lda	#$de
     83  3a14		       85 65		      sta	midiControl+1
     84  3a16		       85 67		      sta	midiStatus+1
     85  3a18		       85 69		      sta	midiTx+1
     86  3a1a		       85 6b		      sta	midiRx+1
     87  3a1c
     88  3a1c							; send reset code to MIDI adapter
     89  3a1c		       20 e6 3a 	      jsr	midiReset
     90  3a1f
     91  3a1f							; small delay
     92  3a1f		       a2 00		      ldx	#0
     93  3a21				   detectDelay1
     94  3a21		       ca		      dex
     95  3a22		       d0 fd		      bne	detectDelay1
     96  3a24
     97  3a24							; read midi status
     98  3a24		       b1 66		      lda	(midiStatus),y
     99  3a26		       11 66		      ora	(midiStatus),y
    100  3a28		       11 66		      ora	(midiStatus),y
    101  3a2a		       8d a0 04 	      sta	1024+160	; DEBUG
    102  3a2d		       8d 50 04 	      sta	statusSample1
    103  3a30
    104  3a30							; enable IRQ/NMI
    105  3a30							;lda #3 ; MIDI reset (DEBUG)
    106  3a30		       a9 b4		      lda	#$B4	; $Bx turns on transmit interrupt as well as receive interrupt
    107  3a32							;lda #$34 ; transmit interrupt only
    108  3a32							;lda #$94 ; receive interrupt only (default)
    109  3a32		       1d 5f 3b 	      ora	midiCr0Cr1,x
    110  3a35		       91 64		      sta	(midiControl),y
    111  3a37
    112  3a37							; small delay
    113  3a37		       a2 00		      ldx	#0
    114  3a39				   detectDelay2
    115  3a39		       ca		      dex
    116  3a3a		       d0 fd		      bne	detectDelay2
    117  3a3c
    118  3a3c							; read midi status
    119  3a3c		       a0 00		      ldy	#0
    120  3a3e		       b1 66		      lda	(midiStatus),y
    121  3a40		       11 66		      ora	(midiStatus),y
    122  3a42		       11 66		      ora	(midiStatus),y
    123  3a44		       8d a1 04 	      sta	1024+160+1	; DEBUG
    124  3a47		       8d 51 04 	      sta	statusSample2
    125  3a4a
    126  3a4a				   lock 		; DEBUG!!!!!!!!!!!!!!!!!!!!
    127  3a4a							;inc 1065
    128  3a4a							;jmp lock ; DEBUG!!!!!!!!!!!!!!!!!!!!
    129  3a4a
    130  3a4a							; set the interface to DATEL or NO_MIDI based on results
    131  3a4a		       ad 50 04 	      lda	statusSample1
    132  3a4d		       d0 08		      bne	midiNotDetected
    133  3a4f		       ad 51 04 	      lda	statusSample2
    134  3a52		       f0 03		      beq	midiNotDetected
    135  3a54							;lda midiInterfaceType ; use current interface
    136  3a54							;cli
    137  3a54							;rts ; quit
    138  3a54		       4c 65 3a 	      jmp	quitDetect
    139  3a57				   midiNotDetected
    140  3a57		       a6 6e		      ldx	midiInterfaceType
    141  3a59		       ca		      dex
    142  3a5a		       86 6e		      stx	midiInterfaceType
    143  3a5c							;cpx #1
    144  3a5c		       f0 03		      beq	noMidi	; loop again to try next interface
    145  3a5e		       4c f9 39 	      jmp	testingLoop
    146  3a61				   noMidi
    147  3a61		       a9 00		      lda	#0	; last interface, so no MIDI
    148  3a63		       85 6e		      sta	midiInterfaceType
    149  3a65							;cli
    150  3a65							;rts ; quit
    151  3a65
    152  3a65				   quitDetect
    153  3a65		       20 e6 3a 	      jsr	midiReset
    154  3a68		       a5 6e		      lda	midiInterfaceType
    155  3a6a		       58		      cli
    156  3a6b		       60		      rts
    157  3a6c
    158  3a6c							;;------------------------------------====================================
    159  3a6c
    160  3a6c
    161  3a6c							; =========================================================================
    162  3a6c							; MIDI INIT
    163  3a6c							; =========================================================================
    164  3a6c
    165  3a6c							; init MIDI interface, type in accu from midiDetect
    166  3a6c				   midiInit
    167  3a6c							;rts ; <-- MIDI DISABLED (DEBUG!!)
    168  3a6c
    169  3a6c
    170  3a6c		       78		      sei		; disable IRQ interrupts
    171  3a6d
    172  3a6d		       85 6e		      sta	midiInterfaceType
    173  3a6f		       aa		      tax
    174  3a70		       ca		      dex
    175  3a71
    176  3a71		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
    177  3a73		       8d 02 dc 	      sta	DDRA
    178  3a76
    179  3a76		       a9 00		      lda	#0	; CIA#1 port B = inputs
    180  3a78		       8d 03 dc 	      sta	DDRB
    181  3a7b
    182  3a7b							; clear memory variables
    183  3a7b		       a9 00		      lda	#0
    184  3a7d		       85 71		      sta	keyPressed
    185  3a7f		       85 6f		      sta	keyTestIndex
    186  3a81		       85 70		      sta	keyPressedIntern
    187  3a83
    188  3a83							; init addresses
    189  3a83		       bd 4f 3b 	      lda	midiControlOfs,x
    190  3a86		       85 64		      sta	midiControl
    191  3a88		       bd 53 3b 	      lda	midiStatusOfs,x
    192  3a8b		       85 66		      sta	midiStatus
    193  3a8d		       bd 57 3b 	      lda	midiTxOfs,x
    194  3a90		       85 68		      sta	midiTx
    195  3a92		       bd 5b 3b 	      lda	midiRxOfs,x
    196  3a95		       85 6a		      sta	midiRx
    197  3a97		       a9 de		      lda	#$de
    198  3a99		       85 65		      sta	midiControl+1
    199  3a9b		       85 67		      sta	midiStatus+1
    200  3a9d		       85 69		      sta	midiTx+1
    201  3a9f		       85 6b		      sta	midiRx+1
    202  3aa1
    203  3aa1							; send reset code to MIDI adapter
    204  3aa1		       20 e6 3a 	      jsr	midiReset
    205  3aa4
    206  3aa4							; clear ringbuffer
    207  3aa4		       a9 00		      lda	#0
    208  3aa6		       85 6c		      sta	midiRingbufferReadIndex
    209  3aa8		       85 6d		      sta	midiRingbufferWriteIndex
    210  3aaa
    211  3aaa							; if the adapter uses NMI interrupts instead of IRQ
    212  3aaa		       bd 63 3b 	      lda	midiIrqType,x
    213  3aad		       d0 0a		      bne	midiSetIrq
    214  3aaf
    215  3aaf							; set NMI routine
    216  3aaf		       a9 0f		      lda	#<midiNmi
    217  3ab1		       8d 18 03 	      sta	$0318
    218  3ab4		       a9 3b		      lda	#>midiNmi
    219  3ab6		       8d 19 03 	      sta	$0319
    220  3ab9
    221  3ab9							; set IRQ routine
    222  3ab9				   midiSetIrq
    223  3ab9							;---------------------------
    224  3ab9		       a9 25		      lda	#<midiIrq
    225  3abb		       8d 14 03 	      sta	$0314
    226  3abe		       a9 3b		      lda	#>midiIrq
    227  3ac0		       8d 15 03 	      sta	$0315
    228  3ac3							;---------------------------
    229  3ac3
    230  3ac3							; enable IRQ/NMI
    231  3ac3		       a9 94		      lda	#$94
    232  3ac5		       1d 5f 3b 	      ora	midiCr0Cr1,x
    233  3ac8		       91 64		      sta	(midiControl),y
    234  3aca
    235  3aca		       58		      cli
    236  3acb		       60		      rts
    237  3acc
    238  3acc							; =========================================================================
    239  3acc
    240  3acc				   midiRelease
    241  3acc		       78		      sei
    242  3acd		       20 e6 3a 	      jsr	midiReset
    243  3ad0		       a9 31		      lda	#$31
    244  3ad2		       8d 14 03 	      sta	$0314
    245  3ad5		       a9 ea		      lda	#$ea
    246  3ad7		       8d 15 03 	      sta	$0315
    247  3ada		       a9 47		      lda	#$47
    248  3adc		       8d 18 03 	      sta	$0318
    249  3adf		       a9 fe		      lda	#$fe
    250  3ae1		       8d 19 03 	      sta	$0319
    251  3ae4		       58		      cli
    252  3ae5		       60		      rts
    253  3ae6
    254  3ae6							; MC68B50 master reset and IRQ off
    255  3ae6				   midiReset
    256  3ae6		       a0 00		      ldy	#0
    257  3ae8		       a9 03		      lda	#3
    258  3aea		       91 64		      sta	(midiControl),y
    259  3aec		       60		      rts
    260  3aed
    261  3aed				   midiCanRead
    262  3aed		       a6 6c		      ldx	midiRingbufferReadIndex
    263  3aef		       e4 6d		      cpx	midiRingbufferWriteIndex
    264  3af1		       60		      rts
    265  3af2
    266  3af2							; read MIDI byte from ringbuffer
    267  3af2				   midiRead
    268  3af2		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    269  3af4		       e4 6d		      cpx	midiRingbufferWriteIndex
    270  3af6		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    271  3af8							;beq midiRead
    272  3af8		       60		      rts		; No new data, so return
    273  3af9
    274  3af9							; wait for MIDI byte and read it from ringbuffer
    275  3af9				   midiReadWait
    276  3af9		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    277  3afb		       e4 6d		      cpx	midiRingbufferWriteIndex
    278  3afd		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    279  3aff		       4c f9 3a 	      jmp	midiReadWait
    280  3b02							;rts ; No new data, so return
    281  3b02
    282  3b02
    283  3b02				   processMidi
    284  3b02							; read next character from ringbuffer
    285  3b02		       bd 00 7f 	      lda	midiRingbuffer,x
    286  3b05		       a8		      tay		; save next byte into y
    287  3b06		       e8		      inx		; increment buffer pointer...
    288  3b07		       8a		      txa
    289  3b08							;and #31 ; wrap around at end
    290  3b08		       29 ff		      and	#BUFFER_SIZE_MASK
    291  3b0a		       85 6c		      sta	midiRingbufferReadIndex	; save it
    292  3b0c		       98		      tya		; the byte read from the buffer ends up in both y and a
    293  3b0d
    294  3b0d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    295  3b0d							; DEBUG - SHOW MIDI DATA
    296  3b0d				  -	      IF	DEBUG_SHOW_MIDI=1
    297  3b0d				  -			;IF DEBUG_DISPLAY=1
    298  3b0d				  -	      sta	temp
    299  3b0d				  -	      bpl	notStatusByte
    300  3b0d				  -	      lda	#$E
    301  3b0d				  -	      sta	hexDispColor
    302  3b0d				  -	      jmp	endColor
    303  3b0d				  -notStatusByte
    304  3b0d				  -	      lda	#$F
    305  3b0d				  -	      sta	hexDispColor
    306  3b0d				  -endColor
    307  3b0d				  -	      lda	debugOffset
    308  3b0d				  -	      and	#$F0
    309  3b0d				  -	      lsr
    310  3b0d				  -	      lsr
    311  3b0d				  -	      lsr
    312  3b0d				  -	      tax
    313  3b0d				  -			;ldx #34
    314  3b0d				  -	      lda	debugOffset
    315  3b0d				  -	      and	#$0F
    316  3b0d				  -	      tay
    317  3b0d				  -	      iny
    318  3b0d				  -	      iny
    319  3b0d				  -	      iny
    320  3b0d				  -	      iny
    321  3b0d				  -	      iny
    322  3b0d				  -	      iny
    323  3b0d				  -	      lda	temp
    324  3b0d				  -	      jsr	displayHex
    325  3b0d				  -	      inc	debugOffset
    326  3b0d				  -			;ldy debugOffset
    327  3b0d				  -			;iny
    328  3b0d				  -			;tya
    329  3b0d				  -			;and #$0F
    330  3b0d				  -			;sta debugOffset
    331  3b0d				  -			;adc #5
    332  3b0d				  -			;tay
    333  3b0d				  -	      lda	temp
    334  3b0d				  -	      ldy	temp
    335  3b0d					      ENDIF
    336  3b0d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    337  3b0d
    338  3b0d		       60		      rts
    339  3b0e
    340  3b0e							; write MIDI byte and wait for write complete
    341  3b0e		       60	   midiWrite  rts		; TODO
    342  3b0f
    343  3b0f							; NMI handler
    344  3b0f		       48	   midiNmi    pha
    345  3b10		       8a		      txa
    346  3b11		       48		      pha
    347  3b12		       98		      tya
    348  3b13		       48		      pha
    349  3b14
    350  3b14							; test if it was a NMI from the MIDI interface
    351  3b14		       a0 00		      ldy	#0
    352  3b16		       b1 66		      lda	(midiStatus),y
    353  3b18		       29 01		      and	#1
    354  3b1a		       f0 03		      beq	midiNmiEnd
    355  3b1c		       20 41 3b 	      jsr	midiStore
    356  3b1f		       68	   midiNmiEnd pla
    357  3b20		       a8		      tay
    358  3b21		       68		      pla
    359  3b22		       aa		      tax
    360  3b23		       68		      pla
    361  3b24		       40		      rti
    362  3b25
    363  3b25							; IRQ handler
    364  3b25				   midiIrq
    365  3b25		       a6 6e		      ldx	midiInterfaceType
    366  3b27		       ca		      dex
    367  3b28		       bd 63 3b 	      lda	midiIrqType,x
    368  3b2b		       f0 0e		      beq	midiIrqKey
    369  3b2d
    370  3b2d							; test if it was an IRQ from the MIDI interface
    371  3b2d		       a0 00		      ldy	#0
    372  3b2f		       b1 66		      lda	(midiStatus),y
    373  3b31		       29 01		      and	#1
    374  3b33		       f0 06		      beq	midiIrqKey
    375  3b35		       20 41 3b 	      jsr	midiStore
    376  3b38		       4c 1f 3b 	      jmp	midiNmiEnd
    377  3b3b
    378  3b3b							; keyboard test
    379  3b3b				   midiIrqKey
    380  3b3b				  -	      IF	TEST_KEYBOARD=1
    381  3b3b				  -	      jsr	keyboardTest
    382  3b3b					      ENDIF
    383  3b3b		       ad 0d dc 	      lda	$dc0d
    384  3b3e		       4c 1f 3b 	      jmp	midiNmiEnd
    385  3b41
    386  3b41							; get MIDI byte and store in ringbuffer
    387  3b41				   midiStore
    388  3b41		       b1 6a		      lda	(midiRx),y
    389  3b43		       a6 6d		      ldx	midiRingbufferWriteIndex
    390  3b45		       9d 00 7f 	      sta	midiRingbuffer,x
    391  3b48		       e8		      inx
    392  3b49		       8a		      txa
    393  3b4a							;and #31
    394  3b4a		       29 ff		      and	#BUFFER_SIZE_MASK
    395  3b4c		       85 6d		      sta	midiRingbufferWriteIndex
    396  3b4e		       60		      rts
    397  3b4f
    398  3b4f							; MC68B50 control register (relative to $de00)
    399  3b4f		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    400  3b53
    401  3b53							; MC68B50 status register
    402  3b53		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    403  3b57
    404  3b57							; MC68B50 TX register
    405  3b57		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    406  3b5b
    407  3b5b							; MC68B50 RX register offset
    408  3b5b		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    409  3b5f
    410  3b5f							; counter divide bits CR0 and CR1 for the MC68B50
    411  3b5f				   midiCr0Cr1
    412  3b5f		       01 01 02 01	      .byte.b	1, 1, 2, 1
    413  3b63
    414  3b63							; 1=IRQ, 0=NMI
    415  3b63				   midiIrqType
    416  3b63		       01 01 01 00	      .byte.b	1, 1, 1, 0
    417  3b67
    418  3b67				  -	      IF	TEST_KEYBOARD=1
    419  3b67				  -			; keyboard test
    420  3b67				  -keyboardTest
    421  3b67				  -	      ldx	keyTestIndex
    422  3b67				  -	      lda	keys,x	; load colum
    423  3b67				  -	      sta	PRA
    424  3b67				  -	      inx
    425  3b67				  -	      lda	PRB
    426  3b67				  -	      and	keys,x	; mask row
    427  3b67				  -	      inx
    428  3b67				  -	      cmp	#0
    429  3b67				  -	      bne	kbt2
    430  3b67				  -	      lda	keys,x
    431  3b67				  -	      cmp	#$80
    432  3b67				  -	      bne	jump1
    433  3b67				  -	      inc	shiftPressed
    434  3b67				  -	      bne	kbt2
    435  3b67				  -jump1
    436  3b67				  -	      sta	keyPressedIntern
    437  3b67				  -kbt2
    438  3b67				  -	      inx
    439  3b67				  -	      cpx	#18
    440  3b67				  -	      bne	kbt3
    441  3b67				  -	      ldx	keyPressedIntern
    442  3b67				  -	      beq	jump2
    443  3b67				  -	      lda	shiftPressed
    444  3b67				  -	      beq	jump2
    445  3b67				  -	      inx
    446  3b67				  -jump2
    447  3b67				  -	      stx	keyPressed
    448  3b67				  -	      bne	jump3
    449  3b67				  -	      lda	shiftPressed
    450  3b67				  -	      beq	jump3
    451  3b67				  -	      lda	#$40
    452  3b67				  -	      sta	keyPressed
    453  3b67				  -jump3
    454  3b67				  -	      ldx	#0
    455  3b67				  -	      stx	shiftPressed
    456  3b67				  -	      stx	keyPressedIntern
    457  3b67				  -kbt3
    458  3b67				  -	      stx	keyTestIndex
    459  3b67				  -	      rts
    460  3b67				  -
    461  3b67				  -keys
    462  3b67				  -	      .byte	%11111110, %00010000, 1	; F1
    463  3b67				  -	      .byte	%11111110, %00100000, 3	; F3
    464  3b67				  -	      .byte	%11111110, %01000000, 5	; F5
    465  3b67				  -	      .byte	%11111110, %00001000, 7	; F7
    466  3b67				  -	      .byte	%10111111, %00010000, $80	; right shift
    467  3b67				  -	      .byte	%10111101, %10000000, $80	; left shift
    468  3b67					      ENDIF
------- FILE cynthcart2.0.1.asm
   1055  3b67					      ENDIF
   1056  3b67
   1057  3b67
   1058  3b67				  -	      IF	MODE=KERNEL_OBSOLETE
   1059  3b67				  -	      org	$bfff
   1060  3b67				  -	      byte	0
   1061  3b67					      ENDIF

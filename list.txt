------- FILE cynthcart152.asm LEVEL 1 PASS 2
      1  82d7 ????						; Commodore 64 Synthcart
      2  82d7 ????						; by Paul Slocum
      3  82d7 ????						;------------------------
      4  82d7 ????						; TEXT EDITOR TAB=3
      5  82d7 ????						;------------------------
      6  82d7 ????						;
      7  82d7 ????						;
      8  82d7 ????						; TASKS FOR 1.5.2
      9  82d7 ????						; - add some of Gert's mixed waveform sounds
     10  82d7 ????						; - 'O' key specifically may be out of tune
     11  82d7 ????						; - consider adding per-patch filter on/off/disabled setting
     12  82d7 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     13  82d7 ????						;
     14  82d7 ????						;
     15  82d7 ????						; MAYBE LATER:
     16  82d7 ????						;================================= END OF THIS VERSION...
     17  82d7 ????						;
     18  82d7 ????						; - - - - - - - - - - - - - -
     19  82d7 ????						; Change Log:
     20  82d7 ????						; - - - - - - - - - - - - - -
     21  82d7 ????						; 1.5.1
     22  82d7 ????						; + fixed clock and sysex bytes causing crashes/stuck notes (0xF0-0xFF)
     23  82d7 ????						; + fixed bad pitch bend startup value
     24  82d7 ????						; + added non-omni modes for channel 1 and 5
     25  82d7 ????						;
     26  82d7 ????						; - - - - - - - - - - - - - -
     27  82d7 ????						; Change Log:
     28  82d7 ????						; - - - - - - - - - - - - - -
     29  82d7 ????						; 1.5.0
     30  82d7 ????						; + added MIDI support for Kerberos cartridge
     31  82d7 ????						; + moved SID location for MIDI version to $D420 to avoid conflict with MIDI interface
     32  82d7 ????						; + arpeggiator
     33  82d7 ????						; + new FX modes
     34  82d7 ????						; + additional presets
     35  82d7 ????						; + refactored much of project source
     36  82d7 ????						; + new smarter note buffering system
     37  82d7 ????						; + reworked patch parameter display
     38  82d7 ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     39  82d7 ????						; + optimized the tuning shift tables for space by overlapping tables
     40  82d7 ????						; + made LFO and all pitch modulations use proper tuning/scaling
     41  82d7 ????						; + fixed some errors in the tuning shift tables
     42  82d7 ????						; + improved clarity of help screen text
     43  82d7 ????						; + added "RETURN FOR CONTROLS" message at bottom
     44  82d7 ????						;MAYBE....
     45  82d7 ????						;--------------------------
     46  82d7 ????						; - - - - - - - - - - - - - -
     47  82d7 ????						; 1.2.4
     48  82d7 ????						; + designated paddle 1 and 2 in help screen
     49  82d7 ????						; - - - - - - - - - - - - - -
     50  82d7 ????						; 1.2.3
     51  82d7 ????						; + disable key-commands when 3 piano keys are held
     52  82d7 ????						;		to avoid quirks with keyboard matrix
     53  82d7 ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     54  82d7 ????						; + reinstated shift-lock holding notes
     55  82d7 ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     56  82d7 ????						; + add another octave to tuning charts for 5ths in top octave
     57  82d7 ????						; + auto-paddle on
     58  82d7 ????						; + set up custom test for space bar
     59  82d7 ????						; + disable settings changes w/ space bar
     60  82d7 ????						; + corrected "sine" to "tringl" in patch names
     61  82d7 ????						; + restored startup patch to "saw bass"
     62  82d7 ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     63  82d7 ????						;	+ add key command to switch controls and turn off
     64  82d7 ????						;	+ add display of paddle status
     65  82d7 ????						;	+ add code to run things from the second paddle
     66  82d7 ????						; - - - - - - - - - - - - - -
     67  82d7 ????						; 1.2.2
     68  82d7 ????						; + keyboard driver rewrite
     69  82d7 ????						; + moved tuning from piano to ASDF...
     70  82d7 ????						; + moved filter On/Off to ZXC
     71  82d7 ????						; + keys swap portamento and octave
     72  82d7 ????						; + move video mode to SHFT+FGH and require shift for VIC mode
     73  82d7 ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
     74  82d7 ????						; + separate functions for "show everything" and "variable init"
     75  82d7 ????						; + video mode with no text (shift+:/;)
     76  82d7 ????						; + SID register $20-$26 edits all 3 oscillators at once
     77  82d7 ????						; + write help display routine
     78  82d7 ????						; + add help screen
     79  82d7 ????						; + reverse octave keys
     80  82d7 ????						; + add help for SID edit mode
     81  82d7 ????						; + redo hex editor piano KB layout
     82  82d7 ????						; + save SID edits
     83  82d7 ????						; + added "COPYING TO RAM" text when RAM copy is on
     84  82d7 ????						; - - - - - - - - - - - - - -
     85  82d7 ????						; 1.2.1
     86  82d7 ????						; + pitch fix for PAL
     87  82d7 ????						; + autodetection for PAL/NTSC
     88  82d7 ????						; - - - - - - - - - - - - - -
     89  82d7 ????						; 1.2.0
     90  82d7 ????						; + filter adjustment for SID Symphony
     91  82d7 ????						; - - - - - - - - - - - - - -
     92  82d7 ????						; 1.1 RELEASE
     93  82d7 ????						; + added SID HEX editor
     94  82d7 ????						; + changed tuning keys to avoid accidentally changing the tuning
     95  82d7 ????						; + added ability to turn the SID filter on and off
     96  82d7 ????						; - - - - - - - - - - - - - -
     97  82d7 ????						; 1.0 RELEASE
     98  82d7 ????						; + first official release
     99  82d7 ????						;-----------------------------------------------------
    100  82d7 ????
    101  82d7 ????
    102  82d7 ????						;-----------------------------------------------------
    103  82d7 ????						; FUTURE TODO LIST:
    104  82d7 ????						; - - - - - - - - - - - - - - -
    105  82d7 ????						; - midi trigger to turn off/on omni
    106  82d7 ????						; - - - - - - - - - - - - - - -
    107  82d7 ????						; - make rising mod not drop
    108  82d7 ????						; - wire up pwModValue from functions
    109  82d7 ????						; - wire up pwSetValue from midi and paddle
    110  82d7 ????						; - create filter and PW setter that runs every frame
    111  82d7 ????						; - - - - - - - - - - - - - - -
    112  82d7 ????						; - have mono-stack check to make sure notes aren't too low or too high
    113  82d7 ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    114  82d7 ????						; - create system that cycles which spots are favored for new empty or replacement notes
    115  82d7 ????						; - - - - - - - - - - - - - - -
    116  82d7 ????						; - auto-detect secondary SID
    117  82d7 ????						; - automatic setup for Kerberos MIDI
    118  82d7 ????						; - - - - - - - - - - - - - - -
    119  82d7 ????						; - fix note off bug with drum machine?
    120  82d7 ????						; - - - - - - - - - - - - - - -
    121  82d7 ????						; -- show held modifier keys
    122  82d7 ????						; - link SID memory to a controller block
    123  82d7 ????						; - make fifths buttons preserve the portamento setting
    124  82d7 ????						; - - - - - - - - - - - - - - -
    125  82d7 ????						; - new intervals other than 5ths
    126  82d7 ????						; - better mute/noise reduction
    127  82d7 ????						; - alternate set of keybindings for use without the keyboard overlay
    128  82d7 ????						; - - - - - - - - - - - - - - -
    129  82d7 ????						; - auto-detect second SID at multiple locations, avoid conflict with MIDI interface
    130  82d7 ????						; - - - - - - - - - - - - - - -
    131  82d7 ????						; - more patches
    132  82d7 ????						; - paddle 2 auto-on
    133  82d7 ????						; - make smarter key->oscillator assignment to fix long release
    134  82d7 ????						; - LFO during release
    135  82d7 ????						; - LFO -> Pulse Width and Volume and Filter
    136  82d7 ????						; - mono-stack mode
    137  82d7 ????						; - 6 voice polyphony with 2 SIDS
    138  82d7 ????						;--------------------------
    139  82d7 ????						; - add echo long/med/short
    140  82d7 ????						; - more extreme variations in video mode
    141  82d7 ????						; - noise reduction
    142  82d7 ????						; - Envelope -> Filter Cutoff
    143  82d7 ????						; - filter type
    144  82d7 ????						; - ring modulation
    145  82d7 ????						; - sync
    146  82d7 ????						; - Whammy speed control
    147  82d7 ????						;--------------------------
    148  82d7 ????						; - filter Q
    149  82d7 ????						; - save patches to disk
    150  82d7 ????						;--------------------------
    151  82d7 ????						;--------------------------
    152  82d7 ????
    153  82d7 ????
    154  82d7 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    155  82d7 ????						;# MEMORY MAP
    156  82d7 ????						;#
    157  82d7 ????						;# $0800-$3800 Program and data
    158  82d7 ????						;# $7000-$7200 Variables and buffers (512 bytes)
    159  82d7 ????						;# $7F00-$7FFF MIDI ring buffer
    160  82d7 ????						;#
    161  82d7 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    162  82d7 ????
    163  82d7 ????
    164  82d7 ????
    165  82d7 ????
    166  82d7 ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    167  82d7 ????				      processor	6502
    168  82d7 ????
    169  82d7 ????						; Image run mode:
    170  82d7 ????	       00 00	   CART       equ	0	; run at $8000 off cartridge ROM
    171  82d7 ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word
    172  82d7 ????	       00 02	   RAM	      equ	2	; run at $1000, needs to be copied or decompressed into $3000 (used for compresed version)
    173  82d7 ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (This mode is no longer supported)
    174  82d7 ????
    175  82d7 ????						;**********************************************************
    176  82d7 ????						;**********************************************************
    177  82d7 ????						; PROGRAM CONFIGURATION SWITCHES
    178  82d7 ????						;**********************************************************
    179  82d7 ????						;**********************************************************
    180  82d7 ????	       00 02	   MODE       equ	RAM	; DISK, CART, KERNEL_OBSOLETE, or RAM (for compression),
    181  82d7 ????
    182  82d7 ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running
    183  82d7 ????
    184  82d7 ????	       d4 20	   SID2       equ	$D420
    185  82d7 ????						;SID2 equ $DE00
    186  82d7 ????
    187  82d7 ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    188  82d7 ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    189  82d7 ????
    190  82d7 ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    191  82d7 ????
    192  82d7 ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    193  82d7 ????	       00 00	   DEBUG_DISPLAY equ	0
    194  82d7 ????	       00 00	   OFFSET_CONTROLLERS equ	0
    195  82d7 ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    196  82d7 ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    197  82d7 ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    198  82d7 ????
    199  82d7 ????
    200  82d7 ????						;**********************************************************
    201  82d7 ????						;**********************************************************
    202  82d7 ????						;**********************************************************
    203  82d7 ????
    204  82d7 ????						; *********************************************
    205  82d7 ????						; START OF PROGRAM IN MEMORY
    206  82d7 ????						; *********************************************
    207  82d7 ????
    208  82d7 ????						;==================================================
    209  82d7 ????						; load from disk as PRG with auto-run
    210  82d7 ????			  -	      IF	MODE=DISK
    211  82d7 ????			  -BASEADDR   equ	2047	; 2047 = $7FF
    212  82d7 ????			  -	      org	BASEADDR	; the beginning of the BASIC program area
    213  82d7 ????			  -
    214  82d7 ????			  -			; disk load location
    215  82d7 ????			  -	      byte	$01,$08
    216  82d7 ????			  -			; BASIC program to call the cynthcart machine code...
    217  82d7 ????			  -			; 10 SYS 2061
    218  82d7 ????			  -	      byte	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    219  82d7 ????			  -			; next effective address after this is 2061 / $80D
    220  82d7 ????				      ENDIF
    221  82d7 ????
    222  82d7 ????						;==================================================
    223  82d7 ????						; straight cart ROM
    224  82d7 ????			  -	      IF	MODE=CART
    225  82d7 ????			  -BASEADDR   equ	$8000
    226  82d7 ????			  -	      org	BASEADDR
    227  82d7 ????			  -	      word	Startup
    228  82d7 ????			  -	      word	Startup
    229  82d7 ????			  -			; 5 byte cartridge startup code
    230  82d7 ????			  -	      byte	$C3, $C2, $CD, $38, $30
    231  82d7 ????				      ENDIF
    232  82d7 ????
    233  82d7 ????						;==================================================
    234  82d7 ????						; load from RAM, requires wrapper to load into RAM (used for compressed version)
    235  82d7 ????				      IF	MODE=RAM
    236  82d7 ????	       50 00	   BASEADDR   equ	$5000
    237  82d7 ????						;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    238  5000					      org	BASEADDR
    239  5000							;byte $00,$50 ; DEBUG SETUP AS PRG
    240  5000					      ENDIF
    241  5000
    242  5000							;==================================================
    243  5000							; to replace BASIC ROM (NO LONGER SUPPORTED)
    244  5000				  -	      IF	MODE=KERNEL_OBSOLETE
    245  5000				  -BASEADDR   equ	$8000
    246  5000				  -	      org	BASEADDR
    247  5000				  -	      word	$E394	; RESET
    248  5000				  -	      word	$E37B	; Warm Start
    249  5000					      ENDIF
    250  5000
    251  5000							;---------------------------------------
    252  5000							; variables and constants here
    253  5000							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  5000					      include	cynth_vars.asm
      1  5000							; *********************************************
      2  5000							; Constants
      3  5000							; *********************************************
      4  5000
      5  5000							;KEYTIME equ 128
      6  5000							;KEYTIME equ 64
      7  5000		       00 28	   KEYTIME    equ	40
      8  5000
      9  5000		       00 e0	   REL_SHORT  equ	$E0
     10  5000		       00 e9	   REL_MED    equ	$E9
     11  5000		       00 ee	   REL_LONG   equ	$EE
     12  5000
     13  5000		       00 00	   ATK_SHORT  equ	$00
     14  5000		       00 90	   ATK_MED    equ	$90
     15  5000		       00 e0	   ATK_LONG   equ	$E0
     16  5000
     17  5000
     18  5000		       00 00	   VOLOFF     equ	$00
     19  5000		       00 07	   VOLLOW     equ	$07
     20  5000		       00 0b	   VOLMED     equ	$0B
     21  5000		       00 0f	   VOLHIGH    equ	$0F
     22  5000
     23  5000		       00 c5	   CURRENTKEY equ	197
     24  5000
     25  5000		       d0 20	   BACK_COLOR equ	53280
     26  5000		       d0 21	   BORD_COLOR equ	53281
     27  5000
     28  5000		       d4 00	   SID1       equ	$D400
     29  5000
     30  5000
     31  5000							;SID2 equ $DEE0
     32  5000
     33  5000		       00 04	   SID2OFFSET equ	4
     34  5000
     35  5000		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  5000
     37  5000		       00 00	   SV1FL      equ	$00
     38  5000		       00 01	   SV1FH      equ	$01
     39  5000		       00 02	   SV1PWL     equ	$02
     40  5000		       00 03	   SV1PWH     equ	$03
     41  5000		       00 04	   SV1WAVE    equ	$04
     42  5000		       00 05	   SV1AD      equ	$05
     43  5000		       00 06	   SV1SR      equ	$06
     44  5000
     45  5000		       00 07	   SV2FL      equ	$07
     46  5000		       00 08	   SV2FH      equ	$08
     47  5000		       00 09	   SV2PWL     equ	$09
     48  5000		       00 0a	   SV2PWH     equ	$0A
     49  5000		       00 0b	   SV2WAVE    equ	$0B
     50  5000		       00 0c	   SV2AD      equ	$0C
     51  5000		       00 0d	   SV2SR      equ	$0D
     52  5000
     53  5000		       00 0e	   SV3FL      equ	$0E
     54  5000		       00 0f	   SV3FH      equ	$0F
     55  5000		       00 10	   SV3PWL     equ	$10
     56  5000		       00 11	   SV3PWH     equ	$11
     57  5000		       00 12	   SV3WAVE    equ	$12
     58  5000		       00 13	   SV3AD      equ	$13
     59  5000		       00 14	   SV3SR      equ	$14
     60  5000
     61  5000		       00 15	   SFILTL     equ	$15
     62  5000		       00 16	   SFILTH     equ	$16
     63  5000		       00 17	   SFILTC     equ	$17
     64  5000		       00 18	   SVOLMODE   equ	$18
     65  5000
     66  5000		       00 19	   SPAD1      equ	$19
     67  5000		       00 1a	   SPAD2      equ	$1A
     68  5000
     69  5000		       00 1b	   SRAND      equ	$1B
     70  5000
     71  5000		       dc 00	   PortA      equ	$dc00
     72  5000		       dc 02	   Ciddra     equ	$dc02
     73  5000
     74  5000
     75  5000							; *********************************************
     76  5000							; RAM Variables
     77  5000							; *********************************************
     78  5000
     79  5000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  5000							; ZERO PAGE
     81  5000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  5000
     83  5000							; FROM SORTING ROUTINE
     84  5000		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  5000		       01 22	   nval       =	$122	;set by calling program
     86  5000		       01 25	   work1      =	$125	;3 bytes used as working area
     87  5000		       01 26	   work2      =	$126
     88  5000		       01 27	   work3      =	$127
     89  5000
     90  5000							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  5000							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  5000							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  5000							;WORK2  = $34
     94  5000							;WORK3  = $35
     95  5000
     96  5000							; CYNTHCART
     97  5000		       00 22	   tunePtrL   equ	34	;2 bytes
     98  5000		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  5000		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  5000		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  5000
    102  5000		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  5000		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  5000
    105  5000		       00 2f	   helpReadPointerL equ	47
    106  5000		       00 30	   helpReadPointerM equ	48
    107  5000		       00 31	   helpWritePointerL equ	49
    108  5000		       00 32	   helpWritePointerM equ	50
    109  5000		       00 33	   helpColorPointerL equ	51
    110  5000		       00 34	   helpColorPointerM equ	52
    111  5000
    112  5000		       00 35	   portPtrL   equ	53	;2 bytes
    113  5000		       00 47	   portPtrH   equ	71	;2 bytes
    114  5000
    115  5000		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  5000		       00 c3	   keyPtrH    equ	195
    117  5000
    118  5000							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  5000							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  5000							; private addresses ======
    121  5000		       00 64	   midiControl equ	$64	; $64 = 100
    122  5000		       00 66	   midiStatus =	$66	; 102
    123  5000		       00 68	   midiTx     =	$68	;104
    124  5000		       00 6a	   midiRx     =	$6a	;106
    125  5000		       00 6f	   keyTestIndex =	$6f	; 111
    126  5000		       00 70	   keyPressedIntern =	$70	; 112
    127  5000		       00 72	   shiftPressed =	$72	; 114
    128  5000							; public addresses ======
    129  5000		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  5000		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  5000		       00 6e	   midiInterfaceType =	$6e	;110
    132  5000		       00 71	   keyPressed =	$71	; 113
    133  5000							; this module ======
    134  5000		       00 59	   midiMessage equ	$59	; 95
    135  5000		       00 5a	   lastWaveform equ	$5a	; 90
    136  5000							; - - - - - - - - - - - - - -
    137  5000							; - - - - - - - - - - - - - -
    138  5000							; Non-zero page
    139  5000		       7f 00	   midiRingbuffer =	$7F00
    140  5000							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  5000
    142  5000							;-------------------------------------
    143  5000
    144  5000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  5000							; NON-ZERO PAGE ($7000-$7FFF)
    146  5000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  5000
    148  5000		       70 00	   Trem       equ	$7000
    149  5000
    150  5000		       70 02	   FrameH     equ	$7002
    151  5000		       70 03	   Frame      equ	$7003
    152  5000
    153  5000		       70 04	   EchoPtr    equ	$7004
    154  5000		       70 05	   EchoCur    equ	$7005
    155  5000
    156  5000		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  5000
    158  5000		       70 07	   MagicVoice equ	$7007
    159  5000
    160  5000		       70 08	   LastKey    equ	$7008
    161  5000
    162  5000		       70 09	   Button     equ	$7009
    163  5000
    164  5000		       70 0a	   LFO	      equ	$700A
    165  5000
    166  5000		       70 0b	   PatchTune  equ	$700B
    167  5000
    168  5000		       70 0c	   temp       equ	$700C
    169  5000
    170  5000							;KeyA	equ $700D
    171  5000							;KeyB	equ $700E
    172  5000							;KeyC	equ $700F
    173  5000
    174  5000							;lastKeyA equ $7010
    175  5000							;lastKeyB equ $7011
    176  5000							;lastKeyC equ $7012
    177  5000
    178  5000		       70 13	   portDirA   equ	$7013
    179  5000		       70 14	   portDirB   equ	$7014
    180  5000		       70 15	   portDirC   equ	$7015
    181  5000
    182  5000		       70 16	   pitchLA    equ	$7016
    183  5000		       70 17	   pitchLB    equ	$7017
    184  5000		       70 18	   pitchLC    equ	$7018
    185  5000
    186  5000		       70 19	   pitchHA    equ	$7019
    187  5000		       70 1a	   pitchHB    equ	$701A
    188  5000		       70 1b	   pitchHC    equ	$701B
    189  5000
    190  5000		       70 1c	   volume     equ	$701C
    191  5000
    192  5000							; soundModes
    193  5000							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  5000		       00 00	   MODE_NORMAL equ	$00
    195  5000		       00 08	   MODE_6CHAN equ	$08
    196  5000		       00 10	   MODE_PORT1 equ	$10
    197  5000		       00 11	   MODE_PORT2 equ	$11
    198  5000		       00 12	   MODE_PORT3 equ	$12
    199  5000		       00 20	   MODE_MONO1 equ	$20
    200  5000		       00 21	   MODE_MONO2 equ	$21
    201  5000							;MODE_MONO3	equ $22
    202  5000		       00 40	   MODE_ARP1  equ	$40
    203  5000		       00 41	   MODE_ARP2  equ	$41
    204  5000		       00 42	   MODE_ARP3  equ	$42
    205  5000		       00 43	   MODE_ARP4  equ	$43
    206  5000		       00 44	   MODE_ARP5  equ	$44
    207  5000		       00 01	   MODE_5THS  equ	$01
    208  5000		       00 02	   MODE_5PORT equ	$02
    209  5000							;- - - - - - - - - - -
    210  5000
    211  5000		       00 10	   PORT_MASK  equ	$10
    212  5000		       00 20	   MONO_MASK  equ	$20
    213  5000		       00 40	   ARP_MASK   equ	$40
    214  5000		       00 08	   CHAN6_MASK equ	$08
    215  5000
    216  5000
    217  5000		       70 1d	   soundMode  equ	$701D
    218  5000		       70 1e	   arpSpeed   equ	$701E
    219  5000
    220  5000		       70 1f	   dispOn     equ	$701F
    221  5000
    222  5000		       70 20	   VICMode    equ	$7020
    223  5000
    224  5000		       70 21	   patPtr     equ	$7021
    225  5000
    226  5000		       70 22	   keyOffset  equ	$7022
    227  5000
    228  5000		       70 24	   volModeRAM equ	$7024
    229  5000
    230  5000		       70 25	   shiftL1    equ	$7025
    231  5000		       70 26	   shiftH1    equ	$7026
    232  5000		       70 27	   shiftL2    equ	$7027
    233  5000		       70 28	   shiftH2    equ	$7028
    234  5000
    235  5000							;$7025 - $7028 free
    236  5000
    237  5000		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    238  5000
    239  5000		       70 30	   WaveType   equ	$7030
    240  5000		       70 37	   WaveType2  equ	$7037
    241  5000		       70 3e	   WaveType3  equ	$703E
    242  5000
    243  5000		       70 3f	   LFObend    equ	$703F
    244  5000		       70 40	   bender     equ	$7040
    245  5000
    246  5000		       70 43	   pitchTmpL  equ	$7043
    247  5000		       70 44	   pitchTmpH  equ	$7044
    248  5000
    249  5000		       70 45	   videoMode  equ	$7045
    250  5000
    251  5000		       70 46	   textTemp   equ	$7046
    252  5000
    253  5000		       70 47	   patchSetY  equ	$7047
    254  5000
    255  5000		       70 48	   LFORate    equ	$7048
    256  5000		       70 49	   LFODepth   equ	$7049
    257  5000
    258  5000		       70 50	   videoModeNum equ	$7050
    259  5000
    260  5000		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    261  5000		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    262  5000
    263  5000		       70 57	   filter     equ	$7057
    264  5000
    265  5000		       70 58	   keyTimer   equ	$7058
    266  5000
    267  5000		       70 59	   bendSpd    equ	$7059
    268  5000
    269  5000		       70 5a	   SIDeditAddr equ	$705A
    270  5000		       70 5b	   SIDeditValue equ	$705B
    271  5000
    272  5000		       70 5c	   filterDisable equ	$705C
    273  5000
    274  5000		       70 5d	   lastKey    equ	$705D
    275  5000
    276  5000		       70 60	   hexKeyMode equ	$7060
    277  5000
    278  5000		       70 61	   NTSCmode   equ	$7061
    279  5000
    280  5000		       70 62	   temp16L    equ	$7062
    281  5000		       70 63	   temp16H    equ	$7063
    282  5000
    283  5000		       70 64	   saveX      equ	$7064
    284  5000
    285  5000							;EchoBuffer	equ 1184 ; 256 bytes
    286  5000
    287  5000		       70 65	   keyTemp    equ	$7065
    288  5000
    289  5000		       70 66	   lastOsc    equ	$7066
    290  5000
    291  5000		       70 67	   fullScreenMode equ	$7067
    292  5000
    293  5000		       70 68	   videoText  equ	$7068
    294  5000
    295  5000		       70 69	   attack     equ	$7069
    296  5000		       70 6a	   release    equ	$706A
    297  5000		       70 6b	   octave     equ	$706B
    298  5000		       70 6c	   filterStatus equ	$706C
    299  5000
    300  5000		       70 6d	   helpColor  equ	$706D
    301  5000		       70 6e	   helpYIn    equ	$706E
    302  5000		       70 6f	   helpYOut   equ	$706F
    303  5000
    304  5000		       70 70	   helpMode   equ	$7070
    305  5000
    306  5000		       70 71	   tuneSetting equ	$7071
    307  5000
    308  5000		       70 72	   hexDispTemp equ	$7072
    309  5000
    310  5000		       70 73	   sidTemp1   equ	$7073
    311  5000		       70 74	   sidTemp2   equ	$7074
    312  5000
    313  5000		       70 75	   customPatchSaved equ	$7075
    314  5000
    315  5000		       70 76	   paddleTop  equ	$7076
    316  5000		       70 77	   paddleBottom equ	$7077
    317  5000
    318  5000		       70 78	   paddleX    equ	$7078
    319  5000		       70 79	   paddleY    equ	$7079
    320  5000
    321  5000		       70 7a	   paddle2    equ	$707A
    322  5000		       70 7b	   lastPad2   equ	$707B
    323  5000
    324  5000		       70 7c	   debugOffset equ	$707C
    325  5000		       70 7d	   savedMidiStatus equ	$707D
    326  5000		       70 7e	   firstDataByte equ	$707E
    327  5000		       70 7f	   tempVelocity equ	$707F
    328  5000		       70 80	   bufferSize equ	$7080
    329  5000		       70 81	   noteTempA  equ	$7081
    330  5000		       70 82	   noteTempB  equ	$7082
    331  5000
    332  5000		       70 83	   benderAutoreset equ	$7083
    333  5000		       70 84	   polyphony  equ	$7084
    334  5000
    335  5000		       70 85	   arpOffset  equ	$7085
    336  5000
    337  5000		       70 86	   fxType     equ	$7086
    338  5000		       70 87	   modValue1  equ	$7087
    339  5000		       70 89	   modDirection equ	$7089
    340  5000		       70 8a	   modCounter equ	$708A
    341  5000		       70 8b	   modLFOMinValue equ	$708B
    342  5000		       70 8a	   modLFOMaxValue equ	$708A
    343  5000
    344  5000		       00 00	   MOD_NONE   equ	0
    345  5000		       00 01	   MOD_FILT_LFO equ	1
    346  5000		       00 02	   MOD_FILT_ENV equ	2
    347  5000		       00 03	   MOD_FILT3  equ	3
    348  5000		       00 04	   MOD_FILT4  equ	4
    349  5000		       00 05	   MOD_FILT5  equ	5
    350  5000		       00 06	   MOD_PW_LFO equ	6
    351  5000		       00 07	   MOD_PW2    equ	7
    352  5000
    353  5000		       70 8b	   noteOffCount equ	$708B
    354  5000		       70 8c	   noteOnCount equ	$708C
    355  5000
    356  5000		       70 8d	   hexDispColor equ	$708D
    357  5000
    358  5000		       70 8e	   midiBendValue equ	$708E
    359  5000
    360  5000		       70 8f	   temp2      equ	$708F
    361  5000
    362  5000
    363  5000		       70 97	   resonance  equ	$7097
    364  5000
    365  5000		       70 98	   resetValue equ	$7098
    366  5000
    367  5000		       70 99	   lastNoteCount equ	$7099
    368  5000		       70 9a	   lastNote   equ	$709A
    369  5000
    370  5000		       70 9b	   keyCount   equ	$709B
    371  5000
    372  5000		       70 9c	   filterModValue equ	$709C
    373  5000		       70 9d	   filterSetValue equ	$709D
    374  5000		       70 9e	   pwModValue equ	$709E
    375  5000		       70 9f	   pwSetValue equ	$709F
    376  5000
    377  5000		       70 f0	   midiTuning equ	$70F0
    378  5000		       70 f1	   benderTuning equ	$70F1
    379  5000		       70 f2	   lfoTuning  equ	$70F2
    380  5000		       70 f3	   systemTuning equ	$70F3
    381  5000		       70 f4	   masterTuning equ	$70F4
    382  5000		       70 f5	   finalTuning equ	$70F5
    383  5000		       70 f6	   noteShift  equ	$70F6
    384  5000
    385  5000		       70 f7	   midiMode   equ	$70F7
    386  5000
    387  5000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    388  5000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    389  5000							; BUFFERS
    390  5000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  5000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    392  5000
    393  5000		       00 08	   NOTE_BUF_SIZE equ	8
    394  5000		       70 a0	   noteNumArray equ	$70A0
    395  5000		       70 b0	   playNoteArray equ	$70B0
    396  5000
    397  5000							;noteVelArray equ $70C0
    398  5000
    399  5000		       70 d0	   kbBuffer   equ	$70D0
    400  5000		       70 e0	   lastKbBuffer equ	$70E0
    401  5000
    402  5000		       70 e1	   tempA      equ	$70E1
    403  5000		       70 e2	   tempX      equ	$70E2
    404  5000		       70 e3	   tempY      equ	$70E3
    405  5000
    406  5000
    407  5000							;-----------------------------------------------
    408  5000
    409  5000							; SID editor custom preset data...
    410  5000		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    411  5000
    412  5000		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    413  5000		       71 41	   savePaddle equ	$7141
    414  5000		       71 42	   saveOctave equ	$7142
    415  5000		       71 43	   saveSoundMode equ	$7143
    416  5000		       71 43	   saveFXType equ	$7143
    417  5000		       71 44	   saveArpSpeed equ	$7144
    418  5000		       71 46	   saveLFODepth equ	$7146
    419  5000		       71 47	   saveLFORate equ	$7147
    420  5000		       71 48	   saveVolume equ	$7148
    421  5000		       71 49	   saveVolMode equ	$7149
    422  5000		       71 4a	   saveFilter equ	$714A
    423  5000
    424  5000
    425  5000
    426  5000
------- FILE cynthcart152.asm
    255  5000
    256  5000							; *********************************************
    257  5000							; Start of program
    258  5000							; *********************************************
    259  5000				   Startup
    260  5000
    261  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    262  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    263  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    264  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    265  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    266  5000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    267  5000							; switch to lowercase mode
    268  5000		       a9 17		      lda	#23
    269  5002		       8d 18 d0 	      sta	$d018
    270  5005
    271  5005							; clear screen and show info
    272  5005		       a2 00		      ldx	#0
    273  5007		       8e 20 d0 	      stx	$d020
    274  500a		       8e 21 d0 	      stx	$d021
    275  500d				   loop1		; clear screen...
    276  500d		       a9 20		      lda	#32
    277  500f		       9d 00 04 	      sta	$0400,x
    278  5012		       9d fa 04 	      sta	$0400+250,x
    279  5015		       9d f4 05 	      sta	$0400+500,x
    280  5018		       9d ee 06 	      sta	$0400+750,x
    281  501b		       a9 0e		      lda	#14
    282  501d		       9d 00 d8 	      sta	$d800,x
    283  5020		       9d fa d8 	      sta	$d800+250,x
    284  5023		       9d f4 d9 	      sta	$d800+500,x
    285  5026		       9d ee da 	      sta	$d800+750,x
    286  5029		       e8		      inx
    287  502a		       e0 fa		      cpx	#250
    288  502c		       d0 df		      bne	loop1
    289  502e		       a2 00		      ldx	#0
    290  5030				   loop2		; show info...
    291  5030							;lda info,x
    292  5030		       a9 01		      lda	#1
    293  5032		       9d 90 05 	      sta	$0400+10*40,x
    294  5035		       e8		      inx
    295  5036		       e0 50		      cpx	#80
    296  5038		       d0 f6		      bne	loop2
    297  503a
    298  503a							; init SID...
    299  503a		       a9 00		      lda	#0
    300  503c		       a2 00		      ldx	#0
    301  503e		       9d 00 d4    initSid    sta	$d400,x
    302  5041		       e8		      inx
    303  5042		       e0 19		      cpx	#25
    304  5044		       d0 f8		      bne	initSid
    305  5046		       a9 0f		      lda	#15
    306  5048		       8d 18 d4 	      sta	$d418
    307  504b		       a9 01		      lda	#1
    308  504d		       8d 03 d4 	      sta	$d403
    309  5050
    310  5050							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    311  5050							;lock: jmp lock
    312  5050							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    313  5050
    314  5050					      IF	ENABLE_MIDI_COMMANDS=1
    315  5050							; init MIDI and enable all interrupts
    316  5050		       a9 03		      lda	#3
    317  5052		       20 83 81 	      jsr	midiInit
    318  5055					      ENDIF
    319  5055
    320  5055							; Set default hex color
    321  5055		       a9 0e		      lda	#$E
    322  5057		       8d 8d 70 	      sta	hexDispColor
    323  505a
    324  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    329  505a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    330  505a
    331  505a				   skipTest
    332  505a
    333  505a							; Copy program into RAM if running from cartridge...
    334  505a				  -	      IF	MODE=CART
    335  505a				  -	      ldx	#0
    336  505a				  -RAMTextCopy
    337  505a				  -	      lda	RAMText,x
    338  505a				  -	      beq	quitRAMTextCopy
    339  505a				  -	      cmp	#64
    340  505a				  -	      bmi	showSpaceRAM
    341  505a				  -	      sbc	#64
    342  505a				  -showSpaceRAM
    343  505a				  -	      sta	1024,x
    344  505a				  -	      inx
    345  505a				  -	      jmp	RAMTextCopy
    346  505a				  -RAMText
    347  505a				  -	      byte	"COPYING TO RAM...",0
    348  505a				  -quitRAMTextCopy
    349  505a				  -			;------------
    350  505a				  -	      ldx	#8*4
    351  505a				  -	      lda	#<copyStart
    352  505a				  -	      sta	copyPtrS
    353  505a				  -	      lda	#>copyStart
    354  505a				  -	      sta	copyPtrS+1
    355  505a				  -	      lda	#<ramStart
    356  505a				  -	      sta	copyPtrD
    357  505a				  -	      lda	#>ramStart
    358  505a				  -	      sta	copyPtrD+1
    359  505a				  -ramCopy1
    360  505a				  -	      ldy	#0
    361  505a				  -ramCopy2
    362  505a				  -	      lda	(copyPtrS),y
    363  505a				  -	      sta	(copyPtrD),y
    364  505a				  -	      dey
    365  505a				  -	      bne	ramCopy2
    366  505a				  -	      inc	copyPtrS+1
    367  505a				  -	      inc	copyPtrD+1
    368  505a				  -	      dex
    369  505a				  -	      bne	ramCopy1
    370  505a				  -	      jmp	ramStart
    371  505a				  -copyStart
    372  505a				  -	      rorg	$3000	; RAM destination
    373  505a				  -ramStart
    374  505a					      ENDIF
    375  505a
    376  505a				  -	      IF	MODE=CART
    377  505a				  -			; System Startup Stuff
    378  505a				  -			; (not needed if starting from disk)
    379  505a				  -	      sei
    380  505a				  -	      jsr	$FF84	; initialize I/O devices
    381  505a				  -	      jsr	$FF87	; initalise memory pointers
    382  505a				  -	      jsr	$FF8A	; restore I/O vectors
    383  505a				  -	      jsr	$FF81	; initalise screen and keyboard
    384  505a				  -	      cli
    385  505a					      ENDIF
    386  505a
    387  505a				  -	      IF	MODE=KERNEL_OBSOLETE
    388  505a				  -	      org	$A483
    389  505a					      ENDIF
    390  505a
    391  505a		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    392  505d		       29 ef		      AND	#$EF	; badlines
    393  505f		       8d 11 d0 	      STA	$D011
    394  5062
    395  5062							; Disable RESTORE key
    396  5062		       a9 c1		      lda	#193
    397  5064		       8d 18 03 	      sta	792
    398  5067
    399  5067		       a9 00		      lda	#0
    400  5069		       8d 20 d0 	      sta	BACK_COLOR
    401  506c		       8d 21 d0 	      sta	BORD_COLOR
    402  506f
    403  506f							;*****************************
    404  506f							; Detect PAL/NTSC
    405  506f							;*****************************
    406  506f							;palntsc:
    407  506f		       78		      sei		; disable interrupts
    408  5070				   wait
    409  5070		       ad 12 d0 	      lda	$d012
    410  5073		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    411  5075				   wait1
    412  5075		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    413  5078		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    414  507a				   wait2
    415  507a		       a0 00		      ldy	#$00
    416  507c				   synch1
    417  507c		       ad 12 d0 	      lda	$d012
    418  507f		       c9 37		      cmp	#$37	; top PAL rasterline
    419  5081		       d0 f9		      bne	synch1
    420  5083		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    421  5086				   synch2
    422  5086		       cd 12 d0 	      cmp	$d012
    423  5089		       f0 fb		      beq	synch2
    424  508b		       ad 12 d0 	      lda	$d012
    425  508e		       58		      cli		; enable interrupts
    426  508f
    427  508f		       8d 61 70 	      sta	NTSCmode
    428  5092
    429  5092
    430  5092
    431  5092
    432  5092							;****************************************************
    433  5092							; init screen and variables
    434  5092							;****************************************************
    435  5092
    436  5092		       a9 00		      lda	#0
    437  5094		       8d 97 70 	      sta	resonance
    438  5097		       8d 8c 70 	      sta	noteOnCount
    439  509a		       8d 8b 70 	      sta	noteOffCount
    440  509d		       20 af 60 	      jsr	setFullScreenMode
    441  50a0		       20 ac 67 	      jsr	variableInit
    442  50a3		       20 23 67 	      jsr	displayInit
    443  50a6
    444  50a6							; Clear note buffer...
    445  50a6		       a2 08		      ldx	#8
    446  50a8		       a9 ff		      lda	#255
    447  50aa				   clearBufferLoop
    448  50aa		       ca		      dex
    449  50ab		       9d a0 70 	      sta	noteNumArray,x
    450  50ae							;sta noteAgeArray,x
    451  50ae							;sta noteVelArray,x
    452  50ae		       d0 fa		      bne	clearBufferLoop
    453  50b0
    454  50b0
    455  50b0				  -	      IF	DEBUG_DISPLAY=1
    456  50b0				  -	      ldx	#>debugOverlay	;low/MSB
    457  50b0				  -	      ldy	#<debugOverlay	;high/LSB
    458  50b0				  -	      jsr	displayPage
    459  50b0					      ENDIF
    460  50b0
    461  50b0		       a9 00		      lda	#0
    462  50b2		       a0 00		      ldy	#0
    463  50b4		       20 64 63 	      jsr	setPatch
    464  50b7
    465  50b7		       a9 00		      lda	#0
    466  50b9		       8d f0 70 	      sta	midiTuning
    467  50bc
    468  50bc		       a9 ff		      lda	#$FF
    469  50be		       20 ee 61 	      jsr	setMidiMode
    470  50c1							;sta midiMode
    471  50c1
    472  50c1							;===========================================
    473  50c1							;===========================================
    474  50c1							;===========================================
    475  50c1							; Main Loop
    476  50c1							;===========================================
    477  50c1							;===========================================
    478  50c1							;===========================================
    479  50c1				   Loop
    480  50c1							; Increment frame counter
    481  50c1		       ee 03 70 	      inc	Frame
    482  50c4		       ad 03 70 	      lda	Frame
    483  50c7		       29 3f		      and	#%00111111
    484  50c9		       d0 03		      bne	SkipHFrame
    485  50cb		       ee 02 70 	      inc	FrameH
    486  50ce				   SkipHFrame
    487  50ce
    488  50ce
    489  50ce		       20 0c 51 	      jsr	processLFO
    490  50d1		       20 4c 5a 	      jsr	processFX
    491  50d4
    492  50d4					      IF	ENABLE_MIDI_COMMANDS=1
    493  50d4		       20 cb 51 	      jsr	processMIDI
    494  50d7					      ENDIF
    495  50d7
    496  50d7		       20 72 5d 	      jsr	readKeyboard
    497  50da		       20 4b 54 	      jsr	processBender
    498  50dd		       20 88 54 	      jsr	processSoundDriver
    499  50e0		       20 de 5b 	      jsr	processPaddles
    500  50e3		       20 a5 5c 	      jsr	processVideoMode
    501  50e6		       20 ec 50 	      jsr	updateFilterAndPW
    502  50e9		       4c c1 50 	      jmp	Loop
    503  50ec							;-------- BOTTOM OF MAIN LOOP ---------------------------
    504  50ec
    505  50ec				   updateFilterAndPW
    506  50ec		       ad 9c 70 	      lda	filterModValue
    507  50ef		       38		      sec
    508  50f0		       e9 7f		      sbc	#127
    509  50f2		       30 0a		      bmi	negativeFilterMod
    510  50f4							; Positive
    511  50f4		       6d 9d 70 	      adc	filterSetValue
    512  50f7		       90 0f		      bcc	doSetFilter
    513  50f9		       a9 ff		      lda	#255
    514  50fb		       4c 08 51 	      jmp	doSetFilter
    515  50fe
    516  50fe				   negativeFilterMod
    517  50fe							; Negative
    518  50fe		       6d 9d 70 	      adc	filterSetValue
    519  5101		       b0 05		      bcs	doSetFilter
    520  5103		       a9 00		      lda	#0
    521  5105		       4c 08 51 	      jmp	doSetFilter
    522  5108
    523  5108							;and #$F0
    524  5108				   doSetFilter
    525  5108		       20 cb 62 	      jsr	setFilter
    526  510b							; TODO: add PW setting
    527  510b		       60		      rts
    528  510c
    529  510c
    530  510c							;-------------------------------
    531  510c							; LFO
    532  510c							;-------------------------------
    533  510c				   processLFO
    534  510c							; Set current LFO modulation
    535  510c							; into (pitch) shift variables
    536  510c
    537  510c							;---------------------------
    538  510c							; get pitch bend from paddle2
    539  510c		       ad 7a 70 	      lda	paddle2
    540  510f		       c9 04		      cmp	#4
    541  5111		       d0 06		      bne	noPadBend
    542  5113		       ad 79 70 	      lda	paddleY
    543  5116		       8d 40 70 	      sta	bender
    544  5119				   noPadBend
    545  5119
    546  5119							;----------------------------
    547  5119							; get depth from paddle2
    548  5119		       ad 7a 70 	      lda	paddle2
    549  511c		       c9 03		      cmp	#3
    550  511e		       d0 0a		      bne	noPadLFO
    551  5120		       ad 79 70 	      lda	paddleY
    552  5123		       4a		      lsr
    553  5124		       4a		      lsr
    554  5125		       4a		      lsr
    555  5126		       a8		      tay
    556  5127		       4c 30 51 	      jmp	skipFixedLFODepth
    557  512a							;---------------------
    558  512a							; calculate LFO depth
    559  512a							; increases per octave
    560  512a				   noPadLFO
    561  512a		       ae 49 70 	      ldx	LFODepth
    562  512d		       bc 4e 7b 	      ldy	LFODepthArray,x
    563  5130				   skipFixedLFODepth
    564  5130		       ad 22 70 	      lda	keyOffset	; current octave offset
    565  5133		       c9 0c		      cmp	#12
    566  5135		       30 08		      bmi	endDepth
    567  5137		       c8		      iny
    568  5138		       c9 24		      cmp	#36
    569  513a		       d0 03		      bne	endDepth
    570  513c		       98		      tya
    571  513d		       0a		      asl
    572  513e		       a8		      tay
    573  513f				   endDepth		; y now contains the depth value
    574  513f
    575  513f
    576  513f							; figure out LFO position
    577  513f		       ad 02 70 	      lda	FrameH
    578  5142		       ae 48 70 	      ldx	LFORate
    579  5145		       f0 0e		      beq	LFOSkip
    580  5147		       ad 03 70 	      lda	Frame
    581  514a		       ca		      dex
    582  514b		       ca		      dex
    583  514c		       ca		      dex
    584  514d		       f0 06		      beq	LFOSkip
    585  514f		       4a		      lsr
    586  5150		       e8		      inx
    587  5151		       f0 02		      beq	LFOSkip
    588  5153		       4a		      lsr
    589  5154		       4a		      lsr
    590  5155				   LFOSkip
    591  5155		       4a		      lsr
    592  5156
    593  5156		       29 0f		      and	#$0F
    594  5158		       aa		      tax
    595  5159		       bd 92 7b 	      lda	LFOArrH,x
    596  515c		       8d 26 70 	      sta	shiftH1
    597  515f		       d0 10		      bne	negativeLFO
    598  5161
    599  5161		       18		      clc
    600  5162		       bd 82 7b 	      lda	LFOArrL,x
    601  5165				   depthLoop
    602  5165		       7d 82 7b 	      adc	LFOArrL,x
    603  5168		       88		      dey
    604  5169		       d0 fa		      bne	depthLoop
    605  516b		       8d 25 70 	      sta	shiftL1
    606  516e		       4c 86 51 	      jmp	endLFO
    607  5171
    608  5171				   negativeLFO
    609  5171		       bd 82 7b 	      lda	LFOArrL,x
    610  5174				   depthLoopN
    611  5174		       7d 82 7b 	      adc	LFOArrL,x
    612  5177		       88		      dey
    613  5178		       d0 fa		      bne	depthLoopN
    614  517a		       8d 0c 70 	      sta	temp
    615  517d		       a9 ff		      lda	#255
    616  517f		       38		      sec
    617  5180		       ed 0c 70 	      sbc	temp
    618  5183		       8d 25 70 	      sta	shiftL1
    619  5186				   endLFO
    620  5186
    621  5186							; if depth=0 then cancel LFO
    622  5186		       ad 7a 70 	      lda	paddle2
    623  5189		       c9 03		      cmp	#3
    624  518b		       f0 0d		      beq	doLFO
    625  518d		       ad 49 70 	      lda	LFODepth
    626  5190		       d0 08		      bne	doLFO
    627  5192		       a9 00		      lda	#0
    628  5194		       8d 25 70 	      sta	shiftL1
    629  5197		       8d 26 70 	      sta	shiftH1
    630  519a				   doLFO
    631  519a
    632  519a		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    633  519d		       d0 05		      bne	showLFO
    634  519f		       ad 67 70 	      lda	fullScreenMode
    635  51a2		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    636  51a4							;--------
    637  51a4							; Show it
    638  51a4				   showLFO
    639  51a4		       bd a2 7b 	      lda	LFOdisp,x
    640  51a7		       aa		      tax
    641  51a8		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    642  51aa							;adc #10
    643  51aa
    644  51aa							;lda #160
    645  51aa							;sta 1063,x
    646  51aa		       9d ff d7 	      sta	55296-1,x
    647  51ad
    648  51ad							;clear the previous one
    649  51ad							;lda #32
    650  51ad		       a9 02		      lda	#CYNTHCART_COLOR
    651  51af							;sta 1064,x
    652  51af		       9d 00 d8 	      sta	55296+0,x
    653  51b2		       e0 01		      cpx	#1
    654  51b4		       f0 03		      beq	dontErase
    655  51b6							;sta 1062,x
    656  51b6		       9d fe d7 	      sta	55296-2,x
    657  51b9				   dontErase
    658  51b9
    659  51b9							; set up shift for second SID
    660  51b9							; chip, pitch a tad higher for
    661  51b9							; awesome chorus effect
    662  51b9		       18		      clc
    663  51ba		       ad 25 70 	      lda	shiftL1
    664  51bd		       69 04		      adc	#SID2OFFSET
    665  51bf		       8d 27 70 	      sta	shiftL2
    666  51c2		       ad 26 70 	      lda	shiftH1
    667  51c5		       69 00		      adc	#0
    668  51c7		       8d 28 70 	      sta	shiftH2
    669  51ca
    670  51ca							; LFO->filter
    671  51ca							;	lda shiftL1
    672  51ca							;	clc
    673  51ca							;	adc #128
    674  51ca							;	sta SID1+SFILTH
    675  51ca							;	sta SID2+SFILTH
    676  51ca
    677  51ca				   skipLFO
    678  51ca		       60		      rts
    679  51cb
    680  51cb							; Echo stuff
    681  51cb							;	inc EchoCur
    682  51cb							;	inc EchoPtr
    683  51cb							; Save note in echo buffer
    684  51cb							;	ldx EchoCur
    685  51cb							;	sta EchoBuffer,x
    686  51cb
    687  51cb							;---------------------
    688  51cb							; Read keyboard
    689  51cb							;jsr readKeyboard
    690  51cb							;---------------------
    691  51cb
    692  51cb							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    693  51cb							; Read MIDI
    694  51cb							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    695  51cb							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    696  51cb					      IF	ENABLE_MIDI_COMMANDS=1
    697  51cb				   processMIDI
    698  51cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    699  51cb							; Debug - show main note buffer
    700  51cb				  -	      IF	DEBUG_DISPLAY=1
    701  51cb				  -	      lda	noteNumArray+0
    702  51cb				  -	      sta	1744+125
    703  51cb				  -	      lda	noteNumArray+1
    704  51cb				  -	      sta	1744+126
    705  51cb				  -	      lda	noteNumArray+2
    706  51cb				  -	      sta	1744+127
    707  51cb				  -	      lda	noteNumArray+3
    708  51cb				  -	      sta	1744+128
    709  51cb				  -
    710  51cb				  -	      lda	noteNumArray+4
    711  51cb				  -	      sta	1744+129
    712  51cb				  -	      lda	noteNumArray+5
    713  51cb				  -	      sta	1744+130
    714  51cb				  -	      lda	noteNumArray+6
    715  51cb				  -	      sta	1744+131
    716  51cb				  -	      lda	noteNumArray+7
    717  51cb				  -	      sta	1744+132
    718  51cb					      ENDIF
    719  51cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    720  51cb
    721  51cb							; get next MIDI byte
    722  51cb				   check
    723  51cb					      IF	ENABLE_MIDI_COMMANDS=1
    724  51cb		       20 09 82 	      jsr	midiRead	; Midi byte will be in A and Y
    725  51ce					      ENDIF
    726  51ce		       d0 03		      bne	continueReading
    727  51d0		       4c 1d 54 	      jmp	endMIDI
    728  51d3				   continueReading
    729  51d3
    730  51d3
    731  51d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    732  51d3							; DEBUG - SHOW MIDI DATA
    733  51d3				  -	      IF	DEBUG_DISPLAY=1
    734  51d3				  -	      inc	1824+81
    735  51d3				  -	      sta	temp
    736  51d3				  -	      ldx	#34
    737  51d3				  -	      ldy	debugOffset
    738  51d3				  -	      iny
    739  51d3				  -	      iny
    740  51d3				  -	      iny
    741  51d3				  -	      iny
    742  51d3				  -	      iny
    743  51d3				  -	      iny
    744  51d3				  -	      jsr	displayHex
    745  51d3				  -	      ldy	debugOffset
    746  51d3				  -	      iny
    747  51d3				  -	      tya
    748  51d3				  -	      and	#$0F
    749  51d3				  -	      sta	debugOffset
    750  51d3				  -	      adc	#5
    751  51d3				  -	      tay
    752  51d3				  -	      lda	temp
    753  51d3				  -	      ldy	temp
    754  51d3					      ENDIF
    755  51d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    756  51d3
    757  51d3							; If bit 7 isn't set, then it's a running mode byte...
    758  51d3		       10 68		      bpl	runningModeByte
    759  51d5		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
    760  51d8		       a8		      tay
    761  51d9		       29 f0		      and	#$F0
    762  51db		       c9 f0		      cmp	#$F0
    763  51dd		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
    764  51df							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    765  51df
    766  51df							;tya
    767  51df
    768  51df							; If bit 7 isn't set, then it's a running mode byte...
    769  51df							;bpl runningModeByte
    770  51df
    771  51df
    772  51df							;tay
    773  51df							;and #$F0
    774  51df							;cmp #$F0
    775  51df							;beq processSysex ;Skip saving status if it's sysex
    776  51df							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    777  51df							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
    778  51df					      IF	ENABLE_MIDI_COMMANDS=1
    779  51df		       20 10 82 	      jsr	midiReadWait	; Midi byte will be in A and Y
    780  51e2					      ENDIF
    781  51e2		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
    782  51e5		       ad 7d 70 	      lda	savedMidiStatus
    783  51e8		       20 55 52 	      jsr	processMidiMessage	; handle the rest of the message...
    784  51eb		       4c cb 51 	      jmp	check	; End of loop - - -
    785  51ee
    786  51ee				   processSysex
    787  51ee		       98		      tya		; Get systex byte
    788  51ef		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    789  51f1		       d0 0a		      bne	checkF1
    790  51f3				   sysexReadingLoop
    791  51f3		       20 10 82 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    792  51f6		       c9 f7		      cmp	#$F7
    793  51f8		       d0 f9		      bne	sysexReadingLoop
    794  51fa		       4c cb 51 	      jmp	check
    795  51fd							; - - - - - -
    796  51fd				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    797  51fd		       c9 f1		      cmp	#$F1
    798  51ff		       d0 06		      bne	checkF2
    799  5201		       20 10 82 	      jsr	midiReadWait
    800  5204		       4c cb 51 	      jmp	check
    801  5207							; - - - - - -
    802  5207				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    803  5207		       c9 f2		      cmp	#$F2
    804  5209		       d0 09		      bne	checkF3
    805  520b					      IF	ENABLE_MIDI_COMMANDS=1
    806  520b		       20 10 82 	      jsr	midiReadWait
    807  520e		       20 10 82 	      jsr	midiReadWait
    808  5211					      ENDIF
    809  5211		       4c cb 51 	      jmp	check
    810  5214							; - - - - - -
    811  5214				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    812  5214		       c9 f3		      cmp	#$F3
    813  5216		       d0 09		      bne	checkF8
    814  5218		       20 10 82 	      jsr	midiReadWait
    815  521b		       4c cb 51 	      jmp	check
    816  521e							; - - - - - -
    817  521e							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    818  521e		       4c cb 51 	      jmp	check
    819  5221
    820  5221
    821  5221				   checkF8
    822  5221		       c9 f8		      cmp	#$F8
    823  5223		       d0 03		      bne	checkFA
    824  5225							; NO EXTRA BYTES TO READ
    825  5225		       4c cb 51 	      jmp	check
    826  5228							; - - - - - -
    827  5228				   checkFA
    828  5228		       c9 fa		      cmp	#$FA
    829  522a		       d0 03		      bne	checkFC
    830  522c							; NO EXTRA BYTES TO READ
    831  522c		       4c cb 51 	      jmp	check
    832  522f							; - - - - - -
    833  522f				   checkFC
    834  522f		       c9 fc		      cmp	#$FC
    835  5231		       d0 03		      bne	checkFF
    836  5233							; NO EXTRA BYTES TO READ
    837  5233		       4c cb 51 	      jmp	check
    838  5236							; - - - - - -
    839  5236				   checkFF
    840  5236		       c9 ff		      cmp	#$FF
    841  5238		       d0 00		      bne	endSysex
    842  523a							;---- END SYSTEM/CLOCK ----
    843  523a				   endSysex
    844  523a		       4c cb 51 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    845  523d
    846  523d
    847  523d				   runningModeByte
    848  523d		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    849  5240		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    850  5243		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    851  5245		       c9 f0		      cmp	#$F0
    852  5247		       d0 03		      bne	normalRunningMode
    853  5249							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    854  5249							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    855  5249		       4c cb 51 	      jmp	check
    856  524c							;-----------------------
    857  524c							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    858  524c							;jsr midiReadWait ; Now need to get a new "status byte"
    859  524c							;jmp runningModeByte
    860  524c
    861  524c				   normalRunningMode
    862  524c		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    863  524f		       20 55 52 	      jsr	processMidiMessage
    864  5252		       4c cb 51 	      jmp	check
    865  5255
    866  5255				   processMidiMessage
    867  5255		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    868  5256
    869  5256							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    870  5256		       ad f7 70 	      lda	midiMode
    871  5259		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    872  525b		       98		      tya
    873  525c		       29 0f		      and	#$0F
    874  525e		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    875  5261		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    876  5263
    877  5263							;---------------------------------------------
    878  5263							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    879  5263							;---------------------------------------------
    880  5263		       98		      tya
    881  5264		       09 40		      ora	#%01000000
    882  5266		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    883  5268		       98		      tya
    884  5269		       09 20		      ora	#%00100000
    885  526b		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    886  526d
    887  526d				   twoParameters
    888  526d		       20 10 82 	      jsr	midiReadWait
    889  5270				   oneParameter
    890  5270							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    891  5270		       60		      rts
    892  5271							;jmp check
    893  5271
    894  5271
    895  5271				   endChannelCheck
    896  5271							; Status byte should be in A
    897  5271							; Ignoring channel for now
    898  5271							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    899  5271		       98		      tya
    900  5272
    901  5272
    902  5272		       29 f0		      and	#$F0
    903  5274		       c9 80		      cmp	#$80	; Note off
    904  5276		       d0 03		      bne	notNoteOff
    905  5278		       4c ea 53 	      jmp	noteOff
    906  527b				   notNoteOff
    907  527b		       c9 90		      cmp	#$90	; Note on
    908  527d		       d0 03		      bne	notNoteOn
    909  527f		       4c b4 53 	      jmp	noteOn
    910  5282				   notNoteOn
    911  5282		       c9 e0		      cmp	#$E0	; Pitch bend
    912  5284		       f0 3a		      beq	pitchBend
    913  5286		       c9 b0		      cmp	#$B0	; Control change
    914  5288		       d0 03		      bne	notControlChange
    915  528a		       4c e0 52 	      jmp	controlChange
    916  528d				   notControlChange
    917  528d		       c9 d0		      cmp	#$D0	; Channel pressure
    918  528f		       f0 2b		      beq	channelPressure
    919  5291		       c9 a0		      cmp	#$A0	; Key pressure
    920  5293		       f0 0f		      beq	keyPressure
    921  5295		       c9 c0		      cmp	#$C0	; Patch change
    922  5297		       f0 12		      beq	patchChange
    923  5299							;cmp #$F0 ; Sysex
    924  5299							;beq sysex
    925  5299		       8d e4 07 	      sta	2020
    926  529c		       a9 02		      lda	#2
    927  529e		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    928  52a1		       4c 1d 54 	      jmp	endMIDI
    929  52a4
    930  52a4
    931  52a4				   keyPressure
    932  52a4				  -	      IF	DEBUG_DISPLAY=1
    933  52a4				  -	      inc	1824+86
    934  52a4					      ENDIF
    935  52a4		       ad 7e 70 	      lda	firstDataByte
    936  52a7					      IF	ENABLE_MIDI_COMMANDS=1
    937  52a7		       20 10 82 	      jsr	midiReadWait
    938  52aa					      ENDIF
    939  52aa		       60		      rts
    940  52ab
    941  52ab
    942  52ab
    943  52ab							;REL_SHORT equ $E0
    944  52ab							;REL_MED	equ $E9
    945  52ab							;REL_LONG equ $EE
    946  52ab
    947  52ab							;ATK_SHORT equ $00
    948  52ab							;ATK_MED	equ $90
    949  52ab							;ATK_LONG equ $E0
    950  52ab
    951  52ab				   patchChange
    952  52ab				  -	      IF	DEBUG_DISPLAY=1
    953  52ab				  -	      inc	1824+88
    954  52ab					      ENDIF
    955  52ab		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    956  52ae		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    957  52b0		       a0 1c		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    958  52b2				   skipPatchDefault1
    959  52b2		       c0 1c		      cpy	#MAX_PATCH_NUMBER
    960  52b4		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    961  52b6		       a0 1c		      ldy	#MAX_PATCH_NUMBER
    962  52b8				   skipPatchDefault2
    963  52b8		       20 64 63 	      jsr	setPatch
    964  52bb		       60		      rts
    965  52bc
    966  52bc				   channelPressure
    967  52bc				  -	      IF	DEBUG_DISPLAY=1
    968  52bc				  -	      inc	1824+89
    969  52bc					      ENDIF
    970  52bc		       ad 7e 70 	      lda	firstDataByte
    971  52bf		       60		      rts
    972  52c0
    973  52c0				   pitchBend
    974  52c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    975  52c0							; DEBUG - SHOW MIDI DATA
    976  52c0				  -	      IF	DEBUG_DISPLAY=1
    977  52c0				  -			;sta temp
    978  52c0				  -	      ldx	#25
    979  52c0				  -	      ldy	#22
    980  52c0				  -	      jsr	displayHex
    981  52c0				  -	      lda	temp
    982  52c0				  -	      ldy	temp
    983  52c0				  -	      inc	1824+90
    984  52c0					      ENDIF
    985  52c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    986  52c0
    987  52c0		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    988  52c3		       4a		      lsr
    989  52c4		       4a		      lsr
    990  52c5		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    991  52c8		       38		      sec
    992  52c9		       e9 50		      sbc	#$50	; Center on zero
    993  52cb		       30 09		      bmi	negPitch	; If negative...
    994  52cd		       c9 46		      cmp	#70	; Max value
    995  52cf		       30 0b		      bmi	setTuningValue
    996  52d1		       a9 46		      lda	#70	; Over max, so set to max value (50)
    997  52d3		       4c dc 52 	      jmp	setTuningValue
    998  52d6
    999  52d6		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
   1000  52d6				   negPitch
   1001  52d6		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
   1002  52d8		       10 02		      bpl	setTuningValue
   1003  52da		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
   1004  52dc
   1005  52dc				   setTuningValue
   1006  52dc		       8d f0 70 	      sta	midiTuning
   1007  52df
   1008  52df
   1009  52df							;	lda firstDataByte
   1010  52df
   1011  52df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1012  52df							; DEBUG - SHOW MIDI DATA
   1013  52df				  -	      IF	DEBUG_DISPLAY=1
   1014  52df				  -	      sta	temp
   1015  52df				  -	      ldx	#25
   1016  52df				  -	      ldy	#23
   1017  52df				  -	      jsr	displayHex
   1018  52df				  -	      lda	temp
   1019  52df				  -	      ldy	temp
   1020  52df					      ENDIF
   1021  52df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1022  52df
   1023  52df		       60		      rts
   1024  52e0
   1025  52e0
   1026  52e0				   controlChange
   1027  52e0				  -	      IF	DEBUG_DISPLAY=1
   1028  52e0				  -	      inc	1824+87
   1029  52e0					      ENDIF
   1030  52e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1031  52e0							; DEBUG - SHOW MIDI DATA
   1032  52e0				  -	      IF	DEBUG_DISPLAY=1
   1033  52e0				  -	      sta	temp
   1034  52e0				  -	      lda	firstDataByte
   1035  52e0				  -	      ldy	#21
   1036  52e0				  -	      ldx	#17
   1037  52e0				  -	      jsr	displayHex
   1038  52e0				  -	      lda	temp
   1039  52e0				  -	      ldy	temp
   1040  52e0					      ENDIF
   1041  52e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1042  52e0
   1043  52e0					      IF	ENABLE_MIDI_COMMANDS=1
   1044  52e0		       20 10 82 	      jsr	midiReadWait	; Read controller value
   1045  52e3					      ENDIF
   1046  52e3		       a8		      tay
   1047  52e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1048  52e4							; DEBUG - SHOW MIDI DATA
   1049  52e4				  -	      IF	DEBUG_DISPLAY=1
   1050  52e4				  -	      sta	temp
   1051  52e4				  -			;lda firstDataByte
   1052  52e4				  -	      ldy	#22
   1053  52e4				  -	      ldx	#17
   1054  52e4				  -	      jsr	displayHex
   1055  52e4				  -	      lda	temp
   1056  52e4				  -	      ldy	temp
   1057  52e4					      ENDIF
   1058  52e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1059  52e4		       ad 7e 70 	      lda	firstDataByte	; Get controller number
   1060  52e7				  -	      IF	OFFSET_CONTROLLERS=1
   1061  52e7				  -	      sec
   1062  52e7				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
   1063  52e7					      ENDIF
   1064  52e7							;and #$0F ; Repeat every 16 controllers
   1065  52e7		       29 ef		      and	#%11101111	; Repeat every 16 controllers
   1066  52e9		       d0 0a		      bne	notResonance
   1067  52eb							; Resonance
   1068  52eb		       98		      tya
   1069  52ec		       29 f0		      and	#$F0
   1070  52ee		       8d 97 70 	      sta	resonance
   1071  52f1		       20 60 60 	      jsr	setResonance
   1072  52f4		       60		      rts
   1073  52f5				   notResonance
   1074  52f5		       c9 01		      cmp	#1
   1075  52f7		       d0 07		      bne	notModWheel
   1076  52f9							;Mod wheel
   1077  52f9		       98		      tya
   1078  52fa		       0a		      asl
   1079  52fb		       a8		      tay
   1080  52fc		       8d 9d 70 	      sta	filterSetValue
   1081  52ff							;jsr ksetFilter
   1082  52ff		       60		      rts
   1083  5300				   notModWheel
   1084  5300		       c9 02		      cmp	#2
   1085  5302		       d0 0e		      bne	notMode
   1086  5304							; Sound Mode
   1087  5304		       98		      tya
   1088  5305		       4a		      lsr
   1089  5306		       4a		      lsr
   1090  5307		       4a		      lsr
   1091  5308		       29 0f		      and	#$0F
   1092  530a		       aa		      tax
   1093  530b		       bd ed 6e 	      lda	modeList,x
   1094  530e		       20 11 63 	      jsr	ksetMode
   1095  5311		       60		      rts
   1096  5312				   notMode
   1097  5312		       c9 03		      cmp	#3
   1098  5314		       d0 0b		      bne	notFX
   1099  5316							; FX
   1100  5316		       98		      tya
   1101  5317		       4a		      lsr
   1102  5318		       4a		      lsr
   1103  5319		       4a		      lsr
   1104  531a		       4a		      lsr
   1105  531b		       29 07		      and	#$07
   1106  531d		       20 e9 62 	      jsr	ksetFX
   1107  5320		       60		      rts
   1108  5321				   notFX
   1109  5321		       c9 04		      cmp	#4
   1110  5323		       d0 08		      bne	notAttack
   1111  5325							; Attack
   1112  5325		       98		      tya
   1113  5326		       0a		      asl
   1114  5327		       29 f0		      and	#$F0
   1115  5329		       20 2c 62 	      jsr	setAttack
   1116  532c		       60		      rts
   1117  532d				   notAttack
   1118  532d		       c9 05		      cmp	#5
   1119  532f		       d0 0c		      bne	notRelease
   1120  5331							; Release
   1121  5331		       98		      tya
   1122  5332		       4a		      lsr
   1123  5333		       4a		      lsr
   1124  5334		       4a		      lsr
   1125  5335		       29 0f		      and	#$0F
   1126  5337		       09 f0		      ora	#$F0
   1127  5339		       20 8d 61 	      jsr	setRelease
   1128  533c		       60		      rts
   1129  533d				   notRelease
   1130  533d		       c9 06		      cmp	#6
   1131  533f		       d0 08		      bne	notPW
   1132  5341							; Pulse Width
   1133  5341		       98		      tya
   1134  5342		       0a		      asl
   1135  5343		       09 10		      ora	#%10000
   1136  5345		       20 85 5c 	      jsr	setPulseWidth
   1137  5348		       60		      rts
   1138  5349				   notPW
   1139  5349		       c9 07		      cmp	#7
   1140  534b		       d0 08		      bne	notVolume
   1141  534d							; Volume
   1142  534d		       98		      tya
   1143  534e		       4a		      lsr
   1144  534f		       4a		      lsr
   1145  5350		       4a		      lsr
   1146  5351		       20 5f 62 	      jsr	ksetVolume
   1147  5354		       60		      rts
   1148  5355				   notVolume
   1149  5355		       c9 08		      cmp	#8
   1150  5357		       d0 0b		      bne	notTremolo
   1151  5359							; Tremolo level
   1152  5359		       98		      tya
   1153  535a		       4a		      lsr
   1154  535b		       4a		      lsr
   1155  535c		       4a		      lsr
   1156  535d		       4a		      lsr
   1157  535e		       29 03		      and	#$03
   1158  5360		       20 5b 61 	      jsr	setLFODepth
   1159  5363		       60		      rts
   1160  5364				   notTremolo
   1161  5364		       c9 09		      cmp	#9
   1162  5366		       d0 0b		      bne	notTremRate
   1163  5368							; Tremolo level
   1164  5368		       98		      tya
   1165  5369		       4a		      lsr
   1166  536a		       4a		      lsr
   1167  536b		       4a		      lsr
   1168  536c		       4a		      lsr
   1169  536d		       29 03		      and	#$03
   1170  536f		       20 71 61 	      jsr	setLFORate
   1171  5372		       60		      rts
   1172  5373				   notTremRate
   1173  5373		       c9 0d		      cmp	#13
   1174  5375		       d0 14		      bne	notWaveform
   1175  5377							; Waveform (all voices)
   1176  5377		       98		      tya
   1177  5378		       4a		      lsr
   1178  5379		       4a		      lsr
   1179  537a		       4a		      lsr
   1180  537b		       29 03		      and	#$03
   1181  537d		       aa		      tax
   1182  537e		       bd b0 53 	      lda	waveForms,x
   1183  5381		       8d 37 70 	      sta	WaveType2
   1184  5384		       8d 3e 70 	      sta	WaveType3
   1185  5387		       8d 30 70 	      sta	WaveType
   1186  538a		       60		      rts
   1187  538b				   notWaveform
   1188  538b		       c9 0e		      cmp	#14
   1189  538d		       d0 0e		      bne	notWaveform2
   1190  538f							; Waveform (voice 2 only)
   1191  538f		       98		      tya
   1192  5390		       4a		      lsr
   1193  5391		       4a		      lsr
   1194  5392		       4a		      lsr
   1195  5393		       29 03		      and	#$03
   1196  5395		       aa		      tax
   1197  5396		       bd b0 53 	      lda	waveForms,x
   1198  5399		       8d 37 70 	      sta	WaveType2
   1199  539c		       60		      rts
   1200  539d				   notWaveform2
   1201  539d		       c9 0f		      cmp	#15
   1202  539f		       d0 0e		      bne	notWaveform3
   1203  53a1							; Waveform (voice 3 only)
   1204  53a1		       98		      tya
   1205  53a2		       4a		      lsr
   1206  53a3		       4a		      lsr
   1207  53a4		       4a		      lsr
   1208  53a5		       29 03		      and	#$03
   1209  53a7		       aa		      tax
   1210  53a8		       bd b0 53 	      lda	waveForms,x
   1211  53ab		       8d 3e 70 	      sta	WaveType3
   1212  53ae		       60		      rts
   1213  53af				   notWaveform3
   1214  53af		       60		      rts
   1215  53b0
   1216  53b0				   waveForms
   1217  53b0		       10 20 40 80	      byte.b	$10,$20,$40,$80
   1218  53b4							;-  -	-  -  -  -  -  -
   1219  53b4
   1220  53b4							;IF ENABLE_MIDI_COMMANDS=1
   1221  53b4					      ENDIF
   1222  53b4
   1223  53b4							; note is in Y
   1224  53b4				   noteOn
   1225  53b4
   1226  53b4		       8d 0c 70 	      sta	temp
   1227  53b7					      IF	ENABLE_MIDI_COMMANDS=1
   1228  53b7		       20 10 82 	      jsr	midiReadWait	; Read velocity byte
   1229  53ba					      ENDIF
   1230  53ba		       8d 7f 70 	      sta	tempVelocity
   1231  53bd		       d0 09		      bne	almostNoteOn
   1232  53bf							; Zero-velocity, so it's really a note-off...
   1233  53bf							;inc 53280
   1234  53bf		       ad 7e 70 	      lda	firstDataByte
   1235  53c2		       38		      sec
   1236  53c3		       e9 0c		      sbc	#12	; Down one octave
   1237  53c5		       4c fc 53 	      jmp	doNoteOff
   1238  53c8				   almostNoteOn
   1239  53c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1240  53c8							; DEBUG - SHOW MIDI DATA
   1241  53c8				  -	      IF	DEBUG_DISPLAY=1
   1242  53c8				  -	      sta	temp
   1243  53c8				  -	      lda	noteOnCount
   1244  53c8				  -	      and	#1
   1245  53c8				  -	      asl
   1246  53c8				  -	      asl
   1247  53c8				  -	      asl
   1248  53c8				  -	      ora	#$F4
   1249  53c8				  -	      sta	hexDispColor
   1250  53c8				  -	      lda	noteOnCount
   1251  53c8				  -	      and	#%1111
   1252  53c8				  -	      asl
   1253  53c8				  -	      tax
   1254  53c8				  -			;lda temp
   1255  53c8				  -	      lda	savedMidiStatus
   1256  53c8				  -	      ldy	#6
   1257  53c8				  -	      jsr	displayHex
   1258  53c8				  -	      lda	temp
   1259  53c8				  -	      ldy	temp
   1260  53c8				  -	      inc	1824+83	; DEBUG INDICATOR
   1261  53c8					      ENDIF
   1262  53c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1263  53c8		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
   1264  53cb		       38		      sec
   1265  53cc		       e9 0c		      sbc	#12	; Down one octave
   1266  53ce				   doNoteOn
   1267  53ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1268  53ce							; DEBUG - SHOW MIDI DATA
   1269  53ce				  -	      IF	DEBUG_DISPLAY=1
   1270  53ce				  -	      sta	temp
   1271  53ce				  -	      lda	noteOnCount
   1272  53ce				  -	      and	#%1111
   1273  53ce				  -	      asl
   1274  53ce				  -	      tax
   1275  53ce				  -	      lda	temp
   1276  53ce				  -	      ldy	#7
   1277  53ce				  -	      jsr	displayHex
   1278  53ce				  -	      lda	temp
   1279  53ce				  -	      ldy	temp
   1280  53ce					      ENDIF
   1281  53ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1282  53ce
   1283  53ce							; Find empty note slot...
   1284  53ce		       ae 80 70 	      ldx	bufferSize	;3
   1285  53d1		       a8		      tay
   1286  53d2							;ldx #3 ; DEBUG!
   1287  53d2		       ca		      dex
   1288  53d3				   noteOnLoop
   1289  53d3		       bd a0 70 	      lda	noteNumArray,x
   1290  53d6		       c9 ff		      cmp	#255
   1291  53d8		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
   1292  53da		       ca		      dex
   1293  53db		       10 f6		      bpl	noteOnLoop
   1294  53dd		       a2 00		      ldx	#0
   1295  53df				   quitNoteOnLoop
   1296  53df
   1297  53df		       98		      tya
   1298  53e0		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
   1299  53e3
   1300  53e3							;jsr midiReadWait ; Read velocity byte
   1301  53e3		       ad 7f 70 	      lda	tempVelocity
   1302  53e6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1303  53e6							; DEBUG - SHOW MIDI DATA
   1304  53e6				  -	      IF	DEBUG_DISPLAY=1
   1305  53e6				  -	      sta	temp
   1306  53e6				  -	      lda	noteOnCount
   1307  53e6				  -	      and	#%1111
   1308  53e6				  -	      asl
   1309  53e6				  -	      tax
   1310  53e6				  -	      lda	temp
   1311  53e6				  -	      ldy	#8
   1312  53e6				  -	      jsr	displayHex
   1313  53e6				  -	      lda	temp
   1314  53e6				  -	      ldy	temp
   1315  53e6					      ENDIF
   1316  53e6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1317  53e6							;/----------------------
   1318  53e6		       ee 8c 70 	      inc	noteOnCount
   1319  53e9		       60		      rts
   1320  53ea
   1321  53ea				   noteOff
   1322  53ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1323  53ea							; DEBUG - SHOW MIDI DATA
   1324  53ea				  -	      IF	DEBUG_DISPLAY=1
   1325  53ea				  -	      sta	temp
   1326  53ea				  -	      lda	noteOffCount
   1327  53ea				  -	      and	#1
   1328  53ea				  -			;eor #1
   1329  53ea				  -	      asl
   1330  53ea				  -	      asl
   1331  53ea				  -	      asl
   1332  53ea				  -	      ora	#$F4
   1333  53ea				  -	      sta	hexDispColor
   1334  53ea				  -	      lda	noteOffCount
   1335  53ea				  -	      and	#%1111
   1336  53ea				  -	      asl
   1337  53ea				  -	      tax
   1338  53ea				  -	      lda	temp
   1339  53ea				  -	      ldy	#10
   1340  53ea				  -	      jsr	displayHex
   1341  53ea				  -	      lda	temp
   1342  53ea				  -	      ldy	temp
   1343  53ea					      ENDIF
   1344  53ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1345  53ea
   1346  53ea							;jmp endMIDI
   1347  53ea
   1348  53ea		       8d 0c 70 	      sta	temp
   1349  53ed					      IF	ENABLE_MIDI_COMMANDS=1
   1350  53ed		       20 10 82 	      jsr	midiReadWait	; Read velocity byte
   1351  53f0					      ENDIF
   1352  53f0		       8d 7f 70 	      sta	tempVelocity
   1353  53f3		       ad 0c 70 	      lda	temp
   1354  53f6
   1355  53f6		       ad 7e 70 	      lda	firstDataByte
   1356  53f9		       38		      sec
   1357  53fa		       e9 0c		      sbc	#12	; Down one octave
   1358  53fc							;jsr midiReadWait ; Note number
   1359  53fc
   1360  53fc				   doNoteOff
   1361  53fc							; Find matching note number to turn note off...
   1362  53fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1363  53fc							; DEBUG - SHOW MIDI DATA
   1364  53fc				  -	      IF	DEBUG_DISPLAY=1
   1365  53fc				  -	      sta	temp
   1366  53fc				  -	      lda	noteOffCount
   1367  53fc				  -	      and	#%1111
   1368  53fc				  -	      asl
   1369  53fc				  -	      tax
   1370  53fc				  -	      lda	temp
   1371  53fc				  -	      ldy	#11
   1372  53fc				  -	      jsr	displayHex
   1373  53fc				  -	      lda	temp
   1374  53fc				  -	      ldy	temp
   1375  53fc					      ENDIF
   1376  53fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1377  53fc
   1378  53fc		       ae 80 70 	      ldx	bufferSize	;3
   1379  53ff		       8d 0c 70 	      sta	temp
   1380  5402							;ldx #3 ; DEBUG!
   1381  5402		       ca		      dex
   1382  5403				   killNoteLoop
   1383  5403		       bd a0 70 	      lda	noteNumArray,x
   1384  5406		       cd 0c 70 	      cmp	temp	; Note match?
   1385  5409		       f0 06		      beq	foundNote	; Then go turn off note
   1386  540b		       ca		      dex		; next slot
   1387  540c		       10 f5		      bpl	killNoteLoop	; loop through all slots
   1388  540e							;Not found, so ignore
   1389  540e		       4c 16 54 	      jmp	endNoteOff
   1390  5411
   1391  5411				   foundNote
   1392  5411		       a9 ff		      lda	#255
   1393  5413		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
   1394  5416
   1395  5416				   endNoteOff
   1396  5416		       ad 7f 70 	      lda	tempVelocity
   1397  5419							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1398  5419							; DEBUG - SHOW MIDI DATA
   1399  5419				  -	      IF	DEBUG_DISPLAY=1
   1400  5419				  -	      sta	temp
   1401  5419				  -	      lda	noteOffCount
   1402  5419				  -	      and	#%1111
   1403  5419				  -	      asl
   1404  5419				  -	      tax
   1405  5419				  -	      lda	temp
   1406  5419				  -	      ldy	#12
   1407  5419				  -	      jsr	displayHex
   1408  5419				  -	      lda	temp
   1409  5419				  -	      ldy	temp
   1410  5419					      ENDIF
   1411  5419							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1412  5419							;/----------------------
   1413  5419		       ee 8b 70 	      inc	noteOffCount
   1414  541c		       60		      rts
   1415  541d
   1416  541d
   1417  541d				   endMIDI
   1418  541d							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
   1419  541d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1420  541d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1421  541d							; FILL EMPTY PLAYABLE NOTES WITH ANY
   1422  541d							; NON-PLAYING NOTES IN THE BUFFER
   1423  541d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1424  541d							;jsr doSort
   1425  541d
   1426  541d		       ae 84 70 	      ldx	polyphony
   1427  5420		       ca		      dex
   1428  5421							;ldx #2 ; DEBUG
   1429  5421				   noteScan
   1430  5421		       bd a0 70 	      lda	noteNumArray,x
   1431  5424		       c9 ff		      cmp	#255	; Is note off?
   1432  5426		       f0 06		      beq	searchCopyNote
   1433  5428				   contNoteScan
   1434  5428		       ca		      dex
   1435  5429		       10 f6		      bpl	noteScan	; Loop...
   1436  542b		       4c 4a 54 	      jmp	quitNoteScan	; Done, jump to end
   1437  542e
   1438  542e				   searchCopyNote
   1439  542e							;ldy bufferSize
   1440  542e							;dey
   1441  542e							;ldy #3
   1442  542e		       ac 84 70 	      ldy	polyphony
   1443  5431				   copyNoteLoop
   1444  5431		       b9 a0 70 	      lda	noteNumArray,y
   1445  5434		       c9 ff		      cmp	#255
   1446  5436		       d0 07		      bne	replaceNote
   1447  5438		       c8		      iny
   1448  5439		       c0 08		      cpy	#NOTE_BUF_SIZE
   1449  543b		       f0 eb		      beq	contNoteScan
   1450  543d		       d0 f2		      bne	copyNoteLoop
   1451  543f
   1452  543f				   replaceNote
   1453  543f		       9d a0 70 	      sta	noteNumArray,x
   1454  5442		       a9 ff		      lda	#255
   1455  5444		       99 a0 70 	      sta	noteNumArray,y
   1456  5447		       4c 28 54 	      jmp	contNoteScan
   1457  544a
   1458  544a				   quitNoteScan
   1459  544a		       60		      rts
   1460  544b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1461  544b
   1462  544b
   1463  544b
   1464  544b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1465  544b							; PROCESS BENDER
   1466  544b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1467  544b				   processBender
   1468  544b							; Update space-bar pitch bend...
   1469  544b		       ad 83 70 	      lda	benderAutoreset
   1470  544e		       f0 13		      beq	endBenderReset
   1471  5450		       ad 40 70 	      lda	bender
   1472  5453		       d0 08		      bne	doBenderReset
   1473  5455		       a9 00		      lda	#0
   1474  5457		       8d 83 70 	      sta	benderAutoreset
   1475  545a		       4c 63 54 	      jmp	endBenderReset
   1476  545d				   doBenderReset
   1477  545d		       ce 40 70 	      dec	bender
   1478  5460		       ce 40 70 	      dec	bender
   1479  5463				   endBenderReset
   1480  5463
   1481  5463
   1482  5463							; Insert bender into LFO offset...
   1483  5463		       ad 25 70 	      lda	shiftL1
   1484  5466		       38		      sec
   1485  5467		       ed 40 70 	      sbc	bender
   1486  546a		       8d 25 70 	      sta	shiftL1
   1487  546d		       ad 26 70 	      lda	shiftH1
   1488  5470		       e9 00		      sbc	#0
   1489  5472		       8d 26 70 	      sta	shiftH1
   1490  5475
   1491  5475		       ad 27 70 	      lda	shiftL2
   1492  5478		       38		      sec
   1493  5479		       ed 40 70 	      sbc	bender
   1494  547c		       8d 27 70 	      sta	shiftL2
   1495  547f		       ad 28 70 	      lda	shiftH2
   1496  5482		       e9 00		      sbc	#0
   1497  5484		       8d 28 70 	      sta	shiftH2
   1498  5487		       60		      rts
   1499  5488
   1500  5488							;DEBUG -- disable LFO/bender
   1501  5488							;	lda #0
   1502  5488							;	sta shiftL1
   1503  5488							;	sta shiftL2
   1504  5488							;	sta shiftH1
   1505  5488							;	sta shiftH2
   1506  5488
   1507  5488							;----------------------------
   1508  5488
   1509  5488				   processSoundDriver
   1510  5488							; determine whether to use portamento player
   1511  5488							; or regular player...
   1512  5488		       ad 1d 70 	      lda	soundMode
   1513  548b		       f0 28		      beq	polyMode
   1514  548d		       29 10		      and	#PORT_MASK
   1515  548f		       f0 03		      beq	nextSoundModeCheck1
   1516  5491		       4c 36 59 	      jmp	playPort
   1517  5494				   nextSoundModeCheck1
   1518  5494		       ad 1d 70 	      lda	soundMode
   1519  5497		       29 20		      and	#MONO_MASK
   1520  5499		       f0 03		      beq	nextSoundModeCheck2
   1521  549b		       4c d5 54 	      jmp	playMono
   1522  549e				   nextSoundModeCheck2
   1523  549e		       ad 1d 70 	      lda	soundMode
   1524  54a1		       29 40		      and	#ARP_MASK
   1525  54a3		       f0 03		      beq	nextSoundModeCheck3
   1526  54a5		       4c 87 55 	      jmp	playArp
   1527  54a8				   nextSoundModeCheck3
   1528  54a8		       ad 1d 70 	      lda	soundMode
   1529  54ab		       29 08		      and	#CHAN6_MASK
   1530  54ad		       f0 03		      beq	nextSoundModeCheck4
   1531  54af		       4c 06 56 	      jmp	play6Chan
   1532  54b2				   nextSoundModeCheck4
   1533  54b2		       4c 22 55 	      jmp	playFifths	; Otherwise, it's a 5ths mode
   1534  54b5							;lda soundMode
   1535  54b5							;cmp #MODE_5THS
   1536  54b5							;bne endSoundMode
   1537  54b5							;jmp playFifths
   1538  54b5							;endSoundMode:
   1539  54b5							;brk ; Shouldn't ever reach this point in code
   1540  54b5
   1541  54b5
   1542  54b5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1543  54b5							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
   1544  54b5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1545  54b5				   polyMode
   1546  54b5		       a2 02		      ldx	#2
   1547  54b7				   polyCopyLoop
   1548  54b7		       bd a0 70 	      lda	noteNumArray,x
   1549  54ba		       9d b0 70 	      sta	playNoteArray,x
   1550  54bd		       ca		      dex
   1551  54be		       10 f7		      bpl	polyCopyLoop
   1552  54c0
   1553  54c0		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
   1554  54c3		       8d b3 70 	      sta	playNoteArray+3
   1555  54c6		       ad a1 70 	      lda	noteNumArray+1
   1556  54c9		       8d b4 70 	      sta	playNoteArray+4
   1557  54cc		       ad a2 70 	      lda	noteNumArray+2
   1558  54cf		       8d b5 70 	      sta	playNoteArray+5
   1559  54d2
   1560  54d2		       4c 2c 58 	      jmp	sixVoicePlayer
   1561  54d5
   1562  54d5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1563  54d5							; MONO-STACK SOUND DRIVER
   1564  54d5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1565  54d5				   playMono
   1566  54d5		       ad a0 70 	      lda	noteNumArray
   1567  54d8				   playMonoWithA
   1568  54d8		       8d 0c 70 	      sta	temp
   1569  54db		       8d b0 70 	      sta	playNoteArray+0
   1570  54de		       c9 ff		      cmp	#255
   1571  54e0		       f0 25		      beq	monoMute
   1572  54e2		       ae 1d 70 	      ldx	soundMode
   1573  54e5		       e0 21		      cpx	#MODE_MONO2
   1574  54e7		       f0 03		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
   1575  54e9							;-------------------------------------
   1576  54e9		       18		      clc
   1577  54ea		       69 0c		      adc	#12
   1578  54ec				   noRaiseOctave
   1579  54ec		       8d b1 70 	      sta	playNoteArray+1
   1580  54ef							;lda noteNumArray
   1581  54ef		       ad 0c 70 	      lda	temp
   1582  54f2		       ae 1d 70 	      ldx	soundMode
   1583  54f5		       e0 21		      cpx	#MODE_MONO2
   1584  54f7		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
   1585  54f9		       38		      sec
   1586  54fa		       e9 0c		      sbc	#12
   1587  54fc		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
   1588  54fe		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
   1589  5501							;-------------------------------------
   1590  5501				   noDropOctave
   1591  5501		       8d b2 70 	      sta	playNoteArray+2
   1592  5504		       4c 0d 55 	      jmp	doubleToStereo
   1593  5507				   monoMute
   1594  5507		       8d b1 70 	      sta	playNoteArray+1
   1595  550a		       8d b2 70 	      sta	playNoteArray+2
   1596  550d
   1597  550d				   doubleToStereo
   1598  550d		       ad b0 70 	      lda	playNoteArray+0
   1599  5510		       8d b3 70 	      sta	playNoteArray+3
   1600  5513		       ad b1 70 	      lda	playNoteArray+1
   1601  5516		       8d b4 70 	      sta	playNoteArray+4
   1602  5519		       ad b2 70 	      lda	playNoteArray+2
   1603  551c		       8d b5 70 	      sta	playNoteArray+5
   1604  551f
   1605  551f		       4c 2c 58 	      jmp	sixVoicePlayer
   1606  5522
   1607  5522							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1608  5522							; 5THS SOUND DRIVER (DEFAULT)
   1609  5522							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1610  5522				   playFifths
   1611  5522							;jmp polyMode ; DEBUG!
   1612  5522		       20 f8 68 	      jsr	doSort
   1613  5525		       a2 02		      ldx	#2
   1614  5527				   fifthsCopyLoop
   1615  5527		       bd a0 70 	      lda	noteNumArray,x
   1616  552a		       9d b0 70 	      sta	playNoteArray,x
   1617  552d		       ca		      dex
   1618  552e		       10 f7		      bpl	fifthsCopyLoop
   1619  5530							; Add 5th
   1620  5530		       ad b0 70 	      lda	playNoteArray
   1621  5533		       c9 ff		      cmp	#255
   1622  5535		       f0 26		      beq	end5ths
   1623  5537		       ad b1 70 	      lda	playNoteArray+1
   1624  553a		       c9 ff		      cmp	#255
   1625  553c		       d0 0c		      bne	checkThird
   1626  553e							; Found a note and an empty slot, put 5th in second slot
   1627  553e		       ad b0 70 	      lda	playNoteArray
   1628  5541		       18		      clc
   1629  5542		       69 07		      adc	#7
   1630  5544		       8d b1 70 	      sta	playNoteArray+1
   1631  5547		       4c 5d 55 	      jmp	end5ths
   1632  554a
   1633  554a				   checkThird
   1634  554a		       ad b2 70 	      lda	playNoteArray+2
   1635  554d		       c9 ff		      cmp	#255
   1636  554f		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
   1637  5551							; Third slot is free, so put 5th is 3rd slot
   1638  5551		       ad b1 70 	      lda	playNoteArray+1
   1639  5554		       18		      clc
   1640  5555		       69 07		      adc	#7
   1641  5557		       8d b2 70 	      sta	playNoteArray+2
   1642  555a		       4c 5d 55 	      jmp	end5ths
   1643  555d
   1644  555d				   end5ths
   1645  555d		       ad b0 70 	      lda	playNoteArray+0
   1646  5560		       8d b3 70 	      sta	playNoteArray+3
   1647  5563		       ad b1 70 	      lda	playNoteArray+1
   1648  5566		       8d b4 70 	      sta	playNoteArray+4
   1649  5569		       ad b2 70 	      lda	playNoteArray+2
   1650  556c		       8d b5 70 	      sta	playNoteArray+5
   1651  556f
   1652  556f		       ad 1d 70 	      lda	soundMode
   1653  5572		       c9 02		      cmp	#MODE_5PORT
   1654  5574		       f0 03		      beq	playPort5th
   1655  5576		       4c 2c 58 	      jmp	sixVoicePlayer
   1656  5579				   playPort5th
   1657  5579		       4c 44 59 	      jmp	portPlayer
   1658  557c
   1659  557c
   1660  557c
   1661  557c
   1662  557c				   arpSpeedTable
   1663  557c		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
   1664  5587
   1665  5587							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1666  5587							; ARP STEREO SOUND DRIVER
   1667  5587							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1668  5587				   playArp
   1669  5587
   1670  5587							; Figure out arp speed setting...
   1671  5587		       ad 1d 70 	      lda	soundMode
   1672  558a		       29 0f		      and	#$0F
   1673  558c		       aa		      tax
   1674  558d		       bd 7c 55 	      lda	arpSpeedTable,x
   1675  5590		       8d 0c 70 	      sta	temp
   1676  5593
   1677  5593		       ae 1d 70 	      ldx	soundMode
   1678  5596		       e0 43		      cpx	#MODE_ARP4
   1679  5598		       f0 35		      beq	playArpDown
   1680  559a		       e0 44		      cpx	#MODE_ARP5
   1681  559c		       f0 31		      beq	playArpDown
   1682  559e
   1683  559e							;***********
   1684  559e							; ARP UP
   1685  559e							;***********
   1686  559e							; Increment arpOffset pointer...
   1687  559e		       ad 03 70 	      lda	Frame
   1688  55a1		       2d 0c 70 	      and	temp	; Arp speed
   1689  55a4		       d0 03		      bne	skipArpAdvance
   1690  55a6		       ee 85 70 	      inc	arpOffset
   1691  55a9				   skipArpAdvance
   1692  55a9
   1693  55a9							; Sort note buffer
   1694  55a9		       20 f8 68 	      jsr	doSort
   1695  55ac
   1696  55ac							; Count the number of notes...
   1697  55ac		       a2 00		      ldx	#0
   1698  55ae		       a9 ff		      lda	#255
   1699  55b0				   noteCount
   1700  55b0		       dd a0 70 	      cmp	noteNumArray,x
   1701  55b3		       f0 06		      beq	quitNoteCount
   1702  55b5		       e8		      inx
   1703  55b6		       ec 80 70 	      cpx	bufferSize
   1704  55b9		       d0 f5		      bne	noteCount
   1705  55bb				   quitNoteCount
   1706  55bb							; X now contains the note count
   1707  55bb
   1708  55bb							; Make sure arpOffset isn't past end...
   1709  55bb		       ca		      dex
   1710  55bc		       ec 85 70 	      cpx	arpOffset
   1711  55bf		       10 05		      bpl	noArpOffsetReset
   1712  55c1		       a9 00		      lda	#0	; Reset to zero
   1713  55c3		       8d 85 70 	      sta	arpOffset
   1714  55c6				   noArpOffsetReset
   1715  55c6
   1716  55c6							; Play single arp note...
   1717  55c6		       ac 85 70 	      ldy	arpOffset
   1718  55c9		       b9 a0 70 	      lda	noteNumArray,y
   1719  55cc
   1720  55cc		       4c d8 54 	      jmp	playMonoWithA
   1721  55cf
   1722  55cf
   1723  55cf							;***********
   1724  55cf							; ARP DOWN
   1725  55cf							;***********
   1726  55cf				   playArpDown
   1727  55cf							; Decrement arpOffset pointer...
   1728  55cf		       ad 03 70 	      lda	Frame
   1729  55d2		       2d 0c 70 	      and	temp	; Arp speed
   1730  55d5		       d0 03		      bne	skipArpAdvance2
   1731  55d7		       ce 85 70 	      dec	arpOffset
   1732  55da				   skipArpAdvance2
   1733  55da
   1734  55da							; Sort note buffer
   1735  55da		       20 f8 68 	      jsr	doSort
   1736  55dd
   1737  55dd							; Count the number of notes...
   1738  55dd		       a2 00		      ldx	#0
   1739  55df		       a9 ff		      lda	#255
   1740  55e1				   noteCount2
   1741  55e1		       dd a0 70 	      cmp	noteNumArray,x
   1742  55e4		       f0 06		      beq	quitNoteCount2
   1743  55e6		       e8		      inx
   1744  55e7		       ec 80 70 	      cpx	bufferSize
   1745  55ea		       30 f5		      bmi	noteCount2
   1746  55ec				   quitNoteCount2
   1747  55ec							; X now contains the note count
   1748  55ec		       8e 0c 70 	      stx	temp
   1749  55ef
   1750  55ef							; Make sure arpOffset isn't at zero...
   1751  55ef		       ad 85 70 	      lda	arpOffset
   1752  55f2		       10 09		      bpl	noArpOffsetReset2
   1753  55f4		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
   1754  55f7		       f0 01		      beq	skipTempDecrement
   1755  55f9		       ca		      dex
   1756  55fa				   skipTempDecrement
   1757  55fa		       8e 85 70 	      stx	arpOffset
   1758  55fd				   noArpOffsetReset2
   1759  55fd
   1760  55fd							; Play single arp note...
   1761  55fd		       ac 85 70 	      ldy	arpOffset
   1762  5600		       b9 a0 70 	      lda	noteNumArray,y
   1763  5603
   1764  5603		       4c d8 54 	      jmp	playMonoWithA
   1765  5606
   1766  5606
   1767  5606							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1768  5606							; 6-CHANNEL MONO SOUND DRIVER
   1769  5606							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1770  5606				   play6Chan
   1771  5606		       ad a0 70 	      lda	noteNumArray+0
   1772  5609		       8d b0 70 	      sta	playNoteArray+0
   1773  560c		       ad a1 70 	      lda	noteNumArray+1
   1774  560f		       8d b4 70 	      sta	playNoteArray+4
   1775  5612		       ad a2 70 	      lda	noteNumArray+2
   1776  5615		       8d b2 70 	      sta	playNoteArray+2
   1777  5618
   1778  5618		       ad a3 70 	      lda	noteNumArray+3
   1779  561b		       8d b3 70 	      sta	playNoteArray+3
   1780  561e		       ad a4 70 	      lda	noteNumArray+4
   1781  5621		       8d b1 70 	      sta	playNoteArray+1
   1782  5624		       ad a5 70 	      lda	noteNumArray+5
   1783  5627		       8d b5 70 	      sta	playNoteArray+5
   1784  562a
   1785  562a		       4c 2c 58 	      jmp	sixVoicePlayer
   1786  562d
   1787  562d
   1788  562d				   retuneNoteShiftTable
   1789  562d		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
   1790  5646		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
   1791  565f		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
   1792  5678		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
   1793  5690		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1794  5696		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1795  56af		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1796  56c8
   1797  56c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1798  56c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1799  56c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
   1800  56c8							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
   1801  56c8		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
   1802  56e1		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
   1803  56fa		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
   1804  5713		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
   1805  572c
   1806  572c				   retuneTable
   1807  572c		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1808  5745		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1809  575e		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1810  5777		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1811  5790		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1812  5796		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1813  57af		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1814  57c8		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1815  57e1		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1816  57fa		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1817  5813		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1818  582c							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1819  582c
   1820  582c							;************************************************
   1821  582c							; 6-VOICE SOUND DRIVER
   1822  582c							;************************************************
   1823  582c				   sixVoicePlayer
   1824  582c
   1825  582c							; Calculate master tuning...
   1826  582c		       ad f3 70 	      lda	systemTuning
   1827  582f		       18		      clc
   1828  5830		       6d f0 70 	      adc	midiTuning
   1829  5833		       8d f4 70 	      sta	masterTuning
   1830  5836		       a8		      tay
   1831  5837
   1832  5837							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1833  5837							; DEBUG - SHOW TUNING DATA
   1834  5837				  -	      IF	DEBUG_DISPLAY=1
   1835  5837				  -	      tya
   1836  5837				  -	      sta	temp
   1837  5837				  -	      ldy	#20
   1838  5837				  -	      ldx	#20
   1839  5837				  -	      jsr	displayHex
   1840  5837				  -	      lda	temp
   1841  5837				  -	      ldy	temp
   1842  5837					      ENDIF
   1843  5837							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1844  5837
   1845  5837		       b9 2c 57 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
   1846  583a		       18		      clc
   1847  583b		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
   1848  583d
   1849  583d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1850  583d							; DEBUG - SHOW TUNING DATA
   1851  583d				  -	      IF	DEBUG_DISPLAY=1
   1852  583d				  -	      sta	temp
   1853  583d				  -	      ldy	#21
   1854  583d				  -	      ldx	#20
   1855  583d				  -	      jsr	displayHex
   1856  583d				  -	      lda	temp
   1857  583d				  -	      ldy	temp
   1858  583d					      ENDIF
   1859  583d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1860  583d
   1861  583d		       a8		      tay
   1862  583e		       b9 26 7b 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
   1863  5841		       85 22		      sta	tunePtrL
   1864  5843		       b9 30 7b 	      lda	tuneArrPtrLH,y
   1865  5846		       85 23		      sta	tunePtrL+1
   1866  5848		       b9 3a 7b 	      lda	tuneArrPtrHL,y
   1867  584b		       85 24		      sta	tunePtrH
   1868  584d		       b9 44 7b 	      lda	tuneArrPtrHH,y
   1869  5850		       85 25		      sta	tunePtrH+1
   1870  5852
   1871  5852							; Look up note shift from master tuning...
   1872  5852		       ac f4 70 	      ldy	masterTuning
   1873  5855		       b9 2d 56 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
   1874  5858		       8d f6 70 	      sta	noteShift
   1875  585b							; - - - - - - - - - - - - -
   1876  585b		       a2 05		      ldx	#5
   1877  585d				   shiftNoteLoop
   1878  585d		       bd b0 70 	      lda	playNoteArray,x
   1879  5860		       c9 ff		      cmp	#255
   1880  5862		       f0 07		      beq	skipShiftNote
   1881  5864		       18		      clc
   1882  5865		       6d f6 70 	      adc	noteShift
   1883  5868		       9d b0 70 	      sta	playNoteArray,x
   1884  586b				   skipShiftNote
   1885  586b		       ca		      dex
   1886  586c		       10 ef		      bpl	shiftNoteLoop
   1887  586e
   1888  586e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1889  586e							; DEBUG - SHOW TUNING DATA
   1890  586e				  -	      IF	DEBUG_DISPLAY=1
   1891  586e				  -	      sta	temp
   1892  586e				  -	      ldy	#22
   1893  586e				  -	      ldx	#20
   1894  586e				  -	      jsr	displayHex
   1895  586e				  -	      lda	temp
   1896  586e				  -	      ldy	temp
   1897  586e					      ENDIF
   1898  586e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1899  586e
   1900  586e							; For each voice on SID #1...
   1901  586e		       a2 02		      ldx	#2
   1902  5870				   NsetRegsSidA
   1903  5870		       8e 0c 70 	      stx	temp	; save current voice number
   1904  5873		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
   1905  5876		       bd bd 70 	      lda	voiceOffset,x	;
   1906  5879		       aa		      tax
   1907  587a		       c0 ff		      cpy	#255
   1908  587c		       d0 04		      bne	NsoundOnSidA
   1909  587e		       a9 00		      lda	#0
   1910  5880		       f0 3f		      beq	NsoundOffSidA
   1911  5882				   NsoundOnSidA
   1912  5882
   1913  5882							; load note and deal
   1914  5882							; with tuning ------;
   1915  5882		       ad 61 70 	      lda	NTSCmode	;
   1916  5885		       f0 14		      beq	palPlaySidA	;
   1917  5887				   ntscPlaySidA 		;
   1918  5887		       18		      clc		;
   1919  5888		       b9 b2 7b 	      lda	NSoundLArr,y	;
   1920  588b		       71 22		      adc	(tunePtrL),y	;
   1921  588d		       8d 43 70 	      sta	pitchTmpL	;
   1922  5890		       b9 fa 7b 	      lda	NSoundHArr,y	;
   1923  5893		       71 24		      adc	(tunePtrH),y	;
   1924  5895		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1925  5898		       4c ac 58 	      jmp	skipPalPlaySidA	;
   1926  589b							;- - - - - - - - -;
   1927  589b				   palPlaySidA		;
   1928  589b		       18		      clc		;
   1929  589c		       b9 42 7c 	      lda	PSoundLArr,y	;
   1930  589f		       71 22		      adc	(tunePtrL),y	;
   1931  58a1		       8d 43 70 	      sta	pitchTmpL	;
   1932  58a4		       b9 95 7c 	      lda	PSoundHArr,y	;
   1933  58a7		       71 24		      adc	(tunePtrH),y	;
   1934  58a9		       8d 44 70 	      sta	pitchTmpH	;
   1935  58ac				   skipPalPlaySidA		;;;;;
   1936  58ac
   1937  58ac							; play SID #1
   1938  58ac		       18		      clc
   1939  58ad		       ad 43 70 	      lda	pitchTmpL
   1940  58b0		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
   1941  58b3		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
   1942  58b6		       ad 44 70 	      lda	pitchTmpH
   1943  58b9		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
   1944  58bc		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
   1945  58bf
   1946  58bf		       a9 01		      lda	#1
   1947  58c1							; Set voice gates on or off
   1948  58c1				   NsoundOffSidA
   1949  58c1		       1d 30 70 	      ora	WaveType,x
   1950  58c4		       9d 04 d4 	      sta	SID1+SV1WAVE,x
   1951  58c7							;sta SID2+SV1WAVE,x
   1952  58c7		       9d 04 71 	      sta	sidData+SV1WAVE,x
   1953  58ca		       ae 0c 70 	      ldx	temp
   1954  58cd		       ca		      dex
   1955  58ce							;bpl NsetRegsSidA
   1956  58ce		       30 03		      bmi	quitPlayLoop
   1957  58d0		       4c 70 58 	      jmp	NsetRegsSidA
   1958  58d3				   quitPlayLoop
   1959  58d3
   1960  58d3							;rts ; DEBUG!!!
   1961  58d3							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1962  58d3							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1963  58d3							; For each voice on SID #2...
   1964  58d3		       a2 02		      ldx	#2
   1965  58d5				   NsetRegsSidB
   1966  58d5		       8e 0c 70 	      stx	temp
   1967  58d8							;lda playNoteArray+3,x
   1968  58d8
   1969  58d8		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
   1970  58db		       bd bd 70 	      lda	voiceOffset,x
   1971  58de
   1972  58de		       aa		      tax
   1973  58df		       c0 ff		      cpy	#255
   1974  58e1		       d0 04		      bne	NsoundOnSidB
   1975  58e3		       a9 00		      lda	#0
   1976  58e5		       f0 3f		      beq	NsoundOffSidB
   1977  58e7				   NsoundOnSidB
   1978  58e7
   1979  58e7							; load note and deal
   1980  58e7							; with tuning ------;
   1981  58e7		       ad 61 70 	      lda	NTSCmode	;
   1982  58ea		       f0 14		      beq	palPlaySidB	;
   1983  58ec				   ntscPlaySidB 		;
   1984  58ec		       18		      clc		;
   1985  58ed		       b9 b2 7b 	      lda	NSoundLArr,y	;
   1986  58f0		       71 22		      adc	(tunePtrL),y	;
   1987  58f2		       8d 43 70 	      sta	pitchTmpL	;
   1988  58f5		       b9 fa 7b 	      lda	NSoundHArr,y	;
   1989  58f8		       71 24		      adc	(tunePtrH),y	;
   1990  58fa		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1991  58fd		       4c 11 59 	      jmp	skipPalPlaySidB	;
   1992  5900				   palPlaySidB		;
   1993  5900		       18		      clc		;
   1994  5901		       b9 42 7c 	      lda	PSoundLArr,y	;
   1995  5904		       71 22		      adc	(tunePtrL),y	;
   1996  5906		       8d 43 70 	      sta	pitchTmpL	;
   1997  5909		       b9 95 7c 	      lda	PSoundHArr,y	;
   1998  590c		       71 24		      adc	(tunePtrH),y	;
   1999  590e		       8d 44 70 	      sta	pitchTmpH	;
   2000  5911				   skipPalPlaySidB		;;;;;
   2001  5911
   2002  5911							; play SID #2
   2003  5911		       18		      clc
   2004  5912		       ad 43 70 	      lda	pitchTmpL
   2005  5915		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
   2006  5918		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
   2007  591b		       ad 44 70 	      lda	pitchTmpH
   2008  591e		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
   2009  5921		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
   2010  5924
   2011  5924		       a9 01		      lda	#1
   2012  5926							; Set voice gates on or off
   2013  5926				   NsoundOffSidB
   2014  5926		       1d 30 70 	      ora	WaveType,x
   2015  5929							;sta SID1+SV1WAVE,x
   2016  5929		       9d 24 d4 	      sta	SID2+SV1WAVE,x
   2017  592c		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2018  592f		       ae 0c 70 	      ldx	temp
   2019  5932		       ca		      dex
   2020  5933		       10 a0		      bpl	NsetRegsSidB
   2021  5935
   2022  5935							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2023  5935							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2024  5935		       60		      rts
   2025  5936
   2026  5936
   2027  5936
   2028  5936							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2029  5936							; PORTAMENTO SOUND SETUP
   2030  5936							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2031  5936				   playPort
   2032  5936
   2033  5936		       a2 02		      ldx	#2
   2034  5938				   portCopyLoop
   2035  5938		       bd a0 70 	      lda	noteNumArray,x
   2036  593b		       9d b0 70 	      sta	playNoteArray,x
   2037  593e		       ca		      dex
   2038  593f		       10 f7		      bpl	portCopyLoop
   2039  5941
   2040  5941							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
   2041  5941							;sta playNoteArray+3
   2042  5941							;lda noteNumArray+1
   2043  5941							;sta playNoteArray+4
   2044  5941							;lda noteNumArray+2
   2045  5941							;sta playNoteArray+5
   2046  5941
   2047  5941							;jmp sixVoicePlayer
   2048  5941
   2049  5941		       4c 44 59 	      jmp	portPlayer
   2050  5944
   2051  5944
   2052  5944
   2053  5944							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2054  5944							; PORTAMENTO 3-VOICE SOUND DRIVER
   2055  5944							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2056  5944				   portPlayer
   2057  5944							; set up pointer to portamento speed array
   2058  5944							; (which is the tuning array)
   2059  5944		       a2 02		      ldx	#2
   2060  5946				   portLoop
   2061  5946		       bc b0 70 	      ldy	playNoteArray,x
   2062  5949							;ldy KeyA,x
   2063  5949		       c0 ff		      cpy	#255
   2064  594b		       d0 03		      bne	noPlayNote
   2065  594d		       4c 60 59 	      jmp	playNote
   2066  5950				   noPlayNote
   2067  5950		       ad 03 70 	      lda	Frame
   2068  5953		       29 01		      and	#1
   2069  5955		       f0 03		      beq	noPlayNote2
   2070  5957		       4c 60 59 	      jmp	playNote
   2071  595a				   noPlayNote2
   2072  595a
   2073  595a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2074  595a							; DEBUG - SHOW DATA
   2075  595a				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2076  595a				  -	      lda	pitchHA,x	;
   2077  595a				  -	      stx	tempX
   2078  595a				  -	      sty	tempY
   2079  595a				  -	      sta	tempA
   2080  595a				  -			;- - - - -
   2081  595a				  -			;sta temp
   2082  595a				  -	      ldx	#20
   2083  595a				  -	      ldy	#6
   2084  595a				  -	      jsr	displayHex
   2085  595a				  -			;lda temp
   2086  595a				  -			;ldy temp
   2087  595a				  -			;- - - - -
   2088  595a				  -	      ldx	tempX
   2089  595a				  -	      ldy	tempY
   2090  595a				  -	      lda	tempA
   2091  595a					      ENDIF
   2092  595a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2093  595a
   2094  595a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2095  595a							; DEBUG - SHOW DATA
   2096  595a				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2097  595a				  -	      lda	NSoundHArr,y	;
   2098  595a				  -	      stx	tempX
   2099  595a				  -	      sty	tempY
   2100  595a				  -	      sta	tempA
   2101  595a				  -			;- - - - -
   2102  595a				  -			;sta temp
   2103  595a				  -	      ldx	#20
   2104  595a				  -	      ldy	#7
   2105  595a				  -	      jsr	displayHex
   2106  595a				  -			;lda temp
   2107  595a				  -			;ldy temp
   2108  595a				  -			;- - - - -
   2109  595a				  -	      ldx	tempX
   2110  595a				  -	      ldy	tempY
   2111  595a				  -	      lda	tempA
   2112  595a					      ENDIF
   2113  595a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2114  595a
   2115  595a
   2116  595a		       20 b8 59 	      jsr	updatePortPosition
   2117  595d		       20 b8 59 	      jsr	updatePortPosition
   2118  5960
   2119  5960
   2120  5960				   playNote
   2121  5960							; deal with tuning
   2122  5960		       18		      clc
   2123  5961		       bd 16 70 	      lda	pitchLA,x
   2124  5964		       71 22		      adc	(tunePtrL),y
   2125  5966		       8d 43 70 	      sta	pitchTmpL
   2126  5969		       bd 19 70 	      lda	pitchHA,x
   2127  596c		       71 24		      adc	(tunePtrH),y
   2128  596e		       8d 44 70 	      sta	pitchTmpH
   2129  5971
   2130  5971		       98		      tya		; Move the current key to A
   2131  5972		       bc bd 70 	      ldy	voiceOffset,x
   2132  5975		       c9 ff		      cmp	#255	; Check for note off
   2133  5977		       d0 04		      bne	soundOn
   2134  5979		       a9 00		      lda	#0
   2135  597b		       f0 28		      beq	soundOff
   2136  597d				   soundOn
   2137  597d
   2138  597d							; play SID #1
   2139  597d		       18		      clc
   2140  597e		       ad 43 70 	      lda	pitchTmpL
   2141  5981		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
   2142  5984		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
   2143  5987		       ad 44 70 	      lda	pitchTmpH
   2144  598a		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
   2145  598d		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
   2146  5990
   2147  5990							; play SID #2
   2148  5990		       18		      clc
   2149  5991		       ad 43 70 	      lda	pitchTmpL
   2150  5994		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
   2151  5997		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
   2152  599a		       ad 44 70 	      lda	pitchTmpH
   2153  599d		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
   2154  59a0		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
   2155  59a3
   2156  59a3				   afterDStep
   2157  59a3
   2158  59a3		       a9 01		      lda	#1
   2159  59a5							; Set voice gates on or off
   2160  59a5				   soundOff
   2161  59a5		       19 30 70 	      ora	WaveType,y
   2162  59a8		       99 04 d4 	      sta	SID1+SV1WAVE,y
   2163  59ab		       99 24 d4 	      sta	SID2+SV1WAVE,y
   2164  59ae		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2165  59b1
   2166  59b1		       ca		      dex
   2167  59b2		       30 03		      bmi	quitPort
   2168  59b4		       4c 46 59 	      jmp	portLoop
   2169  59b7				   quitPort
   2170  59b7				   skipPort
   2171  59b7		       60		      rts
   2172  59b8							;--------------------------------------------------------------------
   2173  59b8							;end of portamento play loop
   2174  59b8							;--------------------------------------------------------------------
   2175  59b8
   2176  59b8
   2177  59b8				   updatePortPosition
   2178  59b8							;check portamn direction;
   2179  59b8		       ad 61 70 	      lda	NTSCmode	;
   2180  59bb		       f0 0c		      beq	palPortH	;
   2181  59bd				   ntscPortH		;
   2182  59bd		       bd 19 70 	      lda	pitchHA,x	;
   2183  59c0		       d9 fa 7b 	      cmp	NSoundHArr,y	;
   2184  59c3		       f0 10		      beq	portCheckL	;
   2185  59c5		       30 2a		      bmi	portUp	; PAL/NTSC split
   2186  59c7		       10 3e		      bpl	portDown	;
   2187  59c9							;bpl portUp				; PAL/NTSC split
   2188  59c9							;bmi portDown			;
   2189  59c9				   palPortH		;
   2190  59c9		       bd 19 70 	      lda	pitchHA,x	;
   2191  59cc		       d9 95 7c 	      cmp	PSoundHArr,y	;
   2192  59cf		       f0 04		      beq	portCheckL	;
   2193  59d1		       30 1e		      bmi	portUp	;
   2194  59d3		       10 32		      bpl	portDown	;;;;;
   2195  59d5							;bpl portUp				;
   2196  59d5							;bmi portDown		;;;;;
   2197  59d5
   2198  59d5				   portCheckL
   2199  59d5
   2200  59d5							;check portamn lowbyte--;
   2201  59d5		       ad 61 70 	      lda	NTSCmode	;
   2202  59d8		       f0 0d		      beq	palPortL	;
   2203  59da				   ntscPortL		;
   2204  59da		       bd 16 70 	      lda	pitchLA,x	;
   2205  59dd		       d9 b2 7b 	      cmp	NSoundLArr,y	;
   2206  59e0		       f0 69		      beq	endPortUpdate
   2207  59e2							;beq playNote ; note on	;
   2208  59e2							;the stop so play	;
   2209  59e2		       b0 23		      bcs	portDown	; PAL/NTSC split
   2210  59e4							;bcs portUp			; PAL/NTSC split
   2211  59e4		       4c f1 59 	      jmp	skipPalPortL	;
   2212  59e7				   palPortL		;
   2213  59e7		       bd 16 70 	      lda	pitchLA,x	;
   2214  59ea		       d9 42 7c 	      cmp	PSoundLArr,y	;
   2215  59ed		       f0 5c		      beq	endPortUpdate
   2216  59ef							;beq playNote ; note on	;
   2217  59ef							;the stop so play	;
   2218  59ef		       b0 16		      bcs	portDown	;
   2219  59f1							;bcs portUp				;
   2220  59f1				   skipPalPortL 		;;;;;
   2221  59f1
   2222  59f1
   2223  59f1				   portUp
   2224  59f1		       bd 16 70 	      lda	pitchLA,x
   2225  59f4		       18		      clc
   2226  59f5		       71 35		      adc	(portPtrL),y
   2227  59f7		       9d 16 70 	      sta	pitchLA,x
   2228  59fa		       bd 19 70 	      lda	pitchHA,x
   2229  59fd		       71 47		      adc	(portPtrH),y
   2230  59ff		       9d 19 70 	      sta	pitchHA,x
   2231  5a02		       a9 00		      lda	#0	; indicate port direction
   2232  5a04		       4c 1a 5a 	      jmp	oscCheck
   2233  5a07				   portDown
   2234  5a07		       bd 16 70 	      lda	pitchLA,x
   2235  5a0a		       38		      sec
   2236  5a0b		       f1 35		      sbc	(portPtrL),y
   2237  5a0d		       9d 16 70 	      sta	pitchLA,x
   2238  5a10		       bd 19 70 	      lda	pitchHA,x
   2239  5a13		       f1 47		      sbc	(portPtrH),y
   2240  5a15		       9d 19 70 	      sta	pitchHA,x
   2241  5a18		       a9 01		      lda	#1	; indicate port direction
   2242  5a1a
   2243  5a1a							; check for pitch oscillation
   2244  5a1a							; (which means it's at the correct note)
   2245  5a1a							; it's oscillating if: the port direction
   2246  5a1a							; has changed and the note hasn't.
   2247  5a1a				   oscCheck
   2248  5a1a		       dd 54 70 	      cmp	portLastDir,x
   2249  5a1d		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
   2250  5a20		       f0 29		      beq	skipOsc
   2251  5a22		       98		      tya
   2252  5a23		       dd 51 70 	      cmp	portLastNote,x
   2253  5a26		       9d 51 70 	      sta	portLastNote,x	; save it...
   2254  5a29		       d0 20		      bne	skipOsc
   2255  5a2b
   2256  5a2b							; it's oscilating at;
   2257  5a2b							; the note, so lock ;
   2258  5a2b							; it onto the actual;
   2259  5a2b							; note				;
   2260  5a2b		       ad 61 70 	      lda	NTSCmode	;
   2261  5a2e		       f0 0f		      beq	palLock	;
   2262  5a30				   ntscLock		;
   2263  5a30		       b9 b2 7b 	      lda	NSoundLArr,y	;
   2264  5a33		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
   2265  5a36		       b9 fa 7b 	      lda	NSoundHArr,y	;
   2266  5a39		       9d 19 70 	      sta	pitchHA,x	;
   2267  5a3c		       4c 4b 5a 	      jmp	skipPalLock	;
   2268  5a3f				   palLock		;
   2269  5a3f		       b9 42 7c 	      lda	PSoundLArr,y	;
   2270  5a42		       9d 16 70 	      sta	pitchLA,x	;
   2271  5a45		       b9 95 7c 	      lda	PSoundHArr,y	;
   2272  5a48		       9d 19 70 	      sta	pitchHA,x	;
   2273  5a4b				   skipPalLock		;;;;;
   2274  5a4b
   2275  5a4b				   skipOsc
   2276  5a4b				   endPortUpdate
   2277  5a4b		       60		      rts
   2278  5a4c
   2279  5a4c
   2280  5a4c
   2281  5a4c
   2282  5a4c
   2283  5a4c							;-------------------------------------
   2284  5a4c							; Process FX
   2285  5a4c							;-------------------------------------
   2286  5a4c							;fxType equ $7086
   2287  5a4c							;modValue1 equ $7087
   2288  5a4c							;modDirection equ $7089
   2289  5a4c							;modCounter equ $708A
   2290  5a4c							;modMinValue equ $708B
   2291  5a4c							;modMaxValue equ $708A
   2292  5a4c							; - - - - - - - - - -
   2293  5a4c							;MOD_NONE equ 0
   2294  5a4c							;MOD_PW_LFO equ 1
   2295  5a4c							;MOD_FILT_LFO equ 2
   2296  5a4c							;MOD_FILT_OPEN equ 3
   2297  5a4c							;MOD_FILT_CLOSE equ 4
   2298  5a4c							;MOD_FILT_WOW equ 5
   2299  5a4c
   2300  5a4c				   processFX
   2301  5a4c		       ad 86 70 	      lda	fxType
   2302  5a4f		       d0 0b		      bne	doFX
   2303  5a51		       a9 7f		      lda	#127	; Set default mod values...
   2304  5a53		       8d 9e 70 	      sta	pwModValue
   2305  5a56		       8d 9c 70 	      sta	filterModValue
   2306  5a59		       4c 84 5a 	      jmp	quitFX
   2307  5a5c							; - - - - - - - -
   2308  5a5c				   doFX
   2309  5a5c		       c9 06		      cmp	#MOD_PW_LFO
   2310  5a5e		       d0 03		      bne	notModPulseLFO
   2311  5a60		       4c 6e 5b 	      jmp	modPulseLFO	;------->
   2312  5a63				   notModPulseLFO
   2313  5a63		       c9 01		      cmp	#MOD_FILT_LFO
   2314  5a65		       d0 03		      bne	notModFiltLFO
   2315  5a67		       4c 5a 5b 	      jmp	modFiltLFO	;------->
   2316  5a6a				   notModFiltLFO
   2317  5a6a		       c9 02		      cmp	#MOD_FILT_ENV
   2318  5a6c		       d0 03		      bne	noModFiltEnv
   2319  5a6e		       4c 2a 5b 	      jmp	modFiltEnv	;------->
   2320  5a71				   noModFiltEnv
   2321  5a71		       c9 03		      cmp	#MOD_FILT3
   2322  5a73		       f0 10		      beq	modFilt3	;------->
   2323  5a75		       c9 04		      cmp	#MOD_FILT4
   2324  5a77		       f0 67		      beq	modFilt4	;------->
   2325  5a79		       c9 05		      cmp	#MOD_FILT5
   2326  5a7b		       f0 76		      beq	modFilt5	;------->
   2327  5a7d		       c9 07		      cmp	#MOD_PW2
   2328  5a7f		       d0 03		      bne	quitFX
   2329  5a81		       4c 06 5b 	      jmp	modPW2	;------->
   2330  5a84				   quitFX
   2331  5a84		       60		      rts
   2332  5a85
   2333  5a85
   2334  5a85							;---------------------
   2335  5a85				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
   2336  5a85		       ad 03 70 	      lda	Frame
   2337  5a88		       ad 87 70 	      lda	modValue1
   2338  5a8b		       29 f8		      and	#%11111000
   2339  5a8d		       f0 0b		      beq	noDecModValue2
   2340  5a8f		       ae 87 70 	      ldx	modValue1
   2341  5a92		       ca		      dex
   2342  5a93		       ca		      dex
   2343  5a94		       ca		      dex
   2344  5a95		       ca		      dex
   2345  5a96		       ca		      dex
   2346  5a97		       8e 87 70 	      stx	modValue1
   2347  5a9a				   noDecModValue2
   2348  5a9a		       ad 87 70 	      lda	modValue1
   2349  5a9d		       8d 9c 70 	      sta	filterModValue
   2350  5aa0							;jsr setFilterFromA
   2351  5aa0							;rts ; DEBUG!!
   2352  5aa0
   2353  5aa0		       a9 b4		      lda	#180
   2354  5aa2		       8d 98 70 	      sta	resetValue
   2355  5aa5							;jmp filtEnvReset ;---- end
   2356  5aa5
   2357  5aa5				   filtEnvResetFast
   2358  5aa5		       ad 1d 70 	      lda	soundMode
   2359  5aa8		       c9 20		      cmp	#MODE_MONO1
   2360  5aaa		       f0 22		      beq	handleMonoMode
   2361  5aac		       c9 21		      cmp	#MODE_MONO2
   2362  5aae		       f0 1e		      beq	handleMonoMode
   2363  5ab0
   2364  5ab0							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
   2365  5ab0		       a2 05		      ldx	#5
   2366  5ab2		       a0 00		      ldy	#0
   2367  5ab4				   countNotesLoop
   2368  5ab4		       bd a0 70 	      lda	noteNumArray,x
   2369  5ab7		       c9 ff		      cmp	#255
   2370  5ab9		       d0 01		      bne	skipCountingNote
   2371  5abb		       c8		      iny
   2372  5abc				   skipCountingNote
   2373  5abc		       ca		      dex
   2374  5abd		       10 f5		      bpl	countNotesLoop
   2375  5abf		       cc 99 70 	      cpy	lastNoteCount
   2376  5ac2		       f0 09		      beq	noNewNotes
   2377  5ac4		       8c 99 70 	      sty	lastNoteCount
   2378  5ac7		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2379  5aca		       8d 87 70 	      sta	modValue1
   2380  5acd				   noNewNotes
   2381  5acd		       60		      rts
   2382  5ace
   2383  5ace				   handleMonoMode
   2384  5ace		       ac a0 70 	      ldy	noteNumArray+0
   2385  5ad1		       cc 9a 70 	      cpy	lastNote
   2386  5ad4		       f0 09		      beq	sameOldNote
   2387  5ad6		       8c 9a 70 	      sty	lastNote
   2388  5ad9		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2389  5adc		       8d 87 70 	      sta	modValue1
   2390  5adf				   sameOldNote
   2391  5adf		       60		      rts
   2392  5ae0
   2393  5ae0							; Reset filter env when no notes are held...
   2394  5ae0							;	ldx #5
   2395  5ae0							;filtEnvResetLoop2
   2396  5ae0							;lda noteNumArray,x
   2397  5ae0							;cmp #255
   2398  5ae0							;bne quitFiltEnv2
   2399  5ae0							;dex
   2400  5ae0							;bpl filtEnvResetLoop2
   2401  5ae0							;lda resetValue
   2402  5ae0							;sta modValue1
   2403  5ae0							;quitFiltEnv2:
   2404  5ae0							;rts
   2405  5ae0
   2406  5ae0							;---------------------
   2407  5ae0				   modFilt4		; Filter chopper FAST
   2408  5ae0		       ad 03 70 	      lda	Frame
   2409  5ae3		       29 08		      and	#%1000
   2410  5ae5		       f0 06		      beq	filterClosed
   2411  5ae7		       a9 e6		      lda	#230
   2412  5ae9		       8d 9c 70 	      sta	filterModValue
   2413  5aec		       60		      rts
   2414  5aed							;jmp setFilterFromA
   2415  5aed				   filterClosed
   2416  5aed		       a9 00		      lda	#0
   2417  5aef		       8d 9c 70 	      sta	filterModValue
   2418  5af2		       60		      rts
   2419  5af3							;jmp setFilterFromA
   2420  5af3
   2421  5af3
   2422  5af3							;---------------------
   2423  5af3				   modFilt5		; Filter chopper MEDIUM
   2424  5af3		       ad 03 70 	      lda	Frame
   2425  5af6		       29 02		      and	#%10
   2426  5af8		       f0 06		      beq	filterClosed2
   2427  5afa		       a9 96		      lda	#150
   2428  5afc							;jmp setFilterFromA
   2429  5afc		       8d 9c 70 	      sta	filterModValue
   2430  5aff		       60		      rts
   2431  5b00				   filterClosed2
   2432  5b00		       a9 32		      lda	#50
   2433  5b02							;jmp setFilterFromA
   2434  5b02		       8d 9c 70 	      sta	filterModValue
   2435  5b05		       60		      rts
   2436  5b06
   2437  5b06							;---------------------
   2438  5b06				   modPW2		; PW Envelope
   2439  5b06		       ad 03 70 	      lda	Frame
   2440  5b09		       ad 87 70 	      lda	modValue1
   2441  5b0c							;and #%11111000
   2442  5b0c		       29 e0		      and	#%11100000
   2443  5b0e		       f0 0b		      beq	noDecModValue3
   2444  5b10		       ae 87 70 	      ldx	modValue1
   2445  5b13		       ca		      dex
   2446  5b14		       ca		      dex
   2447  5b15		       ca		      dex
   2448  5b16		       ca		      dex
   2449  5b17		       ca		      dex
   2450  5b18		       8e 87 70 	      stx	modValue1
   2451  5b1b				   noDecModValue3
   2452  5b1b		       ad 87 70 	      lda	modValue1
   2453  5b1e		       20 85 5c 	      jsr	setPulseWidth
   2454  5b21
   2455  5b21		       a9 b4		      lda	#180
   2456  5b23		       8d 98 70 	      sta	resetValue
   2457  5b26
   2458  5b26		       4c a5 5a 	      jmp	filtEnvResetFast
   2459  5b29		       60		      rts
   2460  5b2a
   2461  5b2a
   2462  5b2a
   2463  5b2a
   2464  5b2a							;---------------------
   2465  5b2a				   modFiltEnv
   2466  5b2a		       ad 03 70 	      lda	Frame
   2467  5b2d		       29 01		      and	#%1
   2468  5b2f		       f0 01		      beq	doEnvLFO
   2469  5b31		       60		      rts
   2470  5b32				   doEnvLFO
   2471  5b32		       ad 87 70 	      lda	modValue1
   2472  5b35		       c9 ff		      cmp	#255
   2473  5b37		       f0 03		      beq	noIncreaseModValue
   2474  5b39		       ee 87 70 	      inc	modValue1
   2475  5b3c				   noIncreaseModValue
   2476  5b3c		       ad 87 70 	      lda	modValue1
   2477  5b3f		       8d 9c 70 	      sta	filterModValue
   2478  5b42							;jsr setFilterFromA
   2479  5b42		       a9 00		      lda	#0
   2480  5b44		       8d 98 70 	      sta	resetValue
   2481  5b47							; jmp filtEnvReset
   2482  5b47
   2483  5b47				   filtEnvReset
   2484  5b47		       a2 05		      ldx	#5
   2485  5b49				   filtEnvResetLoop
   2486  5b49		       bd a0 70 	      lda	noteNumArray,x
   2487  5b4c		       c9 ff		      cmp	#255
   2488  5b4e		       d0 09		      bne	quitFiltEnv
   2489  5b50		       ca		      dex
   2490  5b51		       10 f6		      bpl	filtEnvResetLoop
   2491  5b53							;lda #0
   2492  5b53		       ad 98 70 	      lda	resetValue
   2493  5b56		       8d 87 70 	      sta	modValue1
   2494  5b59				   quitFiltEnv
   2495  5b59		       60		      rts
   2496  5b5a
   2497  5b5a							;---------------------
   2498  5b5a				   modFiltLFO
   2499  5b5a		       a9 96		      lda	#150
   2500  5b5c		       8d 8b 70 	      sta	modLFOMinValue
   2501  5b5f		       a9 fe		      lda	#254
   2502  5b61		       8d 8a 70 	      sta	modLFOMaxValue
   2503  5b64		       20 92 5b 	      jsr	doModulationLFO
   2504  5b67		       ad 87 70 	      lda	modValue1
   2505  5b6a		       8d 9c 70 	      sta	filterModValue
   2506  5b6d							;jsr setFilterFromA
   2507  5b6d		       60		      rts
   2508  5b6e
   2509  5b6e
   2510  5b6e
   2511  5b6e							;---------------------
   2512  5b6e				   modPulseLFO
   2513  5b6e
   2514  5b6e							; Reset into range if way off value...
   2515  5b6e		       ad 87 70 	      lda	modValue1
   2516  5b71		       30 05		      bmi	noResetValue
   2517  5b73		       a9 c8		      lda	#200
   2518  5b75		       8d 87 70 	      sta	modValue1
   2519  5b78				   noResetValue
   2520  5b78
   2521  5b78							;inc 1025 ; DEBUG!
   2522  5b78		       a9 96		      lda	#150
   2523  5b7a		       8d 8b 70 	      sta	modLFOMinValue
   2524  5b7d		       a9 fe		      lda	#254
   2525  5b7f		       8d 8a 70 	      sta	modLFOMaxValue
   2526  5b82		       20 92 5b 	      jsr	doModulationLFO
   2527  5b85		       ae 87 70 	      ldx	modValue1
   2528  5b88		       8e 79 70 	      stx	paddleY
   2529  5b8b
   2530  5b8b		       ad 87 70 	      lda	modValue1
   2531  5b8e		       20 85 5c 	      jsr	setPulseWidth
   2532  5b91		       60		      rts
   2533  5b92
   2534  5b92							; Process special LFO for modulation
   2535  5b92							; Store modLFOMaxValue and modLFOMinValue first
   2536  5b92				   doModulationLFO
   2537  5b92		       ad 03 70 	      lda	Frame
   2538  5b95		       29 07		      and	#%111
   2539  5b97		       f0 01		      beq	doModLFO
   2540  5b99		       60		      rts
   2541  5b9a				   doModLFO
   2542  5b9a		       ad 89 70 	      lda	modDirection
   2543  5b9d		       f0 12		      beq	LFODown
   2544  5b9f				   LFOUp
   2545  5b9f		       ae 87 70 	      ldx	modValue1
   2546  5ba2		       e8		      inx
   2547  5ba3		       8e 87 70 	      stx	modValue1
   2548  5ba6							;jsr setPWValue
   2549  5ba6		       8e 79 70 	      stx	paddleY
   2550  5ba9							;jsr setPulseWidth
   2551  5ba9		       ae 87 70 	      ldx	modValue1
   2552  5bac
   2553  5bac		       e0 f5		      cpx	#245
   2554  5bae		       f0 0d		      beq	switchDirections
   2555  5bb0		       60		      rts
   2556  5bb1
   2557  5bb1				   LFODown
   2558  5bb1		       ae 87 70 	      ldx	modValue1
   2559  5bb4		       ca		      dex
   2560  5bb5		       8e 87 70 	      stx	modValue1
   2561  5bb8		       e0 96		      cpx	#150
   2562  5bba		       f0 01		      beq	switchDirections
   2563  5bbc		       60		      rts
   2564  5bbd
   2565  5bbd				   switchDirections
   2566  5bbd		       ad 89 70 	      lda	modDirection
   2567  5bc0		       18		      clc
   2568  5bc1		       69 01		      adc	#1
   2569  5bc3		       29 01		      and	#1
   2570  5bc5		       8d 89 70 	      sta	modDirection
   2571  5bc8		       60		      rts
   2572  5bc9
   2573  5bc9
   2574  5bc9							;setFilterFromA:
   2575  5bc9		       8d 9d 70 	      sta	filterSetValue
   2576  5bcc		       60		      rts
   2577  5bcd
   2578  5bcd							; Old version of FilterFromA...
   2579  5bcd		       8d 16 d4 	      sta	SID1+SFILTH
   2580  5bd0		       8d 16 71 	      sta	sidData+SFILTH
   2581  5bd3		       18		      clc
   2582  5bd4		       69 0a		      adc	#SID_SYMPHONY_FILTER_OFFSET
   2583  5bd6		       90 02		      bcc	noPaddleRoll
   2584  5bd8		       a9 ff		      lda	#255
   2585  5bda				   noPaddleRoll
   2586  5bda		       8d 36 d4 	      sta	SID2+SFILTH
   2587  5bdd				   noPaddleControl
   2588  5bdd		       60		      rts
   2589  5bde
   2590  5bde
   2591  5bde							;-------------------------------------
   2592  5bde							; Reading paddles from Prog Ref Guide
   2593  5bde							;-------------------------------------
   2594  5bde				   processPaddles
   2595  5bde				   pdlrd0		; entry point for one pair (condition x 1st)
   2596  5bde							; -  -  -  -  -
   2597  5bde							;sei				; disable interrupts
   2598  5bde		       a9 e0		      lda	#224	; disable keyboard scan
   2599  5be0		       8d 02 dc 	      sta	56322	; disable keyboard scan
   2600  5be3							; -  -  -  -  -
   2601  5be3		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
   2602  5be6		       8d 06 70 	      sta	Buffer	; save it away
   2603  5be9		       a9 c0		      lda	#$c0
   2604  5beb		       8d 02 dc 	      sta	Ciddra	; set port a for input
   2605  5bee		       a9 80		      lda	#$80
   2606  5bf0
   2607  5bf0				   pdlrd1
   2608  5bf0		       8d 00 dc 	      sta	PortA	; address a pair of paddles
   2609  5bf3		       a0 80		      ldy	#$80	; wait a while
   2610  5bf5				   pdlrd2
   2611  5bf5		       ea		      nop
   2612  5bf6		       88		      dey
   2613  5bf7		       10 fc		      bpl	pdlrd2
   2614  5bf9
   2615  5bf9		       ae 19 d4 	      ldx	SID1+25	; get x value
   2616  5bfc		       8e 78 70 	      stx	paddleX
   2617  5bff		       ac 1a d4 	      ldy	SID1+26	; get y value
   2618  5c02		       8c 79 70 	      sty	paddleY
   2619  5c05
   2620  5c05		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
   2621  5c08		       09 50		      ora	#80	; make it the same as other pair
   2622  5c0a		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
   2623  5c0d
   2624  5c0d		       ad 06 70 	      lda	Buffer
   2625  5c10		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
   2626  5c13							; -  -  -  -  -
   2627  5c13							;cli			; enable interrupts
   2628  5c13		       a9 ff		      lda	#255	; enable keyboard scan
   2629  5c15		       8d 02 dc 	      sta	56322	; enable keyboard scan
   2630  5c18							; -  -  -  -  -
   2631  5c18
   2632  5c18							;-------------------------------------
   2633  5c18							; Auto paddle on - turn on paddle control if it's wiggled...
   2634  5c18		       ad 29 70 	      lda	paddle
   2635  5c1b		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
   2636  5c1d		       e0 a0		      cpx	#160
   2637  5c1f		       90 05		      bcc	noPaddleTop
   2638  5c21		       a9 01		      lda	#1
   2639  5c23		       8d 76 70 	      sta	paddleTop
   2640  5c26				   noPaddleTop
   2641  5c26		       e0 60		      cpx	#96
   2642  5c28		       b0 05		      bcs	noPaddleBottom
   2643  5c2a		       a9 01		      lda	#1
   2644  5c2c		       8d 77 70 	      sta	paddleBottom
   2645  5c2f				   noPaddleBottom
   2646  5c2f							;-----------
   2647  5c2f		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
   2648  5c32		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
   2649  5c34		       ad 77 70 	      lda	paddleBottom
   2650  5c37		       f0 05		      beq	noPaddleAutoOn
   2651  5c39		       a9 01		      lda	#1	; turn paddle on
   2652  5c3b		       20 3a 61 	      jsr	setPaddles
   2653  5c3e				   noPaddleAutoOn
   2654  5c3e
   2655  5c3e							;-------------------------------------
   2656  5c3e							; check to see if paddle control is on
   2657  5c3e		       ad 29 70 	      lda	paddle
   2658  5c41		       f0 04		      beq	processPaddle2
   2659  5c43
   2660  5c43							; paddle1 -> filter
   2661  5c43		       8a		      txa
   2662  5c44		       8d 9d 70 	      sta	filterSetValue
   2663  5c47							;jsr setFilterFromA
   2664  5c47
   2665  5c47
   2666  5c47							;sta SID1+SFILTH
   2667  5c47							;sta sidData+SFILTH
   2668  5c47							;clc
   2669  5c47							;adc #SID_SYMPHONY_FILTER_OFFSET
   2670  5c47							;bcc noPaddleRoll
   2671  5c47							;lda #255
   2672  5c47							;noPaddleRoll:
   2673  5c47							;sta SID2+SFILTH
   2674  5c47							;noPaddleControl
   2675  5c47
   2676  5c47							;-------------------------------------
   2677  5c47							; paddle 2
   2678  5c47
   2679  5c47							;	paddle 2 -> Pulse Width
   2680  5c47				   processPaddle2
   2681  5c47		       ad 7a 70 	      lda	paddle2
   2682  5c4a		       c9 01		      cmp	#1
   2683  5c4c		       d0 36		      bne	skipPW
   2684  5c4e		       ad 79 70 	      lda	paddleY
   2685  5c51		       c9 f5		      cmp	#245	; check for top limit (= no sound)
   2686  5c53		       90 05		      bcc	notPTop
   2687  5c55		       a9 f5		      lda	#245	; limit to maximum
   2688  5c57		       8d 79 70 	      sta	paddleY
   2689  5c5a				   notPTop
   2690  5c5a		       ad 79 70 	      lda	paddleY
   2691  5c5d		       20 85 5c 	      jsr	setPulseWidth
   2692  5c60							;-------------
   2693  5c60		       ad 79 70 	      lda	paddleY
   2694  5c63		       0a		      asl
   2695  5c64		       0a		      asl
   2696  5c65		       0a		      asl
   2697  5c66		       0a		      asl
   2698  5c67		       09 0f		      ora	#$0F
   2699  5c69		       8d 02 d4 	      sta	SID1+SV1PWL
   2700  5c6c		       8d 09 d4 	      sta	SID1+SV2PWL
   2701  5c6f		       8d 10 d4 	      sta	SID1+SV3PWL
   2702  5c72		       8d 22 d4 	      sta	SID2+SV1PWL
   2703  5c75		       8d 29 d4 	      sta	SID2+SV2PWL
   2704  5c78		       8d 30 d4 	      sta	SID2+SV3PWL
   2705  5c7b		       8d 02 71 	      sta	sidData+SV1PWL
   2706  5c7e		       8d 09 71 	      sta	sidData+SV2PWL
   2707  5c81		       8d 10 71 	      sta	sidData+SV3PWL
   2708  5c84				   skipPW
   2709  5c84		       60		      rts
   2710  5c85							;END paddle ------------------------------
   2711  5c85
   2712  5c85
   2713  5c85							;------------------
   2714  5c85							; Set pulse width
   2715  5c85							;------------------
   2716  5c85				   setPulseWidth
   2717  5c85		       4a		      lsr
   2718  5c86		       4a		      lsr
   2719  5c87		       4a		      lsr
   2720  5c88		       4a		      lsr
   2721  5c89		       8d 03 d4 	      sta	SID1+SV1PWH
   2722  5c8c		       8d 0a d4 	      sta	SID1+SV2PWH
   2723  5c8f		       8d 11 d4 	      sta	SID1+SV3PWH
   2724  5c92		       8d 23 d4 	      sta	SID2+SV1PWH
   2725  5c95		       8d 2a d4 	      sta	SID2+SV2PWH
   2726  5c98		       8d 31 d4 	      sta	SID2+SV3PWH
   2727  5c9b		       8d 03 71 	      sta	sidData+SV1PWH
   2728  5c9e		       8d 0a 71 	      sta	sidData+SV2PWH
   2729  5ca1		       8d 11 71 	      sta	sidData+SV3PWH
   2730  5ca4		       60		      rts
   2731  5ca5
   2732  5ca5
   2733  5ca5				   processVideoMode
   2734  5ca5							; Turn off Vic when no notes are playing
   2735  5ca5		       ad 20 70 	      lda	VICMode
   2736  5ca8		       f0 1e		      beq	vicOff
   2737  5caa		       c9 02		      cmp	#2
   2738  5cac		       f0 25		      beq	vicOn
   2739  5cae		       ad 1f 70 	      lda	dispOn
   2740  5cb1		       d0 20		      bne	vicOn
   2741  5cb3		       ad a0 70 	      lda	noteNumArray+0
   2742  5cb6							;lda KeyA
   2743  5cb6
   2744  5cb6		       c9 ff		      cmp	#255
   2745  5cb8		       d0 19		      bne	vicOn
   2746  5cba		       ad a1 70 	      lda	noteNumArray+1
   2747  5cbd							;lda KeyB
   2748  5cbd		       c9 ff		      cmp	#255
   2749  5cbf		       d0 12		      bne	vicOn
   2750  5cc1		       ad a2 70 	      lda	noteNumArray+2
   2751  5cc4							;lda KeyC
   2752  5cc4		       c9 ff		      cmp	#255
   2753  5cc6		       d0 0b		      bne	vicOn
   2754  5cc8				   vicOff
   2755  5cc8							; Vic off
   2756  5cc8		       ad 11 d0 	      lda	$d011
   2757  5ccb		       29 ef		      and	#$EF
   2758  5ccd		       8d 11 d0 	      sta	$D011
   2759  5cd0
   2760  5cd0		       4c db 5c 	      jmp	endVic
   2761  5cd3				   vicOn
   2762  5cd3							; Vic on
   2763  5cd3		       ad 11 d0 	      lda	$d011
   2764  5cd6		       09 10		      ora	#$10
   2765  5cd8		       8d 11 d0 	      sta	$d011
   2766  5cdb
   2767  5cdb				   endVic
   2768  5cdb		       a9 00		      lda	#0
   2769  5cdd		       8d 1f 70 	      sta	dispOn
   2770  5ce0
   2771  5ce0		       ad a0 70 	      lda	noteNumArray+0
   2772  5ce3							;lda KeyA
   2773  5ce3		       8d 0c 70 	      sta	temp
   2774  5ce6		       20 fc 5c 	      jsr	drawPattern
   2775  5ce9		       ad a1 70 	      lda	noteNumArray+1
   2776  5cec							;lda KeyB
   2777  5cec		       8d 0c 70 	      sta	temp
   2778  5cef		       20 fc 5c 	      jsr	drawPattern
   2779  5cf2		       ad a2 70 	      lda	noteNumArray+2
   2780  5cf5							;lda KeyC
   2781  5cf5		       8d 0c 70 	      sta	temp
   2782  5cf8		       20 fc 5c 	      jsr	drawPattern
   2783  5cfb
   2784  5cfb		       60		      rts
   2785  5cfc							;jmp Loop
   2786  5cfc							;====================================================
   2787  5cfc							; bottom of main loop
   2788  5cfc							;====================================================
   2789  5cfc
   2790  5cfc
   2791  5cfc							;------------------------------------------
   2792  5cfc							; code to draw colored character patterns
   2793  5cfc							;------------------------------------------
   2794  5cfc							;PTRNTEXTBASE equ 1224
   2795  5cfc		       04 00	   PTRNTEXTBASE equ	1224-40*5
   2796  5cfc							;PTRNCOLORBASE equ 55496
   2797  5cfc		       d8 00	   PTRNCOLORBASE equ	55496-40*5
   2798  5cfc
   2799  5cfc
   2800  5cfc				   drawPattern
   2801  5cfc							; don't draw video when in help mode
   2802  5cfc		       ad 70 70 	      lda	helpMode
   2803  5cff		       f0 01		      beq	continueVideo
   2804  5d01		       60		      rts
   2805  5d02				   continueVideo
   2806  5d02							;---------
   2807  5d02							; setup
   2808  5d02		       ae 21 70 	      ldx	patPtr
   2809  5d05		       e8		      inx
   2810  5d06		       e0 28		      cpx	#40
   2811  5d08		       d0 02		      bne	noPatReset
   2812  5d0a		       a2 00		      ldx	#0
   2813  5d0c				   noPatReset
   2814  5d0c		       8e 21 70 	      stx	patPtr
   2815  5d0f							;---------
   2816  5d0f		       a2 05		      ldx	#5
   2817  5d11							; main pattern loop
   2818  5d11				   patternLoop
   2819  5d11				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
   2820  5d11				  -	      rts		; DEBUG! disable patterns
   2821  5d11					      endif
   2822  5d11
   2823  5d11		       bd b7 70 	      lda	patOffset,x
   2824  5d14							;	clc
   2825  5d14		       6d 21 70 	      adc	patPtr
   2826  5d17		       a8		      tay
   2827  5d18							;	clc
   2828  5d18		       ad 0c 70 	      lda	temp
   2829  5d1b		       c9 ff		      cmp	#255
   2830  5d1d		       f0 0a		      beq	skipExtraColors
   2831  5d1f		       ad 03 70 	      lda	Frame
   2832  5d22		       2d 45 70 	      and	videoMode
   2833  5d25		       18		      clc
   2834  5d26		       6d 0c 70 	      adc	temp
   2835  5d29				   skipExtraColors
   2836  5d29		       69 be		      adc	#190
   2837  5d2b		       8d 8f 70 	      sta	temp2
   2838  5d2e		       ad 0c 70 	      lda	temp
   2839  5d31		       c9 ff		      cmp	#255
   2840  5d33		       d0 05		      bne	reloadValue
   2841  5d35		       a9 7f		      lda	#127
   2842  5d37		       4c 3d 5d 	      jmp	afterReloadValue
   2843  5d3a				   reloadValue
   2844  5d3a		       ad 8f 70 	      lda	temp2
   2845  5d3d				   afterReloadValue
   2846  5d3d		       91 2b		      sta	(lowTextPtr),y
   2847  5d3f		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
   2848  5d42		       99 90 05 	      sta	PTRNTEXTBASE+400,y
   2849  5d45		       99 58 06 	      sta	PTRNTEXTBASE+600,y
   2850  5d48		       c0 f8		      cpy	#248
   2851  5d4a		       30 03		      bmi	noTopText
   2852  5d4c		       99 20 07 	      sta	PTRNTEXTBASE+800,y
   2853  5d4f				   noTopText
   2854  5d4f							;sbc #13
   2855  5d4f		       69 0c		      adc	#12
   2856  5d51		       91 2d		      sta	(lowColorPtr),y
   2857  5d53		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
   2858  5d56		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
   2859  5d59		       99 58 da 	      sta	PTRNCOLORBASE+600,y
   2860  5d5c		       c0 f8		      cpy	#248
   2861  5d5e		       30 03		      bmi	noTopColor
   2862  5d60		       99 20 db 	      sta	PTRNCOLORBASE+800,y
   2863  5d63				   noTopColor
   2864  5d63		       ca		      dex
   2865  5d64		       10 ab		      bpl	patternLoop
   2866  5d66		       60		      rts
   2867  5d67							;--------------------- end of draw patterns
   2868  5d67
   2869  5d67
   2870  5d67							; All notes off
   2871  5d67				   midiPanic
   2872  5d67		       a2 08		      ldx	#NOTE_BUF_SIZE
   2873  5d69		       a9 ff		      lda	#255
   2874  5d6b				   midiPanicLoop
   2875  5d6b		       9d a0 70 	      sta	noteNumArray,x
   2876  5d6e		       ca		      dex
   2877  5d6f		       10 fa		      bpl	midiPanicLoop
   2878  5d71		       60		      rts
   2879  5d72
   2880  5d72
   2881  5d72							;------------------------------------------
   2882  5d72							; Read the keyboard
   2883  5d72							;------------------------------------------
   2884  5d72				   readKeyboard
   2885  5d72							; Keyboard read setup
   2886  5d72		       a9 7f		      lda	#127
   2887  5d74		       8d 0d dc 	      sta	56333
   2888  5d77
   2889  5d77							;------------------------------------------
   2890  5d77							; determine which keyset to use
   2891  5d77							; (raw/shift/commodorekey/runstop)
   2892  5d77							;------------------------------------------
   2893  5d77
   2894  5d77							; default is raw key functions (no modified keys)
   2895  5d77		       a9 15		      lda	#<rawKeyFunctions	;-
   2896  5d79		       85 c2		      sta	keyPtrL	;
   2897  5d7b		       a9 6a		      lda	#>rawKeyFunctions	;
   2898  5d7d		       85 c3		      sta	keyPtrH	;-
   2899  5d7f
   2900  5d7f							; Check for Shift/C=
   2901  5d7f		       a9 bf		      lda	#~64	; (Right Shift)
   2902  5d81		       8d 00 dc 	      sta	56320
   2903  5d84		       ad 01 dc 	      lda	56321
   2904  5d87		       29 10		      and	#16
   2905  5d89		       d0 08		      bne	notAltKeys	;-
   2906  5d8b		       a9 89		      lda	#<shiftKeyFunctions	;
   2907  5d8d		       85 c2		      sta	keyPtrL	;
   2908  5d8f		       a9 6b		      lda	#>shiftKeyFunctions	;-
   2909  5d91		       85 c3		      sta	keyPtrH
   2910  5d93				   notAltKeys
   2911  5d93		       a9 fd		      lda	#~2	; (Left Shift)
   2912  5d95		       8d 00 dc 	      sta	56320
   2913  5d98		       ad 01 dc 	      lda	56321
   2914  5d9b		       29 80		      and	#128
   2915  5d9d		       d0 0b		      bne	notAltKeys2	;-
   2916  5d9f		       a9 89		      lda	#<shiftKeyFunctions	;
   2917  5da1		       85 c2		      sta	keyPtrL	;
   2918  5da3		       a9 6b		      lda	#>shiftKeyFunctions	;-
   2919  5da5		       85 c3		      sta	keyPtrH
   2920  5da7		       4c ac 5e 	      jmp	doKeyCheck
   2921  5daa				   notAltKeys2
   2922  5daa		       a9 7f		      lda	#~128	; (C= key)
   2923  5dac		       8d 00 dc 	      sta	56320
   2924  5daf		       ad 01 dc 	      lda	56321
   2925  5db2		       29 20		      and	#32
   2926  5db4		       d0 08		      bne	notAltKeys3
   2927  5db6		       a9 05		      lda	#<commKeyFunctions	;-
   2928  5db8		       85 c2		      sta	keyPtrL	;
   2929  5dba		       a9 6c		      lda	#>commKeyFunctions	;
   2930  5dbc		       85 c3		      sta	keyPtrH	;-
   2931  5dbe				   notAltKeys3
   2932  5dbe		       a9 7f		      lda	#~128	; (Run Stop)
   2933  5dc0		       8d 00 dc 	      sta	56320
   2934  5dc3		       ad 01 dc 	      lda	56321
   2935  5dc6		       29 80		      and	#128
   2936  5dc8		       d0 08		      bne	notAltKeys4
   2937  5dca		       a9 81		      lda	#<runstopKeyFunctions	;-
   2938  5dcc		       85 c2		      sta	keyPtrL	;
   2939  5dce		       a9 6c		      lda	#>runstopKeyFunctions	;
   2940  5dd0		       85 c3		      sta	keyPtrH	;-
   2941  5dd2				   notAltKeys4
   2942  5dd2		       a9 7f		      lda	#~128	; (CTRL key)
   2943  5dd4		       8d 00 dc 	      sta	56320
   2944  5dd7		       ad 01 dc 	      lda	56321
   2945  5dda		       29 04		      and	#4	; CTRL
   2946  5ddc							;and #2 ; BACK ARROW
   2947  5ddc		       d0 08		      bne	notAltKeys5
   2948  5dde		       a9 0d		      lda	#<CTRLKeyFunctions	;-
   2949  5de0		       85 c2		      sta	keyPtrL	;
   2950  5de2		       a9 6b		      lda	#>CTRLKeyFunctions	;
   2951  5de4		       85 c3		      sta	keyPtrH	;-
   2952  5de6				   notAltKeys5
   2953  5de6
   2954  5de6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2955  5de6				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
   2956  5de6				  -	      lda	#0
   2957  5de6				  -	      sta	keyTimer	; DEBUG!  Disable key timer
   2958  5de6					      ENDIF
   2959  5de6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2960  5de6
   2961  5de6							; handle keytimer
   2962  5de6							; (to avoid accidental keypresses on shifted keys)
   2963  5de6		       ad 58 70 	      lda	keyTimer
   2964  5de9		       f0 06		      beq	readKeys
   2965  5deb		       ce 58 70 	      dec	keyTimer
   2966  5dee		       4c f1 5d 	      jmp	startCheck
   2967  5df1				   readKeys
   2968  5df1
   2969  5df1							;********************************
   2970  5df1							; Check for Notes Being Pressed
   2971  5df1							;********************************
   2972  5df1				   startCheck
   2973  5df1		       a9 00		      lda	#0
   2974  5df3		       8d 9b 70 	      sta	keyCount
   2975  5df6
   2976  5df6							; Save last notes and clear note buffer
   2977  5df6		       ae 80 70 	      ldx	bufferSize
   2978  5df9							;dex
   2979  5df9		       e8		      inx
   2980  5dfa		       e8		      inx
   2981  5dfb				   clearKeys
   2982  5dfb		       bd d0 70 	      lda	kbBuffer,x
   2983  5dfe				  -	      IF	DEBUG_DISPLAY=1
   2984  5dfe				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
   2985  5dfe					      ENDIF
   2986  5dfe		       9d e0 70 	      sta	lastKbBuffer,x
   2987  5e01		       a9 ff		      lda	#255
   2988  5e03		       9d d0 70 	      sta	kbBuffer,x
   2989  5e06		       ca		      dex
   2990  5e07		       10 f2		      bpl	clearKeys
   2991  5e09
   2992  5e09							;lda #255
   2993  5e09							;sta KeyA
   2994  5e09							;sta KeyB
   2995  5e09							;sta KeyC
   2996  5e09
   2997  5e09		       ae 80 70 	      ldx	bufferSize
   2998  5e0c							;dex
   2999  5e0c		       e8		      inx
   3000  5e0d		       e8		      inx
   3001  5e0e		       a0 00		      ldy	#0
   3002  5e10							; check for note keys being pressed
   3003  5e10				   checkLoop
   3004  5e10		       b9 a5 69 	      lda	col,y
   3005  5e13		       f0 1c		      beq	quitCheck
   3006  5e15		       8d 00 dc 	      sta	56320
   3007  5e18		       ad 01 dc 	      lda	56321
   3008  5e1b		       39 be 69 	      and	row,y
   3009  5e1e		       d0 0e		      bne	notPressed
   3010  5e20		       98		      tya
   3011  5e21		       18		      clc
   3012  5e22		       6d 22 70 	      adc	keyOffset
   3013  5e25							;sta KeyA,x
   3014  5e25		       9d d0 70 	      sta	kbBuffer,x
   3015  5e28		       ca		      dex
   3016  5e29		       ee 9b 70 	      inc	keyCount
   3017  5e2c		       30 03		      bmi	quitCheck
   3018  5e2e				   notPressed
   3019  5e2e		       c8		      iny
   3020  5e2f		       d0 df		      bne	checkLoop
   3021  5e31
   3022  5e31				   quitCheck
   3023  5e31							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3024  5e31							; Generate note on/offs from keyboard data
   3025  5e31							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3026  5e31							; FIND NOTE ONS...
   3027  5e31		       ae 80 70 	      ldx	bufferSize
   3028  5e34							;dex
   3029  5e34		       e8		      inx
   3030  5e35		       e8		      inx
   3031  5e36				   noteOnCheck
   3032  5e36		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
   3033  5e39		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3034  5e3c							;dey
   3035  5e3c		       c8		      iny
   3036  5e3d		       c8		      iny
   3037  5e3e				   innerNoteOnCheck
   3038  5e3e		       d9 e0 70 	      cmp	lastKbBuffer,y
   3039  5e41		       f0 12		      beq	checkNextNote
   3040  5e43		       88		      dey
   3041  5e44		       10 f8		      bpl	innerNoteOnCheck
   3042  5e46							;Found new note-on!
   3043  5e46							;inc 53280
   3044  5e46		       8d 81 70 	      sta	noteTempA
   3045  5e49		       8e 82 70 	      stx	noteTempB
   3046  5e4c		       20 ce 53 	      jsr	doNoteOn
   3047  5e4f		       ad 81 70 	      lda	noteTempA
   3048  5e52		       ae 82 70 	      ldx	noteTempB
   3049  5e55							; TODO: call note on function
   3050  5e55				   checkNextNote
   3051  5e55		       ca		      dex
   3052  5e56		       10 de		      bpl	noteOnCheck
   3053  5e58
   3054  5e58							; FIND NOTE OFF...
   3055  5e58		       ae 80 70 	      ldx	bufferSize
   3056  5e5b							;dex
   3057  5e5b		       e8		      inx
   3058  5e5c		       e8		      inx
   3059  5e5d				   noteOnCheck2
   3060  5e5d		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
   3061  5e60		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3062  5e63							;dey
   3063  5e63		       c8		      iny
   3064  5e64		       c8		      iny
   3065  5e65				   innerNoteOnCheck2
   3066  5e65		       d9 d0 70 	      cmp	kbBuffer,y
   3067  5e68		       f0 12		      beq	checkNextNote2
   3068  5e6a		       88		      dey
   3069  5e6b		       10 f8		      bpl	innerNoteOnCheck2
   3070  5e6d							;Found new note-on!
   3071  5e6d							;inc 53280
   3072  5e6d		       8d 81 70 	      sta	noteTempA
   3073  5e70		       8e 82 70 	      stx	noteTempB
   3074  5e73		       20 fc 53 	      jsr	doNoteOff
   3075  5e76		       ad 81 70 	      lda	noteTempA
   3076  5e79		       ae 82 70 	      ldx	noteTempB
   3077  5e7c							; TODO: call note on function
   3078  5e7c				   checkNextNote2
   3079  5e7c		       ca		      dex
   3080  5e7d		       10 de		      bpl	noteOnCheck2
   3081  5e7f							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3082  5e7f							; End of note on/off generation
   3083  5e7f							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3084  5e7f
   3085  5e7f							; Skip key command check if 3 or more piano keys
   3086  5e7f							; are held to avoid quirks with C64 keyboard
   3087  5e7f							; matrix hardware.
   3088  5e7f		       ae 9b 70 	      ldx	keyCount
   3089  5e82		       f0 0d		      beq	skipMinimalKeyboard
   3090  5e84							; default is raw key functions (no modified keys)
   3091  5e84		       a9 91		      lda	#<minimalKeyFunctions	;-
   3092  5e86		       85 c2		      sta	keyPtrL	;
   3093  5e88		       a9 6a		      lda	#>minimalKeyFunctions	;
   3094  5e8a		       85 c3		      sta	keyPtrH	;-
   3095  5e8c							; also disable keytimer...
   3096  5e8c		       a9 00		      lda	#0
   3097  5e8e		       8d 58 70 	      sta	keyTimer
   3098  5e91				   skipMinimalKeyboard
   3099  5e91
   3100  5e91							; Check key timer...
   3101  5e91		       ad 58 70 	      lda	keyTimer
   3102  5e94		       f0 01		      beq	contReadKeys
   3103  5e96		       60		      rts
   3104  5e97				   contReadKeys
   3105  5e97		       8e 66 70 	      stx	lastOsc
   3106  5e9a
   3107  5e9a							; Check for space bar (pitch bender)...
   3108  5e9a		       a9 7f		      lda	#~$80
   3109  5e9c		       8d 00 dc 	      sta	56320
   3110  5e9f		       ad 01 dc 	      lda	56321
   3111  5ea2		       29 10		      and	#$10
   3112  5ea4		       d0 06		      bne	noSpace
   3113  5ea6		       20 15 60 	      jsr	bendBender
   3114  5ea9		       4c fc 5e 	      jmp	skipKeyCheck
   3115  5eac				   noSpace
   3116  5eac
   3117  5eac
   3118  5eac				   doKeyCheck
   3119  5eac							;********************************
   3120  5eac							; Generic command key check
   3121  5eac							;********************************
   3122  5eac
   3123  5eac		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
   3124  5eae				   keyChkLoop
   3125  5eae		       bd d7 69 	      lda	commandKeys,x
   3126  5eb1		       8d 00 dc 	      sta	56320
   3127  5eb4		       ad 01 dc 	      lda	56321
   3128  5eb7		       3d d8 69 	      and	commandKeys+1,x
   3129  5eba		       d0 3c		      bne	keyNotDown
   3130  5ebc
   3131  5ebc							; key down!
   3132  5ebc							;-----------
   3133  5ebc		       8a		      txa		;multiply x by 2
   3134  5ebd		       0a		      asl		;  to get the offset
   3135  5ebe		       a8		      tay		;  into the key functions array
   3136  5ebf
   3137  5ebf							; get address of function to call
   3138  5ebf		       b1 c2		      lda	(keyPtrL),y
   3139  5ec1		       8d 62 70 	      sta	temp16L
   3140  5ec4		       c8		      iny
   3141  5ec5		       b1 c2		      lda	(keyPtrL),y
   3142  5ec7		       8d 63 70 	      sta	temp16H
   3143  5eca		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
   3144  5ecc							;  no function assigned to this key so quit
   3145  5ecc
   3146  5ecc							; put return address onto stack to simulate JSR with a JMP()
   3147  5ecc		       a9 5e		      lda	#>returnAddress
   3148  5ece		       48		      pha
   3149  5ecf		       a9 e6		      lda	#<returnAddress
   3150  5ed1		       48		      pha
   3151  5ed2
   3152  5ed2							; save the value of X
   3153  5ed2		       8e 64 70 	      stx	saveX
   3154  5ed5
   3155  5ed5		       c8		      iny
   3156  5ed6		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
   3157  5ed8		       8d 65 70 	      sta	keyTemp
   3158  5edb		       c8		      iny
   3159  5edc		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
   3160  5ede		       a8		      tay
   3161  5edf		       ad 65 70 	      lda	keyTemp
   3162  5ee2
   3163  5ee2							; indirect jump to function, which acts as a JSR since
   3164  5ee2							;   we pushed the return address onto the stack
   3165  5ee2		       6c 62 70 	      jmp	(temp16L)
   3166  5ee5
   3167  5ee5		       ea		      nop
   3168  5ee6				   returnAddress
   3169  5ee6		       ea		      nop
   3170  5ee7
   3171  5ee7		       ae 64 70 	      ldx	saveX	; restore X
   3172  5eea
   3173  5eea							; only set the keytimer when a raw key is used
   3174  5eea		       a5 c2		      lda	keyPtrL
   3175  5eec		       c9 15		      cmp	#<rawKeyFunctions
   3176  5eee		       f0 08		      beq	keyNotDown
   3177  5ef0
   3178  5ef0		       a9 28		      lda	#KEYTIME
   3179  5ef2		       8d 58 70 	      sta	keyTimer
   3180  5ef5							;-----------
   3181  5ef5		       4c fc 5e 	      jmp	skipKeyCheck	; quit keycheck after a key is found
   3182  5ef8
   3183  5ef8				   keyNotDown
   3184  5ef8		       ca		      dex
   3185  5ef9		       ca		      dex
   3186  5efa		       10 b2		      bpl	keyChkLoop
   3187  5efc
   3188  5efc				   skipKeyCheck
   3189  5efc
   3190  5efc							; done
   3191  5efc		       60		      rts
   3192  5efd
   3193  5efd							;-------------------------------------------
   3194  5efd							; new key-based set functions
   3195  5efd							;-------------------------------------------
   3196  5efd
   3197  5efd				   ksavePatch
   3198  5efd		       a9 01		      lda	#1
   3199  5eff		       8d 75 70 	      sta	customPatchSaved
   3200  5f02							;-------------------
   3201  5f02		       a9 1d		      lda	#SAVED_PATCH_MESSAGE
   3202  5f04		       8d 47 70 	      sta	patchSetY
   3203  5f07		       20 61 64 	      jsr	showPatchName
   3204  5f0a							;----------------
   3205  5f0a		       a2 19		      ldx	#$19
   3206  5f0c				   saveLoop
   3207  5f0c		       bd 00 71 	      lda	sidData,x
   3208  5f0f		       9d 20 71 	      sta	sidSaveData,x
   3209  5f12		       ca		      dex
   3210  5f13		       10 f7		      bpl	saveLoop
   3211  5f15							;----------------
   3212  5f15		       ad 29 70 	      lda	paddle
   3213  5f18		       8d 41 71 	      sta	savePaddle
   3214  5f1b		       ad 6b 70 	      lda	octave
   3215  5f1e		       8d 42 71 	      sta	saveOctave
   3216  5f21		       ad 1d 70 	      lda	soundMode
   3217  5f24		       8d 43 71 	      sta	saveSoundMode
   3218  5f27		       ad 86 70 	      lda	fxType
   3219  5f2a		       8d 43 71 	      sta	saveFXType
   3220  5f2d		       ad 1e 70 	      lda	arpSpeed
   3221  5f30		       8d 44 71 	      sta	saveArpSpeed
   3222  5f33		       ad 49 70 	      lda	LFODepth
   3223  5f36		       8d 46 71 	      sta	saveLFODepth
   3224  5f39		       ad 48 70 	      lda	LFORate
   3225  5f3c		       8d 47 71 	      sta	saveLFORate
   3226  5f3f		       ad 1c 70 	      lda	volume
   3227  5f42		       8d 48 71 	      sta	saveVolume
   3228  5f45		       ad 24 70 	      lda	volModeRAM
   3229  5f48		       8d 49 71 	      sta	saveVolMode
   3230  5f4b		       ad 57 70 	      lda	filter
   3231  5f4e		       8d 4a 71 	      sta	saveFilter
   3232  5f51							;----------------
   3233  5f51		       60		      rts
   3234  5f52
   3235  5f52				   kloadPatch
   3236  5f52							; don't load patch if none has been saved
   3237  5f52		       ad 75 70 	      lda	customPatchSaved
   3238  5f55		       d0 01		      bne	contLoadPatch
   3239  5f57		       60		      rts
   3240  5f58				   contLoadPatch
   3241  5f58							; Maybe show this name with direct text instead?...
   3242  5f58							;lda #SAVED_PATCH_MESSAGE
   3243  5f58							;sta patchSetY
   3244  5f58							;jsr showPatchName
   3245  5f58							;----------------
   3246  5f58		       a9 1e		      lda	#CUSTOM_PATCH_NUMBER
   3247  5f5a		       8d 47 70 	      sta	patchSetY
   3248  5f5d		       20 61 64 	      jsr	showPatchName
   3249  5f60							;-----------------------
   3250  5f60		       ad 49 71 	      lda	saveVolMode
   3251  5f63		       8d 24 70 	      sta	volModeRAM
   3252  5f66							;.....................
   3253  5f66		       ad 48 71 	      lda	saveVolume
   3254  5f69		       8d 1c 70 	      sta	volume
   3255  5f6c							;.....................
   3256  5f6c		       ad 41 71 	      lda	savePaddle
   3257  5f6f		       20 3a 61 	      jsr	setPaddles
   3258  5f72							;.....................
   3259  5f72		       ad 42 71 	      lda	saveOctave
   3260  5f75		       20 b2 62 	      jsr	setOctave
   3261  5f78							;.....................
   3262  5f78		       ad 43 71 	      lda	saveSoundMode
   3263  5f7b		       8d 1d 70 	      sta	soundMode
   3264  5f7e							;lda saveArpSpeed
   3265  5f7e		       20 14 63 	      jsr	setMode
   3266  5f81							;.....................
   3267  5f81		       ad 43 71 	      lda	saveFXType
   3268  5f84		       8d 86 70 	      sta	fxType
   3269  5f87		       20 ec 62 	      jsr	setFX
   3270  5f8a							;.....................
   3271  5f8a		       ad 46 71 	      lda	saveLFODepth
   3272  5f8d		       20 5b 61 	      jsr	setLFODepth
   3273  5f90							;.....................
   3274  5f90		       ad 47 71 	      lda	saveLFORate
   3275  5f93		       20 71 61 	      jsr	setLFORate
   3276  5f96							;.....................
   3277  5f96		       ad 4a 71 	      lda	saveFilter
   3278  5f99		       8d 57 70 	      sta	filter
   3279  5f9c							;----------------
   3280  5f9c		       a2 19		      ldx	#$19
   3281  5f9e				   loadLoop
   3282  5f9e		       bd 20 71 	      lda	sidSaveData,x
   3283  5fa1		       9d 00 d4 	      sta	SID1,x
   3284  5fa4		       9d 20 d4 	      sta	SID2,x
   3285  5fa7		       9d 00 71 	      sta	sidData,x
   3286  5faa		       ca		      dex
   3287  5fab		       10 f1		      bpl	loadLoop
   3288  5fad							;----------------
   3289  5fad		       ad 04 71 	      lda	sidData+SV1WAVE
   3290  5fb0		       8d 30 70 	      sta	WaveType
   3291  5fb3		       ad 0b 71 	      lda	sidData+SV2WAVE
   3292  5fb6		       8d 37 70 	      sta	WaveType2
   3293  5fb9		       ad 12 71 	      lda	sidData+SV3WAVE
   3294  5fbc		       8d 3e 70 	      sta	WaveType3
   3295  5fbf							;----------------
   3296  5fbf		       60		      rts
   3297  5fc0
   3298  5fc0				   khelp
   3299  5fc0		       a9 00		      lda	#0
   3300  5fc2		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
   3301  5fc5
   3302  5fc5		       20 34 68 	      jsr	clrScr
   3303  5fc8		       a9 28		      lda	#KEYTIME
   3304  5fca		       8d 58 70 	      sta	keyTimer
   3305  5fcd		       ad 70 70 	      lda	helpMode
   3306  5fd0		       49 01		      eor	#1
   3307  5fd2							;sta helpMode
   3308  5fd2		       20 db 60 	      jsr	setHelpMode
   3309  5fd5		       20 23 67 	      jsr	displayInit
   3310  5fd8		       ad 70 70 	      lda	helpMode
   3311  5fdb		       f0 07		      beq	showHelpMessage
   3312  5fdd							;---------------
   3313  5fdd							; Show full help page...
   3314  5fdd		       a2 74		      ldx	#>normalHelp	;low/MSB
   3315  5fdf		       a0 6b		      ldy	#<normalHelp	;high/LSB
   3316  5fe1		       4c 8b 68 	      jmp	displayPage	; <--- Draw full help page
   3317  5fe4							; \/ Show help message at bottom of screen
   3318  5fe4				   showHelpMessage
   3319  5fe4							; Show help key...
   3320  5fe4		       a2 00		      ldx	#0
   3321  5fe6				   helpMessageLoop
   3322  5fe6		       bd 4d 74 	      lda	helpMessage,x
   3323  5fe9		       f0 11		      beq	endHelpMsgLoop
   3324  5feb		       c9 40		      cmp	#64
   3325  5fed		       30 02		      bmi	showSpace99
   3326  5fef		       e9 40		      sbc	#64
   3327  5ff1				   showSpace99
   3328  5ff1		       9d c0 07 	      sta	1024+24*40,x
   3329  5ff4		       a9 0b		      lda	#11
   3330  5ff6		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
   3331  5ff9		       e8		      inx
   3332  5ffa		       d0 ea		      bne	helpMessageLoop
   3333  5ffc				   endHelpMsgLoop
   3334  5ffc
   3335  5ffc		       20 f1 61 	      jsr	showMidiMode
   3336  5fff
   3337  5fff
   3338  5fff							;	jsr displayInit
   3339  5fff
   3340  5fff
   3341  5fff
   3342  5fff							;	ldx #39
   3343  5fff							;	lda #32
   3344  5fff							;clearLastRow:
   3345  5fff							;	sta 1024+23*40,x
   3346  5fff							;	dex
   3347  5fff							;	bpl clearLastRow
   3348  5fff		       60		      rts
   3349  6000
   3350  6000				   kclearModulation
   3351  6000		       a9 00		      lda	#0
   3352  6002		       20 e9 62 	      jsr	ksetFX
   3353  6005		       a9 00		      lda	#0
   3354  6007		       20 5b 61 	      jsr	setLFODepth
   3355  600a		       a9 00		      lda	#0
   3356  600c		       4c 71 61 	      jmp	setLFORate
   3357  600f
   3358  600f
   3359  600f
   3360  600f				   ksetPalNtsc
   3361  600f		       8d 61 70 	      sta	NTSCmode
   3362  6012		       4c 23 67 	      jmp	displayInit
   3363  6015
   3364  6015							; bend the bender down
   3365  6015				   bendBender
   3366  6015		       ad 40 70 	      lda	bender
   3367  6018		       c9 fc		      cmp	#252
   3368  601a		       f0 11		      beq	notBender
   3369  601c		       ee 40 70 	      inc	bender
   3370  601f		       ee 40 70 	      inc	bender
   3371  6022		       ee 40 70 	      inc	bender
   3372  6025		       ee 40 70 	      inc	bender
   3373  6028		       a9 01		      lda	#1
   3374  602a		       8d 83 70 	      sta	benderAutoreset
   3375  602d				   notBender
   3376  602d		       60		      rts
   3377  602e
   3378  602e							; set VIC video chip mode
   3379  602e				   setVIC
   3380  602e		       8d 20 70 	      sta	VICMode
   3381  6031		       60		      rts
   3382  6032
   3383  6032							; set paddle on/off
   3384  6032				   ksetPaddles
   3385  6032		       20 3a 61 	      jsr	setPaddles
   3386  6035		       ad 57 70 	      lda	filter
   3387  6038		       8d 9d 70 	      sta	filterSetValue
   3388  603b							;jmp setFilter
   3389  603b
   3390  603b				   ksetPad2
   3391  603b		       8d 7a 70 	      sta	paddle2
   3392  603e		       c9 00		      cmp	#0
   3393  6040		       f0 03		      beq	skipLastPadSave
   3394  6042		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
   3395  6045				   skipLastPadSave
   3396  6045		       0a		      asl
   3397  6046		       0a		      asl
   3398  6047		       18		      clc
   3399  6048		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
   3400  604a		       aa		      tax
   3401  604b		       a0 c4		      ldy	#PAD2TEXT	; screen position
   3402  604d		       4c 03 67 	      jmp	updateText
   3403  6050
   3404  6050				   ksetFilter
   3405  6050		       a2 00		      ldx	#0
   3406  6052		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
   3407  6055							;jsr setFilter
   3408  6055		       8d 9d 70 	      sta	filterSetValue
   3409  6058		       a9 00		      lda	#0
   3410  605a		       4c 3a 61 	      jmp	setPaddles
   3411  605d
   3412  605d
   3413  605d				   kfiltOnOff
   3414  605d		       8c 6c 70 	      sty	filterStatus
   3415  6060				   setResonance
   3416  6060		       ac 6c 70 	      ldy	filterStatus
   3417  6063							;------------------
   3418  6063							;lda sidData+SFILTC
   3419  6063		       ad 97 70 	      lda	resonance
   3420  6066		       19 8d 60 	      ora	filtOrValue,y
   3421  6069		       39 90 60 	      and	filtAndValue,y
   3422  606c		       8d 17 d4 	      sta	SID1+SFILTC
   3423  606f		       8d 17 71 	      sta	sidData+SFILTC
   3424  6072							;------------------
   3425  6072		       ad 17 71 	      lda	sidData+SFILTC
   3426  6075		       19 8d 60 	      ora	filtOrValue,y
   3427  6078		       39 90 60 	      and	filtAndValue,y
   3428  607b		       8d 37 d4 	      sta	SID2+SFILTC
   3429  607e							;------------------
   3430  607e		       b9 93 60 	      lda	filtDisableValue,y
   3431  6081		       8d 5c 70 	      sta	filterDisable
   3432  6084							;------------------
   3433  6084				   showFiltOnOff
   3434  6084		       b9 96 60 	      lda	filtTextValue,y
   3435  6087		       aa		      tax
   3436  6088		       a0 4c		      ldy	#FILTERTEXT2
   3437  608a		       4c 03 67 	      jmp	updateText
   3438  608d
   3439  608d
   3440  608d				   filtOrValue
   3441  608d		       0f 00 00 	      byte.b	$0F,0,0
   3442  6090				   filtAndValue
   3443  6090		       ff f0 f0 	      byte.b	$FF,$F0,$F0
   3444  6093				   filtDisableValue
   3445  6093		       00 00 01 	      byte.b	0,0,1
   3446  6096				   filtTextValue
   3447  6096		       04 00 60 	      byte.b	4,0,DISABLED
   3448  6099
   3449  6099				   ksetTune
   3450  6099		       8c 71 70 	      sty	tuneSetting
   3451  609c
   3452  609c		       98		      tya
   3453  609d		       38		      sec
   3454  609e		       e9 04		      sbc	#4
   3455  60a0		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
   3456  60a3
   3457  60a3							;lda tuneArrPtrLL,y
   3458  60a3							;sta tunePtrL
   3459  60a3							;lda tuneArrPtrLH,y
   3460  60a3							;sta tunePtrL+1
   3461  60a3							;lda tuneArrPtrHL,y
   3462  60a3							;sta tunePtrH
   3463  60a3							;lda tuneArrPtrHH,y
   3464  60a3							;sta tunePtrH+1
   3465  60a3		       98		      tya
   3466  60a4		       0a		      asl
   3467  60a5		       0a		      asl
   3468  60a6		       18		      clc
   3469  60a7		       69 14		      adc	#TUNING
   3470  60a9		       aa		      tax
   3471  60aa		       a0 57		      ldy	#TUNINGTEXT
   3472  60ac		       4c 03 67 	      jmp	updateText
   3473  60af
   3474  60af
   3475  60af				   setFullScreenMode
   3476  60af		       8d 67 70 	      sta	fullScreenMode
   3477  60b2		       c9 00		      cmp	#0
   3478  60b4		       f0 11		      beq	notFullScreen
   3479  60b6							;--------
   3480  60b6		       a9 00		      lda	#<(PTRNTEXTBASE)
   3481  60b8		       85 2b		      sta	lowTextPtr
   3482  60ba		       a9 04		      lda	#>(PTRNTEXTBASE)
   3483  60bc		       85 2c		      sta	lowTextPtr+1
   3484  60be		       a9 00		      lda	#<(PTRNCOLORBASE)
   3485  60c0		       85 2d		      sta	lowColorPtr
   3486  60c2		       a9 d8		      lda	#>(PTRNCOLORBASE)
   3487  60c4		       85 2e		      sta	lowColorPtr+1
   3488  60c6		       60		      rts
   3489  60c7							;--------
   3490  60c7				   notFullScreen
   3491  60c7		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
   3492  60c9		       85 2b		      sta	lowTextPtr
   3493  60cb		       a9 04		      lda	#>(PTRNTEXTBASE+200)
   3494  60cd		       85 2c		      sta	lowTextPtr+1
   3495  60cf		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
   3496  60d1		       85 2d		      sta	lowColorPtr
   3497  60d3		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
   3498  60d5		       85 2e		      sta	lowColorPtr+1
   3499  60d7		       20 23 67 	      jsr	displayInit
   3500  60da		       60		      rts
   3501  60db
   3502  60db				   setHelpMode
   3503  60db		       8d 70 70 	      sta	helpMode
   3504  60de		       60		      rts
   3505  60df
   3506  60df							;--------------------------------
   3507  60df							; Set Sync
   3508  60df							;--------------------------------
   3509  60df							; This function does not appear to be used anywhere
   3510  60df							;--------------------------------
   3511  60df				   setSync
   3512  60df		       8d 45 70 	      sta	videoMode
   3513  60e2		       a8		      tay
   3514  60e3		       0a		      asl
   3515  60e4		       0a		      asl
   3516  60e5		       f0 1e		      beq	syncOff
   3517  60e7		       8d 0c 70 	      sta	temp
   3518  60ea		       0d 30 70 	      ora	WaveType
   3519  60ed		       8d 30 70 	      sta	WaveType
   3520  60f0		       ad 0c 70 	      lda	temp
   3521  60f3		       0d 37 70 	      ora	WaveType2
   3522  60f6		       8d 37 70 	      sta	WaveType2
   3523  60f9		       ad 0c 70 	      lda	temp
   3524  60fc		       0d 3e 70 	      ora	WaveType3
   3525  60ff		       8d 3e 70 	      sta	WaveType3
   3526  6102		       4c 22 61 	      jmp	contSync
   3527  6105				   syncOff
   3528  6105		       49 ff		      eor	#255
   3529  6107		       8d 0c 70 	      sta	temp
   3530  610a		       2d 30 70 	      and	WaveType
   3531  610d		       8d 30 70 	      sta	WaveType
   3532  6110		       ad 0c 70 	      lda	temp
   3533  6113		       2d 37 70 	      and	WaveType2
   3534  6116		       8d 37 70 	      sta	WaveType2
   3535  6119		       ad 0c 70 	      lda	temp
   3536  611c		       2d 3e 70 	      and	WaveType3
   3537  611f		       8d 3e 70 	      sta	WaveType3
   3538  6122				   contSync
   3539  6122		       98		      tya
   3540  6123		       0a		      asl
   3541  6124		       0a		      asl
   3542  6125		       aa		      tax
   3543  6126		       a0 12		      ldy	#SYNCTEXT
   3544  6128		       4c 03 67 	      jmp	updateText
   3545  612b		       60		      rts
   3546  612c
   3547  612c							;--------------------------------
   3548  612c							; Set Video Mode
   3549  612c							;--------------------------------
   3550  612c				   setVideoMode
   3551  612c		       8d 45 70 	      sta	videoMode
   3552  612f		       8c 68 70 	      sty	videoText
   3553  6132		       98		      tya
   3554  6133		       18		      clc
   3555  6134		       69 30		      adc	#"0"
   3556  6136		       8d bc 04 	      sta	1024+VIDEOTEXT
   3557  6139		       60		      rts
   3558  613a
   3559  613a							;--------------------------------
   3560  613a							; Set Paddles
   3561  613a							;--------------------------------
   3562  613a				   setPaddles
   3563  613a		       8d 29 70 	      sta	paddle
   3564  613d		       0a		      asl
   3565  613e		       d0 0c		      bne	noFilterReset
   3566  6140		       ae 57 70 	      ldx	filter
   3567  6143		       8e 16 d4 	      stx	SID1+SFILTH
   3568  6146		       8e 36 d4 	      stx	SID2+SFILTH
   3569  6149		       8d 16 71 	      sta	sidData+SFILTH
   3570  614c				   noFilterReset
   3571  614c		       a0 00		      ldy	#0
   3572  614e		       8c 76 70 	      sty	paddleTop
   3573  6151		       8c 77 70 	      sty	paddleBottom
   3574  6154				   showPaddle
   3575  6154		       0a		      asl
   3576  6155		       aa		      tax
   3577  6156		       a0 9c		      ldy	#PADDLETEXT
   3578  6158		       4c 03 67 	      jmp	updateText
   3579  615b
   3580  615b
   3581  615b							;--------------------------------
   3582  615b							; Set LFO Depth
   3583  615b							;--------------------------------
   3584  615b				   setLFODepth
   3585  615b		       8d 49 70 	      sta	LFODepth
   3586  615e							;showLFO:
   3587  615e		       ac 70 70 	      ldy	helpMode
   3588  6161		       f0 01		      beq	doShowLFO
   3589  6163		       60		      rts
   3590  6164				   doShowLFO
   3591  6164		       a0 6c		      ldy	#LFODEPTHTEXT
   3592  6166		       18		      clc
   3593  6167		       69 30		      adc	#"0"
   3594  6169		       99 00 04 	      sta	1024,y
   3595  616c		       a9 20		      lda	#32
   3596  616e		       a2 08		      ldx	#8
   3597  6170		       60		      rts
   3598  6171
   3599  6171
   3600  6171							;--------------------------------
   3601  6171							; Set LFO Rate
   3602  6171							;--------------------------------
   3603  6171				   setLFORate
   3604  6171		       8d 48 70 	      sta	LFORate
   3605  6174				   showLFORate
   3606  6174		       ac 70 70 	      ldy	helpMode
   3607  6177		       f0 01		      beq	doShowLFORate
   3608  6179		       60		      rts
   3609  617a				   doShowLFORate
   3610  617a		       a0 94		      ldy	#LFORATETEXT
   3611  617c		       18		      clc
   3612  617d		       69 30		      adc	#"0"
   3613  617f		       99 00 04 	      sta	1024,y
   3614  6182							;lda #32
   3615  6182		       a9 02		      lda	#CYNTHCART_COLOR
   3616  6184		       a2 08		      ldx	#8
   3617  6186				   LFOClear
   3618  6186							;sta 1064,x
   3619  6186		       9d 00 d8 	      sta	55296,x
   3620  6189		       ca		      dex
   3621  618a		       10 fa		      bpl	LFOClear
   3622  618c		       60		      rts
   3623  618d
   3624  618d							;--------------------------------
   3625  618d							; Set Release
   3626  618d							;--------------------------------
   3627  618d							; A = release value
   3628  618d				   setRelease
   3629  618d		       8d 6a 70 	      sta	release
   3630  6190		       8d 06 d4 	      sta	SID1+SV1SR
   3631  6193		       8d 0d d4 	      sta	SID1+SV2SR
   3632  6196		       8d 14 d4 	      sta	SID1+SV3SR
   3633  6199		       8d 26 d4 	      sta	SID2+SV1SR
   3634  619c		       8d 2d d4 	      sta	SID2+SV2SR
   3635  619f		       8d 34 d4 	      sta	SID2+SV3SR
   3636  61a2		       8d 06 71 	      sta	sidData+SV1SR
   3637  61a5		       8d 0d 71 	      sta	sidData+SV2SR
   3638  61a8		       8d 14 71 	      sta	sidData+SV3SR
   3639  61ab							;----------------
   3640  61ab				   showRelease
   3641  61ab		       ac 70 70 	      ldy	helpMode
   3642  61ae		       f0 01		      beq	doShowRelease
   3643  61b0		       60		      rts
   3644  61b1				   doShowRelease
   3645  61b1		       29 0f		      and	#$0F
   3646  61b3		       a8		      tay
   3647  61b4		       b9 de 61 	      lda	sixteenToTen,y
   3648  61b7		       18		      clc
   3649  61b8		       69 30		      adc	#"0"
   3650  61ba		       8d 8a 04 	      sta	1024+RELTEXT
   3651  61bd		       60		      rts
   3652  61be
   3653  61be		       a0 8a		      ldy	#RELTEXT
   3654  61c0		       a9 e0		      lda	#REL_SHORT
   3655  61c2		       cd 6a 70 	      cmp	release
   3656  61c5		       30 05		      bmi	notRel0
   3657  61c7		       a9 30		      lda	#"0"
   3658  61c9		       4c da 61 	      jmp	setReleaseText
   3659  61cc				   notRel0
   3660  61cc		       a9 e9		      lda	#REL_MED
   3661  61ce		       cd 6a 70 	      cmp	release
   3662  61d1		       30 05		      bmi	notRel1
   3663  61d3		       a9 31		      lda	#"1"
   3664  61d5		       4c da 61 	      jmp	setReleaseText
   3665  61d8				   notRel1
   3666  61d8		       a9 32		      lda	#"2"
   3667  61da				   setReleaseText
   3668  61da		       99 00 04 	      sta	1024,y
   3669  61dd		       60		      rts
   3670  61de
   3671  61de				   sixteenToTen
   3672  61de		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
   3673  61ee
   3674  61ee
   3675  61ee				   setMidiMode
   3676  61ee		       8d f7 70 	      sta	midiMode
   3677  61f1				   showMidiMode
   3678  61f1		       a9 2f		      lda	#47
   3679  61f3		       8d dc 07 	      sta	2012
   3680  61f6		       8d e1 07 	      sta	2017
   3681  61f9		       ae f7 70 	      ldx	midiMode
   3682  61fc		       30 19		      bmi	showOmni
   3683  61fe							;sta 2010
   3684  61fe				   showChannel
   3685  61fe		       a9 20		      lda	#32
   3686  6200		       8d d8 07 	      sta	2008
   3687  6203		       a9 03		      lda	#3
   3688  6205		       8d d9 07 	      sta	2009
   3689  6208		       a9 08		      lda	#8
   3690  620a		       8d da 07 	      sta	2010
   3691  620d		       a9 31		      lda	#49
   3692  620f		       18		      clc
   3693  6210		       6d f7 70 	      adc	midiMode
   3694  6213		       8d db 07 	      sta	2011
   3695  6216		       60		      rts
   3696  6217				   showOmni
   3697  6217		       a9 0f		      lda	#15
   3698  6219		       8d d8 07 	      sta	2008
   3699  621c		       a9 0d		      lda	#13
   3700  621e		       8d d9 07 	      sta	2009
   3701  6221		       a9 0e		      lda	#14
   3702  6223		       8d da 07 	      sta	2010
   3703  6226		       a9 09		      lda	#9
   3704  6228		       8d db 07 	      sta	2011
   3705  622b		       60		      rts
   3706  622c
   3707  622c							;--------------------------------
   3708  622c							; Set Attack
   3709  622c							;--------------------------------
   3710  622c							; A = Attack value
   3711  622c				   setAttack
   3712  622c		       8d 69 70 	      sta	attack
   3713  622f		       8d 0c d4 	      sta	SID1+SV2AD
   3714  6232		       8d 13 d4 	      sta	SID1+SV3AD
   3715  6235		       8d 2c d4 	      sta	SID2+SV2AD
   3716  6238		       8d 33 d4 	      sta	SID2+SV3AD
   3717  623b		       8d 05 d4 	      sta	SID1+SV1AD
   3718  623e		       8d 25 d4 	      sta	SID2+SV1AD
   3719  6241		       8d 0c 71 	      sta	sidData+SV2AD
   3720  6244		       8d 13 71 	      sta	sidData+SV3AD
   3721  6247		       8d 05 71 	      sta	sidData+SV1AD
   3722  624a							;----------------
   3723  624a				   showAttack
   3724  624a		       ac 70 70 	      ldy	helpMode
   3725  624d		       f0 01		      beq	doShowAttack
   3726  624f		       60		      rts
   3727  6250				   doShowAttack
   3728  6250		       4a		      lsr
   3729  6251		       4a		      lsr
   3730  6252		       4a		      lsr
   3731  6253		       4a		      lsr
   3732  6254		       a8		      tay
   3733  6255		       b9 de 61 	      lda	sixteenToTen,y
   3734  6258		       18		      clc
   3735  6259		       69 30		      adc	#"0"
   3736  625b		       8d 62 04 	      sta	1024+ATKTEXT
   3737  625e		       60		      rts
   3738  625f
   3739  625f
   3740  625f							;-----------------------------------
   3741  625f							; Set Volume to A (for key command)
   3742  625f							;-----------------------------------
   3743  625f				   ksetVolume
   3744  625f		       8d 1c 70 	      sta	volume
   3745  6262
   3746  6262
   3747  6262							;-----------------------------------
   3748  6262							; Set Volume
   3749  6262							;-----------------------------------
   3750  6262				   setVolume
   3751  6262		       ad 24 70 	      lda	volModeRAM
   3752  6265		       29 f0		      and	#$F0
   3753  6267		       0d 1c 70 	      ora	volume
   3754  626a		       8d 18 d4 	      sta	SID1+SVOLMODE
   3755  626d		       8d 38 d4 	      sta	SID2+SVOLMODE
   3756  6270		       8d 18 71 	      sta	sidData+SVOLMODE
   3757  6273				   showVolume
   3758  6273		       ac 70 70 	      ldy	helpMode
   3759  6276		       f0 01		      beq	doShowVolume
   3760  6278		       60		      rts
   3761  6279				   doShowVolume
   3762  6279		       29 0f		      and	#$0F
   3763  627b		       aa		      tax
   3764  627c		       bd de 61 	      lda	sixteenToTen,x
   3765  627f		       18		      clc
   3766  6280		       69 30		      adc	#"0"
   3767  6282		       8d a7 04 	      sta	1024+VOLTEXT
   3768  6285		       60		      rts
   3769  6286
   3770  6286		       aa		      tax
   3771  6287		       bd de 61 	      lda	sixteenToTen,x
   3772  628a		       aa		      tax
   3773  628b		       a0 a7		      ldy	#VOLTEXT
   3774  628d		       a9 07		      lda	#VOLLOW
   3775  628f		       20 03 67 	      jsr	updateText
   3776  6292		       60		      rts
   3777  6293
   3778  6293
   3779  6293							; set volume text
   3780  6293		       a0 a7		      ldy	#VOLTEXT
   3781  6295		       a9 07		      lda	#VOLLOW
   3782  6297		       cd 1c 70 	      cmp	volume
   3783  629a		       30 05		      bmi	notLow
   3784  629c		       a2 50		      ldx	#VLOW
   3785  629e		       4c 03 67 	      jmp	updateText
   3786  62a1				   notLow
   3787  62a1		       a9 0b		      lda	#VOLMED
   3788  62a3		       cd 1c 70 	      cmp	volume
   3789  62a6		       30 05		      bmi	notMed
   3790  62a8		       a2 54		      ldx	#VMED
   3791  62aa		       4c 03 67 	      jmp	updateText
   3792  62ad				   notMed
   3793  62ad		       a2 58		      ldx	#VHIGH
   3794  62af		       4c 03 67 	      jmp	updateText
   3795  62b2							;-------------------------------------
   3796  62b2
   3797  62b2
   3798  62b2							;-----------------------------------
   3799  62b2							; Set Octave
   3800  62b2							;-----------------------------------
   3801  62b2				   setOctave
   3802  62b2		       8d 6b 70 	      sta	octave
   3803  62b5		       aa		      tax
   3804  62b6		       bd a2 70 	      lda	octaveTable,x
   3805  62b9		       8d 22 70 	      sta	keyOffset
   3806  62bc				   showOctave
   3807  62bc		       ac 70 70 	      ldy	helpMode
   3808  62bf		       f0 01		      beq	doShowOctave
   3809  62c1		       60		      rts
   3810  62c2				   doShowOctave
   3811  62c2		       8a		      txa
   3812  62c3		       18		      clc
   3813  62c4		       69 30		      adc	#"0"
   3814  62c6		       aa		      tax
   3815  62c7		       8d 7f 04 	      sta	1024+OCTAVETEXT
   3816  62ca		       60		      rts
   3817  62cb
   3818  62cb							;-----------------------------------
   3819  62cb							; Set Filter
   3820  62cb							;-----------------------------------
   3821  62cb				   setFilter
   3822  62cb		       8d 16 d4 	      sta	SID1+SFILTH
   3823  62ce		       8d 36 d4 	      sta	SID2+SFILTH
   3824  62d1		       8d 16 71 	      sta	sidData+SFILTH
   3825  62d4
   3826  62d4		       8d 57 70 	      sta	filter
   3827  62d7				   showFilter
   3828  62d7		       ac 70 70 	      ldy	helpMode
   3829  62da		       f0 01		      beq	doShowFilter
   3830  62dc		       60		      rts
   3831  62dd				   doShowFilter
   3832  62dd		       4a		      lsr
   3833  62de		       4a		      lsr
   3834  62df		       4a		      lsr
   3835  62e0		       4a		      lsr
   3836  62e1		       4a		      lsr
   3837  62e2		       18		      clc
   3838  62e3		       69 30		      adc	#"0"
   3839  62e5				   endFilter
   3840  62e5		       8d 75 04 	      sta	1024+FILTERTEXT
   3841  62e8		       60		      rts
   3842  62e9
   3843  62e9
   3844  62e9							;-----------------------------------
   3845  62e9							; Set FX mode with A,Y (for key command)
   3846  62e9							;-----------------------------------
   3847  62e9				   ksetFX
   3848  62e9		       8d 86 70 	      sta	fxType
   3849  62ec							;-----------------------------------
   3850  62ec							; Set FX mode
   3851  62ec							;-----------------------------------
   3852  62ec				   setFX
   3853  62ec		       ad 70 70 	      lda	helpMode
   3854  62ef		       f0 01		      beq	doShowFX
   3855  62f1		       60		      rts
   3856  62f2				   doShowFX
   3857  62f2							;lda fxType
   3858  62f2
   3859  62f2							; Draw name of new sound mode on screen...
   3860  62f2		       ad 86 70 	      lda	fxType
   3861  62f5		       0a		      asl
   3862  62f6		       0a		      asl
   3863  62f7		       0a		      asl
   3864  62f8							;lda modeNameOffsets,x
   3865  62f8							;lda fxNames,x
   3866  62f8		       aa		      tax
   3867  62f9		       a0 00		      ldy	#0
   3868  62fb				   drawModeLoopFX
   3869  62fb							;lda modeNamesPolyphony,x
   3870  62fb		       bd 70 71 	      lda	fxNames,x
   3871  62fe		       c9 40		      cmp	#64
   3872  6300		       30 02		      bmi	showSpaceZFX
   3873  6302		       e9 40		      sbc	#64
   3874  6304				   showSpaceZFX
   3875  6304		       99 ae 04 	      sta	1024+FXTEXT,y
   3876  6307		       e8		      inx
   3877  6308		       c8		      iny
   3878  6309		       c0 05		      cpy	#5
   3879  630b		       d0 ee		      bne	drawModeLoopFX
   3880  630d							; - - - - -
   3881  630d							;inx ; Get polyphony value at end of name string...
   3882  630d							;inx
   3883  630d							;lda modeNamesPolyphony,x
   3884  630d							;sta polyphony
   3885  630d
   3886  630d							;lda #8
   3887  630d							;sta bufferSize
   3888  630d
   3889  630d		       60		      rts
   3890  630e
   3891  630e
   3892  630e
   3893  630e				   portSpeedTable
   3894  630e		       06 07 09 	      byte.b	6,7,9
   3895  6311							;byte 5,7,9
   3896  6311
   3897  6311							;-----------------------------------
   3898  6311							; set port with A,Y (for key command)
   3899  6311							;-----------------------------------
   3900  6311				   ksetMode
   3901  6311							;sta portOn
   3902  6311		       8d 1d 70 	      sta	soundMode
   3903  6314							;sty portSpd
   3904  6314							; . . . . . . . . . .
   3905  6314							;-----------------------------------
   3906  6314							; Set sound mode
   3907  6314							;-----------------------------------
   3908  6314				   setMode
   3909  6314				   showModeName
   3910  6314		       ac 70 70 	      ldy	helpMode
   3911  6317		       f0 01		      beq	doShowModeName
   3912  6319		       60		      rts
   3913  631a				   doShowModeName
   3914  631a
   3915  631a		       ad 1d 70 	      lda	soundMode	; This probably needs work
   3916  631d
   3917  631d							; Draw name of new sound mode on screen...
   3918  631d		       ae 1d 70 	      ldx	soundMode
   3919  6320		       bd be 7a 	      lda	modeNameOffsets,x
   3920  6323		       aa		      tax
   3921  6324		       a0 00		      ldy	#0
   3922  6326				   drawModeLoop
   3923  6326		       bd 46 7a 	      lda	modeNamesPolyphony,x
   3924  6329		       c9 40		      cmp	#64
   3925  632b		       30 02		      bmi	showSpaceZ
   3926  632d		       e9 40		      sbc	#64
   3927  632f				   showSpaceZ
   3928  632f		       99 2d 04 	      sta	1024+MODETEXT,y
   3929  6332		       e8		      inx
   3930  6333		       c8		      iny
   3931  6334		       c0 05		      cpy	#5
   3932  6336		       d0 ee		      bne	drawModeLoop
   3933  6338							; - - - - -
   3934  6338		       e8		      inx		; Get polyphony value at end of name string...
   3935  6339		       e8		      inx
   3936  633a		       bd 46 7a 	      lda	modeNamesPolyphony,x
   3937  633d		       8d 84 70 	      sta	polyphony
   3938  6340
   3939  6340		       a9 08		      lda	#8
   3940  6342		       8d 80 70 	      sta	bufferSize
   3941  6345
   3942  6345
   3943  6345							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3944  6345							;sta 1024+161 ;DEBUG
   3945  6345							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3946  6345
   3947  6345
   3948  6345							; set up pointer to portamento speed array
   3949  6345							; (which is the tuning array)
   3950  6345							;lda portSpd
   3951  6345							;clc
   3952  6345							;adc #4
   3953  6345
   3954  6345							; New version of code above...
   3955  6345		       ad 1d 70 	      lda	soundMode
   3956  6348		       29 0f		      and	#$0F	; Get portamento speed
   3957  634a		       a8		      tay
   3958  634b		       b9 0e 63 	      lda	portSpeedTable,y
   3959  634e
   3960  634e							;clc
   3961  634e							;asl ; X2
   3962  634e							;adc #5
   3963  634e
   3964  634e		       a8		      tay
   3965  634f							;	ldy #5 ; portSpd DEBUG
   3966  634f		       b9 26 7b 	      lda	tuneArrPtrLL,y
   3967  6352		       85 35		      sta	portPtrL
   3968  6354		       b9 30 7b 	      lda	tuneArrPtrLH,y
   3969  6357		       85 36		      sta	portPtrL+1
   3970  6359		       b9 3a 7b 	      lda	tuneArrPtrHL,y
   3971  635c		       85 47		      sta	portPtrH
   3972  635e		       b9 44 7b 	      lda	tuneArrPtrHH,y
   3973  6361		       85 48		      sta	portPtrH+1
   3974  6363		       60		      rts
   3975  6364
   3976  6364
   3977  6364							;----------------------------------------
   3978  6364							; subroutine to set up patch
   3979  6364							; (patch # stored in Y)
   3980  6364							;----------------------------------------
   3981  6364				   setPatch
   3982  6364
   3983  6364		       8c 47 70 	      sty	patchSetY
   3984  6367
   3985  6367		       b9 ee 6f 	      lda	patchVol,y
   3986  636a		       8d 1c 70 	      sta	volume
   3987  636d
   3988  636d		       b9 b2 6f 	      lda	patchPaddle,y
   3989  6370		       20 3a 61 	      jsr	setPaddles
   3990  6373
   3991  6373							;.....................
   3992  6373		       20 67 5d 	      jsr	midiPanic
   3993  6376							;.....................
   3994  6376
   3995  6376							; Reset modulation values
   3996  6376		       a9 7f		      lda	#127
   3997  6378		       8d 9c 70 	      sta	filterModValue
   3998  637b		       8d 9e 70 	      sta	pwModValue
   3999  637e
   4000  637e		       ac 47 70 	      ldy	patchSetY
   4001  6381		       b9 d0 6f 	      lda	newPatchFiltCut,y
   4002  6384		       8d 9d 70 	      sta	filterSetValue
   4003  6387							;jsr setFilter
   4004  6387
   4005  6387							;lda patchFilt,y
   4006  6387							;sta SID1+SV1PWL
   4007  6387
   4008  6387
   4009  6387		       ac 47 70 	      ldy	patchSetY
   4010  638a		       b9 fd 6e 	      lda	patchSoundMode,y
   4011  638d		       8d 1d 70 	      sta	soundMode
   4012  6390		       20 14 63 	      jsr	setMode
   4013  6393
   4014  6393		       ac 47 70 	      ldy	patchSetY
   4015  6396		       b9 0c 70 	      lda	patchPWL,y
   4016  6399		       8d 02 d4 	      sta	SID1+SV1PWL
   4017  639c		       8d 09 d4 	      sta	SID1+SV2PWL
   4018  639f		       8d 10 d4 	      sta	SID1+SV3PWL
   4019  63a2		       8d 22 d4 	      sta	SID2+SV1PWL
   4020  63a5		       8d 29 d4 	      sta	SID2+SV2PWL
   4021  63a8		       8d 30 d4 	      sta	SID2+SV3PWL
   4022  63ab		       8d 02 71 	      sta	sidData+SV1PWL
   4023  63ae		       8d 09 71 	      sta	sidData+SV2PWL
   4024  63b1		       8d 10 71 	      sta	sidData+SV3PWL
   4025  63b4
   4026  63b4		       ac 47 70 	      ldy	patchSetY
   4027  63b7		       b9 2a 70 	      lda	patchPWH,y
   4028  63ba		       8d 03 d4 	      sta	SID1+SV1PWH
   4029  63bd		       8d 0a d4 	      sta	SID1+SV2PWH
   4030  63c0		       8d 11 d4 	      sta	SID1+SV3PWH
   4031  63c3		       8d 23 d4 	      sta	SID2+SV1PWH
   4032  63c6		       8d 2a d4 	      sta	SID2+SV2PWH
   4033  63c9		       8d 31 d4 	      sta	SID2+SV3PWH
   4034  63cc		       8d 03 71 	      sta	sidData+SV1PWH
   4035  63cf		       8d 0a 71 	      sta	sidData+SV2PWH
   4036  63d2		       8d 11 71 	      sta	sidData+SV3PWH
   4037  63d5
   4038  63d5		       ac 47 70 	      ldy	patchSetY
   4039  63d8		       b9 48 70 	      lda	patchWave,y
   4040  63db		       8d 37 70 	      sta	WaveType2
   4041  63de		       8d 3e 70 	      sta	WaveType3
   4042  63e1		       8d 30 70 	      sta	WaveType
   4043  63e4
   4044  63e4		       ac 47 70 	      ldy	patchSetY
   4045  63e7		       b9 3a 6f 	      lda	patchLFO,y
   4046  63ea		       29 0f		      and	#$0F
   4047  63ec		       8c 0c 70 	      sty	temp
   4048  63ef		       20 71 61 	      jsr	setLFORate
   4049  63f2		       ac 0c 70 	      ldy	temp
   4050  63f5		       b9 3a 6f 	      lda	patchLFO,y
   4051  63f8		       29 f0		      and	#$F0
   4052  63fa		       4a		      lsr
   4053  63fb		       4a		      lsr
   4054  63fc		       4a		      lsr
   4055  63fd		       4a		      lsr
   4056  63fe							;lda #2
   4057  63fe		       20 5b 61 	      jsr	setLFODepth
   4058  6401
   4059  6401		       ac 0c 70 	      ldy	temp
   4060  6404		       b9 76 6f 	      lda	patchAD,y
   4061  6407							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
   4062  6407							;lda #$F0
   4063  6407		       20 2c 62 	      jsr	setAttack
   4064  640a		       ac 47 70 	      ldy	patchSetY
   4065  640d
   4066  640d		       ac 0c 70 	      ldy	temp
   4067  6410		       b9 94 6f 	      lda	patchSR,y
   4068  6413		       20 8d 61 	      jsr	setRelease
   4069  6416		       ac 47 70 	      ldy	patchSetY
   4070  6419
   4071  6419		       b9 66 70 	      lda	patchFilt,y
   4072  641c		       ae 5c 70 	      ldx	filterDisable
   4073  641f		       f0 02		      beq	skipFilterDisable
   4074  6421		       29 f0		      and	#$F0
   4075  6423				   skipFilterDisable
   4076  6423		       8d 17 d4 	      sta	SID1+SFILTC
   4077  6426		       8d 37 d4 	      sta	SID2+SFILTC
   4078  6429		       8d 17 71 	      sta	sidData+SFILTC
   4079  642c		       29 01		      and	#$01
   4080  642e		       f0 07		      beq	skipFilterOnText
   4081  6430		       a0 4c		      ldy	#FILTERTEXT2
   4082  6432		       a2 04		      ldx	#4
   4083  6434		       20 03 67 	      jsr	updateText
   4084  6437				   skipFilterOnText
   4085  6437		       ac 47 70 	      ldy	patchSetY
   4086  643a
   4087  643a		       b9 84 70 	      lda	patchVolMode,y
   4088  643d		       29 f0		      and	#$F0
   4089  643f		       0d 1c 70 	      ora	volume
   4090  6442		       8d 24 70 	      sta	volModeRAM
   4091  6445		       20 62 62 	      jsr	setVolume
   4092  6448		       ac 47 70 	      ldy	patchSetY
   4093  644b
   4094  644b		       b9 58 6f 	      lda	patchOctave,y
   4095  644e		       20 b2 62 	      jsr	setOctave
   4096  6451		       ac 47 70 	      ldy	patchSetY
   4097  6454
   4098  6454		       b9 1c 6f 	      lda	patchFX,y
   4099  6457		       8d 86 70 	      sta	fxType
   4100  645a		       20 ec 62 	      jsr	setFX
   4101  645d
   4102  645d		       20 61 64 	      jsr	showPatchName
   4103  6460
   4104  6460		       60		      rts
   4105  6461							;------------------------ end of setpatch
   4106  6461
   4107  6461				   showPatchName
   4108  6461		       ad 70 70 	      lda	helpMode
   4109  6464		       f0 01		      beq	doShowPatchName
   4110  6466		       60		      rts
   4111  6467				   doShowPatchName
   4112  6467		       ad 47 70 	      lda	patchSetY
   4113  646a		       29 f0		      and	#%11110000
   4114  646c		       d0 1f		      bne	patchNameSecondBank
   4115  646e							;tay
   4116  646e		       ac 47 70 	      ldy	patchSetY
   4117  6471		       c8		      iny
   4118  6472		       98		      tya
   4119  6473		       0a		      asl
   4120  6474		       0a		      asl
   4121  6475		       0a		      asl
   4122  6476		       0a		      asl
   4123  6477		       a8		      tay
   4124  6478		       88		      dey
   4125  6479		       a2 0f		      ldx	#15
   4126  647b				   patchText
   4127  647b		       b9 fd 6c 	      lda	patchName,y
   4128  647e		       c9 40		      cmp	#64
   4129  6480		       30 03		      bmi	pshowSpace
   4130  6482		       38		      sec
   4131  6483		       e9 40		      sbc	#64
   4132  6485				   pshowSpace
   4133  6485		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4134  6488		       88		      dey
   4135  6489		       ca		      dex
   4136  648a		       10 ef		      bpl	patchText
   4137  648c		       60		      rts
   4138  648d
   4139  648d				   patchNameSecondBank
   4140  648d							;tay
   4141  648d		       ac 47 70 	      ldy	patchSetY
   4142  6490		       c8		      iny
   4143  6491		       98		      tya
   4144  6492		       0a		      asl
   4145  6493		       0a		      asl
   4146  6494		       0a		      asl
   4147  6495		       0a		      asl
   4148  6496		       a8		      tay
   4149  6497		       88		      dey
   4150  6498		       a2 0f		      ldx	#15
   4151  649a				   patchText2
   4152  649a		       b9 fd 6d 	      lda	patchName2,y
   4153  649d		       c9 40		      cmp	#64
   4154  649f		       30 03		      bmi	pshowSpace2
   4155  64a1		       38		      sec
   4156  64a2		       e9 40		      sbc	#64
   4157  64a4				   pshowSpace2
   4158  64a4		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4159  64a7		       88		      dey
   4160  64a8		       ca		      dex
   4161  64a9		       10 ef		      bpl	patchText2
   4162  64ab		       60		      rts
   4163  64ac
   4164  64ac
   4165  64ac
   4166  64ac		       00 04	   HEX_DISP_OFFSET equ	4
   4167  64ac
   4168  64ac
   4169  64ac							;---------------------------------
   4170  64ac							; Wait until no hex key is down
   4171  64ac							; (doesn't check all keys, only hex keys!)
   4172  64ac				   waitForKeyRelease
   4173  64ac		       20 5d 66 	      jsr	readHexKey
   4174  64af		       c9 ff		      cmp	#255
   4175  64b1		       d0 f9		      bne	waitForKeyRelease
   4176  64b3		       a2 ff		      ldx	#255	; Always 255
   4177  64b5		       a0 60		      ldy	#96	; Delay amount
   4178  64b7				   delay		; Delay a short time to avoid catching key bounce...
   4179  64b7		       ca		      dex
   4180  64b8		       d0 fd		      bne	delay
   4181  64ba		       88		      dey
   4182  64bb		       d0 fa		      bne	delay
   4183  64bd		       60		      rts
   4184  64be
   4185  64be
   4186  64be							;===============================================
   4187  64be							; Allow the user to hex edit the SID registers
   4188  64be							; directly.
   4189  64be				   SIDEdit
   4190  64be
   4191  64be		       8d 60 70 	      sta	hexKeyMode
   4192  64c1
   4193  64c1		       20 d3 66 	      jsr	beep
   4194  64c4		       20 d3 66 	      jsr	beep
   4195  64c7		       20 d3 66 	      jsr	beep
   4196  64ca
   4197  64ca		       20 34 68 	      jsr	clrScr
   4198  64cd		       20 23 67 	      jsr	displayInit
   4199  64d0
   4200  64d0							; X = low data address
   4201  64d0							; Y = high data address
   4202  64d0		       a2 71		      ldx	#>hexEditHelp	;low/MSB
   4203  64d2		       a0 b8		      ldy	#<hexEditHelp	;high/LSB
   4204  64d4		       20 8b 68 	      jsr	displayPage
   4205  64d7
   4206  64d7		       20 e2 65 	      jsr	showSidValues
   4207  64da
   4208  64da
   4209  64da							;enable keyboard interrupt
   4210  64da							;	lda #129
   4211  64da							;	sta 56333
   4212  64da							; wait for all keys to be released first
   4213  64da							;waitForNoKey:
   4214  64da							;	lda 197
   4215  64da							;	cmp #64
   4216  64da							;	bne waitForNoKey
   4217  64da
   4218  64da
   4219  64da							; clear top line
   4220  64da		       a2 09		      ldx	#9
   4221  64dc		       a9 20		      lda	#32
   4222  64de				   hexClearA
   4223  64de		       9d 00 04 	      sta	1024,x
   4224  64e1		       ca		      dex
   4225  64e2		       10 fa		      bpl	hexClearA
   4226  64e4
   4227  64e4							; display "sid edit" text
   4228  64e4		       a2 5c		      ldx	#92
   4229  64e6		       a0 00		      ldy	#0
   4230  64e8		       20 03 67 	      jsr	updateText
   4231  64eb
   4232  64eb							;jsr waitForKeyRelease
   4233  64eb
   4234  64eb							; get/display the first hex digit of the address to edit
   4235  64eb		       a9 24		      lda	#36
   4236  64ed		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4237  64f0		       20 52 66 	      jsr	getHexKey
   4238  64f3		       aa		      tax
   4239  64f4		       0a		      asl
   4240  64f5		       0a		      asl
   4241  64f6		       0a		      asl
   4242  64f7		       0a		      asl
   4243  64f8		       8d 5a 70 	      sta	SIDeditAddr
   4244  64fb		       bd 52 7b 	      lda	hexDisplay,x
   4245  64fe		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4246  6501
   4247  6501							;sta 1024
   4248  6501							;jsr waitForKeyRelease
   4249  6501							;sta 1024
   4250  6501
   4251  6501							; get/display the second hex digit of the address to edit
   4252  6501		       a9 24		      lda	#36
   4253  6503		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4254  6506		       20 52 66 	      jsr	getHexKey
   4255  6509		       aa		      tax
   4256  650a		       0d 5a 70 	      ora	SIDeditAddr
   4257  650d		       8d 5a 70 	      sta	SIDeditAddr
   4258  6510		       bd 52 7b 	      lda	hexDisplay,x
   4259  6513		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4260  6516
   4261  6516							; display a '>' between
   4262  6516		       a9 3e		      lda	#62
   4263  6518		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
   4264  651b
   4265  651b							; get/display the first hex digit of the value to write
   4266  651b		       a9 24		      lda	#36
   4267  651d		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4268  6520		       20 52 66 	      jsr	getHexKey
   4269  6523		       aa		      tax
   4270  6524		       0a		      asl
   4271  6525		       0a		      asl
   4272  6526		       0a		      asl
   4273  6527		       0a		      asl
   4274  6528		       8d 5b 70 	      sta	SIDeditValue
   4275  652b		       bd 52 7b 	      lda	hexDisplay,x
   4276  652e		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4277  6531
   4278  6531							; get/display the second hex digit of the value to write
   4279  6531		       a9 24		      lda	#36
   4280  6533		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4281  6536		       20 52 66 	      jsr	getHexKey
   4282  6539		       aa		      tax
   4283  653a		       0d 5b 70 	      ora	SIDeditValue
   4284  653d		       8d 5b 70 	      sta	SIDeditValue
   4285  6540		       bd 52 7b 	      lda	hexDisplay,x
   4286  6543		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4287  6546
   4288  6546							; if <=$20 then write to all 3 SID oscillator regs
   4289  6546		       ae 5a 70 	      ldx	SIDeditAddr
   4290  6549		       e0 20		      cpx	#$20
   4291  654b		       30 2e		      bmi	normalWrite
   4292  654d							;--------------
   4293  654d		       ad 5b 70 	      lda	SIDeditValue
   4294  6550		       9d e0 d3 	      sta	SID1-32,x
   4295  6553		       9d 00 d4 	      sta	SID2-32,x
   4296  6556		       9d e0 70 	      sta	sidData-32,x
   4297  6559		       9d e7 d3 	      sta	SID1-32+#$7,x
   4298  655c		       9d 07 d4 	      sta	SID2-32+#$7,x
   4299  655f		       9d e7 70 	      sta	sidData-32+#$7,x
   4300  6562		       9d ee d3 	      sta	SID1-32+#$E,x
   4301  6565		       9d 0e d4 	      sta	SID2-32+#$E,x
   4302  6568		       9d ee 70 	      sta	sidData-32+#$E,x
   4303  656b		       e0 24		      cpx	#SV1WAVE+32
   4304  656d		       d0 09		      bne	no3Wave
   4305  656f		       8d 30 70 	      sta	WaveType
   4306  6572		       8d 37 70 	      sta	WaveType2
   4307  6575		       8d 3e 70 	      sta	WaveType3
   4308  6578				   no3Wave
   4309  6578		       4c b6 65 	      jmp	skipNormalWrite
   4310  657b							;...............
   4311  657b				   normalWrite
   4312  657b							; write the value to both sids
   4313  657b		       ae 5a 70 	      ldx	SIDeditAddr
   4314  657e		       ad 5b 70 	      lda	SIDeditValue
   4315  6581		       9d 00 d4 	      sta	SID1,x
   4316  6584		       9d 20 d4 	      sta	SID2,x
   4317  6587		       9d 00 71 	      sta	sidData,x
   4318  658a
   4319  658a		       e0 04		      cpx	#SV1WAVE
   4320  658c		       d0 03		      bne	noWave1
   4321  658e		       8d 30 70 	      sta	WaveType
   4322  6591				   noWave1
   4323  6591
   4324  6591		       e0 0b		      cpx	#SV2WAVE
   4325  6593		       d0 03		      bne	noWave2
   4326  6595		       8d 37 70 	      sta	WaveType2
   4327  6598				   noWave2
   4328  6598
   4329  6598		       e0 12		      cpx	#SV3WAVE
   4330  659a		       d0 03		      bne	noWave3
   4331  659c		       8d 3e 70 	      sta	WaveType3
   4332  659f				   noWave3
   4333  659f
   4334  659f		       e0 16		      cpx	#SFILTH
   4335  65a1		       d0 03		      bne	noFiltSave
   4336  65a3		       8d 57 70 	      sta	filter
   4337  65a6				   noFiltSave
   4338  65a6
   4339  65a6							; turn off paddles if filter was adjusted
   4340  65a6		       e0 15		      cpx	#SFILTL
   4341  65a8		       f0 04		      beq	paddleOffhex
   4342  65aa		       e0 16		      cpx	#SFILTH
   4343  65ac		       d0 08		      bne	noPaddleOff
   4344  65ae				   paddleOffhex
   4345  65ae		       a9 00		      lda	#0
   4346  65b0		       8d 29 70 	      sta	paddle	; turn off paddle controller first
   4347  65b3		       20 54 61 	      jsr	showPaddle
   4348  65b6				   noPaddleOff
   4349  65b6
   4350  65b6				   skipNormalWrite
   4351  65b6		       ae 5a 70 	      ldx	SIDeditAddr
   4352  65b9		       ad 5b 70 	      lda	SIDeditValue
   4353  65bc
   4354  65bc							; check for a volume/mode change...
   4355  65bc							; if changed, write it to related variables too
   4356  65bc		       e0 18		      cpx	#SVOLMODE
   4357  65be		       d0 10		      bne	noVolumeSetting
   4358  65c0		       8d 0c 70 	      sta	temp
   4359  65c3		       29 f0		      and	#$F0
   4360  65c5		       8d 24 70 	      sta	volModeRAM
   4361  65c8		       ad 0c 70 	      lda	temp
   4362  65cb		       29 0f		      and	#$0F
   4363  65cd		       8d 1c 70 	      sta	volume
   4364  65d0				   noVolumeSetting
   4365  65d0							;	lda volModeRAM
   4366  65d0							;	and #$F0
   4367  65d0							;	ora volume
   4368  65d0
   4369  65d0							; wait for key to be released before returning
   4370  65d0				   waitKeyRelease
   4371  65d0		       a5 c5		      lda	197
   4372  65d2		       c9 40		      cmp	#64
   4373  65d4		       d0 fa		      bne	waitKeyRelease
   4374  65d6
   4375  65d6							; reset volume (messed up from clicks)
   4376  65d6		       20 62 62 	      jsr	setVolume
   4377  65d9
   4378  65d9		       a9 00		      lda	#0
   4379  65db							;sta helpMode
   4380  65db		       20 db 60 	      jsr	setHelpMode
   4381  65de		       20 23 67 	      jsr	displayInit
   4382  65e1							; X = low data address
   4383  65e1							; Y = high data address
   4384  65e1							;	ldx #>hexEditHelp ;low/MSB
   4385  65e1							;	ldy #<hexEditHelp ;high/LSB
   4386  65e1							;	jsr displayPage
   4387  65e1							;	jsr showSidValues
   4388  65e1
   4389  65e1		       60		      rts
   4390  65e2
   4391  65e2
   4392  65e2
   4393  65e2							;************************************
   4394  65e2				   showSidValues
   4395  65e2		       a0 02		      ldy	#2
   4396  65e4				   sidDispLoop1
   4397  65e4		       8c 73 70 	      sty	sidTemp1
   4398  65e7		       b9 00 71 	      lda	sidData,y
   4399  65ea		       8d 74 70 	      sta	sidTemp2
   4400  65ed		       98		      tya
   4401  65ee		       0a		      asl
   4402  65ef		       18		      clc
   4403  65f0		       69 04		      adc	#4
   4404  65f2		       a8		      tay
   4405  65f3		       ad 74 70 	      lda	sidTemp2
   4406  65f6		       a2 06		      ldx	#6
   4407  65f8		       20 48 68 	      jsr	displayHex
   4408  65fb		       ac 73 70 	      ldy	sidTemp1
   4409  65fe							;---------------
   4410  65fe		       b9 07 71 	      lda	sidData+7,y
   4411  6601		       8d 74 70 	      sta	sidTemp2
   4412  6604		       98		      tya
   4413  6605		       0a		      asl
   4414  6606		       18		      clc
   4415  6607		       69 04		      adc	#4
   4416  6609		       a8		      tay
   4417  660a		       ad 74 70 	      lda	sidTemp2
   4418  660d		       a2 0a		      ldx	#10
   4419  660f		       20 48 68 	      jsr	displayHex
   4420  6612		       ac 73 70 	      ldy	sidTemp1
   4421  6615							;---------------
   4422  6615		       b9 0e 71 	      lda	sidData+14,y
   4423  6618		       8d 74 70 	      sta	sidTemp2
   4424  661b		       98		      tya
   4425  661c		       0a		      asl
   4426  661d		       18		      clc
   4427  661e		       69 04		      adc	#4
   4428  6620		       a8		      tay
   4429  6621		       ad 74 70 	      lda	sidTemp2
   4430  6624		       a2 0e		      ldx	#14
   4431  6626		       20 48 68 	      jsr	displayHex
   4432  6629		       ac 73 70 	      ldy	sidTemp1
   4433  662c
   4434  662c		       c8		      iny
   4435  662d		       c0 07		      cpy	#7
   4436  662f		       d0 b3		      bne	sidDispLoop1
   4437  6631							;---------------
   4438  6631							;---------------
   4439  6631		       a0 15		      ldy	#$15
   4440  6633				   sidDispLoop2
   4441  6633		       8c 73 70 	      sty	sidTemp1
   4442  6636		       b9 00 71 	      lda	sidData,y
   4443  6639		       8d 74 70 	      sta	sidTemp2
   4444  663c		       98		      tya
   4445  663d		       38		      sec
   4446  663e		       e9 02		      sbc	#2
   4447  6640		       a8		      tay
   4448  6641		       ad 74 70 	      lda	sidTemp2
   4449  6644		       a2 05		      ldx	#5
   4450  6646		       20 48 68 	      jsr	displayHex
   4451  6649		       ac 73 70 	      ldy	sidTemp1
   4452  664c
   4453  664c		       c8		      iny
   4454  664d		       c0 19		      cpy	#$19
   4455  664f		       d0 e2		      bne	sidDispLoop2
   4456  6651							;---------------
   4457  6651		       60		      rts
   4458  6652
   4459  6652
   4460  6652
   4461  6652							;=======================================================================
   4462  6652							; waits for user to press a key (0-F) and returns
   4463  6652							; the value in A
   4464  6652				   getHexKey
   4465  6652		       20 ac 64 	      jsr	waitForKeyRelease
   4466  6655				   getHexLoop
   4467  6655							;inc 1024
   4468  6655		       20 5d 66 	      jsr	readHexKey
   4469  6658		       c9 ff		      cmp	#255
   4470  665a		       f0 f9		      beq	getHexLoop
   4471  665c							;inc 1025
   4472  665c		       60		      rts
   4473  665d
   4474  665d
   4475  665d
   4476  665d							;=======================================================================
   4477  665d							; Returns the currently pressed hex key, or #255 if none
   4478  665d							; is currently pressed
   4479  665d				   readHexKey
   4480  665d
   4481  665d		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4482  6660							;sta 1024
   4483  6660		       f0 1a		      beq	normalHexKey
   4484  6662
   4485  6662							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4486  6662							; Use piano keys to enter hex numbers
   4487  6662				   pianoHexKey
   4488  6662		       a0 00		      ldy	#0
   4489  6664				   checkLoop2
   4490  6664		       b9 61 69 	      lda	hexColPiano,y
   4491  6667		       f0 10		      beq	quitCheck2
   4492  6669		       8d 00 dc 	      sta	56320
   4493  666c		       ad 01 dc 	      lda	56321
   4494  666f		       39 83 69 	      and	hexRowPiano,y
   4495  6672		       d0 02		      bne	notPressed2
   4496  6674		       98		      tya
   4497  6675							;sta 1027
   4498  6675		       60		      rts
   4499  6676							;jmp quitCheck2
   4500  6676				   notPressed2
   4501  6676		       c8		      iny
   4502  6677		       d0 eb		      bne	checkLoop2
   4503  6679				   quitCheck2
   4504  6679		       a9 ff		      lda	#255	; no key pressed
   4505  667b		       60		      rts
   4506  667c							;jmp pianoHexKey
   4507  667c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4508  667c
   4509  667c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4510  667c							; Use normal keys (0-9,A-F) to enter hex numbers
   4511  667c				   normalHexKey
   4512  667c		       a0 00		      ldy	#0
   4513  667e				   checkLoop3
   4514  667e		       b9 72 69 	      lda	hexCol,y
   4515  6681		       f0 10		      beq	quitCheck3
   4516  6683		       8d 00 dc 	      sta	56320
   4517  6686		       ad 01 dc 	      lda	56321
   4518  6689		       39 94 69 	      and	hexRow,y
   4519  668c		       d0 02		      bne	notPressed3
   4520  668e		       98		      tya
   4521  668f							;sta 1027
   4522  668f		       60		      rts
   4523  6690							;jmp quitCheck3
   4524  6690				   notPressed3
   4525  6690		       c8		      iny
   4526  6691		       d0 eb		      bne	checkLoop3
   4527  6693				   quitCheck3
   4528  6693		       a9 ff		      lda	#255	; no key pressed
   4529  6695		       60		      rts
   4530  6696							;jmp normalHexKey
   4531  6696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4532  6696
   4533  6696
   4534  6696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4535  6696							;lda #<shiftKeyFunctions		;
   4536  6696							;sta keyPtrL						;
   4537  6696							;lda #>shiftKeyFunctions		;-
   4538  6696							;sta keyPtrH
   4539  6696							;jmp doKeyCheck
   4540  6696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4541  6696
   4542  6696							;sei
   4543  6696
   4544  6696							;enable keyboard interrupt
   4545  6696		       a9 81		      lda	#129
   4546  6698		       8d 0d dc 	      sta	56333
   4547  669b
   4548  669b		       8d 00 04 	      sta	1024
   4549  669e
   4550  669e		       a5 c5		      lda	197
   4551  66a0		       cd 5d 70 	      cmp	lastKey
   4552  66a3		       f0 ad		      beq	getHexKey
   4553  66a5				   restartHexKey
   4554  66a5		       a2 00		      ldx	#0
   4555  66a7		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4556  66aa		       f0 02		      beq	noAltKeyMode
   4557  66ac		       a2 10		      ldx	#16	; use alternate keys for piano keyboard
   4558  66ae				   noAltKeyMode
   4559  66ae		       a5 c5		      lda	197
   4560  66b0				   keyCmpLoop
   4561  66b0							;sta 1026
   4562  66b0							;stx 1025
   4563  66b0		       dd 62 7b 	      cmp	keyData,x
   4564  66b3		       f0 0c		      beq	foundKey
   4565  66b5		       e8		      inx
   4566  66b6		       e0 10		      cpx	#16
   4567  66b8		       f0 eb		      beq	restartHexKey
   4568  66ba		       e0 20		      cpx	#32
   4569  66bc		       f0 e7		      beq	restartHexKey
   4570  66be		       4c b0 66 	      jmp	keyCmpLoop
   4571  66c1				   foundKey
   4572  66c1		       8d 5d 70 	      sta	lastKey
   4573  66c4
   4574  66c4		       20 d3 66 	      jsr	beep
   4575  66c7							;	jsr beep
   4576  66c7
   4577  66c7		       ad 60 70 	      lda	hexKeyMode
   4578  66ca		       f0 05		      beq	noKeySubtract
   4579  66cc		       8a		      txa
   4580  66cd		       38		      sec
   4581  66ce		       e9 10		      sbc	#16
   4582  66d0		       aa		      tax
   4583  66d1				   noKeySubtract
   4584  66d1
   4585  66d1		       8a		      txa
   4586  66d2
   4587  66d2
   4588  66d2		       60		      rts
   4589  66d3
   4590  66d3				   beep
   4591  66d3							;	lda #$10
   4592  66d3							;	sta SID1+SV1FH
   4593  66d3		       ad 24 70 	      lda	volModeRAM
   4594  66d6		       09 0f		      ora	#$0F
   4595  66d8		       8d 18 d4 	      sta	SID1+SVOLMODE
   4596  66db		       8d 38 d4 	      sta	SID2+SVOLMODE
   4597  66de		       8d 18 71 	      sta	sidData+SVOLMODE
   4598  66e1							;	lda SID1+SV1WAVE
   4599  66e1							;	ora #$01
   4600  66e1							;	sta SID1+SV1WAVE
   4601  66e1		       20 f3 66 	      jsr	clickDelay
   4602  66e4		       ad 24 70 	      lda	volModeRAM
   4603  66e7		       29 f0		      and	#$F0
   4604  66e9		       8d 18 d4 	      sta	SID1+SVOLMODE
   4605  66ec		       8d 38 d4 	      sta	SID2+SVOLMODE
   4606  66ef		       8d 18 71 	      sta	sidData+SVOLMODE
   4607  66f2							;	lda SID1+SV1WAVE
   4608  66f2							;	and #$FE
   4609  66f2							;	sta SID1+SV1WAVE
   4610  66f2		       60		      rts
   4611  66f3
   4612  66f3
   4613  66f3							; ------------------------------------
   4614  66f3							; delay for click -- uses Y
   4615  66f3				   clickDelay
   4616  66f3		       a0 40		      ldy	#$40
   4617  66f5		       8c 0c 70 	      sty	temp
   4618  66f8				   mainDelayLoop
   4619  66f8		       a0 00		      ldy	#0
   4620  66fa				   innerDelayLoop
   4621  66fa		       88		      dey
   4622  66fb		       d0 fd		      bne	innerDelayLoop
   4623  66fd		       ce 0c 70 	      dec	temp
   4624  6700		       d0 f6		      bne	mainDelayLoop
   4625  6702		       60		      rts
   4626  6703
   4627  6703
   4628  6703							;------------------------------------------
   4629  6703							; update text
   4630  6703							;------------------------------------------
   4631  6703							; Show text out of the textData array.
   4632  6703							; x=textData, y=screen position
   4633  6703				   updateText
   4634  6703		       ad 70 70 	      lda	helpMode
   4635  6706		       f0 01		      beq	doUpdateText
   4636  6708		       60		      rts
   4637  6709				   doUpdateText
   4638  6709							;	lda helpMode
   4639  6709							;	bne doUpdateText
   4640  6709							;	rts
   4641  6709							;doUpdateText:
   4642  6709		       18		      clc
   4643  670a		       a9 04		      lda	#4
   4644  670c		       8d 46 70 	      sta	textTemp
   4645  670f				   updateTextLoop
   4646  670f		       bd ce 79 	      lda	textData,x
   4647  6712		       c9 40		      cmp	#64
   4648  6714		       30 02		      bmi	showSpaceU
   4649  6716		       e9 40		      sbc	#64
   4650  6718				   showSpaceU
   4651  6718		       99 00 04 	      sta	1024,y
   4652  671b		       e8		      inx
   4653  671c		       c8		      iny
   4654  671d		       ce 46 70 	      dec	textTemp
   4655  6720		       d0 ed		      bne	updateTextLoop
   4656  6722		       60		      rts
   4657  6723
   4658  6723
   4659  6723							; ***************************
   4660  6723							; Display Setup
   4661  6723							; ***************************
   4662  6723				   displayInit
   4663  6723
   4664  6723		       a9 15		      lda	#21
   4665  6725		       8d 18 d0 	      sta	53272	; UPPERCASE mode
   4666  6728
   4667  6728							; draw static text at the top of the screen
   4668  6728		       a2 78		      ldx	#>mainColorText	;low/MSB
   4669  672a		       a0 46		      ldy	#<mainColorText	;high/LSB
   4670  672c		       20 8b 68 	      jsr	displayPage
   4671  672f
   4672  672f							; Draw bottom text (version number+PAL/NTSC setting)
   4673  672f		       03 dd	   BOTTOMTEXT equ	40*24+29
   4674  672f
   4675  672f		       20 e4 5f 	      jsr	showHelpMessage
   4676  6732
   4677  6732							; choose which text to show from PAL/NTSC test at startup
   4678  6732		       a2 00		      ldx	#0
   4679  6734		       a0 00		      ldy	#0
   4680  6736		       ad 61 70 	      lda	NTSCmode
   4681  6739		       f0 02		      beq	showPAL
   4682  673b		       a2 0c		      ldx	#12
   4683  673d				   showPAL
   4684  673d							; Show version number and NTSC/PAL designation...
   4685  673d				   TextLoop2
   4686  673d		       bd 0e 7b 	      lda	bottomText,x
   4687  6740		       f0 12		      beq	endText2
   4688  6742		       c9 40		      cmp	#64
   4689  6744		       30 02		      bmi	showSpace2
   4690  6746		       e9 40		      sbc	#64
   4691  6748				   showSpace2
   4692  6748		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
   4693  674b		       a9 0b		      lda	#11
   4694  674d		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
   4695  6750				   notBlank2
   4696  6750		       e8		      inx
   4697  6751		       c8		      iny
   4698  6752		       d0 e9		      bne	TextLoop2
   4699  6754				   endText2
   4700  6754
   4701  6754		       20 f1 61 	      jsr	showMidiMode
   4702  6757
   4703  6757							;---------------------------------------------
   4704  6757							; Display current sound parameter values
   4705  6757
   4706  6757							; set tuning text
   4707  6757		       ac 71 70 	      ldy	tuneSetting
   4708  675a		       20 99 60 	      jsr	ksetTune
   4709  675d
   4710  675d							; Video Mode
   4711  675d		       ad 45 70 	      lda	videoMode
   4712  6760		       ac 68 70 	      ldy	videoText
   4713  6763		       20 2c 61 	      jsr	setVideoMode	;********************************
   4714  6766
   4715  6766		       ad 49 70 	      lda	LFODepth
   4716  6769		       20 5b 61 	      jsr	setLFODepth	;********************************
   4717  676c		       ad 48 70 	      lda	LFORate
   4718  676f		       20 71 61 	      jsr	setLFORate	;********************************
   4719  6772
   4720  6772		       ad 29 70 	      lda	paddle
   4721  6775		       20 3a 61 	      jsr	setPaddles
   4722  6778
   4723  6778		       ad 57 70 	      lda	filter
   4724  677b		       8d 9d 70 	      sta	filterSetValue
   4725  677e							;jsr setFilter
   4726  677e
   4727  677e		       20 14 63 	      jsr	setMode
   4728  6781
   4729  6781		       20 ec 62 	      jsr	setFX
   4730  6784
   4731  6784		       ad 69 70 	      lda	attack
   4732  6787		       20 4a 62 	      jsr	showAttack
   4733  678a
   4734  678a		       20 f1 61 	      jsr	showMidiMode
   4735  678d
   4736  678d		       ad 6a 70 	      lda	release
   4737  6790		       20 ab 61 	      jsr	showRelease
   4738  6793
   4739  6793		       ac 6c 70 	      ldy	filterStatus
   4740  6796		       20 84 60 	      jsr	showFiltOnOff
   4741  6799
   4742  6799		       20 62 62 	      jsr	setVolume
   4743  679c
   4744  679c		       ad 6b 70 	      lda	octave
   4745  679f		       20 b2 62 	      jsr	setOctave
   4746  67a2
   4747  67a2		       20 61 64 	      jsr	showPatchName
   4748  67a5
   4749  67a5		       ad 7a 70 	      lda	paddle2
   4750  67a8		       20 3b 60 	      jsr	ksetPad2
   4751  67ab
   4752  67ab		       60		      rts
   4753  67ac							;---------------------------------------------------
   4754  67ac
   4755  67ac							; ***************************
   4756  67ac							; Variable Setup
   4757  67ac							; ***************************
   4758  67ac				   variableInit
   4759  67ac		       a9 00		      lda	#0
   4760  67ae		       8d 7a 70 	      sta	paddle2
   4761  67b1		       8d 5c 70 	      sta	filterDisable
   4762  67b4		       8d 6c 70 	      sta	filterStatus
   4763  67b7		       8d 58 70 	      sta	keyTimer
   4764  67ba		       8d 40 70 	      sta	bender
   4765  67bd		       8d 70 70 	      sta	helpMode
   4766  67c0		       8d 21 70 	      sta	patPtr
   4767  67c3		       8d 03 70 	      sta	Frame
   4768  67c6		       8d 02 70 	      sta	FrameH
   4769  67c9		       8d 05 70 	      sta	EchoCur
   4770  67cc		       8d 75 70 	      sta	customPatchSaved
   4771  67cf		       8d 76 70 	      sta	paddleTop
   4772  67d2		       8d 77 70 	      sta	paddleBottom
   4773  67d5
   4774  67d5		       a9 02		      lda	#2
   4775  67d7		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
   4776  67da
   4777  67da		       a9 04		      lda	#4	; set normal tuning
   4778  67dc		       8d 71 70 	      sta	tuneSetting
   4779  67df
   4780  67df		       a9 00		      lda	#0
   4781  67e1		       20 5b 61 	      jsr	setLFODepth	;********************************
   4782  67e4		       a9 00		      lda	#0
   4783  67e6		       20 71 61 	      jsr	setLFORate	;********************************
   4784  67e9
   4785  67e9							; set up tuning array pointers
   4786  67e9		       a9 ec		      lda	#<tuningL4
   4787  67eb		       85 22		      sta	tunePtrL
   4788  67ed		       a9 7e		      lda	#>tuningL4
   4789  67ef		       85 23		      sta	tunePtrL+1
   4790  67f1
   4791  67f1		       a9 ec		      lda	#<tuningH4
   4792  67f3		       85 24		      sta	tunePtrH
   4793  67f5		       a9 7e		      lda	#>tuningH4
   4794  67f7		       85 25		      sta	tunePtrH+1
   4795  67f9
   4796  67f9		       a9 02		      lda	#2
   4797  67fb		       8d 20 70 	      sta	VICMode
   4798  67fe		       a9 00		      lda	#0
   4799  6800		       8d 1d 70 	      sta	soundMode
   4800  6803							;lda #40
   4801  6803							;sta portSpd
   4802  6803
   4803  6803							; Video Mode
   4804  6803		       a9 03		      lda	#3
   4805  6805		       a0 02		      ldy	#2
   4806  6807		       20 2c 61 	      jsr	setVideoMode	;********************************
   4807  680a
   4808  680a							; Default full volume
   4809  680a		       a9 0f		      lda	#$0F
   4810  680c		       8d 1c 70 	      sta	volume
   4811  680f
   4812  680f							; Echo?
   4813  680f		       a9 70		      lda	#$70
   4814  6811		       8d 04 70 	      sta	EchoPtr
   4815  6814
   4816  6814		       a0 00		      ldy	#0
   4817  6816		       20 64 63 	      jsr	setPatch	;set bass sound
   4818  6819
   4819  6819							; Set up starting portamento values
   4820  6819		       a2 0c		      ldx	#12
   4821  681b		       bd b2 7b 	      lda	NSoundLArr,x
   4822  681e		       8d 16 70 	      sta	pitchLA
   4823  6821		       8d 17 70 	      sta	pitchLB
   4824  6824		       8d 18 70 	      sta	pitchLC
   4825  6827							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4826  6827							;sta lastKeyB
   4827  6827							;sta lastKeyC
   4828  6827		       bd fa 7b 	      lda	NSoundHArr,x
   4829  682a		       8d 19 70 	      sta	pitchHA
   4830  682d		       8d 1a 70 	      sta	pitchHB
   4831  6830		       8d 1b 70 	      sta	pitchHC
   4832  6833							;----------
   4833  6833		       60		      rts
   4834  6834
   4835  6834
   4836  6834							;************************************
   4837  6834							; clrScr - Clear Screen
   4838  6834							;************************************
   4839  6834				   clrScr
   4840  6834		       a2 00		      ldx	#0
   4841  6836		       a9 20		      lda	#32
   4842  6838				   clrScrLoop
   4843  6838		       9d 00 04 	      sta	$400,x
   4844  683b		       9d 00 05 	      sta	$500,x
   4845  683e		       9d 00 06 	      sta	$600,x
   4846  6841		       9d 00 07 	      sta	$700,x
   4847  6844		       ca		      dex
   4848  6845		       d0 f1		      bne	clrScrLoop
   4849  6847		       60		      rts
   4850  6848
   4851  6848
   4852  6848							;************************************
   4853  6848							; DisplayHex - draw hex value on screen
   4854  6848							;************************************
   4855  6848							; note uses helpWritePointer so can't be
   4856  6848							; used within displayPage routine
   4857  6848							; X = horizontal location
   4858  6848							; Y = vertical location
   4859  6848							; A = value
   4860  6848							; hexDispColor = color
   4861  6848				   displayHex
   4862  6848							; figure out screen location
   4863  6848							; and store in word pointer
   4864  6848		       8e 72 70 	      stx	hexDispTemp
   4865  684b		       aa		      tax		; save the hex value in X
   4866  684c		       b9 c0 70 	      lda	lineOffsetL,y
   4867  684f		       18		      clc
   4868  6850		       6d 72 70 	      adc	hexDispTemp
   4869  6853		       85 31		      sta	helpWritePointerL
   4870  6855		       85 33		      sta	helpColorPointerL
   4871  6857
   4872  6857		       b9 da 70 	      lda	lineOffsetM,y
   4873  685a		       69 00		      adc	#0
   4874  685c		       85 32		      sta	helpWritePointerM
   4875  685e		       18		      clc
   4876  685f		       69 d4		      adc	#$D4
   4877  6861		       85 34		      sta	helpColorPointerM
   4878  6863							;--------------------
   4879  6863		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
   4880  6866		       8a		      txa
   4881  6867		       29 0f		      and	#$0F	; isolate the LS nibble
   4882  6869		       aa		      tax
   4883  686a		       bd 52 7b 	      lda	hexDisplay,x	; get character to display
   4884  686d		       a0 01		      ldy	#1
   4885  686f		       91 31		      sta	(helpWritePointerL),y
   4886  6871							;lda #$E
   4887  6871		       ad 8d 70 	      lda	hexDispColor
   4888  6874		       91 33		      sta	(helpColorPointerL),y
   4889  6876							;-------------------
   4890  6876		       ad 72 70 	      lda	hexDispTemp
   4891  6879		       4a		      lsr		; get the MS nibble
   4892  687a		       4a		      lsr
   4893  687b		       4a		      lsr
   4894  687c		       4a		      lsr
   4895  687d		       aa		      tax
   4896  687e		       bd 52 7b 	      lda	hexDisplay,x	; get character to display
   4897  6881		       a0 00		      ldy	#0
   4898  6883		       91 31		      sta	(helpWritePointerL),y
   4899  6885							;lda #$E
   4900  6885		       ad 8d 70 	      lda	hexDispColor
   4901  6888		       91 33		      sta	(helpColorPointerL),y
   4902  688a							;-------------------
   4903  688a		       60		      rts
   4904  688b
   4905  688b
   4906  688b							;************************************
   4907  688b							; DisplayPage - display an entire
   4908  688b							; page of help info with color support
   4909  688b							;************************************
   4910  688b							; X = LSB of data address
   4911  688b							; Y = MSB of data address
   4912  688b							; data format:
   4913  688b							; line_number, color, text, 0
   4914  688b							; line_number, color, text, 0
   4915  688b							; 255
   4916  688b				   displayPage
   4917  688b		       84 2f		      sty	helpReadPointerL
   4918  688d		       86 30		      stx	helpReadPointerM
   4919  688f		       a9 01		      lda	#1
   4920  6891		       8d 6d 70 	      sta	helpColor	; default to white
   4921  6894				   helpLoop
   4922  6894		       a0 00		      ldy	#0
   4923  6896							; get line number and set up output pointers
   4924  6896		       b1 2f		      lda	(helpReadPointerL),y
   4925  6898		       c9 ff		      cmp	#255
   4926  689a		       f0 5b		      beq	quitHelp
   4927  689c		       aa		      tax
   4928  689d		       bd da 70 	      lda	lineOffsetM,x
   4929  68a0		       85 32		      sta	helpWritePointerM
   4930  68a2		       18		      clc
   4931  68a3		       69 d4		      adc	#$D4
   4932  68a5		       85 34		      sta	helpColorPointerM
   4933  68a7		       bd c0 70 	      lda	lineOffsetL,x
   4934  68aa		       85 31		      sta	helpWritePointerL
   4935  68ac		       85 33		      sta	helpColorPointerL
   4936  68ae							;--------------------
   4937  68ae		       a0 01		      ldy	#1
   4938  68b0		       8c 6e 70 	      sty	helpYIn
   4939  68b3		       a0 00		      ldy	#0
   4940  68b5		       8c 6f 70 	      sty	helpYOut
   4941  68b8				   helpTextLoop
   4942  68b8							; get the first character
   4943  68b8		       ac 6e 70 	      ldy	helpYIn
   4944  68bb		       b1 2f		      lda	(helpReadPointerL),y
   4945  68bd		       f0 28		      beq	quitTextLoop
   4946  68bf		       c8		      iny
   4947  68c0		       8c 6e 70 	      sty	helpYIn
   4948  68c3							; see if it's a color command
   4949  68c3		       c9 80		      cmp	#128
   4950  68c5		       10 17		      bpl	setColor	;---
   4951  68c7		       c9 40		      cmp	#64
   4952  68c9		       30 02		      bmi	showSpaceHelp
   4953  68cb		       e9 40		      sbc	#64
   4954  68cd							;lda #126
   4955  68cd				   showSpaceHelp
   4956  68cd							; write the color and character to the screen
   4957  68cd		       ac 6f 70 	      ldy	helpYOut
   4958  68d0		       91 31		      sta	(helpWritePointerL),y
   4959  68d2		       ad 6d 70 	      lda	helpColor
   4960  68d5		       91 33		      sta	(helpColorPointerL),y
   4961  68d7		       c8		      iny
   4962  68d8		       8c 6f 70 	      sty	helpYOut
   4963  68db		       4c b8 68 	      jmp	helpTextLoop
   4964  68de				   setColor
   4965  68de		       38		      sec
   4966  68df		       e9 80		      sbc	#128
   4967  68e1		       8d 6d 70 	      sta	helpColor
   4968  68e4		       4c b8 68 	      jmp	helpTextLoop
   4969  68e7							;---------------
   4970  68e7				   quitTextLoop
   4971  68e7							; update the input pointer
   4972  68e7		       c8		      iny
   4973  68e8		       98		      tya
   4974  68e9		       18		      clc
   4975  68ea		       65 2f		      adc	helpReadPointerL
   4976  68ec		       85 2f		      sta	helpReadPointerL
   4977  68ee		       a5 30		      lda	helpReadPointerM
   4978  68f0		       69 00		      adc	#0
   4979  68f2		       85 30		      sta	helpReadPointerM
   4980  68f4		       4c 94 68 	      jmp	helpLoop	;/\/\/\/\/\
   4981  68f7				   quitHelp
   4982  68f7		       60		      rts
   4983  68f8
   4984  68f8							; Extra subroutines
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  68f8					      include	"cynth_subroutines.asm"
      1  68f8							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  68f8							;
      3  68f8							; input:
      4  68f8							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  68f8							;			 should point to the byte just before the first byte to be sorted
      6  68f8							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  68f8							;nval	 - number of values,  1<= nval <= 255
      8  68f8							;			 value will be destroyed (set to zero)
      9  68f8							;
     10  68f8
     11  68f8
     12  68f8							;*=$6000			;code anywhere in ram or rom
     13  68f8
     14  68f8							;=====================================================================
     15  68f8							; CUSTOM SORT FOR NOTE ARRAY
     16  68f8				   doSort
     17  68f8		       a9 08		      lda	#8
     18  68fa		       8d 22 01 	      sta	nval
     19  68fd				   sort
     20  68fd		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  6900		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  6903		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  6906		       4c 14 69 	      jmp	l2
     24  6909				   l1
     25  6909		       88		      dey
     26  690a		       f0 11		      beq	l3
     27  690c		       b9 9f 70 	      lda	noteNumArray-1,y
     28  690f		       cd 26 01 	      cmp	work2
     29  6912		       90 f5		      bcc	l1
     30  6914				   l2
     31  6914		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  6917		       8d 26 01 	      sta	work2	;potentially largest value
     33  691a		       4c 09 69 	      jmp	l1
     34  691d				   l3
     35  691d		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  6920		       ad 26 01 	      lda	work2	;the largest value
     37  6923		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  6926		       ac 25 01 	      ldy	work1	;index of free space
     39  6929		       ad 27 01 	      lda	work3	;the over-written value
     40  692c		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  692f		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  6932		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  6934		       60		      rts
     44  6935							;=====================================================================
     45  6935
     46  6935
     47  6935
     48  6935
     49  6935							;=====================================================================
     50  6935							; ORIGINAL VERSION
     51  6935							;originalSort:
     52  6935		       ac 22 01 	      ldy	nval	;start of subroutine sort
     53  6938							;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  6938		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     55  693b		       4c 14 69 	      jmp	l2
     56  693e							;l1:
     57  693e		       88		      dey
     58  693f		       f0 dc		      beq	l3
     59  6941							;lda (zpadd),y
     60  6941		       cd 26 01 	      cmp	work2
     61  6944		       90 c3		      bcc	l1
     62  6946							;l2:
     63  6946		       8c 25 01 	      sty	work1	;index of potentially largest value
     64  6949		       8d 26 01 	      sta	work2	;potentially largest value
     65  694c		       4c 09 69 	      jmp	l1
     66  694f							;l3:
     67  694f		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     68  6952		       ad 26 01 	      lda	work2	;the largest value
     69  6955							;sta (zpadd),y		;put largest value in place
     70  6955		       ac 25 01 	      ldy	work1	;index of free space
     71  6958		       ad 27 01 	      lda	work3	;the over-written value
     72  695b							;sta (zpadd),y		;put the over-written value in the free space
     73  695b		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     74  695e		       d0 9d		      bne	sort	;start working with the shorter sequence
     75  6960		       60		      rts
     76  6961							;=====================================================================
     77  6961
     78  6961
------- FILE cynthcart152.asm
   4986  6961
   4987  6961							; Screen text, data tables, note tuning tables, etc.
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  6961					      include	"cynth_data.asm"
      1  6961
      2  6961							;------------------------------------------
      3  6961							; Keyboard Reading Data
      4  6961							;------------------------------------------
      5  6961
      6  6961				   hexColPiano
      7  6961		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$F7,$F7, $EF,$EF,$DF,$DF ,0	; PIANO KEYBOARD
      8  6972							;byte $7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$BF,$F7,$F7, $EF,$EF,$DF,$DF ,0 ; PIANO KEYBOARD
      9  6972				   hexCol
     10  6972		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04,0
     11  6983							; 0   1   2   3    4	5   6	7    8	 9   A	 B    C   D   E   F
     12  6983				   hexRowPiano
     13  6983		       08 08 01 01*	      byte.b	$08,$08,$01,$01,$08, $01,$01,$08,$08, $01,$02,$40, $02,$40,$02,$40 ,0	; PIANO KEYBOARD
     14  6994							;byte $08,$01,$01,$08, $01,$01,$08,$08, $01,$08,$02,$40, $02,$40,$02,$40 ,0 ; PIANO KEYBOARD
     15  6994				   hexRow
     16  6994		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, 0
     17  69a5							; 0   1   2   3    4	5   6	7    8	 9   A	 B	 C   D	 E   F
     18  69a5
     19  69a5							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     20  69a5							; Column activation data
     21  69a5				   col			;	   x	     x		      x 	  x    A    x	 B
     22  69a5		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     23  69b1		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     24  69be							;    C    x	D    x	    E	 F    x 	  x	    x
     25  69be
     26  69be							; Row testing data
     27  69be				   row			;	   x	     x		      x 	  x    A    x	 B
     28  69be		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     29  69ca		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     30  69d7							;    C    x	D    x	    E	 F    x 	  x	    x
     31  69d7							;-----------------------------------------------
     32  69d7							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     33  69d7							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     34  69d7							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     35  69d7							;-----------------------------------------------
     36  69d7							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     37  69d7							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     38  69d7							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     39  69d7							;-----------------------------------------------
     40  69d7
     41  69d7				   commandKeys		; row, column
     42  69d7		       7f 10		      byte.b	~$80, $10	;spc 28
     43  69d9		       fd 04		      byte.b	~$02, $04	;A   0
     44  69db		       fd 20		      byte.b	~$02, $20	;S   1
     45  69dd		       fb 04		      byte.b	~$04, $04	;D   2
     46  69df		       fb 20		      byte.b	~$04, $20	;F   3
     47  69e1		       f7 04		      byte.b	~$08, $04	;G   4
     48  69e3		       f7 20		      byte.b	~$08, $20	;H   5
     49  69e5		       ef 04		      byte.b	~$10, $04	;J   6
     50  69e7		       ef 20		      byte.b	~$10, $20	;K   7
     51  69e9		       df 04		      byte.b	~$20, $04	;L   8
     52  69eb		       df 20		      byte.b	~$20, $20	;:   9
     53  69ed		       bf 04		      byte.b	~$40, $04	;;   10
     54  69ef		       bf 20		      byte.b	~$40, $20	;=   11
     55  69f1		       fd 10		      byte.b	~$02, $10	;Z   12
     56  69f3		       fb 80		      byte.b	~$04, $80	;X   13
     57  69f5		       fb 10		      byte.b	~$04, $10	;C   14
     58  69f7		       f7 80		      byte.b	~$08, $80	;V   15
     59  69f9		       f7 10		      byte.b	~$08, $10	;B   16
     60  69fb		       ef 80		      byte.b	~$10, $80	;N   17
     61  69fd		       ef 10		      byte.b	~$10, $10	;M   18
     62  69ff		       df 80		      byte.b	~$20, $80	;,   19
     63  6a01		       df 10		      byte.b	~$20, $10	;.   20
     64  6a03		       bf 80		      byte.b	~$40, $80	;/   21
     65  6a05		       fe 80		      byte.b	~$01, $80	;u/d 22
     66  6a07		       fe 04		      byte.b	~$01, $04	;l/r 23
     67  6a09		       fe 10		      byte.b	~$01, $10	;F1  24
     68  6a0b		       fe 20		      byte.b	~$01, $20	;F3  25
     69  6a0d		       fe 40		      byte.b	~$01, $40	;F5  26
     70  6a0f		       fe 08		      byte.b	~$01, $08	;F7  27
     71  6a11		       fe 02		      byte.b	~$01, $02	;ret 29
     72  6a13		       7f 02		      byte.b	~$80, $02	;Larr 30
     73  6a15							;byte ~$80, $04		;Larr 30
     74  6a15
     75  6a15				   rawKeyFunctions
     76  6a15							;    functionPointer, inputData:Y,A
     77  6a15		       15 60 00 00	      word.w	bendBender, $0000	;space
     78  6a19		       64 63 00 0a	      word.w	setPatch, $0A00	;A
     79  6a1d		       64 63 00 0b	      word.w	setPatch, $0B00	;S
     80  6a21		       64 63 00 0c	      word.w	setPatch, $0C00	;D
     81  6a25		       64 63 00 0d	      word.w	setPatch, $0D00	;F
     82  6a29		       64 63 00 0e	      word.w	setPatch, $0E00	;G
     83  6a2d		       64 63 00 0f	      word.w	setPatch, $0F00	;H
     84  6a31		       64 63 00 10	      word.w	setPatch, $1000	;J
     85  6a35		       64 63 00 11	      word.w	setPatch, $1100	;K
     86  6a39		       64 63 00 12	      word.w	setPatch, $1200	;L
     87  6a3d		       64 63 00 13	      word.w	setPatch, $1300	;:
     88  6a41		       64 63 00 15	      word.w	setPatch, $1500	;;
     89  6a45		       64 63 00 14	      word.w	setPatch, $1400	;=
     90  6a49		       64 63 00 00	      word.w	setPatch, $0000	;Z
     91  6a4d		       64 63 00 01	      word.w	setPatch, $0100	;X
     92  6a51		       64 63 00 02	      word.w	setPatch, $0200	;C
     93  6a55		       64 63 00 03	      word.w	setPatch, $0300	;V
     94  6a59		       64 63 00 04	      word.w	setPatch, $0400	;B
     95  6a5d		       64 63 00 05	      word.w	setPatch, $0500	;N
     96  6a61		       64 63 00 06	      word.w	setPatch, $0600	;M
     97  6a65		       64 63 00 07	      word.w	setPatch, $0700	;,
     98  6a69		       64 63 00 08	      word.w	setPatch, $0800	;.
     99  6a6d		       64 63 00 09	      word.w	setPatch, $0900	;/
    100  6a71		       11 63 00 00	      word.w	ksetMode, $0000	;up/down
    101  6a75		       11 63 01 00	      word.w	ksetMode, $0001	;left/right
    102  6a79		       b2 62 03 00	      word.w	setOctave, 3	;F1
    103  6a7d		       b2 62 02 00	      word.w	setOctave, 2	;F3
    104  6a81		       b2 62 01 00	      word.w	setOctave, 1	;F5
    105  6a85		       b2 62 00 00	      word.w	setOctave, 0	;F7
    106  6a89		       c0 5f 00 00	      word.w	khelp,0	;return
    107  6a8d		       52 5f 00 00	      word.w	kloadPatch,0	;Larrow
    108  6a91
    109  6a91				   minimalKeyFunctions
    110  6a91							;    functionPointer, inputData:Y,A
    111  6a91		       15 60 00 00	      word.w	bendBender, $0000	;space
    112  6a95		       00 00 00 0a	      word.w	0, $0A00	;A
    113  6a99		       00 00 00 0b	      word.w	0, $0B00	;S
    114  6a9d		       00 00 00 0c	      word.w	0, $0C00	;D
    115  6aa1		       00 00 00 0d	      word.w	0, $0D00	;F
    116  6aa5		       00 00 00 0e	      word.w	0, $0E00	;G
    117  6aa9		       00 00 00 0f	      word.w	0, $0F00	;H
    118  6aad		       00 00 00 10	      word.w	0, $1000	;J
    119  6ab1		       00 00 00 11	      word.w	0, $1100	;K
    120  6ab5		       00 00 00 12	      word.w	0, $1200	;L
    121  6ab9		       00 00 00 13	      word.w	0, $1300	;:
    122  6abd		       00 00 00 14	      word.w	0, $1400	;;
    123  6ac1		       00 00 00 15	      word.w	0, $1500	;=
    124  6ac5		       00 00 00 00	      word.w	0, $0000	;Z
    125  6ac9		       00 00 00 01	      word.w	0, $0100	;X
    126  6acd		       00 00 00 02	      word.w	0, $0200	;C
    127  6ad1		       00 00 00 03	      word.w	0, $0300	;V
    128  6ad5		       00 00 00 04	      word.w	0, $0400	;B
    129  6ad9		       00 00 00 05	      word.w	0, $0500	;N
    130  6add		       00 00 00 06	      word.w	0, $0600	;M
    131  6ae1		       00 00 00 07	      word.w	0, $0700	;,
    132  6ae5		       00 00 00 08	      word.w	0, $0800	;.
    133  6ae9		       00 00 00 09	      word.w	0, $0900	;/
    134  6aed		       00 00 00 00	      word.w	0, $0000	;up/down
    135  6af1		       00 00 01 00	      word.w	0, $0001	;left/right
    136  6af5		       b2 62 03 00	      word.w	setOctave, 3	;F1
    137  6af9		       b2 62 02 00	      word.w	setOctave, 2	;F3
    138  6afd		       b2 62 01 00	      word.w	setOctave, 1	;F5
    139  6b01		       b2 62 00 00	      word.w	setOctave, 0	;F7
    140  6b05		       00 00 00 00	      word.w	0,0	;return
    141  6b09		       00 00 00 00	      word.w	0,0	;Larrow
    142  6b0d
    143  6b0d				   CTRLKeyFunctions
    144  6b0d							;    functionPointer, inputData:Y,A
    145  6b0d		       00 00 00 00	      word.w	0, $0000	;space
    146  6b11		       8d 61 e0 00	      word.w	setRelease, REL_SHORT	;A
    147  6b15		       8d 61 e9 00	      word.w	setRelease, REL_MED	;S
    148  6b19		       8d 61 ee 00	      word.w	setRelease, REL_LONG	;D
    149  6b1d		       11 63 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    150  6b21		       11 63 01 00	      word.w	ksetMode, MODE_5THS	;G
    151  6b25		       11 63 02 00	      word.w	ksetMode, MODE_5PORT	;H
    152  6b29		       11 63 20 00	      word.w	ksetMode, MODE_MONO1	;J
    153  6b2d		       11 63 40 00	      word.w	ksetMode, MODE_ARP1	;K
    154  6b31		       11 63 41 00	      word.w	ksetMode, MODE_ARP2	;L
    155  6b35		       11 63 42 00	      word.w	ksetMode, MODE_ARP3	;:
    156  6b39		       11 63 43 00	      word.w	ksetMode, MODE_ARP4	;;
    157  6b3d		       11 63 44 00	      word.w	ksetMode, MODE_ARP5	;=
    158  6b41		       e9 62 00 00	      word.w	ksetFX, $0000	;Z
    159  6b45		       e9 62 01 00	      word.w	ksetFX, $0001	;X
    160  6b49		       e9 62 02 00	      word.w	ksetFX, $0002	;C
    161  6b4d		       e9 62 03 00	      word.w	ksetFX, $0003	;V
    162  6b51		       e9 62 04 00	      word.w	ksetFX, $0004	;B
    163  6b55		       e9 62 05 00	      word.w	ksetFX, $0005	;N
    164  6b59		       e9 62 06 00	      word.w	ksetFX, $0006	;M
    165  6b5d		       e9 62 07 00	      word.w	ksetFX, $0007	;,
    166  6b61		       e9 62 08 00	      word.w	ksetFX, $0008	;.
    167  6b65							;word ksetFX,	$0009	;/
    168  6b65		       00 00 00 00	      word.w	0, $0000	;/
    169  6b69		       11 63 21 00	      word.w	ksetMode, MODE_MONO2	;up/down
    170  6b6d		       11 63 21 00	      word.w	ksetMode, MODE_MONO2	;left/right
    171  6b71		       5f 62 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    172  6b75		       5f 62 0b 00	      word.w	ksetVolume, VOLMED	;F3
    173  6b79		       5f 62 07 00	      word.w	ksetVolume, VOLLOW	;F5
    174  6b7d		       5f 62 00 00	      word.w	ksetVolume, VOLOFF	;F7
    175  6b81		       11 63 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    176  6b85		       00 00 00 00	      word.w	0,0	;Larrow
    177  6b89
    178  6b89				   shiftKeyFunctions
    179  6b89							;    functionPointer, inputData:Y,A
    180  6b89		       00 00 00 00	      word.w	0, $0000	;space
    181  6b8d		       2c 62 00 00	      word.w	setAttack,ATK_SHORT	;A
    182  6b91		       2c 62 90 00	      word.w	setAttack,ATK_MED	;S
    183  6b95		       2c 62 e0 00	      word.w	setAttack,ATK_LONG	;D
    184  6b99		       2c 61 08 01	      word.w	setVideoMode,$0108	;F
    185  6b9d		       2c 61 03 02	      word.w	setVideoMode,$0203	;G
    186  6ba1		       2c 61 15 03	      word.w	setVideoMode,$0315	;H
    187  6ba5		       2e 60 02 00	      word.w	setVIC, 2	;J
    188  6ba9		       2e 60 01 00	      word.w	setVIC, 1	;K
    189  6bad		       2e 60 00 00	      word.w	setVIC, 0	;L
    190  6bb1		       af 60 01 00	      word.w	setFullScreenMode, $0001	;:
    191  6bb5		       af 60 00 00	      word.w	setFullScreenMode, $0000	;;
    192  6bb9		       00 00 00 00	      word.w	0, $0000	;=
    193  6bbd		       71 61 00 00	      word.w	setLFORate,0	;Z
    194  6bc1		       71 61 01 00	      word.w	setLFORate,1	;X
    195  6bc5		       71 61 02 00	      word.w	setLFORate,2	;C
    196  6bc9		       71 61 03 00	      word.w	setLFORate,3	;V
    197  6bcd		       5b 61 00 00	      word.w	setLFODepth,0	;B
    198  6bd1		       5b 61 01 00	      word.w	setLFODepth,1	;N
    199  6bd5		       5b 61 02 00	      word.w	setLFODepth,2	;M
    200  6bd9		       5b 61 03 00	      word.w	setLFODepth,3	;,
    201  6bdd		       00 00 00 00	      word.w	0, $0000	;.
    202  6be1		       00 00 00 00	      word.w	0, $0000	;/
    203  6be5		       32 60 00 00	      word.w	ksetPaddles, 0	;up/down
    204  6be9		       32 60 01 00	      word.w	ksetPaddles, 1	;left/right
    205  6bed		       11 63 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    206  6bf1		       11 63 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    207  6bf5		       11 63 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    208  6bf9		       11 63 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    209  6bfd		       00 60 00 00	      word.w	kclearModulation,0	;return
    210  6c01		       00 00 00 00	      word.w	0,0	;Larrow
    211  6c05
    212  6c05				   commKeyFunctions
    213  6c05							;    functionPointer, inputData:Y,A
    214  6c05		       00 00 00 00	      word.w	0, $0000	;space
    215  6c09		       50 60 00 00	      word.w	ksetFilter, $0000	;A
    216  6c0d		       50 60 20 00	      word.w	ksetFilter, $0020	;S
    217  6c11		       50 60 40 00	      word.w	ksetFilter, $0040	;D
    218  6c15		       50 60 60 00	      word.w	ksetFilter, $0060	;F
    219  6c19		       50 60 80 00	      word.w	ksetFilter, $0080	;G
    220  6c1d		       50 60 a0 00	      word.w	ksetFilter, $00A0	;H
    221  6c21		       50 60 c0 00	      word.w	ksetFilter, $00C0	;J
    222  6c25		       50 60 e0 00	      word.w	ksetFilter, $00E0	;K
    223  6c29		       00 00 00 00	      word.w	0, $0000	;L
    224  6c2d		       00 00 00 00	      word.w	0, $0000	;:
    225  6c31		       00 00 00 00	      word.w	0, $0000	;;
    226  6c35		       00 00 00 00	      word.w	0, $0000	;=
    227  6c39		       5d 60 00 00	      word.w	kfiltOnOff,$0000	;Z
    228  6c3d		       5d 60 00 01	      word.w	kfiltOnOff,$0100	;X
    229  6c41		       5d 60 00 02	      word.w	kfiltOnOff,$0200	;C
    230  6c45		       3b 60 00 00	      word.w	ksetPad2, $0000	;V
    231  6c49		       3b 60 01 00	      word.w	ksetPad2, $0001	;B
    232  6c4d		       3b 60 03 00	      word.w	ksetPad2, $0003	;N
    233  6c51		       3b 60 04 00	      word.w	ksetPad2, $0004	;M
    234  6c55		       ee 61 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    235  6c59		       ee 61 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    236  6c5d		       ee 61 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    237  6c61		       00 00 00 00	      word.w	0, $0000	;up/down
    238  6c65		       00 00 00 00	      word.w	0, $0000	;left/right
    239  6c69		       00 00 00 00	      word.w	0, $0000	;F1
    240  6c6d		       00 00 00 00	      word.w	0, $0000	;F3
    241  6c71		       00 00 00 00	      word.w	0, $0000	;F5
    242  6c75		       00 00 00 00	      word.w	0, $0000	;F7
    243  6c79		       00 00 00 00	      word.w	0,0	;return
    244  6c7d		       00 00 00 00	      word.w	0,0	;Larrow
    245  6c81
    246  6c81
    247  6c81
    248  6c81				   runstopKeyFunctions
    249  6c81							;    functionPointer, inputData:Y,A
    250  6c81		       00 00 00 00	      word.w	0, $0000	;space
    251  6c85		       99 60 00 00	      word.w	ksetTune,$0000	;A
    252  6c89		       99 60 00 01	      word.w	ksetTune,$0100	;S
    253  6c8d		       99 60 00 02	      word.w	ksetTune,$0200	;D
    254  6c91		       99 60 00 03	      word.w	ksetTune,$0300	;F
    255  6c95		       99 60 00 04	      word.w	ksetTune,$0400	;G
    256  6c99		       99 60 00 05	      word.w	ksetTune,$0500	;H
    257  6c9d		       99 60 00 06	      word.w	ksetTune,$0600	;J
    258  6ca1		       99 60 00 07	      word.w	ksetTune,$0700	;K
    259  6ca5		       99 60 00 08	      word.w	ksetTune,$0800	;L
    260  6ca9		       99 60 00 09	      word.w	ksetTune,$0900	;:
    261  6cad		       99 60 00 0a	      word.w	ksetTune,$0A00	;;
    262  6cb1		       00 00 00 00	      word.w	0, $0000	;=
    263  6cb5		       0f 60 01 00	      word.w	ksetPalNtsc,$0001	;Z
    264  6cb9		       0f 60 00 00	      word.w	ksetPalNtsc,$0000	;X
    265  6cbd		       00 00 00 00	      word.w	0, $0000	;C
    266  6cc1		       00 00 00 00	      word.w	0, $0000	;V
    267  6cc5		       00 00 00 00	      word.w	0, $0000	;B
    268  6cc9		       00 00 00 00	      word.w	0, $0000	;N
    269  6ccd		       00 00 00 00	      word.w	0, $0000	;M
    270  6cd1		       00 00 00 00	      word.w	0, $0000	;,
    271  6cd5		       00 00 00 00	      word.w	0, $0000	;.
    272  6cd9		       00 00 00 00	      word.w	0, $0000	;/
    273  6cdd		       00 00 00 00	      word.w	0, $0000	;up/down
    274  6ce1		       00 00 00 00	      word.w	0, $0000	;left/right
    275  6ce5		       be 64 00 00	      word.w	SIDEdit,$0000	;F1
    276  6ce9		       fd 5e 00 00	      word.w	ksavePatch,0	;F3
    277  6ced		       00 00 00 00	      word.w	0,0	;F5
    278  6cf1		       be 64 ff ff	      word.w	SIDEdit,$FFFF	;F7
    279  6cf5		       00 00 00 00	      word.w	0,0	;return
    280  6cf9		       00 00 00 00	      word.w	0,0	;Larrow
    281  6cfd
    282  6cfd		       00 1c	   MAX_PATCH_NUMBER equ	28
    283  6cfd
    284  6cfd				   patchName
    285  6cfd		       53 41 57 20*	      byte.b	"SAW BASS	  "	;0
    286  6d0d		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
    287  6d1d		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
    288  6d2d		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
    289  6d3d		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
    290  6d4d		       50 55 4c 53*	      byte.b	"PULSE HIGH	  "	;5
    291  6d5d		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
    292  6d6d		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
    293  6d7d		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
    294  6d8d		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
    295  6d9d		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
    296  6dad		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
    297  6dbd		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
    298  6dcd		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
    299  6ddd		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
    300  6ded		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
    301  6dfd
    302  6dfd				   patchName2
    303  6dfd		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
    304  6e0d		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
    305  6e1d		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
    306  6e2d		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
    307  6e3d		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
    308  6e4d		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
    309  6e5d		       4e 45 57 20*	      byte.b	"NEW PATCH 13	  "	;22
    310  6e6d		       4e 45 57 20*	      byte.b	"NEW PATCH 14	  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
    311  6e7d		       4e 45 57 20*	      byte.b	"NEW PATCH 15	  "	;24
    312  6e8d		       4e 45 57 20*	      byte.b	"NEW PATCH 16	  "	;25
    313  6e9d		       4e 45 57 20*	      byte.b	"NEW PATCH 17	  "	;26
    314  6ead		       4e 45 57 20*	      byte.b	"NEW PATCH 18	  "	;27
    315  6ebd		       4e 45 57 20*	      byte.b	"NEW PATCH 19	  "	;28
    316  6ecd		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;29
    317  6edd		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;30
    318  6eed
    319  6eed		       00 1d	   SAVED_PATCH_MESSAGE equ	29
    320  6eed		       00 1e	   CUSTOM_PATCH_NUMBER equ	30
    321  6eed
    322  6eed				   modeList
    323  6eed		       00		      byte.b	MODE_NORMAL
    324  6eee		       01		      byte.b	MODE_5THS
    325  6eef		       02		      byte.b	MODE_5PORT
    326  6ef0		       10		      byte.b	MODE_PORT1
    327  6ef1		       11		      byte.b	MODE_PORT2
    328  6ef2		       12		      byte.b	MODE_PORT3
    329  6ef3		       20		      byte.b	MODE_MONO1
    330  6ef4		       21		      byte.b	MODE_MONO2
    331  6ef5		       40		      byte.b	MODE_ARP1
    332  6ef6		       41		      byte.b	MODE_ARP2
    333  6ef7		       42		      byte.b	MODE_ARP3
    334  6ef8		       43		      byte.b	MODE_ARP4
    335  6ef9		       44		      byte.b	MODE_ARP5
    336  6efa		       08		      byte.b	MODE_6CHAN
    337  6efb		       08		      byte.b	MODE_6CHAN
    338  6efc		       08		      byte.b	MODE_6CHAN	;16
    339  6efd
    340  6efd
    341  6efd				   patchSoundMode
    342  6efd		       00		      byte.b	MODE_NORMAL	;0
    343  6efe		       00		      byte.b	MODE_NORMAL	;1
    344  6eff		       02		      byte.b	MODE_5PORT	;2
    345  6f00		       11		      byte.b	MODE_PORT2	;3
    346  6f01		       01		      byte.b	MODE_5THS	;4
    347  6f02		       11		      byte.b	MODE_PORT2	;5
    348  6f03		       00		      byte.b	MODE_NORMAL	;6
    349  6f04		       20		      byte.b	MODE_MONO1	;7
    350  6f05		       10		      byte.b	MODE_PORT1	;8
    351  6f06		       00		      byte.b	MODE_NORMAL	;9
    352  6f07		       00		      byte.b	MODE_NORMAL	;10 <--- start of new patches
    353  6f08		       40		      byte.b	MODE_ARP1	;11
    354  6f09		       41		      byte.b	MODE_ARP2	;12
    355  6f0a		       42		      byte.b	MODE_ARP3	;13
    356  6f0b		       20		      byte.b	MODE_MONO1	;14
    357  6f0c		       21		      byte.b	MODE_MONO2	;15
    358  6f0d		       00		      byte.b	MODE_NORMAL	;16
    359  6f0e		       20		      byte.b	MODE_MONO1	;17
    360  6f0f		       00		      byte.b	MODE_NORMAL	;18
    361  6f10		       12		      byte.b	MODE_PORT3	;19
    362  6f11		       08		      byte.b	MODE_6CHAN	;20
    363  6f12		       44		      byte.b	MODE_ARP5	;21
    364  6f13		       08		      byte.b	MODE_6CHAN	;22
    365  6f14		       00		      byte.b	MODE_NORMAL	;23
    366  6f15		       00		      byte.b	MODE_NORMAL	;24
    367  6f16		       00		      byte.b	MODE_NORMAL	;25
    368  6f17		       00		      byte.b	MODE_NORMAL	;26
    369  6f18		       00		      byte.b	MODE_NORMAL	;27
    370  6f19		       00		      byte.b	MODE_NORMAL	;28
    371  6f1a		       00		      byte.b	MODE_NORMAL	;29
    372  6f1b		       00		      byte.b	MODE_NORMAL	;30
    373  6f1c
    374  6f1c							; FX TYPES:
    375  6f1c							;MOD_NONE equ 0
    376  6f1c							;MOD_FILT_LFO equ 1
    377  6f1c							;MOD_FILT_ENV equ 2
    378  6f1c							;MOD_FILT3 equ 3
    379  6f1c							;MOD_FILT4 equ 4
    380  6f1c							;MOD_FILT5 equ 5
    381  6f1c							;MOD_PW_LFO equ 6
    382  6f1c							;MOD_PW2 equ 7
    383  6f1c
    384  6f1c							;	 0	 1	 2	 3	 4	  5	  6	  7	 8	 9
    385  6f1c				   patchFX
    386  6f1c		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
    387  6f26		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
    388  6f30		       00 03 00 00*	      byte.b	0, 3, 0, 0, 0, 0, 0, 0, 0, 0
    389  6f3a				   patchLFO
    390  6f3a		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $10, $01, $02, $13, $00
    391  6f44		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
    392  6f4e		       10 12 00 00*	      byte.b	$10, $12, $00, $00, $00, $00, $00, $00, $00, $00
    393  6f58				   patchOctave
    394  6f58		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
    395  6f62		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
    396  6f6c		       01 03 01 01*	      byte.b	1, 3, 1, 1, 1, 2, 3, 2, 0, 0
    397  6f76				   patchAD
    398  6f76		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    399  6f80		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
    400  6f8a		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    401  6f94				   patchSR
    402  6f94		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    403  6f9e		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    404  6fa8		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F0, $F0, 0
    405  6fb2				   patchPaddle
    406  6fb2		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    407  6fbc		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    408  6fc6		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    409  6fd0							;patchFiltCut
    410  6fd0							;	byte	$c0,	$80,	$c0,	$FF,	$40,	$50,	$c0,	$c0,	$80,	0
    411  6fd0							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	$80
    412  6fd0							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	0
    413  6fd0				   newPatchFiltCut
    414  6fd0		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    415  6fda		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    416  6fe4		       c0 f0 c0 ff*	      byte.b	$c0, $F0, $c0, $FF, $c0, $c0, $c0, $c0, $80, 0
    417  6fee				   patchVol
    418  6fee		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $6, $7, $F, $C, $c, 0
    419  6ff8		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $c, $C
    420  7002		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $b, $8, $F, $F, $c, 0
    421  700c				   patchPWL
    422  700c		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    423  7016		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    424  7020		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    425  702a				   patchPWH
    426  702a		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    427  7034		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    428  703e		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    429  7048				   patchWave
    430  7048		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    431  7052		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    432  705c		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    433  7066				   patchFilt
    434  7066		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    435  7070		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    436  707a		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    437  7084				   patchVolMode
    438  7084		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    439  708e		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    440  7098		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    441  70a2
    442  70a2				   octaveTable
    443  70a2		       00 0c 18 24*	      byte.b	0,12,24,36,48
    444  70a7
    445  70a7
    446  70a7				   pwLFO
    447  70a7		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    448  70ab		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    449  70af		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    450  70b3		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    451  70b7
    452  70b7				   patOffset
    453  70b7		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    454  70bd
    455  70bd				   voiceOffset
    456  70bd		       00 07 0e 	      byte.b	$0,$7,$E
    457  70c0
    458  70c0
    459  70c0
    460  70c0							;---------------------------- displayPage
    461  70c0
    462  70c0							; This chart references each line
    463  70c0							; on the standard character based screen.
    464  70c0							; = value x 40 + 0x400
    465  70c0				   lineOffsetL
    466  70c0		       00		      byte.b	$00
    467  70c1		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    468  70c7		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    469  70cd		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    470  70d3		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    471  70d9		       e8		      byte.b	$E8
    472  70da				   lineOffsetM
    473  70da		       04		      byte.b	$04
    474  70db		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    475  70e1		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    476  70e7		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    477  70ed		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    478  70f3		       07		      byte.b	$07
    479  70f4
    480  70f4				   debugOverlay
    481  70f4		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    482  70ff		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    483  710b		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    484  7136		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    485  7161							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    486  7161							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    487  7161							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    488  7161							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    489  7161		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    490  716f		       ff		      byte.b	255
    491  7170
    492  7170				   fxNames
    493  7170		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    494  7178		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    495  7180		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    496  7188		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    497  7190		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    498  7198		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    499  71a0		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    500  71a8		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    501  71b0		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    502  71b8
    503  71b8				   hexEditHelp
    504  71b8		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    505  71e3		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    506  720f		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    507  7220		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    508  724c		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    509  725d		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    510  7289		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    511  729a		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    512  72c6		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    513  72d7		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    514  7303		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    515  7314		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    516  733f		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",0
    517  7362		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",0
    518  7387		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",0
    519  73ac		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",0
    520  73d1		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    521  73f6		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    522  7421		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    523  744c		       ff		      byte.b	255
    524  744d
    525  744d				   helpMessage
    526  744d		       52 45 54 55*	      byte.b	"RETURN FOR COMMANDS	       ",0
    527  746b							;byte "RETURN FOR HELP 	     ",0
    528  746b				   normalHelp
    529  746b		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81," KEYBOARD COMMANDS ",$82,"-		",0
    530  749a		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    531  74c5		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS",$8F," ROWS ARE ",$81,"PIANO KEYS  ",0
    532  74f4		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV",$8F," ROWS SELECT",$81," SOUND PRESETS ",0
    533  7523		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    534  7550		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83,"    _",$8F,"=CUSTOM-PRESET",0
    535  757d		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    536  75a8		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    537  75b7		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND MODE",0
    538  75e1		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNMM",$8F,"=FX MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    539  760f		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    540  7639		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    541  7649		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A,"  JKL",$8F,"=VID-MODE"
    542  7677		       00		      byte.b	0
    543  7678		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    544  76a7		       00		      byte.b	0
    545  76a8		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    546  76c6		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR MODULATION",0
    547  76f4		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    548  771e		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    549  7736		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF ",$8E,":;=",$8F,"=OMNI/CH1/CH5"
    550  7761		       00		      byte.b	0
    551  7762		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    552  778b		       00		      byte.b	0
    553  778c		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    554  77b6		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    555  77c9		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ZX",$8F,"=PAL/NTSC"
    556  77ed		       00		      byte.b	0
    557  77ee		       17 87 46 31*	      byte.b	23,$87,"F1",$8F,"=SID-EDIT-KB" ,$87," F3",$8F,"=SAVE-CUSTOM-PRESET"
    558  7817		       00		      byte.b	0
    559  7818		       18 87 46 37*	      byte.b	24,$87,"F7",$8F,"=SID-EDIT-PIANO	  ",$8B,"RETURN TO EXIT"
    560  7844		       00		      byte.b	0
    561  7845		       ff		      byte.b	255
    562  7846
    563  7846				   mainColorText
    564  7846		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    565  7875		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83,"       ",$8D,"	    ",$8F,"	 ",$8D,"FILTR",$8C,"=",$81,"X	",0
    566  78a8		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    567  78de		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    568  7914		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"FX",$8C,"=",$81,"XXXXX ",$8F,"	VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    569  794a		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    570  7975
    571  7975							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    572  7975							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    573  7975							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    574  7975							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    575  7975							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    576  7975							;byte 255
    577  7975
    578  7975		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    579  7975		       00 02	   CYNTHCART_COLOR equ	2
    580  7975
    581  7975
    582  7975		       00 2d	   MODETEXT   equ	40*1+5
    583  7975		       00 57	   TUNINGTEXT equ	40*2+7
    584  7975		       00 7f	   OCTAVETEXT equ	40*3+7
    585  7975		       00 a7	   VOLTEXT    equ	40*4+7
    586  7975
    587  7975		       00 62	   ATKTEXT    equ	40*2+18
    588  7975		       00 8a	   RELTEXT    equ	40*3+18
    589  7975		       00 12	   PATCHTEXT  equ	40*0+18
    590  7975
    591  7975		       00 94	   LFORATETEXT equ	40*3+28
    592  7975		       00 6c	   LFODEPTHTEXT equ	40*2+28
    593  7975		       00 bc	   VIDEOTEXT  equ	40*4+28
    594  7975
    595  7975		       00 ae	   FXTEXT     equ	40*4+14
    596  7975
    597  7975		       00 4c	   FILTERTEXT2 equ	40*1+36
    598  7975		       00 75	   FILTERTEXT equ	40*2+37
    599  7975		       00 9c	   PADDLETEXT equ	40*3+36
    600  7975		       00 c4	   PAD2TEXT   equ	40*4+36
    601  7975
    602  7975		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    603  7975
    604  7975							;MODE
    605  7975							;ATTACK
    606  7975							;RELEASE
    607  7975							;VOL
    608  7975
    609  7975
    610  7975
    611  7975
    612  7975		       ff		      byte.b	255
    613  7976
    614  7976				   modeText
    615  7976		       50 4f 4c 59*	      byte.b	"POLY	  "	;0
    616  797e		       50 4f 52 54*	      byte.b	"PORT1   "	;1
    617  7986		       50 4f 52 54*	      byte.b	"PORT2   "	;2
    618  798e		       50 4f 52 54*	      byte.b	"PORT3   "	;3
    619  7996		       4d 4f 4e 4f*	      byte.b	"MONO	  "	;4
    620  799e		       41 52 50 31*	      byte.b	"ARP1	  "	;5
    621  79a6		       41 52 50 32*	      byte.b	"ARP2	  "	;6
    622  79ae		       41 52 50 33*	      byte.b	"ARP3	  "	;7
    623  79b6		       41 52 50 34*	      byte.b	"ARP4	  "	;8
    624  79be		       41 52 50 35*	      byte.b	"ARP5	  "	;9
    625  79c6		       36 2d 56 4f*	      byte.b	"6-VOICE "	;10
    626  79ce
    627  79ce
    628  79ce				   textData		; can contain 64 four byte texts
    629  79ce		       4f 46 46 20	      byte.b	"OFF "	;0
    630  79d2		       4f 4e 20 20	      byte.b	"ON  "	;4
    631  79d6		       53 4c 4f 57	      byte.b	"SLOW"	;8
    632  79da		       4d 45 44 20	      byte.b	"MED "	;12
    633  79de		       46 41 53 54	      byte.b	"FAST"	;16
    634  79e2		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    635  79e6		       2d 33 30 20	      byte.b	"-30 "	;24
    636  79ea		       2d 32 30 20	      byte.b	"-20 "	;28
    637  79ee		       2d 31 30 20	      byte.b	"-10 "	;32
    638  79f2		       30 20 20 20	      byte.b	"0   "	;36
    639  79f6		       2b 31 30 20	      byte.b	"+10 "	;40
    640  79fa		       2b 32 30 20	      byte.b	"+20 "	;44
    641  79fe		       2b 33 30 20	      byte.b	"+30 "	;48
    642  7a02		       2b 34 30 20	      byte.b	"+40 "	;52
    643  7a06		       2b 35 30 20	      byte.b	"+50 "	;56
    644  7a0a		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    645  7a0e		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    646  7a12		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    647  7a16		       46 49 4c 54	      byte.b	"FILT"	;72
    648  7a1a		       56 4f 4c 20	      byte.b	"VOL "	;76
    649  7a1e		       4c 4f 57 20	      byte.b	"LOW "	;80
    650  7a22		       4d 45 44 20	      byte.b	"MED "	;84
    651  7a26		       48 49 47 48	      byte.b	"HIGH"	;88
    652  7a2a		       53 49 44 3a	      byte.b	"SID:"	;92
    653  7a2e		       44 49 53 20	      byte.b	"DIS "	;96
    654  7a32		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    655  7a36		       50 55 4c 53	      byte.b	"PULS"	;104
    656  7a3a		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    657  7a3e		       4c 46 4f 20	      byte.b	"LFO "	;112
    658  7a42		       42 45 4e 44	      byte.b	"BEND"	;116
    659  7a46
    660  7a46
    661  7a46				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    662  7a46		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00
    663  7a4e		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08
    664  7a56		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10
    665  7a5e		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18
    666  7a66		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20
    667  7a6e		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28
    668  7a76		       4d 4f 4e 4f*	      byte.b	"MONO3  ",1	;$30
    669  7a7e		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38
    670  7a86		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40
    671  7a8e		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48
    672  7a96		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50
    673  7a9e		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58
    674  7aa6		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60
    675  7aae		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68
    676  7ab6		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70
    677  7abe
    678  7abe				   modeNameOffsets
    679  7abe							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    680  7abe		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    681  7ace		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    682  7ade		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    683  7aee		       00 00 00 00*	      byte.b	$00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    684  7afe		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    685  7b0e
    686  7b0e
    687  7b0e							; soundModes
    688  7b0e							;MODE_NORM	equ $00
    689  7b0e							;MODE_6CHAN equ $08
    690  7b0e							;MODE_PORT1	equ $10
    691  7b0e							;MODE_PORT2	equ $11
    692  7b0e							;MODE_PORT3	equ $12
    693  7b0e							;MODE_MONO1 equ $20
    694  7b0e							;MODE_MONO2 equ $21
    695  7b0e							;MODE_MONO3 equ $22
    696  7b0e							;MODE_ARP1	equ $40
    697  7b0e							;MODE_ARP2	equ $41
    698  7b0e							;MODE_ARP3	equ $42
    699  7b0e							;MODE_ARP4	equ $43
    700  7b0e							;MODE_ARP5	equ $44
    701  7b0e
    702  7b0e
    703  7b0e
    704  7b0e				   bottomText
    705  7b0e		       20 50 41 4c*	      byte.b	" PAL V1.5.1",0
    706  7b1a		       4e 54 53 43*	      byte.b	"NTSC V1.5.1",0
    707  7b26
    708  7b26
    709  7b26							; contant pointers into the textData array
    710  7b26		       00 00	   ON	      equ	0
    711  7b26		       00 04	   OFF	      equ	4
    712  7b26		       00 08	   SLOW       equ	8
    713  7b26		       00 0c	   MED	      equ	12
    714  7b26		       00 10	   FAST       equ	16
    715  7b26		       00 14	   TUNING     equ	20
    716  7b26		       00 3c	   POLY       equ	60
    717  7b26		       00 40	   MONO       equ	64
    718  7b26		       00 44	   FREQ       equ	68
    719  7b26		       00 48	   FILT       equ	72
    720  7b26		       00 4c	   VOL	      equ	76
    721  7b26		       00 50	   VLOW       equ	80
    722  7b26		       00 54	   VMED       equ	84
    723  7b26		       00 58	   VHIGH      equ	88
    724  7b26		       00 60	   DISABLED   equ	96
    725  7b26		       00 64	   PAD2VALTEXT equ	100
    726  7b26
    727  7b26
    728  7b26
    729  7b26
    730  7b26				   tuneArrPtrLL
    731  7b26		       e8 78 08 50*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    732  7b30				   tuneArrPtrLH
    733  7b30		       7c 7d 7e 7e*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    734  7b3a				   tuneArrPtrHL
    735  7b3a		       30 c0 a4 98*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    736  7b44				   tuneArrPtrHH
    737  7b44		       7d 7d 7e 7e*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    738  7b4e
    739  7b4e				   LFODepthArray
    740  7b4e		       00 02 05 0f	      byte.b	0,2,5,15
    741  7b52
    742  7b52
    743  7b52
    744  7b52
    745  7b52				   hexDisplay
    746  7b52		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    747  7b62
    748  7b62				   keyData		; numbers 0-9 and letters a-f
    749  7b62		       23 38 3b 08*	      byte.b	35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    750  7b72
    751  7b72							; key set for piano keyboard: black keys + middle A-F on the white keys
    752  7b72		       33 3b 08 10*	      byte.b	51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    753  7b82
    754  7b82							; array of LFO values
    755  7b82				   LFOArrL
    756  7b82		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    757  7b92				   LFOArrH
    758  7b92		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    759  7ba2				   LFOdisp
    760  7ba2		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    761  7bb2
    762  7bb2							; NTSC Note Table
    763  7bb2				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    764  7bb2		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    765  7bbe		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    766  7bca		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    767  7bd6		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    768  7be2		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    769  7bee		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    770  7bfa							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    771  7bfa				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    772  7bfa		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    773  7c06		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    774  7c12		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    775  7c1e		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    776  7c2a		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    777  7c36		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    778  7c42
    779  7c42							; PAL Note Table
    780  7c42				   PSoundLArr
    781  7c42		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    782  7c4e		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    783  7c5a		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    784  7c66		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    785  7c72		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    786  7c7e		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    787  7c8a		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    788  7c95
    789  7c95				   PSoundHArr
    790  7c95		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    791  7ca1		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    792  7cad		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    793  7cb9		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    794  7cc5		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    795  7cd1		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    796  7cdd		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart152.asm
   4989  7ce8
   4990  7ce8							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  7ce8					      include	"cynth_tuning.asm"
      1  7ce8
      2  7ce8				   tuningL0
      3  7ce8		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  7cf4		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  7d00		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  7d0c		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  7d18		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  7d24		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  7d30				   tuningH0
     10  7d30		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  7d3c		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  7d48		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  7d54		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  7d60		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  7d6c		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  7d78
     17  7d78				   tuningL1
     18  7d78		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  7d84		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  7d90		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  7d9c		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  7da8		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  7db4		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  7dc0				   tuningH1
     25  7dc0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  7dcc		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  7dd8		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  7de4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  7df0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  7dfc		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  7e08
     32  7e08				   tuningL2
     33  7e08		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  7e14		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  7e20		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  7e2c		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  7e38		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  7e44		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  7e50							;tuningH2
     40  7e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  7e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  7e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  7e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  7e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  7e50							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  7e50
     47  7e50				   tuningL3
     48  7e50		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  7e5c		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  7e68		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  7e74		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  7e80		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  7e8c		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  7e98				   tuningH3
     55  7e98		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  7ea4				   tuningH2
     57  7ea4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  7eb0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  7ebc		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  7ec8		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  7ed4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  7ee0		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  7eec
     64  7eec				   tuningL4
     65  7eec				   tuningH4
     66  7eec				   tuningH5
     67  7eec		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  7ef8				   tuningH6
     69  7ef8		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  7f04		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  7f10		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  7f1c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  7f28		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  7f34		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  7f40							;tuningH4
     76  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  7f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  7f40
     83  7f40				   tuningL5
     84  7f40		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  7f4c		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  7f58		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  7f64		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  7f70		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  7f7c		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  7f88
     91  7f88							;tuningH5
     92  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  7f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  7f88
     99  7f88				   tuningL6
    100  7f88		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  7f94		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  7fa0		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  7fac		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  7fb8		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  7fc4		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  7fd0							;tuningH6
    107  7fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  7fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  7fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  7fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  7fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  7fd0							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  7fd0
    114  7fd0				   tuningL7
    115  7fd0		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  7fdc		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  7fe8		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  7ff4		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  8000		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  800c		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  8018				   tuningH7
    122  8018		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  8024		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  8030		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  803c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  8048		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  8054		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  8060
    129  8060				   tuningL8
    130  8060		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  806c		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  8078		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  8084		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  8090		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  809c		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  80a8				   tuningH8
    137  80a8		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  80b4		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  80c0		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  80cc		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  80d8		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  80e4		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  80f0
    144  80f0				   tuningL9
    145  80f0		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  80fc		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  8108		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  8114		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  8120		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  812c		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  8138				   tuningH9
    152  8138		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  8144		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  8150		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  815c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  8168		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  8174		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart152.asm
   4992  8180
   4993  8180							; Frank's MIDI interface code
   4994  8180				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   4995  8180				  -	      include	"cynth_midi_dummy.asm"
   4996  8180					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  8180					      include	"cynth_midi.asm"
      1  8180							; public MIDI interface routines:
      2  8180							; midiDetect
      3  8180							; midiInit
      4  8180							; midiRead
      5  8180							; midiWrite
      6  8180
      7  8180							; interface type for midiDetect and midiInit:
      8  8180							; 0: no MIDI interface was detected
      9  8180							; 1: Sequential Circuits Inc.
     10  8180							; 2: Passport & Syntech
     11  8180							; 3: DATEL/Siel/JMS
     12  8180							; 4: Namesoft
     13  8180
     14  8180							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  8180		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  8180
     17  8180
     18  8180					      processor	6502
     19  8180
     20  8180		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     21  8180		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     22  8180
     23  8180		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     24  8180		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     25  8180
     26  8180							; detec MIDI interface, return type in accu
     27  8180				   midiDetect		; TODO
     28  8180		       a9 00		      lda	#0
     29  8182		       60		      rts
     30  8183
     31  8183							; init MIDI interface, type in accu from midiDetect
     32  8183				   midiInit
     33  8183		       78		      sei
     34  8184
     35  8184		       85 6e		      sta	midiInterfaceType
     36  8186		       aa		      tax
     37  8187		       ca		      dex
     38  8188
     39  8188		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
     40  818a		       8d 02 dc 	      sta	DDRA
     41  818d
     42  818d		       a9 00		      lda	#0	; CIA#1 port B = inputs
     43  818f		       8d 03 dc 	      sta	DDRB
     44  8192
     45  8192		       a9 00		      lda	#0
     46  8194		       85 71		      sta	keyPressed
     47  8196		       85 6f		      sta	keyTestIndex
     48  8198		       85 70		      sta	keyPressedIntern
     49  819a
     50  819a							; init addresses
     51  819a		       bd 69 82 	      lda	midiControlOfs,x
     52  819d		       85 64		      sta	midiControl
     53  819f		       bd 6d 82 	      lda	midiStatusOfs,x
     54  81a2		       85 66		      sta	midiStatus
     55  81a4		       bd 71 82 	      lda	midiTxOfs,x
     56  81a7		       85 68		      sta	midiTx
     57  81a9		       bd 75 82 	      lda	midiRxOfs,x
     58  81ac		       85 6a		      sta	midiRx
     59  81ae		       a9 de		      lda	#$de
     60  81b0		       85 65		      sta	midiControl+1
     61  81b2		       85 67		      sta	midiStatus+1
     62  81b4		       85 69		      sta	midiTx+1
     63  81b6		       85 6b		      sta	midiRx+1
     64  81b8
     65  81b8		       20 fd 81 	      jsr	midiReset
     66  81bb
     67  81bb							; clear ringbuffer
     68  81bb		       a9 00		      lda	#0
     69  81bd		       85 6c		      sta	midiRingbufferReadIndex
     70  81bf		       85 6d		      sta	midiRingbufferWriteIndex
     71  81c1
     72  81c1		       bd 7d 82 	      lda	midiIrqType,x
     73  81c4		       d0 0a		      bne	midiSetIrq
     74  81c6
     75  81c6							; set NMI routine
     76  81c6		       a9 26		      lda	#<midiNmi
     77  81c8		       8d 18 03 	      sta	$0318
     78  81cb		       a9 82		      lda	#>midiNmi
     79  81cd		       8d 19 03 	      sta	$0319
     80  81d0
     81  81d0							; set IRQ routine
     82  81d0		       a9 3c	   midiSetIrq lda	#<midiIrq
     83  81d2		       8d 14 03 	      sta	$0314
     84  81d5		       a9 82		      lda	#>midiIrq
     85  81d7		       8d 15 03 	      sta	$0315
     86  81da
     87  81da							; enable IRQ/NMI
     88  81da		       a9 94		      lda	#$94
     89  81dc		       1d 79 82 	      ora	midiCr0Cr1,x
     90  81df		       91 64		      sta	(midiControl),y
     91  81e1
     92  81e1		       58		      cli
     93  81e2		       60		      rts
     94  81e3
     95  81e3		       78	   midiRelease sei
     96  81e4		       20 fd 81 	      jsr	midiReset
     97  81e7		       a9 31		      lda	#$31
     98  81e9		       8d 14 03 	      sta	$0314
     99  81ec		       a9 ea		      lda	#$ea
    100  81ee		       8d 15 03 	      sta	$0315
    101  81f1		       a9 47		      lda	#$47
    102  81f3		       8d 18 03 	      sta	$0318
    103  81f6		       a9 fe		      lda	#$fe
    104  81f8		       8d 19 03 	      sta	$0319
    105  81fb		       58		      cli
    106  81fc		       60		      rts
    107  81fd
    108  81fd							; MC68B50 master reset and IRQ off
    109  81fd				   midiReset
    110  81fd		       a0 00		      ldy	#0
    111  81ff		       a9 03		      lda	#3
    112  8201		       91 64		      sta	(midiControl),y
    113  8203		       60		      rts
    114  8204
    115  8204		       a6 6c	   midiCanRead ldx	midiRingbufferReadIndex
    116  8206		       e4 6d		      cpx	midiRingbufferWriteIndex
    117  8208		       60		      rts
    118  8209
    119  8209							; read MIDI byte from ringbuffer
    120  8209				   midiRead
    121  8209		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    122  820b		       e4 6d		      cpx	midiRingbufferWriteIndex
    123  820d		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    124  820f							;beq midiRead
    125  820f		       60		      rts		; No new data, so return
    126  8210
    127  8210							; wait for MIDI byte and read it from ringbuffer
    128  8210				   midiReadWait
    129  8210		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    130  8212		       e4 6d		      cpx	midiRingbufferWriteIndex
    131  8214		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    132  8216		       4c 10 82 	      jmp	midiReadWait
    133  8219							;rts ; No new data, so return
    134  8219
    135  8219
    136  8219				   processMidi
    137  8219							; read next character from ringbuffer
    138  8219		       bd 00 7f 	      lda	midiRingbuffer,x
    139  821c		       a8		      tay		; save next byte into y
    140  821d		       e8		      inx		; increment buffer pointer...
    141  821e		       8a		      txa
    142  821f							;and #31 ; wrap around at end
    143  821f		       29 ff		      and	#BUFFER_SIZE_MASK
    144  8221		       85 6c		      sta	midiRingbufferReadIndex	; save it
    145  8223		       98		      tya		; the byte read from the buffer ends up in both y and a
    146  8224
    147  8224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    148  8224							; DEBUG - SHOW MIDI DATA
    149  8224				  -	      IF	DEBUG_SHOW_MIDI=1
    150  8224				  -			;IF DEBUG_DISPLAY=1
    151  8224				  -	      sta	temp
    152  8224				  -	      bpl	notStatusByte
    153  8224				  -	      lda	#$E
    154  8224				  -	      sta	hexDispColor
    155  8224				  -	      jmp	endColor
    156  8224				  -notStatusByte
    157  8224				  -	      lda	#$F
    158  8224				  -	      sta	hexDispColor
    159  8224				  -endColor
    160  8224				  -	      lda	debugOffset
    161  8224				  -	      and	#$F0
    162  8224				  -	      lsr
    163  8224				  -	      lsr
    164  8224				  -	      lsr
    165  8224				  -	      tax
    166  8224				  -			;ldx #34
    167  8224				  -	      lda	debugOffset
    168  8224				  -	      and	#$0F
    169  8224				  -	      tay
    170  8224				  -	      iny
    171  8224				  -	      iny
    172  8224				  -	      iny
    173  8224				  -	      iny
    174  8224				  -	      iny
    175  8224				  -	      iny
    176  8224				  -	      lda	temp
    177  8224				  -	      jsr	displayHex
    178  8224				  -	      inc	debugOffset
    179  8224				  -			;ldy debugOffset
    180  8224				  -			;iny
    181  8224				  -			;tya
    182  8224				  -			;and #$0F
    183  8224				  -			;sta debugOffset
    184  8224				  -			;adc #5
    185  8224				  -			;tay
    186  8224				  -	      lda	temp
    187  8224				  -	      ldy	temp
    188  8224					      ENDIF
    189  8224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  8224
    191  8224		       60		      rts
    192  8225
    193  8225							; write MIDI byte and wait for write complete
    194  8225		       60	   midiWrite  rts		; TODO
    195  8226
    196  8226							; NMI handler
    197  8226		       48	   midiNmi    pha
    198  8227		       8a		      txa
    199  8228		       48		      pha
    200  8229		       98		      tya
    201  822a		       48		      pha
    202  822b
    203  822b							; test if it was a NMI from the MIDI interface
    204  822b		       a0 00		      ldy	#0
    205  822d		       b1 66		      lda	(midiStatus),y
    206  822f		       29 01		      and	#1
    207  8231		       f0 03		      beq	midiNmiEnd
    208  8233		       20 5b 82 	      jsr	midiStore
    209  8236		       68	   midiNmiEnd pla
    210  8237		       a8		      tay
    211  8238		       68		      pla
    212  8239		       aa		      tax
    213  823a		       68		      pla
    214  823b		       40		      rti
    215  823c
    216  823c							; IRQ handler
    217  823c		       a6 6e	   midiIrq    ldx	midiInterfaceType
    218  823e		       ca		      dex
    219  823f		       bd 7d 82 	      lda	midiIrqType,x
    220  8242		       f0 0e		      beq	midiIrqKey
    221  8244
    222  8244							; test if it was an IRQ from the MIDI interface
    223  8244		       a0 00		      ldy	#0
    224  8246		       b1 66		      lda	(midiStatus),y
    225  8248		       29 01		      and	#1
    226  824a		       f0 06		      beq	midiIrqKey
    227  824c		       20 5b 82 	      jsr	midiStore
    228  824f		       4c 36 82 	      jmp	midiNmiEnd
    229  8252
    230  8252							; keyboard test
    231  8252		       20 81 82    midiIrqKey jsr	keyboardTest
    232  8255		       ad 0d dc 	      lda	$dc0d
    233  8258		       4c 36 82 	      jmp	midiNmiEnd
    234  825b
    235  825b							; get MIDI byte and store in ringbuffer
    236  825b		       b1 6a	   midiStore  lda	(midiRx),y
    237  825d		       a6 6d		      ldx	midiRingbufferWriteIndex
    238  825f		       9d 00 7f 	      sta	midiRingbuffer,x
    239  8262		       e8		      inx
    240  8263		       8a		      txa
    241  8264							;and #31
    242  8264		       29 ff		      and	#BUFFER_SIZE_MASK
    243  8266		       85 6d		      sta	midiRingbufferWriteIndex
    244  8268		       60		      rts
    245  8269
    246  8269							; MC68B50 control register (relative to $de00)
    247  8269		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    248  826d
    249  826d							; MC68B50 status register
    250  826d		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    251  8271
    252  8271							; MC68B50 TX register
    253  8271		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    254  8275
    255  8275							; MC68B50 RX register offset
    256  8275		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    257  8279
    258  8279							; counter divide bits CR0 and CR1 for the MC68B50
    259  8279				   midiCr0Cr1
    260  8279		       01 01 02 01	      .byte.b	1, 1, 2, 1
    261  827d
    262  827d							; 1=IRQ, 0=NMI
    263  827d				   midiIrqType
    264  827d		       01 01 01 00	      .byte.b	1, 1, 1, 0
    265  8281
    266  8281
    267  8281							; keyboard test
    268  8281				   keyboardTest
    269  8281		       a6 6f		      ldx	keyTestIndex
    270  8283		       bd c5 82 	      lda	keys,x	; load colum
    271  8286		       8d 00 dc 	      sta	PRA
    272  8289		       e8		      inx
    273  828a		       ad 01 dc 	      lda	PRB
    274  828d		       3d c5 82 	      and	keys,x	; mask row
    275  8290		       e8		      inx
    276  8291		       c9 00		      cmp	#0
    277  8293		       d0 0d		      bne	kbt2
    278  8295		       bd c5 82 	      lda	keys,x
    279  8298		       c9 80		      cmp	#$80
    280  829a		       d0 04		      bne	jump1
    281  829c		       e6 72		      inc	shiftPressed
    282  829e		       d0 02		      bne	kbt2
    283  82a0				   jump1
    284  82a0		       85 70		      sta	keyPressedIntern
    285  82a2				   kbt2
    286  82a2		       e8		      inx
    287  82a3		       e0 12		      cpx	#18
    288  82a5		       d0 1b		      bne	kbt3
    289  82a7		       a6 70		      ldx	keyPressedIntern
    290  82a9		       f0 05		      beq	jump2
    291  82ab		       a5 72		      lda	shiftPressed
    292  82ad		       f0 01		      beq	jump2
    293  82af		       e8		      inx
    294  82b0				   jump2
    295  82b0		       86 71		      stx	keyPressed
    296  82b2		       d0 08		      bne	jump3
    297  82b4		       a5 72		      lda	shiftPressed
    298  82b6		       f0 04		      beq	jump3
    299  82b8		       a9 40		      lda	#$40
    300  82ba		       85 71		      sta	keyPressed
    301  82bc				   jump3
    302  82bc		       a2 00		      ldx	#0
    303  82be		       86 72		      stx	shiftPressed
    304  82c0		       86 70		      stx	keyPressedIntern
    305  82c2				   kbt3
    306  82c2		       86 6f		      stx	keyTestIndex
    307  82c4		       60		      rts
    308  82c5
    309  82c5				   keys
    310  82c5		       fe 10 01 	      .byte.b	%11111110, %00010000, 1	; F1
    311  82c8		       fe 20 03 	      .byte.b	%11111110, %00100000, 3	; F3
    312  82cb		       fe 40 05 	      .byte.b	%11111110, %01000000, 5	; F5
    313  82ce		       fe 08 07 	      .byte.b	%11111110, %00001000, 7	; F7
    314  82d1		       bf 10 80 	      .byte.b	%10111111, %00010000, $80	; right shift
    315  82d4		       bd 80 80 	      .byte.b	%10111101, %10000000, $80	; left shift
------- FILE cynthcart152.asm
   4998  82d7					      ENDIF
   4999  82d7
   5000  82d7
   5001  82d7				  -	      IF	MODE=KERNEL_OBSOLETE
   5002  82d7				  -	      org	$bfff
   5003  82d7				  -	      byte	0
   5004  82d7					      ENDIF

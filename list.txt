------- FILE cynthcart152.asm LEVEL 1 PASS 2
      1  72d7 ????						; Commodore 64 Synthcart
      2  72d7 ????						; by Paul Slocum
      3  72d7 ????						;------------------------
      4  72d7 ????						; TEXT EDITOR TAB=3
      5  72d7 ????						;------------------------
      6  72d7 ????						;
      7  72d7 ????						;
      8  72d7 ????						; TASKS FOR 1.5.2
      9  72d7 ????						; - add some of Gert's mixed waveform sounds
     10  72d7 ????						; - 'O' key specifically may be out of tune
     11  72d7 ????						; - consider adding per-patch filter on/off/disabled setting
     12  72d7 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     13  72d7 ????						;
     14  72d7 ????						;
     15  72d7 ????						; MAYBE LATER:
     16  72d7 ????						;================================= END OF THIS VERSION...
     17  72d7 ????						;
     18  72d7 ????						; - - - - - - - - - - - - - -
     19  72d7 ????						; Change Log:
     20  72d7 ????						; - - - - - - - - - - - - - -
     21  72d7 ????						; 1.5.2
     22  72d7 ????						; + moved secondary SID to $DF00 to work with DATEL MIDI and SIDcart II simultaneously
     23  72d7 ????						; + created new compression setup to fit latest ROM onto 8K cartridge
     24  72d7 ????						; - - - - - - - - - - - - - -
     25  72d7 ????						; 1.5.1
     26  72d7 ????						; + fixed clock and sysex bytes causing crashes/stuck notes (0xF0-0xFF)
     27  72d7 ????						; + fixed bad pitch bend startup value
     28  72d7 ????						; + added non-omni modes for channel 1 and 5
     29  72d7 ????						;
     30  72d7 ????						; - - - - - - - - - - - - - -
     31  72d7 ????						; Change Log:
     32  72d7 ????						; - - - - - - - - - - - - - -
     33  72d7 ????						; 1.5.0
     34  72d7 ????						; + added MIDI support for Kerberos cartridge
     35  72d7 ????						; + moved SID location for MIDI version to $D420 to avoid conflict with MIDI interface
     36  72d7 ????						; + arpeggiator
     37  72d7 ????						; + new FX modes
     38  72d7 ????						; + additional presets
     39  72d7 ????						; + refactored much of project source
     40  72d7 ????						; + new smarter note buffering system
     41  72d7 ????						; + reworked patch parameter display
     42  72d7 ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     43  72d7 ????						; + optimized the tuning shift tables for space by overlapping tables
     44  72d7 ????						; + made LFO and all pitch modulations use proper tuning/scaling
     45  72d7 ????						; + fixed some errors in the tuning shift tables
     46  72d7 ????						; + improved clarity of help screen text
     47  72d7 ????						; + added "RETURN FOR CONTROLS" message at bottom
     48  72d7 ????						;MAYBE....
     49  72d7 ????						;--------------------------
     50  72d7 ????						; - - - - - - - - - - - - - -
     51  72d7 ????						; 1.2.4
     52  72d7 ????						; + designated paddle 1 and 2 in help screen
     53  72d7 ????						; - - - - - - - - - - - - - -
     54  72d7 ????						; 1.2.3
     55  72d7 ????						; + disable key-commands when 3 piano keys are held
     56  72d7 ????						;		to avoid quirks with keyboard matrix
     57  72d7 ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     58  72d7 ????						; + reinstated shift-lock holding notes
     59  72d7 ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     60  72d7 ????						; + add another octave to tuning charts for 5ths in top octave
     61  72d7 ????						; + auto-paddle on
     62  72d7 ????						; + set up custom test for space bar
     63  72d7 ????						; + disable settings changes w/ space bar
     64  72d7 ????						; + corrected "sine" to "tringl" in patch names
     65  72d7 ????						; + restored startup patch to "saw bass"
     66  72d7 ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     67  72d7 ????						;	+ add key command to switch controls and turn off
     68  72d7 ????						;	+ add display of paddle status
     69  72d7 ????						;	+ add code to run things from the second paddle
     70  72d7 ????						; - - - - - - - - - - - - - -
     71  72d7 ????						; 1.2.2
     72  72d7 ????						; + keyboard driver rewrite
     73  72d7 ????						; + moved tuning from piano to ASDF...
     74  72d7 ????						; + moved filter On/Off to ZXC
     75  72d7 ????						; + keys swap portamento and octave
     76  72d7 ????						; + move video mode to SHFT+FGH and require shift for VIC mode
     77  72d7 ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
     78  72d7 ????						; + separate functions for "show everything" and "variable init"
     79  72d7 ????						; + video mode with no text (shift+:/;)
     80  72d7 ????						; + SID register $20-$26 edits all 3 oscillators at once
     81  72d7 ????						; + write help display routine
     82  72d7 ????						; + add help screen
     83  72d7 ????						; + reverse octave keys
     84  72d7 ????						; + add help for SID edit mode
     85  72d7 ????						; + redo hex editor piano KB layout
     86  72d7 ????						; + save SID edits
     87  72d7 ????						; + added "COPYING TO RAM" text when RAM copy is on
     88  72d7 ????						; - - - - - - - - - - - - - -
     89  72d7 ????						; 1.2.1
     90  72d7 ????						; + pitch fix for PAL
     91  72d7 ????						; + autodetection for PAL/NTSC
     92  72d7 ????						; - - - - - - - - - - - - - -
     93  72d7 ????						; 1.2.0
     94  72d7 ????						; + filter adjustment for SID Symphony
     95  72d7 ????						; - - - - - - - - - - - - - -
     96  72d7 ????						; 1.1 RELEASE
     97  72d7 ????						; + added SID HEX editor
     98  72d7 ????						; + changed tuning keys to avoid accidentally changing the tuning
     99  72d7 ????						; + added ability to turn the SID filter on and off
    100  72d7 ????						; - - - - - - - - - - - - - -
    101  72d7 ????						; 1.0 RELEASE
    102  72d7 ????						; + first official release
    103  72d7 ????						;-----------------------------------------------------
    104  72d7 ????
    105  72d7 ????
    106  72d7 ????						;-----------------------------------------------------
    107  72d7 ????						; FUTURE TODO LIST:
    108  72d7 ????						; - - - - - - - - - - - - - - -
    109  72d7 ????						; - midi trigger to turn off/on omni
    110  72d7 ????						; - - - - - - - - - - - - - - -
    111  72d7 ????						; - make rising mod not drop
    112  72d7 ????						; - wire up pwModValue from functions
    113  72d7 ????						; - wire up pwSetValue from midi and paddle
    114  72d7 ????						; - create filter and PW setter that runs every frame
    115  72d7 ????						; - - - - - - - - - - - - - - -
    116  72d7 ????						; - have mono-stack check to make sure notes aren't too low or too high
    117  72d7 ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    118  72d7 ????						; - create system that cycles which spots are favored for new empty or replacement notes
    119  72d7 ????						; - - - - - - - - - - - - - - -
    120  72d7 ????						; - auto-detect secondary SID
    121  72d7 ????						; - automatic setup for Kerberos MIDI
    122  72d7 ????						; - - - - - - - - - - - - - - -
    123  72d7 ????						; - fix note off bug with drum machine?
    124  72d7 ????						; - - - - - - - - - - - - - - -
    125  72d7 ????						; -- show held modifier keys
    126  72d7 ????						; - link SID memory to a controller block
    127  72d7 ????						; - make fifths buttons preserve the portamento setting
    128  72d7 ????						; - - - - - - - - - - - - - - -
    129  72d7 ????						; - new intervals other than 5ths
    130  72d7 ????						; - better mute/noise reduction
    131  72d7 ????						; - alternate set of keybindings for use without the keyboard overlay
    132  72d7 ????						; - - - - - - - - - - - - - - -
    133  72d7 ????						; - auto-detect second SID at multiple locations, avoid conflict with MIDI interface
    134  72d7 ????						; - - - - - - - - - - - - - - -
    135  72d7 ????						; - more patches
    136  72d7 ????						; - paddle 2 auto-on
    137  72d7 ????						; - make smarter key->oscillator assignment to fix long release
    138  72d7 ????						; - LFO during release
    139  72d7 ????						; - LFO -> Pulse Width and Volume and Filter
    140  72d7 ????						; - mono-stack mode
    141  72d7 ????						; - 6 voice polyphony with 2 SIDS
    142  72d7 ????						;--------------------------
    143  72d7 ????						; - add echo long/med/short
    144  72d7 ????						; - more extreme variations in video mode
    145  72d7 ????						; - noise reduction
    146  72d7 ????						; - Envelope -> Filter Cutoff
    147  72d7 ????						; - filter type
    148  72d7 ????						; - ring modulation
    149  72d7 ????						; - sync
    150  72d7 ????						; - Whammy speed control
    151  72d7 ????						;--------------------------
    152  72d7 ????						; - filter Q
    153  72d7 ????						; - save patches to disk
    154  72d7 ????						;--------------------------
    155  72d7 ????						;--------------------------
    156  72d7 ????
    157  72d7 ????
    158  72d7 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    159  72d7 ????						;# MEMORY MAP
    160  72d7 ????						;#
    161  72d7 ????						;# $0800-$3800 Program and data
    162  72d7 ????						;# $7000-$7200 Variables and buffers (512 bytes)
    163  72d7 ????						;# $7F00-$7FFF MIDI ring buffer
    164  72d7 ????						;#
    165  72d7 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    166  72d7 ????
    167  72d7 ????
    168  72d7 ????
    169  72d7 ????
    170  72d7 ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    171  72d7 ????				      processor	6502
    172  72d7 ????
    173  72d7 ????						; Image run mode:
    174  72d7 ????	       00 00	   CART       equ	0	; run at $8000 off cartridge ROM
    175  72d7 ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word
    176  72d7 ????	       00 02	   RAM	      equ	2	; run at $1000, needs to be copied or decompressed into $3000 (used for compresed version)
    177  72d7 ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (This mode is no longer supported)
    178  72d7 ????
    179  72d7 ????						;**********************************************************
    180  72d7 ????						;**********************************************************
    181  72d7 ????						; PROGRAM CONFIGURATION SWITCHES
    182  72d7 ????						;**********************************************************
    183  72d7 ????						;**********************************************************
    184  72d7 ????	       00 02	   MODE       equ	RAM	; DISK, CART, KERNEL_OBSOLETE, or RAM (for compression),
    185  72d7 ????
    186  72d7 ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running
    187  72d7 ????
    188  72d7 ????						;SID2 equ $D420
    189  72d7 ????						;SID2 equ $DE00
    190  72d7 ????	       df 00	   SID2       equ	$DF00
    191  72d7 ????
    192  72d7 ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    193  72d7 ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    194  72d7 ????
    195  72d7 ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    196  72d7 ????
    197  72d7 ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    198  72d7 ????	       00 00	   DEBUG_DISPLAY equ	0
    199  72d7 ????	       00 00	   OFFSET_CONTROLLERS equ	0
    200  72d7 ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    201  72d7 ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    202  72d7 ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    203  72d7 ????
    204  72d7 ????
    205  72d7 ????						;**********************************************************
    206  72d7 ????						;**********************************************************
    207  72d7 ????						;**********************************************************
    208  72d7 ????
    209  72d7 ????						; *********************************************
    210  72d7 ????						; START OF PROGRAM IN MEMORY
    211  72d7 ????						; *********************************************
    212  72d7 ????
    213  72d7 ????						;==================================================
    214  72d7 ????						; load from disk as PRG with auto-run
    215  72d7 ????			  -	      IF	MODE=DISK
    216  72d7 ????			  -BASEADDR   equ	2047	; 2047 = $7FF
    217  72d7 ????			  -	      org	BASEADDR	; the beginning of the BASIC program area
    218  72d7 ????			  -
    219  72d7 ????			  -			; disk load location
    220  72d7 ????			  -	      byte	$01,$08
    221  72d7 ????			  -			; BASIC program to call the cynthcart machine code...
    222  72d7 ????			  -			; 10 SYS 2061
    223  72d7 ????			  -	      byte	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    224  72d7 ????			  -			; next effective address after this is 2061 / $80D
    225  72d7 ????				      ENDIF
    226  72d7 ????
    227  72d7 ????						;==================================================
    228  72d7 ????						; straight cart ROM
    229  72d7 ????			  -	      IF	MODE=CART
    230  72d7 ????			  -BASEADDR   equ	$8000
    231  72d7 ????			  -	      org	BASEADDR
    232  72d7 ????			  -	      word	Startup
    233  72d7 ????			  -	      word	Startup
    234  72d7 ????			  -			; 5 byte cartridge startup code
    235  72d7 ????			  -	      byte	$C3, $C2, $CD, $38, $30
    236  72d7 ????				      ENDIF
    237  72d7 ????
    238  72d7 ????						;==================================================
    239  72d7 ????						; load from RAM, requires wrapper to load into RAM (used for compressed version)
    240  72d7 ????				      IF	MODE=RAM
    241  72d7 ????	       40 00	   BASEADDR   equ	$4000
    242  72d7 ????						;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    243  4000					      org	BASEADDR
    244  4000							;byte $00,$50 ; DEBUG SETUP AS PRG
    245  4000					      ENDIF
    246  4000
    247  4000							;==================================================
    248  4000							; to replace BASIC ROM (NO LONGER SUPPORTED)
    249  4000				  -	      IF	MODE=KERNEL_OBSOLETE
    250  4000				  -BASEADDR   equ	$8000
    251  4000				  -	      org	BASEADDR
    252  4000				  -	      word	$E394	; RESET
    253  4000				  -	      word	$E37B	; Warm Start
    254  4000					      ENDIF
    255  4000
    256  4000							;---------------------------------------
    257  4000							; variables and constants here
    258  4000							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  4000					      include	cynth_vars.asm
      1  4000							; *********************************************
      2  4000							; Constants
      3  4000							; *********************************************
      4  4000
      5  4000							;KEYTIME equ 128
      6  4000							;KEYTIME equ 64
      7  4000		       00 28	   KEYTIME    equ	40
      8  4000
      9  4000		       00 e0	   REL_SHORT  equ	$E0
     10  4000		       00 e9	   REL_MED    equ	$E9
     11  4000		       00 ee	   REL_LONG   equ	$EE
     12  4000
     13  4000		       00 00	   ATK_SHORT  equ	$00
     14  4000		       00 90	   ATK_MED    equ	$90
     15  4000		       00 e0	   ATK_LONG   equ	$E0
     16  4000
     17  4000
     18  4000		       00 00	   VOLOFF     equ	$00
     19  4000		       00 07	   VOLLOW     equ	$07
     20  4000		       00 0b	   VOLMED     equ	$0B
     21  4000		       00 0f	   VOLHIGH    equ	$0F
     22  4000
     23  4000		       00 c5	   CURRENTKEY equ	197
     24  4000
     25  4000		       d0 20	   BACK_COLOR equ	53280
     26  4000		       d0 21	   BORD_COLOR equ	53281
     27  4000
     28  4000		       d4 00	   SID1       equ	$D400
     29  4000
     30  4000
     31  4000							;SID2 equ $DEE0
     32  4000
     33  4000		       00 04	   SID2OFFSET equ	4
     34  4000
     35  4000		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  4000
     37  4000		       00 00	   SV1FL      equ	$00
     38  4000		       00 01	   SV1FH      equ	$01
     39  4000		       00 02	   SV1PWL     equ	$02
     40  4000		       00 03	   SV1PWH     equ	$03
     41  4000		       00 04	   SV1WAVE    equ	$04
     42  4000		       00 05	   SV1AD      equ	$05
     43  4000		       00 06	   SV1SR      equ	$06
     44  4000
     45  4000		       00 07	   SV2FL      equ	$07
     46  4000		       00 08	   SV2FH      equ	$08
     47  4000		       00 09	   SV2PWL     equ	$09
     48  4000		       00 0a	   SV2PWH     equ	$0A
     49  4000		       00 0b	   SV2WAVE    equ	$0B
     50  4000		       00 0c	   SV2AD      equ	$0C
     51  4000		       00 0d	   SV2SR      equ	$0D
     52  4000
     53  4000		       00 0e	   SV3FL      equ	$0E
     54  4000		       00 0f	   SV3FH      equ	$0F
     55  4000		       00 10	   SV3PWL     equ	$10
     56  4000		       00 11	   SV3PWH     equ	$11
     57  4000		       00 12	   SV3WAVE    equ	$12
     58  4000		       00 13	   SV3AD      equ	$13
     59  4000		       00 14	   SV3SR      equ	$14
     60  4000
     61  4000		       00 15	   SFILTL     equ	$15
     62  4000		       00 16	   SFILTH     equ	$16
     63  4000		       00 17	   SFILTC     equ	$17
     64  4000		       00 18	   SVOLMODE   equ	$18
     65  4000
     66  4000		       00 19	   SPAD1      equ	$19
     67  4000		       00 1a	   SPAD2      equ	$1A
     68  4000
     69  4000		       00 1b	   SRAND      equ	$1B
     70  4000
     71  4000		       dc 00	   PortA      equ	$dc00
     72  4000		       dc 02	   Ciddra     equ	$dc02
     73  4000
     74  4000
     75  4000							; *********************************************
     76  4000							; RAM Variables
     77  4000							; *********************************************
     78  4000
     79  4000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  4000							; ZERO PAGE
     81  4000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  4000
     83  4000							; FROM SORTING ROUTINE
     84  4000		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  4000		       01 22	   nval       =	$122	;set by calling program
     86  4000		       01 25	   work1      =	$125	;3 bytes used as working area
     87  4000		       01 26	   work2      =	$126
     88  4000		       01 27	   work3      =	$127
     89  4000
     90  4000							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  4000							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  4000							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  4000							;WORK2  = $34
     94  4000							;WORK3  = $35
     95  4000
     96  4000							; CYNTHCART
     97  4000		       00 22	   tunePtrL   equ	34	;2 bytes
     98  4000		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  4000		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  4000		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  4000
    102  4000		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  4000		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  4000
    105  4000		       00 2f	   helpReadPointerL equ	47
    106  4000		       00 30	   helpReadPointerM equ	48
    107  4000		       00 31	   helpWritePointerL equ	49
    108  4000		       00 32	   helpWritePointerM equ	50
    109  4000		       00 33	   helpColorPointerL equ	51
    110  4000		       00 34	   helpColorPointerM equ	52
    111  4000
    112  4000		       00 35	   portPtrL   equ	53	;2 bytes
    113  4000		       00 47	   portPtrH   equ	71	;2 bytes
    114  4000
    115  4000		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  4000		       00 c3	   keyPtrH    equ	195
    117  4000
    118  4000							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  4000							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  4000							; private addresses ======
    121  4000		       00 64	   midiControl equ	$64	; $64 = 100
    122  4000		       00 66	   midiStatus =	$66	; 102
    123  4000		       00 68	   midiTx     =	$68	;104
    124  4000		       00 6a	   midiRx     =	$6a	;106
    125  4000		       00 6f	   keyTestIndex =	$6f	; 111
    126  4000		       00 70	   keyPressedIntern =	$70	; 112
    127  4000		       00 72	   shiftPressed =	$72	; 114
    128  4000							; public addresses ======
    129  4000		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  4000		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  4000		       00 6e	   midiInterfaceType =	$6e	;110
    132  4000		       00 71	   keyPressed =	$71	; 113
    133  4000							; this module ======
    134  4000		       00 59	   midiMessage equ	$59	; 95
    135  4000		       00 5a	   lastWaveform equ	$5a	; 90
    136  4000							; - - - - - - - - - - - - - -
    137  4000							; - - - - - - - - - - - - - -
    138  4000							; Non-zero page
    139  4000		       7f 00	   midiRingbuffer =	$7F00
    140  4000							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  4000
    142  4000							;-------------------------------------
    143  4000
    144  4000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  4000							; NON-ZERO PAGE ($7000-$7FFF)
    146  4000							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  4000
    148  4000		       70 00	   Trem       equ	$7000
    149  4000
    150  4000		       70 02	   FrameH     equ	$7002
    151  4000		       70 03	   Frame      equ	$7003
    152  4000
    153  4000		       70 04	   EchoPtr    equ	$7004
    154  4000		       70 05	   EchoCur    equ	$7005
    155  4000
    156  4000		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  4000
    158  4000		       70 07	   MagicVoice equ	$7007
    159  4000
    160  4000		       70 08	   LastKey    equ	$7008
    161  4000
    162  4000		       70 09	   Button     equ	$7009
    163  4000
    164  4000		       70 0a	   LFO	      equ	$700A
    165  4000
    166  4000		       70 0b	   PatchTune  equ	$700B
    167  4000
    168  4000		       70 0c	   temp       equ	$700C
    169  4000
    170  4000							;KeyA	equ $700D
    171  4000							;KeyB	equ $700E
    172  4000							;KeyC	equ $700F
    173  4000
    174  4000							;lastKeyA equ $7010
    175  4000							;lastKeyB equ $7011
    176  4000							;lastKeyC equ $7012
    177  4000
    178  4000		       70 13	   portDirA   equ	$7013
    179  4000		       70 14	   portDirB   equ	$7014
    180  4000		       70 15	   portDirC   equ	$7015
    181  4000
    182  4000		       70 16	   pitchLA    equ	$7016
    183  4000		       70 17	   pitchLB    equ	$7017
    184  4000		       70 18	   pitchLC    equ	$7018
    185  4000
    186  4000		       70 19	   pitchHA    equ	$7019
    187  4000		       70 1a	   pitchHB    equ	$701A
    188  4000		       70 1b	   pitchHC    equ	$701B
    189  4000
    190  4000		       70 1c	   volume     equ	$701C
    191  4000
    192  4000							; soundModes
    193  4000							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  4000		       00 00	   MODE_NORMAL equ	$00
    195  4000		       00 08	   MODE_6CHAN equ	$08
    196  4000		       00 10	   MODE_PORT1 equ	$10
    197  4000		       00 11	   MODE_PORT2 equ	$11
    198  4000		       00 12	   MODE_PORT3 equ	$12
    199  4000		       00 20	   MODE_MONO1 equ	$20
    200  4000		       00 21	   MODE_MONO2 equ	$21
    201  4000							;MODE_MONO3	equ $22
    202  4000		       00 40	   MODE_ARP1  equ	$40
    203  4000		       00 41	   MODE_ARP2  equ	$41
    204  4000		       00 42	   MODE_ARP3  equ	$42
    205  4000		       00 43	   MODE_ARP4  equ	$43
    206  4000		       00 44	   MODE_ARP5  equ	$44
    207  4000		       00 01	   MODE_5THS  equ	$01
    208  4000		       00 02	   MODE_5PORT equ	$02
    209  4000							;- - - - - - - - - - -
    210  4000
    211  4000		       00 10	   PORT_MASK  equ	$10
    212  4000		       00 20	   MONO_MASK  equ	$20
    213  4000		       00 40	   ARP_MASK   equ	$40
    214  4000		       00 08	   CHAN6_MASK equ	$08
    215  4000
    216  4000
    217  4000		       70 1d	   soundMode  equ	$701D
    218  4000		       70 1e	   arpSpeed   equ	$701E
    219  4000
    220  4000		       70 1f	   dispOn     equ	$701F
    221  4000
    222  4000		       70 20	   VICMode    equ	$7020
    223  4000
    224  4000		       70 21	   patPtr     equ	$7021
    225  4000
    226  4000		       70 22	   keyOffset  equ	$7022
    227  4000
    228  4000		       70 24	   volModeRAM equ	$7024
    229  4000
    230  4000		       70 25	   shiftL1    equ	$7025
    231  4000		       70 26	   shiftH1    equ	$7026
    232  4000		       70 27	   shiftL2    equ	$7027
    233  4000		       70 28	   shiftH2    equ	$7028
    234  4000
    235  4000							;$7025 - $7028 free
    236  4000
    237  4000		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    238  4000
    239  4000		       70 30	   WaveType   equ	$7030
    240  4000		       70 37	   WaveType2  equ	$7037
    241  4000		       70 3e	   WaveType3  equ	$703E
    242  4000
    243  4000		       70 3f	   LFObend    equ	$703F
    244  4000		       70 40	   bender     equ	$7040
    245  4000
    246  4000		       70 43	   pitchTmpL  equ	$7043
    247  4000		       70 44	   pitchTmpH  equ	$7044
    248  4000
    249  4000		       70 45	   videoMode  equ	$7045
    250  4000
    251  4000		       70 46	   textTemp   equ	$7046
    252  4000
    253  4000		       70 47	   patchSetY  equ	$7047
    254  4000
    255  4000		       70 48	   LFORate    equ	$7048
    256  4000		       70 49	   LFODepth   equ	$7049
    257  4000
    258  4000		       70 50	   videoModeNum equ	$7050
    259  4000
    260  4000		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    261  4000		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    262  4000
    263  4000		       70 57	   filter     equ	$7057
    264  4000
    265  4000		       70 58	   keyTimer   equ	$7058
    266  4000
    267  4000		       70 59	   bendSpd    equ	$7059
    268  4000
    269  4000		       70 5a	   SIDeditAddr equ	$705A
    270  4000		       70 5b	   SIDeditValue equ	$705B
    271  4000
    272  4000		       70 5c	   filterDisable equ	$705C
    273  4000
    274  4000		       70 5d	   lastKey    equ	$705D
    275  4000
    276  4000		       70 60	   hexKeyMode equ	$7060
    277  4000
    278  4000		       70 61	   NTSCmode   equ	$7061
    279  4000
    280  4000		       70 62	   temp16L    equ	$7062
    281  4000		       70 63	   temp16H    equ	$7063
    282  4000
    283  4000		       70 64	   saveX      equ	$7064
    284  4000
    285  4000							;EchoBuffer	equ 1184 ; 256 bytes
    286  4000
    287  4000		       70 65	   keyTemp    equ	$7065
    288  4000
    289  4000		       70 66	   lastOsc    equ	$7066
    290  4000
    291  4000		       70 67	   fullScreenMode equ	$7067
    292  4000
    293  4000		       70 68	   videoText  equ	$7068
    294  4000
    295  4000		       70 69	   attack     equ	$7069
    296  4000		       70 6a	   release    equ	$706A
    297  4000		       70 6b	   octave     equ	$706B
    298  4000		       70 6c	   filterStatus equ	$706C
    299  4000
    300  4000		       70 6d	   helpColor  equ	$706D
    301  4000		       70 6e	   helpYIn    equ	$706E
    302  4000		       70 6f	   helpYOut   equ	$706F
    303  4000
    304  4000		       70 70	   helpMode   equ	$7070
    305  4000
    306  4000		       70 71	   tuneSetting equ	$7071
    307  4000
    308  4000		       70 72	   hexDispTemp equ	$7072
    309  4000
    310  4000		       70 73	   sidTemp1   equ	$7073
    311  4000		       70 74	   sidTemp2   equ	$7074
    312  4000
    313  4000		       70 75	   customPatchSaved equ	$7075
    314  4000
    315  4000		       70 76	   paddleTop  equ	$7076
    316  4000		       70 77	   paddleBottom equ	$7077
    317  4000
    318  4000		       70 78	   paddleX    equ	$7078
    319  4000		       70 79	   paddleY    equ	$7079
    320  4000
    321  4000		       70 7a	   paddle2    equ	$707A
    322  4000		       70 7b	   lastPad2   equ	$707B
    323  4000
    324  4000		       70 7c	   debugOffset equ	$707C
    325  4000		       70 7d	   savedMidiStatus equ	$707D
    326  4000		       70 7e	   firstDataByte equ	$707E
    327  4000		       70 7f	   tempVelocity equ	$707F
    328  4000		       70 80	   bufferSize equ	$7080
    329  4000		       70 81	   noteTempA  equ	$7081
    330  4000		       70 82	   noteTempB  equ	$7082
    331  4000
    332  4000		       70 83	   benderAutoreset equ	$7083
    333  4000		       70 84	   polyphony  equ	$7084
    334  4000
    335  4000		       70 85	   arpOffset  equ	$7085
    336  4000
    337  4000		       70 86	   fxType     equ	$7086
    338  4000		       70 87	   modValue1  equ	$7087
    339  4000		       70 89	   modDirection equ	$7089
    340  4000		       70 8a	   modCounter equ	$708A
    341  4000		       70 8b	   modLFOMinValue equ	$708B
    342  4000		       70 8a	   modLFOMaxValue equ	$708A
    343  4000
    344  4000		       00 00	   MOD_NONE   equ	0
    345  4000		       00 01	   MOD_FILT_LFO equ	1
    346  4000		       00 02	   MOD_FILT_ENV equ	2
    347  4000		       00 03	   MOD_FILT3  equ	3
    348  4000		       00 04	   MOD_FILT4  equ	4
    349  4000		       00 05	   MOD_FILT5  equ	5
    350  4000		       00 06	   MOD_PW_LFO equ	6
    351  4000		       00 07	   MOD_PW2    equ	7
    352  4000
    353  4000		       70 8b	   noteOffCount equ	$708B
    354  4000		       70 8c	   noteOnCount equ	$708C
    355  4000
    356  4000		       70 8d	   hexDispColor equ	$708D
    357  4000
    358  4000		       70 8e	   midiBendValue equ	$708E
    359  4000
    360  4000		       70 8f	   temp2      equ	$708F
    361  4000
    362  4000
    363  4000		       70 97	   resonance  equ	$7097
    364  4000
    365  4000		       70 98	   resetValue equ	$7098
    366  4000
    367  4000		       70 99	   lastNoteCount equ	$7099
    368  4000		       70 9a	   lastNote   equ	$709A
    369  4000
    370  4000		       70 9b	   keyCount   equ	$709B
    371  4000
    372  4000		       70 9c	   filterModValue equ	$709C
    373  4000		       70 9d	   filterSetValue equ	$709D
    374  4000		       70 9e	   pwModValue equ	$709E
    375  4000		       70 9f	   pwSetValue equ	$709F
    376  4000
    377  4000		       70 f0	   midiTuning equ	$70F0
    378  4000		       70 f1	   benderTuning equ	$70F1
    379  4000		       70 f2	   lfoTuning  equ	$70F2
    380  4000		       70 f3	   systemTuning equ	$70F3
    381  4000		       70 f4	   masterTuning equ	$70F4
    382  4000		       70 f5	   finalTuning equ	$70F5
    383  4000		       70 f6	   noteShift  equ	$70F6
    384  4000
    385  4000		       70 f7	   midiMode   equ	$70F7
    386  4000
    387  4000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    388  4000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    389  4000							; BUFFERS
    390  4000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  4000							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    392  4000
    393  4000		       00 08	   NOTE_BUF_SIZE equ	8
    394  4000		       70 a0	   noteNumArray equ	$70A0
    395  4000		       70 b0	   playNoteArray equ	$70B0
    396  4000
    397  4000							;noteVelArray equ $70C0
    398  4000
    399  4000		       70 d0	   kbBuffer   equ	$70D0
    400  4000		       70 e0	   lastKbBuffer equ	$70E0
    401  4000
    402  4000		       70 e1	   tempA      equ	$70E1
    403  4000		       70 e2	   tempX      equ	$70E2
    404  4000		       70 e3	   tempY      equ	$70E3
    405  4000
    406  4000
    407  4000							;-----------------------------------------------
    408  4000
    409  4000							; SID editor custom preset data...
    410  4000		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    411  4000
    412  4000		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    413  4000		       71 41	   savePaddle equ	$7141
    414  4000		       71 42	   saveOctave equ	$7142
    415  4000		       71 43	   saveSoundMode equ	$7143
    416  4000		       71 43	   saveFXType equ	$7143
    417  4000		       71 44	   saveArpSpeed equ	$7144
    418  4000		       71 46	   saveLFODepth equ	$7146
    419  4000		       71 47	   saveLFORate equ	$7147
    420  4000		       71 48	   saveVolume equ	$7148
    421  4000		       71 49	   saveVolMode equ	$7149
    422  4000		       71 4a	   saveFilter equ	$714A
    423  4000
    424  4000
    425  4000
    426  4000
------- FILE cynthcart152.asm
    260  4000
    261  4000							; *********************************************
    262  4000							; Start of program
    263  4000							; *********************************************
    264  4000				   Startup
    265  4000
    266  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    267  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    268  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    269  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    270  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    271  4000							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    272  4000							; switch to lowercase mode
    273  4000		       a9 17		      lda	#23
    274  4002		       8d 18 d0 	      sta	$d018
    275  4005
    276  4005							; clear screen and show info
    277  4005		       a2 00		      ldx	#0
    278  4007		       8e 20 d0 	      stx	$d020
    279  400a		       8e 21 d0 	      stx	$d021
    280  400d				   loop1		; clear screen...
    281  400d		       a9 20		      lda	#32
    282  400f		       9d 00 04 	      sta	$0400,x
    283  4012		       9d fa 04 	      sta	$0400+250,x
    284  4015		       9d f4 05 	      sta	$0400+500,x
    285  4018		       9d ee 06 	      sta	$0400+750,x
    286  401b		       a9 0e		      lda	#14
    287  401d		       9d 00 d8 	      sta	$d800,x
    288  4020		       9d fa d8 	      sta	$d800+250,x
    289  4023		       9d f4 d9 	      sta	$d800+500,x
    290  4026		       9d ee da 	      sta	$d800+750,x
    291  4029		       e8		      inx
    292  402a		       e0 fa		      cpx	#250
    293  402c		       d0 df		      bne	loop1
    294  402e		       a2 00		      ldx	#0
    295  4030				   loop2		; show info...
    296  4030							;lda info,x
    297  4030		       a9 01		      lda	#1
    298  4032		       9d 90 05 	      sta	$0400+10*40,x
    299  4035		       e8		      inx
    300  4036		       e0 50		      cpx	#80
    301  4038		       d0 f6		      bne	loop2
    302  403a
    303  403a							; init SID...
    304  403a		       a9 00		      lda	#0
    305  403c		       a2 00		      ldx	#0
    306  403e		       9d 00 d4    initSid    sta	$d400,x
    307  4041		       e8		      inx
    308  4042		       e0 19		      cpx	#25
    309  4044		       d0 f8		      bne	initSid
    310  4046		       a9 0f		      lda	#15
    311  4048		       8d 18 d4 	      sta	$d418
    312  404b		       a9 01		      lda	#1
    313  404d		       8d 03 d4 	      sta	$d403
    314  4050
    315  4050							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    316  4050							;lock: jmp lock
    317  4050							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    318  4050
    319  4050					      IF	ENABLE_MIDI_COMMANDS=1
    320  4050							; init MIDI and enable all interrupts
    321  4050		       a9 03		      lda	#3
    322  4052		       20 83 71 	      jsr	midiInit
    323  4055					      ENDIF
    324  4055
    325  4055							; Set default hex color
    326  4055		       a9 0e		      lda	#$E
    327  4057		       8d 8d 70 	      sta	hexDispColor
    328  405a
    329  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    330  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    331  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    332  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    333  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    334  405a							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    335  405a
    336  405a				   skipTest
    337  405a
    338  405a							; Copy program into RAM if running from cartridge...
    339  405a				  -	      IF	MODE=CART
    340  405a				  -	      ldx	#0
    341  405a				  -RAMTextCopy
    342  405a				  -	      lda	RAMText,x
    343  405a				  -	      beq	quitRAMTextCopy
    344  405a				  -	      cmp	#64
    345  405a				  -	      bmi	showSpaceRAM
    346  405a				  -	      sbc	#64
    347  405a				  -showSpaceRAM
    348  405a				  -	      sta	1024,x
    349  405a				  -	      inx
    350  405a				  -	      jmp	RAMTextCopy
    351  405a				  -RAMText
    352  405a				  -	      byte	"COPYING TO RAM...",0
    353  405a				  -quitRAMTextCopy
    354  405a				  -			;------------
    355  405a				  -	      ldx	#8*4
    356  405a				  -	      lda	#<copyStart
    357  405a				  -	      sta	copyPtrS
    358  405a				  -	      lda	#>copyStart
    359  405a				  -	      sta	copyPtrS+1
    360  405a				  -	      lda	#<ramStart
    361  405a				  -	      sta	copyPtrD
    362  405a				  -	      lda	#>ramStart
    363  405a				  -	      sta	copyPtrD+1
    364  405a				  -ramCopy1
    365  405a				  -	      ldy	#0
    366  405a				  -ramCopy2
    367  405a				  -	      lda	(copyPtrS),y
    368  405a				  -	      sta	(copyPtrD),y
    369  405a				  -	      dey
    370  405a				  -	      bne	ramCopy2
    371  405a				  -	      inc	copyPtrS+1
    372  405a				  -	      inc	copyPtrD+1
    373  405a				  -	      dex
    374  405a				  -	      bne	ramCopy1
    375  405a				  -	      jmp	ramStart
    376  405a				  -copyStart
    377  405a				  -	      rorg	$3000	; RAM destination
    378  405a				  -ramStart
    379  405a					      ENDIF
    380  405a
    381  405a				  -	      IF	MODE=CART
    382  405a				  -			; System Startup Stuff
    383  405a				  -			; (not needed if starting from disk)
    384  405a				  -	      sei
    385  405a				  -	      jsr	$FF84	; initialize I/O devices
    386  405a				  -	      jsr	$FF87	; initalise memory pointers
    387  405a				  -	      jsr	$FF8A	; restore I/O vectors
    388  405a				  -	      jsr	$FF81	; initalise screen and keyboard
    389  405a				  -	      cli
    390  405a					      ENDIF
    391  405a
    392  405a				  -	      IF	MODE=KERNEL_OBSOLETE
    393  405a				  -	      org	$A483
    394  405a					      ENDIF
    395  405a
    396  405a		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    397  405d		       29 ef		      AND	#$EF	; badlines
    398  405f		       8d 11 d0 	      STA	$D011
    399  4062
    400  4062							; Disable RESTORE key
    401  4062		       a9 c1		      lda	#193
    402  4064		       8d 18 03 	      sta	792
    403  4067
    404  4067		       a9 00		      lda	#0
    405  4069		       8d 20 d0 	      sta	BACK_COLOR
    406  406c		       8d 21 d0 	      sta	BORD_COLOR
    407  406f
    408  406f							;*****************************
    409  406f							; Detect PAL/NTSC
    410  406f							;*****************************
    411  406f							;palntsc:
    412  406f		       78		      sei		; disable interrupts
    413  4070				   wait
    414  4070		       ad 12 d0 	      lda	$d012
    415  4073		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    416  4075				   wait1
    417  4075		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    418  4078		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    419  407a				   wait2
    420  407a		       a0 00		      ldy	#$00
    421  407c				   synch1
    422  407c		       ad 12 d0 	      lda	$d012
    423  407f		       c9 37		      cmp	#$37	; top PAL rasterline
    424  4081		       d0 f9		      bne	synch1
    425  4083		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    426  4086				   synch2
    427  4086		       cd 12 d0 	      cmp	$d012
    428  4089		       f0 fb		      beq	synch2
    429  408b		       ad 12 d0 	      lda	$d012
    430  408e		       58		      cli		; enable interrupts
    431  408f
    432  408f		       8d 61 70 	      sta	NTSCmode
    433  4092
    434  4092
    435  4092
    436  4092
    437  4092							;****************************************************
    438  4092							; init screen and variables
    439  4092							;****************************************************
    440  4092
    441  4092		       a9 00		      lda	#0
    442  4094		       8d 97 70 	      sta	resonance
    443  4097		       8d 8c 70 	      sta	noteOnCount
    444  409a		       8d 8b 70 	      sta	noteOffCount
    445  409d		       20 af 50 	      jsr	setFullScreenMode
    446  40a0		       20 ac 57 	      jsr	variableInit
    447  40a3		       20 23 57 	      jsr	displayInit
    448  40a6
    449  40a6							; Clear note buffer...
    450  40a6		       a2 08		      ldx	#8
    451  40a8		       a9 ff		      lda	#255
    452  40aa				   clearBufferLoop
    453  40aa		       ca		      dex
    454  40ab		       9d a0 70 	      sta	noteNumArray,x
    455  40ae							;sta noteAgeArray,x
    456  40ae							;sta noteVelArray,x
    457  40ae		       d0 fa		      bne	clearBufferLoop
    458  40b0
    459  40b0
    460  40b0				  -	      IF	DEBUG_DISPLAY=1
    461  40b0				  -	      ldx	#>debugOverlay	;low/MSB
    462  40b0				  -	      ldy	#<debugOverlay	;high/LSB
    463  40b0				  -	      jsr	displayPage
    464  40b0					      ENDIF
    465  40b0
    466  40b0		       a9 00		      lda	#0
    467  40b2		       a0 00		      ldy	#0
    468  40b4		       20 64 53 	      jsr	setPatch
    469  40b7
    470  40b7		       a9 00		      lda	#0
    471  40b9		       8d f0 70 	      sta	midiTuning
    472  40bc
    473  40bc		       a9 ff		      lda	#$FF
    474  40be		       20 ee 51 	      jsr	setMidiMode
    475  40c1							;sta midiMode
    476  40c1
    477  40c1							;===========================================
    478  40c1							;===========================================
    479  40c1							;===========================================
    480  40c1							; Main Loop
    481  40c1							;===========================================
    482  40c1							;===========================================
    483  40c1							;===========================================
    484  40c1				   Loop
    485  40c1							; Increment frame counter
    486  40c1		       ee 03 70 	      inc	Frame
    487  40c4		       ad 03 70 	      lda	Frame
    488  40c7		       29 3f		      and	#%00111111
    489  40c9		       d0 03		      bne	SkipHFrame
    490  40cb		       ee 02 70 	      inc	FrameH
    491  40ce				   SkipHFrame
    492  40ce
    493  40ce
    494  40ce		       20 0c 41 	      jsr	processLFO
    495  40d1		       20 4c 4a 	      jsr	processFX
    496  40d4
    497  40d4					      IF	ENABLE_MIDI_COMMANDS=1
    498  40d4		       20 cb 41 	      jsr	processMIDI
    499  40d7					      ENDIF
    500  40d7
    501  40d7		       20 72 4d 	      jsr	readKeyboard
    502  40da		       20 4b 44 	      jsr	processBender
    503  40dd		       20 88 44 	      jsr	processSoundDriver
    504  40e0		       20 de 4b 	      jsr	processPaddles
    505  40e3		       20 a5 4c 	      jsr	processVideoMode
    506  40e6		       20 ec 40 	      jsr	updateFilterAndPW
    507  40e9		       4c c1 40 	      jmp	Loop
    508  40ec							;-------- BOTTOM OF MAIN LOOP ---------------------------
    509  40ec
    510  40ec				   updateFilterAndPW
    511  40ec		       ad 9c 70 	      lda	filterModValue
    512  40ef		       38		      sec
    513  40f0		       e9 7f		      sbc	#127
    514  40f2		       30 0a		      bmi	negativeFilterMod
    515  40f4							; Positive
    516  40f4		       6d 9d 70 	      adc	filterSetValue
    517  40f7		       90 0f		      bcc	doSetFilter
    518  40f9		       a9 ff		      lda	#255
    519  40fb		       4c 08 41 	      jmp	doSetFilter
    520  40fe
    521  40fe				   negativeFilterMod
    522  40fe							; Negative
    523  40fe		       6d 9d 70 	      adc	filterSetValue
    524  4101		       b0 05		      bcs	doSetFilter
    525  4103		       a9 00		      lda	#0
    526  4105		       4c 08 41 	      jmp	doSetFilter
    527  4108
    528  4108							;and #$F0
    529  4108				   doSetFilter
    530  4108		       20 cb 52 	      jsr	setFilter
    531  410b							; TODO: add PW setting
    532  410b		       60		      rts
    533  410c
    534  410c
    535  410c							;-------------------------------
    536  410c							; LFO
    537  410c							;-------------------------------
    538  410c				   processLFO
    539  410c							; Set current LFO modulation
    540  410c							; into (pitch) shift variables
    541  410c
    542  410c							;---------------------------
    543  410c							; get pitch bend from paddle2
    544  410c		       ad 7a 70 	      lda	paddle2
    545  410f		       c9 04		      cmp	#4
    546  4111		       d0 06		      bne	noPadBend
    547  4113		       ad 79 70 	      lda	paddleY
    548  4116		       8d 40 70 	      sta	bender
    549  4119				   noPadBend
    550  4119
    551  4119							;----------------------------
    552  4119							; get depth from paddle2
    553  4119		       ad 7a 70 	      lda	paddle2
    554  411c		       c9 03		      cmp	#3
    555  411e		       d0 0a		      bne	noPadLFO
    556  4120		       ad 79 70 	      lda	paddleY
    557  4123		       4a		      lsr
    558  4124		       4a		      lsr
    559  4125		       4a		      lsr
    560  4126		       a8		      tay
    561  4127		       4c 30 41 	      jmp	skipFixedLFODepth
    562  412a							;---------------------
    563  412a							; calculate LFO depth
    564  412a							; increases per octave
    565  412a				   noPadLFO
    566  412a		       ae 49 70 	      ldx	LFODepth
    567  412d		       bc 4e 6b 	      ldy	LFODepthArray,x
    568  4130				   skipFixedLFODepth
    569  4130		       ad 22 70 	      lda	keyOffset	; current octave offset
    570  4133		       c9 0c		      cmp	#12
    571  4135		       30 08		      bmi	endDepth
    572  4137		       c8		      iny
    573  4138		       c9 24		      cmp	#36
    574  413a		       d0 03		      bne	endDepth
    575  413c		       98		      tya
    576  413d		       0a		      asl
    577  413e		       a8		      tay
    578  413f				   endDepth		; y now contains the depth value
    579  413f
    580  413f
    581  413f							; figure out LFO position
    582  413f		       ad 02 70 	      lda	FrameH
    583  4142		       ae 48 70 	      ldx	LFORate
    584  4145		       f0 0e		      beq	LFOSkip
    585  4147		       ad 03 70 	      lda	Frame
    586  414a		       ca		      dex
    587  414b		       ca		      dex
    588  414c		       ca		      dex
    589  414d		       f0 06		      beq	LFOSkip
    590  414f		       4a		      lsr
    591  4150		       e8		      inx
    592  4151		       f0 02		      beq	LFOSkip
    593  4153		       4a		      lsr
    594  4154		       4a		      lsr
    595  4155				   LFOSkip
    596  4155		       4a		      lsr
    597  4156
    598  4156		       29 0f		      and	#$0F
    599  4158		       aa		      tax
    600  4159		       bd 92 6b 	      lda	LFOArrH,x
    601  415c		       8d 26 70 	      sta	shiftH1
    602  415f		       d0 10		      bne	negativeLFO
    603  4161
    604  4161		       18		      clc
    605  4162		       bd 82 6b 	      lda	LFOArrL,x
    606  4165				   depthLoop
    607  4165		       7d 82 6b 	      adc	LFOArrL,x
    608  4168		       88		      dey
    609  4169		       d0 fa		      bne	depthLoop
    610  416b		       8d 25 70 	      sta	shiftL1
    611  416e		       4c 86 41 	      jmp	endLFO
    612  4171
    613  4171				   negativeLFO
    614  4171		       bd 82 6b 	      lda	LFOArrL,x
    615  4174				   depthLoopN
    616  4174		       7d 82 6b 	      adc	LFOArrL,x
    617  4177		       88		      dey
    618  4178		       d0 fa		      bne	depthLoopN
    619  417a		       8d 0c 70 	      sta	temp
    620  417d		       a9 ff		      lda	#255
    621  417f		       38		      sec
    622  4180		       ed 0c 70 	      sbc	temp
    623  4183		       8d 25 70 	      sta	shiftL1
    624  4186				   endLFO
    625  4186
    626  4186							; if depth=0 then cancel LFO
    627  4186		       ad 7a 70 	      lda	paddle2
    628  4189		       c9 03		      cmp	#3
    629  418b		       f0 0d		      beq	doLFO
    630  418d		       ad 49 70 	      lda	LFODepth
    631  4190		       d0 08		      bne	doLFO
    632  4192		       a9 00		      lda	#0
    633  4194		       8d 25 70 	      sta	shiftL1
    634  4197		       8d 26 70 	      sta	shiftH1
    635  419a				   doLFO
    636  419a
    637  419a		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    638  419d		       d0 05		      bne	showLFO
    639  419f		       ad 67 70 	      lda	fullScreenMode
    640  41a2		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    641  41a4							;--------
    642  41a4							; Show it
    643  41a4				   showLFO
    644  41a4		       bd a2 6b 	      lda	LFOdisp,x
    645  41a7		       aa		      tax
    646  41a8		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    647  41aa							;adc #10
    648  41aa
    649  41aa							;lda #160
    650  41aa							;sta 1063,x
    651  41aa		       9d ff d7 	      sta	55296-1,x
    652  41ad
    653  41ad							;clear the previous one
    654  41ad							;lda #32
    655  41ad		       a9 02		      lda	#CYNTHCART_COLOR
    656  41af							;sta 1064,x
    657  41af		       9d 00 d8 	      sta	55296+0,x
    658  41b2		       e0 01		      cpx	#1
    659  41b4		       f0 03		      beq	dontErase
    660  41b6							;sta 1062,x
    661  41b6		       9d fe d7 	      sta	55296-2,x
    662  41b9				   dontErase
    663  41b9
    664  41b9							; set up shift for second SID
    665  41b9							; chip, pitch a tad higher for
    666  41b9							; awesome chorus effect
    667  41b9		       18		      clc
    668  41ba		       ad 25 70 	      lda	shiftL1
    669  41bd		       69 04		      adc	#SID2OFFSET
    670  41bf		       8d 27 70 	      sta	shiftL2
    671  41c2		       ad 26 70 	      lda	shiftH1
    672  41c5		       69 00		      adc	#0
    673  41c7		       8d 28 70 	      sta	shiftH2
    674  41ca
    675  41ca							; LFO->filter
    676  41ca							;	lda shiftL1
    677  41ca							;	clc
    678  41ca							;	adc #128
    679  41ca							;	sta SID1+SFILTH
    680  41ca							;	sta SID2+SFILTH
    681  41ca
    682  41ca				   skipLFO
    683  41ca		       60		      rts
    684  41cb
    685  41cb							; Echo stuff
    686  41cb							;	inc EchoCur
    687  41cb							;	inc EchoPtr
    688  41cb							; Save note in echo buffer
    689  41cb							;	ldx EchoCur
    690  41cb							;	sta EchoBuffer,x
    691  41cb
    692  41cb							;---------------------
    693  41cb							; Read keyboard
    694  41cb							;jsr readKeyboard
    695  41cb							;---------------------
    696  41cb
    697  41cb							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    698  41cb							; Read MIDI
    699  41cb							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    700  41cb							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    701  41cb					      IF	ENABLE_MIDI_COMMANDS=1
    702  41cb				   processMIDI
    703  41cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    704  41cb							; Debug - show main note buffer
    705  41cb				  -	      IF	DEBUG_DISPLAY=1
    706  41cb				  -	      lda	noteNumArray+0
    707  41cb				  -	      sta	1744+125
    708  41cb				  -	      lda	noteNumArray+1
    709  41cb				  -	      sta	1744+126
    710  41cb				  -	      lda	noteNumArray+2
    711  41cb				  -	      sta	1744+127
    712  41cb				  -	      lda	noteNumArray+3
    713  41cb				  -	      sta	1744+128
    714  41cb				  -
    715  41cb				  -	      lda	noteNumArray+4
    716  41cb				  -	      sta	1744+129
    717  41cb				  -	      lda	noteNumArray+5
    718  41cb				  -	      sta	1744+130
    719  41cb				  -	      lda	noteNumArray+6
    720  41cb				  -	      sta	1744+131
    721  41cb				  -	      lda	noteNumArray+7
    722  41cb				  -	      sta	1744+132
    723  41cb					      ENDIF
    724  41cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    725  41cb
    726  41cb							; get next MIDI byte
    727  41cb				   check
    728  41cb					      IF	ENABLE_MIDI_COMMANDS=1
    729  41cb		       20 09 72 	      jsr	midiRead	; Midi byte will be in A and Y
    730  41ce					      ENDIF
    731  41ce		       d0 03		      bne	continueReading
    732  41d0		       4c 1d 44 	      jmp	endMIDI
    733  41d3				   continueReading
    734  41d3
    735  41d3
    736  41d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    737  41d3							; DEBUG - SHOW MIDI DATA
    738  41d3				  -	      IF	DEBUG_DISPLAY=1
    739  41d3				  -	      inc	1824+81
    740  41d3				  -	      sta	temp
    741  41d3				  -	      ldx	#34
    742  41d3				  -	      ldy	debugOffset
    743  41d3				  -	      iny
    744  41d3				  -	      iny
    745  41d3				  -	      iny
    746  41d3				  -	      iny
    747  41d3				  -	      iny
    748  41d3				  -	      iny
    749  41d3				  -	      jsr	displayHex
    750  41d3				  -	      ldy	debugOffset
    751  41d3				  -	      iny
    752  41d3				  -	      tya
    753  41d3				  -	      and	#$0F
    754  41d3				  -	      sta	debugOffset
    755  41d3				  -	      adc	#5
    756  41d3				  -	      tay
    757  41d3				  -	      lda	temp
    758  41d3				  -	      ldy	temp
    759  41d3					      ENDIF
    760  41d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    761  41d3
    762  41d3							; If bit 7 isn't set, then it's a running mode byte...
    763  41d3		       10 68		      bpl	runningModeByte
    764  41d5		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
    765  41d8		       a8		      tay
    766  41d9		       29 f0		      and	#$F0
    767  41db		       c9 f0		      cmp	#$F0
    768  41dd		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
    769  41df							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    770  41df
    771  41df							;tya
    772  41df
    773  41df							; If bit 7 isn't set, then it's a running mode byte...
    774  41df							;bpl runningModeByte
    775  41df
    776  41df
    777  41df							;tay
    778  41df							;and #$F0
    779  41df							;cmp #$F0
    780  41df							;beq processSysex ;Skip saving status if it's sysex
    781  41df							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    782  41df							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
    783  41df					      IF	ENABLE_MIDI_COMMANDS=1
    784  41df		       20 10 72 	      jsr	midiReadWait	; Midi byte will be in A and Y
    785  41e2					      ENDIF
    786  41e2		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
    787  41e5		       ad 7d 70 	      lda	savedMidiStatus
    788  41e8		       20 55 42 	      jsr	processMidiMessage	; handle the rest of the message...
    789  41eb		       4c cb 41 	      jmp	check	; End of loop - - -
    790  41ee
    791  41ee				   processSysex
    792  41ee		       98		      tya		; Get systex byte
    793  41ef		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    794  41f1		       d0 0a		      bne	checkF1
    795  41f3				   sysexReadingLoop
    796  41f3		       20 10 72 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    797  41f6		       c9 f7		      cmp	#$F7
    798  41f8		       d0 f9		      bne	sysexReadingLoop
    799  41fa		       4c cb 41 	      jmp	check
    800  41fd							; - - - - - -
    801  41fd				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    802  41fd		       c9 f1		      cmp	#$F1
    803  41ff		       d0 06		      bne	checkF2
    804  4201		       20 10 72 	      jsr	midiReadWait
    805  4204		       4c cb 41 	      jmp	check
    806  4207							; - - - - - -
    807  4207				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    808  4207		       c9 f2		      cmp	#$F2
    809  4209		       d0 09		      bne	checkF3
    810  420b					      IF	ENABLE_MIDI_COMMANDS=1
    811  420b		       20 10 72 	      jsr	midiReadWait
    812  420e		       20 10 72 	      jsr	midiReadWait
    813  4211					      ENDIF
    814  4211		       4c cb 41 	      jmp	check
    815  4214							; - - - - - -
    816  4214				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    817  4214		       c9 f3		      cmp	#$F3
    818  4216		       d0 09		      bne	checkF8
    819  4218		       20 10 72 	      jsr	midiReadWait
    820  421b		       4c cb 41 	      jmp	check
    821  421e							; - - - - - -
    822  421e							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    823  421e		       4c cb 41 	      jmp	check
    824  4221
    825  4221
    826  4221				   checkF8
    827  4221		       c9 f8		      cmp	#$F8
    828  4223		       d0 03		      bne	checkFA
    829  4225							; NO EXTRA BYTES TO READ
    830  4225		       4c cb 41 	      jmp	check
    831  4228							; - - - - - -
    832  4228				   checkFA
    833  4228		       c9 fa		      cmp	#$FA
    834  422a		       d0 03		      bne	checkFC
    835  422c							; NO EXTRA BYTES TO READ
    836  422c		       4c cb 41 	      jmp	check
    837  422f							; - - - - - -
    838  422f				   checkFC
    839  422f		       c9 fc		      cmp	#$FC
    840  4231		       d0 03		      bne	checkFF
    841  4233							; NO EXTRA BYTES TO READ
    842  4233		       4c cb 41 	      jmp	check
    843  4236							; - - - - - -
    844  4236				   checkFF
    845  4236		       c9 ff		      cmp	#$FF
    846  4238		       d0 00		      bne	endSysex
    847  423a							;---- END SYSTEM/CLOCK ----
    848  423a				   endSysex
    849  423a		       4c cb 41 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    850  423d
    851  423d
    852  423d				   runningModeByte
    853  423d		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    854  4240		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    855  4243		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    856  4245		       c9 f0		      cmp	#$F0
    857  4247		       d0 03		      bne	normalRunningMode
    858  4249							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    859  4249							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    860  4249		       4c cb 41 	      jmp	check
    861  424c							;-----------------------
    862  424c							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    863  424c							;jsr midiReadWait ; Now need to get a new "status byte"
    864  424c							;jmp runningModeByte
    865  424c
    866  424c				   normalRunningMode
    867  424c		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    868  424f		       20 55 42 	      jsr	processMidiMessage
    869  4252		       4c cb 41 	      jmp	check
    870  4255
    871  4255				   processMidiMessage
    872  4255		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    873  4256
    874  4256							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    875  4256		       ad f7 70 	      lda	midiMode
    876  4259		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    877  425b		       98		      tya
    878  425c		       29 0f		      and	#$0F
    879  425e		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    880  4261		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    881  4263
    882  4263							;---------------------------------------------
    883  4263							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    884  4263							;---------------------------------------------
    885  4263		       98		      tya
    886  4264		       09 40		      ora	#%01000000
    887  4266		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    888  4268		       98		      tya
    889  4269		       09 20		      ora	#%00100000
    890  426b		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    891  426d
    892  426d				   twoParameters
    893  426d		       20 10 72 	      jsr	midiReadWait
    894  4270				   oneParameter
    895  4270							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    896  4270		       60		      rts
    897  4271							;jmp check
    898  4271
    899  4271
    900  4271				   endChannelCheck
    901  4271							; Status byte should be in A
    902  4271							; Ignoring channel for now
    903  4271							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    904  4271		       98		      tya
    905  4272
    906  4272
    907  4272		       29 f0		      and	#$F0
    908  4274		       c9 80		      cmp	#$80	; Note off
    909  4276		       d0 03		      bne	notNoteOff
    910  4278		       4c ea 43 	      jmp	noteOff
    911  427b				   notNoteOff
    912  427b		       c9 90		      cmp	#$90	; Note on
    913  427d		       d0 03		      bne	notNoteOn
    914  427f		       4c b4 43 	      jmp	noteOn
    915  4282				   notNoteOn
    916  4282		       c9 e0		      cmp	#$E0	; Pitch bend
    917  4284		       f0 3a		      beq	pitchBend
    918  4286		       c9 b0		      cmp	#$B0	; Control change
    919  4288		       d0 03		      bne	notControlChange
    920  428a		       4c e0 42 	      jmp	controlChange
    921  428d				   notControlChange
    922  428d		       c9 d0		      cmp	#$D0	; Channel pressure
    923  428f		       f0 2b		      beq	channelPressure
    924  4291		       c9 a0		      cmp	#$A0	; Key pressure
    925  4293		       f0 0f		      beq	keyPressure
    926  4295		       c9 c0		      cmp	#$C0	; Patch change
    927  4297		       f0 12		      beq	patchChange
    928  4299							;cmp #$F0 ; Sysex
    929  4299							;beq sysex
    930  4299		       8d e4 07 	      sta	2020
    931  429c		       a9 02		      lda	#2
    932  429e		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    933  42a1		       4c 1d 44 	      jmp	endMIDI
    934  42a4
    935  42a4
    936  42a4				   keyPressure
    937  42a4				  -	      IF	DEBUG_DISPLAY=1
    938  42a4				  -	      inc	1824+86
    939  42a4					      ENDIF
    940  42a4		       ad 7e 70 	      lda	firstDataByte
    941  42a7					      IF	ENABLE_MIDI_COMMANDS=1
    942  42a7		       20 10 72 	      jsr	midiReadWait
    943  42aa					      ENDIF
    944  42aa		       60		      rts
    945  42ab
    946  42ab
    947  42ab
    948  42ab							;REL_SHORT equ $E0
    949  42ab							;REL_MED	equ $E9
    950  42ab							;REL_LONG equ $EE
    951  42ab
    952  42ab							;ATK_SHORT equ $00
    953  42ab							;ATK_MED	equ $90
    954  42ab							;ATK_LONG equ $E0
    955  42ab
    956  42ab				   patchChange
    957  42ab				  -	      IF	DEBUG_DISPLAY=1
    958  42ab				  -	      inc	1824+88
    959  42ab					      ENDIF
    960  42ab		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    961  42ae		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    962  42b0		       a0 1c		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    963  42b2				   skipPatchDefault1
    964  42b2		       c0 1c		      cpy	#MAX_PATCH_NUMBER
    965  42b4		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    966  42b6		       a0 1c		      ldy	#MAX_PATCH_NUMBER
    967  42b8				   skipPatchDefault2
    968  42b8		       20 64 53 	      jsr	setPatch
    969  42bb		       60		      rts
    970  42bc
    971  42bc				   channelPressure
    972  42bc				  -	      IF	DEBUG_DISPLAY=1
    973  42bc				  -	      inc	1824+89
    974  42bc					      ENDIF
    975  42bc		       ad 7e 70 	      lda	firstDataByte
    976  42bf		       60		      rts
    977  42c0
    978  42c0				   pitchBend
    979  42c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    980  42c0							; DEBUG - SHOW MIDI DATA
    981  42c0				  -	      IF	DEBUG_DISPLAY=1
    982  42c0				  -			;sta temp
    983  42c0				  -	      ldx	#25
    984  42c0				  -	      ldy	#22
    985  42c0				  -	      jsr	displayHex
    986  42c0				  -	      lda	temp
    987  42c0				  -	      ldy	temp
    988  42c0				  -	      inc	1824+90
    989  42c0					      ENDIF
    990  42c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    991  42c0
    992  42c0		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    993  42c3		       4a		      lsr
    994  42c4		       4a		      lsr
    995  42c5		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    996  42c8		       38		      sec
    997  42c9		       e9 50		      sbc	#$50	; Center on zero
    998  42cb		       30 09		      bmi	negPitch	; If negative...
    999  42cd		       c9 46		      cmp	#70	; Max value
   1000  42cf		       30 0b		      bmi	setTuningValue
   1001  42d1		       a9 46		      lda	#70	; Over max, so set to max value (50)
   1002  42d3		       4c dc 42 	      jmp	setTuningValue
   1003  42d6
   1004  42d6		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
   1005  42d6				   negPitch
   1006  42d6		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
   1007  42d8		       10 02		      bpl	setTuningValue
   1008  42da		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
   1009  42dc
   1010  42dc				   setTuningValue
   1011  42dc		       8d f0 70 	      sta	midiTuning
   1012  42df
   1013  42df
   1014  42df							;	lda firstDataByte
   1015  42df
   1016  42df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1017  42df							; DEBUG - SHOW MIDI DATA
   1018  42df				  -	      IF	DEBUG_DISPLAY=1
   1019  42df				  -	      sta	temp
   1020  42df				  -	      ldx	#25
   1021  42df				  -	      ldy	#23
   1022  42df				  -	      jsr	displayHex
   1023  42df				  -	      lda	temp
   1024  42df				  -	      ldy	temp
   1025  42df					      ENDIF
   1026  42df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1027  42df
   1028  42df		       60		      rts
   1029  42e0
   1030  42e0
   1031  42e0				   controlChange
   1032  42e0				  -	      IF	DEBUG_DISPLAY=1
   1033  42e0				  -	      inc	1824+87
   1034  42e0					      ENDIF
   1035  42e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1036  42e0							; DEBUG - SHOW MIDI DATA
   1037  42e0				  -	      IF	DEBUG_DISPLAY=1
   1038  42e0				  -	      sta	temp
   1039  42e0				  -	      lda	firstDataByte
   1040  42e0				  -	      ldy	#21
   1041  42e0				  -	      ldx	#17
   1042  42e0				  -	      jsr	displayHex
   1043  42e0				  -	      lda	temp
   1044  42e0				  -	      ldy	temp
   1045  42e0					      ENDIF
   1046  42e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1047  42e0
   1048  42e0					      IF	ENABLE_MIDI_COMMANDS=1
   1049  42e0		       20 10 72 	      jsr	midiReadWait	; Read controller value
   1050  42e3					      ENDIF
   1051  42e3		       a8		      tay
   1052  42e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1053  42e4							; DEBUG - SHOW MIDI DATA
   1054  42e4				  -	      IF	DEBUG_DISPLAY=1
   1055  42e4				  -	      sta	temp
   1056  42e4				  -			;lda firstDataByte
   1057  42e4				  -	      ldy	#22
   1058  42e4				  -	      ldx	#17
   1059  42e4				  -	      jsr	displayHex
   1060  42e4				  -	      lda	temp
   1061  42e4				  -	      ldy	temp
   1062  42e4					      ENDIF
   1063  42e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1064  42e4		       ad 7e 70 	      lda	firstDataByte	; Get controller number
   1065  42e7				  -	      IF	OFFSET_CONTROLLERS=1
   1066  42e7				  -	      sec
   1067  42e7				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
   1068  42e7					      ENDIF
   1069  42e7							;and #$0F ; Repeat every 16 controllers
   1070  42e7		       29 ef		      and	#%11101111	; Repeat every 16 controllers
   1071  42e9		       d0 0a		      bne	notResonance
   1072  42eb							; Resonance
   1073  42eb		       98		      tya
   1074  42ec		       29 f0		      and	#$F0
   1075  42ee		       8d 97 70 	      sta	resonance
   1076  42f1		       20 60 50 	      jsr	setResonance
   1077  42f4		       60		      rts
   1078  42f5				   notResonance
   1079  42f5		       c9 01		      cmp	#1
   1080  42f7		       d0 07		      bne	notModWheel
   1081  42f9							;Mod wheel
   1082  42f9		       98		      tya
   1083  42fa		       0a		      asl
   1084  42fb		       a8		      tay
   1085  42fc		       8d 9d 70 	      sta	filterSetValue
   1086  42ff							;jsr ksetFilter
   1087  42ff		       60		      rts
   1088  4300				   notModWheel
   1089  4300		       c9 02		      cmp	#2
   1090  4302		       d0 0e		      bne	notMode
   1091  4304							; Sound Mode
   1092  4304		       98		      tya
   1093  4305		       4a		      lsr
   1094  4306		       4a		      lsr
   1095  4307		       4a		      lsr
   1096  4308		       29 0f		      and	#$0F
   1097  430a		       aa		      tax
   1098  430b		       bd ed 5e 	      lda	modeList,x
   1099  430e		       20 11 53 	      jsr	ksetMode
   1100  4311		       60		      rts
   1101  4312				   notMode
   1102  4312		       c9 03		      cmp	#3
   1103  4314		       d0 0b		      bne	notFX
   1104  4316							; FX
   1105  4316		       98		      tya
   1106  4317		       4a		      lsr
   1107  4318		       4a		      lsr
   1108  4319		       4a		      lsr
   1109  431a		       4a		      lsr
   1110  431b		       29 07		      and	#$07
   1111  431d		       20 e9 52 	      jsr	ksetFX
   1112  4320		       60		      rts
   1113  4321				   notFX
   1114  4321		       c9 04		      cmp	#4
   1115  4323		       d0 08		      bne	notAttack
   1116  4325							; Attack
   1117  4325		       98		      tya
   1118  4326		       0a		      asl
   1119  4327		       29 f0		      and	#$F0
   1120  4329		       20 2c 52 	      jsr	setAttack
   1121  432c		       60		      rts
   1122  432d				   notAttack
   1123  432d		       c9 05		      cmp	#5
   1124  432f		       d0 0c		      bne	notRelease
   1125  4331							; Release
   1126  4331		       98		      tya
   1127  4332		       4a		      lsr
   1128  4333		       4a		      lsr
   1129  4334		       4a		      lsr
   1130  4335		       29 0f		      and	#$0F
   1131  4337		       09 f0		      ora	#$F0
   1132  4339		       20 8d 51 	      jsr	setRelease
   1133  433c		       60		      rts
   1134  433d				   notRelease
   1135  433d		       c9 06		      cmp	#6
   1136  433f		       d0 08		      bne	notPW
   1137  4341							; Pulse Width
   1138  4341		       98		      tya
   1139  4342		       0a		      asl
   1140  4343		       09 10		      ora	#%10000
   1141  4345		       20 85 4c 	      jsr	setPulseWidth
   1142  4348		       60		      rts
   1143  4349				   notPW
   1144  4349		       c9 07		      cmp	#7
   1145  434b		       d0 08		      bne	notVolume
   1146  434d							; Volume
   1147  434d		       98		      tya
   1148  434e		       4a		      lsr
   1149  434f		       4a		      lsr
   1150  4350		       4a		      lsr
   1151  4351		       20 5f 52 	      jsr	ksetVolume
   1152  4354		       60		      rts
   1153  4355				   notVolume
   1154  4355		       c9 08		      cmp	#8
   1155  4357		       d0 0b		      bne	notTremolo
   1156  4359							; Tremolo level
   1157  4359		       98		      tya
   1158  435a		       4a		      lsr
   1159  435b		       4a		      lsr
   1160  435c		       4a		      lsr
   1161  435d		       4a		      lsr
   1162  435e		       29 03		      and	#$03
   1163  4360		       20 5b 51 	      jsr	setLFODepth
   1164  4363		       60		      rts
   1165  4364				   notTremolo
   1166  4364		       c9 09		      cmp	#9
   1167  4366		       d0 0b		      bne	notTremRate
   1168  4368							; Tremolo level
   1169  4368		       98		      tya
   1170  4369		       4a		      lsr
   1171  436a		       4a		      lsr
   1172  436b		       4a		      lsr
   1173  436c		       4a		      lsr
   1174  436d		       29 03		      and	#$03
   1175  436f		       20 71 51 	      jsr	setLFORate
   1176  4372		       60		      rts
   1177  4373				   notTremRate
   1178  4373		       c9 0d		      cmp	#13
   1179  4375		       d0 14		      bne	notWaveform
   1180  4377							; Waveform (all voices)
   1181  4377		       98		      tya
   1182  4378		       4a		      lsr
   1183  4379		       4a		      lsr
   1184  437a		       4a		      lsr
   1185  437b		       29 03		      and	#$03
   1186  437d		       aa		      tax
   1187  437e		       bd b0 43 	      lda	waveForms,x
   1188  4381		       8d 37 70 	      sta	WaveType2
   1189  4384		       8d 3e 70 	      sta	WaveType3
   1190  4387		       8d 30 70 	      sta	WaveType
   1191  438a		       60		      rts
   1192  438b				   notWaveform
   1193  438b		       c9 0e		      cmp	#14
   1194  438d		       d0 0e		      bne	notWaveform2
   1195  438f							; Waveform (voice 2 only)
   1196  438f		       98		      tya
   1197  4390		       4a		      lsr
   1198  4391		       4a		      lsr
   1199  4392		       4a		      lsr
   1200  4393		       29 03		      and	#$03
   1201  4395		       aa		      tax
   1202  4396		       bd b0 43 	      lda	waveForms,x
   1203  4399		       8d 37 70 	      sta	WaveType2
   1204  439c		       60		      rts
   1205  439d				   notWaveform2
   1206  439d		       c9 0f		      cmp	#15
   1207  439f		       d0 0e		      bne	notWaveform3
   1208  43a1							; Waveform (voice 3 only)
   1209  43a1		       98		      tya
   1210  43a2		       4a		      lsr
   1211  43a3		       4a		      lsr
   1212  43a4		       4a		      lsr
   1213  43a5		       29 03		      and	#$03
   1214  43a7		       aa		      tax
   1215  43a8		       bd b0 43 	      lda	waveForms,x
   1216  43ab		       8d 3e 70 	      sta	WaveType3
   1217  43ae		       60		      rts
   1218  43af				   notWaveform3
   1219  43af		       60		      rts
   1220  43b0
   1221  43b0				   waveForms
   1222  43b0		       10 20 40 80	      byte.b	$10,$20,$40,$80
   1223  43b4							;-  -	-  -  -  -  -  -
   1224  43b4
   1225  43b4							;IF ENABLE_MIDI_COMMANDS=1
   1226  43b4					      ENDIF
   1227  43b4
   1228  43b4							; note is in Y
   1229  43b4				   noteOn
   1230  43b4
   1231  43b4		       8d 0c 70 	      sta	temp
   1232  43b7					      IF	ENABLE_MIDI_COMMANDS=1
   1233  43b7		       20 10 72 	      jsr	midiReadWait	; Read velocity byte
   1234  43ba					      ENDIF
   1235  43ba		       8d 7f 70 	      sta	tempVelocity
   1236  43bd		       d0 09		      bne	almostNoteOn
   1237  43bf							; Zero-velocity, so it's really a note-off...
   1238  43bf							;inc 53280
   1239  43bf		       ad 7e 70 	      lda	firstDataByte
   1240  43c2		       38		      sec
   1241  43c3		       e9 0c		      sbc	#12	; Down one octave
   1242  43c5		       4c fc 43 	      jmp	doNoteOff
   1243  43c8				   almostNoteOn
   1244  43c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1245  43c8							; DEBUG - SHOW MIDI DATA
   1246  43c8				  -	      IF	DEBUG_DISPLAY=1
   1247  43c8				  -	      sta	temp
   1248  43c8				  -	      lda	noteOnCount
   1249  43c8				  -	      and	#1
   1250  43c8				  -	      asl
   1251  43c8				  -	      asl
   1252  43c8				  -	      asl
   1253  43c8				  -	      ora	#$F4
   1254  43c8				  -	      sta	hexDispColor
   1255  43c8				  -	      lda	noteOnCount
   1256  43c8				  -	      and	#%1111
   1257  43c8				  -	      asl
   1258  43c8				  -	      tax
   1259  43c8				  -			;lda temp
   1260  43c8				  -	      lda	savedMidiStatus
   1261  43c8				  -	      ldy	#6
   1262  43c8				  -	      jsr	displayHex
   1263  43c8				  -	      lda	temp
   1264  43c8				  -	      ldy	temp
   1265  43c8				  -	      inc	1824+83	; DEBUG INDICATOR
   1266  43c8					      ENDIF
   1267  43c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1268  43c8		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
   1269  43cb		       38		      sec
   1270  43cc		       e9 0c		      sbc	#12	; Down one octave
   1271  43ce				   doNoteOn
   1272  43ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1273  43ce							; DEBUG - SHOW MIDI DATA
   1274  43ce				  -	      IF	DEBUG_DISPLAY=1
   1275  43ce				  -	      sta	temp
   1276  43ce				  -	      lda	noteOnCount
   1277  43ce				  -	      and	#%1111
   1278  43ce				  -	      asl
   1279  43ce				  -	      tax
   1280  43ce				  -	      lda	temp
   1281  43ce				  -	      ldy	#7
   1282  43ce				  -	      jsr	displayHex
   1283  43ce				  -	      lda	temp
   1284  43ce				  -	      ldy	temp
   1285  43ce					      ENDIF
   1286  43ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1287  43ce
   1288  43ce							; Find empty note slot...
   1289  43ce		       ae 80 70 	      ldx	bufferSize	;3
   1290  43d1		       a8		      tay
   1291  43d2							;ldx #3 ; DEBUG!
   1292  43d2		       ca		      dex
   1293  43d3				   noteOnLoop
   1294  43d3		       bd a0 70 	      lda	noteNumArray,x
   1295  43d6		       c9 ff		      cmp	#255
   1296  43d8		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
   1297  43da		       ca		      dex
   1298  43db		       10 f6		      bpl	noteOnLoop
   1299  43dd		       a2 00		      ldx	#0
   1300  43df				   quitNoteOnLoop
   1301  43df
   1302  43df		       98		      tya
   1303  43e0		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
   1304  43e3
   1305  43e3							;jsr midiReadWait ; Read velocity byte
   1306  43e3		       ad 7f 70 	      lda	tempVelocity
   1307  43e6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1308  43e6							; DEBUG - SHOW MIDI DATA
   1309  43e6				  -	      IF	DEBUG_DISPLAY=1
   1310  43e6				  -	      sta	temp
   1311  43e6				  -	      lda	noteOnCount
   1312  43e6				  -	      and	#%1111
   1313  43e6				  -	      asl
   1314  43e6				  -	      tax
   1315  43e6				  -	      lda	temp
   1316  43e6				  -	      ldy	#8
   1317  43e6				  -	      jsr	displayHex
   1318  43e6				  -	      lda	temp
   1319  43e6				  -	      ldy	temp
   1320  43e6					      ENDIF
   1321  43e6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1322  43e6							;/----------------------
   1323  43e6		       ee 8c 70 	      inc	noteOnCount
   1324  43e9		       60		      rts
   1325  43ea
   1326  43ea				   noteOff
   1327  43ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1328  43ea							; DEBUG - SHOW MIDI DATA
   1329  43ea				  -	      IF	DEBUG_DISPLAY=1
   1330  43ea				  -	      sta	temp
   1331  43ea				  -	      lda	noteOffCount
   1332  43ea				  -	      and	#1
   1333  43ea				  -			;eor #1
   1334  43ea				  -	      asl
   1335  43ea				  -	      asl
   1336  43ea				  -	      asl
   1337  43ea				  -	      ora	#$F4
   1338  43ea				  -	      sta	hexDispColor
   1339  43ea				  -	      lda	noteOffCount
   1340  43ea				  -	      and	#%1111
   1341  43ea				  -	      asl
   1342  43ea				  -	      tax
   1343  43ea				  -	      lda	temp
   1344  43ea				  -	      ldy	#10
   1345  43ea				  -	      jsr	displayHex
   1346  43ea				  -	      lda	temp
   1347  43ea				  -	      ldy	temp
   1348  43ea					      ENDIF
   1349  43ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1350  43ea
   1351  43ea							;jmp endMIDI
   1352  43ea
   1353  43ea		       8d 0c 70 	      sta	temp
   1354  43ed					      IF	ENABLE_MIDI_COMMANDS=1
   1355  43ed		       20 10 72 	      jsr	midiReadWait	; Read velocity byte
   1356  43f0					      ENDIF
   1357  43f0		       8d 7f 70 	      sta	tempVelocity
   1358  43f3		       ad 0c 70 	      lda	temp
   1359  43f6
   1360  43f6		       ad 7e 70 	      lda	firstDataByte
   1361  43f9		       38		      sec
   1362  43fa		       e9 0c		      sbc	#12	; Down one octave
   1363  43fc							;jsr midiReadWait ; Note number
   1364  43fc
   1365  43fc				   doNoteOff
   1366  43fc							; Find matching note number to turn note off...
   1367  43fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1368  43fc							; DEBUG - SHOW MIDI DATA
   1369  43fc				  -	      IF	DEBUG_DISPLAY=1
   1370  43fc				  -	      sta	temp
   1371  43fc				  -	      lda	noteOffCount
   1372  43fc				  -	      and	#%1111
   1373  43fc				  -	      asl
   1374  43fc				  -	      tax
   1375  43fc				  -	      lda	temp
   1376  43fc				  -	      ldy	#11
   1377  43fc				  -	      jsr	displayHex
   1378  43fc				  -	      lda	temp
   1379  43fc				  -	      ldy	temp
   1380  43fc					      ENDIF
   1381  43fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1382  43fc
   1383  43fc		       ae 80 70 	      ldx	bufferSize	;3
   1384  43ff		       8d 0c 70 	      sta	temp
   1385  4402							;ldx #3 ; DEBUG!
   1386  4402		       ca		      dex
   1387  4403				   killNoteLoop
   1388  4403		       bd a0 70 	      lda	noteNumArray,x
   1389  4406		       cd 0c 70 	      cmp	temp	; Note match?
   1390  4409		       f0 06		      beq	foundNote	; Then go turn off note
   1391  440b		       ca		      dex		; next slot
   1392  440c		       10 f5		      bpl	killNoteLoop	; loop through all slots
   1393  440e							;Not found, so ignore
   1394  440e		       4c 16 44 	      jmp	endNoteOff
   1395  4411
   1396  4411				   foundNote
   1397  4411		       a9 ff		      lda	#255
   1398  4413		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
   1399  4416
   1400  4416				   endNoteOff
   1401  4416		       ad 7f 70 	      lda	tempVelocity
   1402  4419							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1403  4419							; DEBUG - SHOW MIDI DATA
   1404  4419				  -	      IF	DEBUG_DISPLAY=1
   1405  4419				  -	      sta	temp
   1406  4419				  -	      lda	noteOffCount
   1407  4419				  -	      and	#%1111
   1408  4419				  -	      asl
   1409  4419				  -	      tax
   1410  4419				  -	      lda	temp
   1411  4419				  -	      ldy	#12
   1412  4419				  -	      jsr	displayHex
   1413  4419				  -	      lda	temp
   1414  4419				  -	      ldy	temp
   1415  4419					      ENDIF
   1416  4419							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1417  4419							;/----------------------
   1418  4419		       ee 8b 70 	      inc	noteOffCount
   1419  441c		       60		      rts
   1420  441d
   1421  441d
   1422  441d				   endMIDI
   1423  441d							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
   1424  441d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1425  441d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1426  441d							; FILL EMPTY PLAYABLE NOTES WITH ANY
   1427  441d							; NON-PLAYING NOTES IN THE BUFFER
   1428  441d							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1429  441d							;jsr doSort
   1430  441d
   1431  441d		       ae 84 70 	      ldx	polyphony
   1432  4420		       ca		      dex
   1433  4421							;ldx #2 ; DEBUG
   1434  4421				   noteScan
   1435  4421		       bd a0 70 	      lda	noteNumArray,x
   1436  4424		       c9 ff		      cmp	#255	; Is note off?
   1437  4426		       f0 06		      beq	searchCopyNote
   1438  4428				   contNoteScan
   1439  4428		       ca		      dex
   1440  4429		       10 f6		      bpl	noteScan	; Loop...
   1441  442b		       4c 4a 44 	      jmp	quitNoteScan	; Done, jump to end
   1442  442e
   1443  442e				   searchCopyNote
   1444  442e							;ldy bufferSize
   1445  442e							;dey
   1446  442e							;ldy #3
   1447  442e		       ac 84 70 	      ldy	polyphony
   1448  4431				   copyNoteLoop
   1449  4431		       b9 a0 70 	      lda	noteNumArray,y
   1450  4434		       c9 ff		      cmp	#255
   1451  4436		       d0 07		      bne	replaceNote
   1452  4438		       c8		      iny
   1453  4439		       c0 08		      cpy	#NOTE_BUF_SIZE
   1454  443b		       f0 eb		      beq	contNoteScan
   1455  443d		       d0 f2		      bne	copyNoteLoop
   1456  443f
   1457  443f				   replaceNote
   1458  443f		       9d a0 70 	      sta	noteNumArray,x
   1459  4442		       a9 ff		      lda	#255
   1460  4444		       99 a0 70 	      sta	noteNumArray,y
   1461  4447		       4c 28 44 	      jmp	contNoteScan
   1462  444a
   1463  444a				   quitNoteScan
   1464  444a		       60		      rts
   1465  444b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1466  444b
   1467  444b
   1468  444b
   1469  444b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1470  444b							; PROCESS BENDER
   1471  444b							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1472  444b				   processBender
   1473  444b							; Update space-bar pitch bend...
   1474  444b		       ad 83 70 	      lda	benderAutoreset
   1475  444e		       f0 13		      beq	endBenderReset
   1476  4450		       ad 40 70 	      lda	bender
   1477  4453		       d0 08		      bne	doBenderReset
   1478  4455		       a9 00		      lda	#0
   1479  4457		       8d 83 70 	      sta	benderAutoreset
   1480  445a		       4c 63 44 	      jmp	endBenderReset
   1481  445d				   doBenderReset
   1482  445d		       ce 40 70 	      dec	bender
   1483  4460		       ce 40 70 	      dec	bender
   1484  4463				   endBenderReset
   1485  4463
   1486  4463
   1487  4463							; Insert bender into LFO offset...
   1488  4463		       ad 25 70 	      lda	shiftL1
   1489  4466		       38		      sec
   1490  4467		       ed 40 70 	      sbc	bender
   1491  446a		       8d 25 70 	      sta	shiftL1
   1492  446d		       ad 26 70 	      lda	shiftH1
   1493  4470		       e9 00		      sbc	#0
   1494  4472		       8d 26 70 	      sta	shiftH1
   1495  4475
   1496  4475		       ad 27 70 	      lda	shiftL2
   1497  4478		       38		      sec
   1498  4479		       ed 40 70 	      sbc	bender
   1499  447c		       8d 27 70 	      sta	shiftL2
   1500  447f		       ad 28 70 	      lda	shiftH2
   1501  4482		       e9 00		      sbc	#0
   1502  4484		       8d 28 70 	      sta	shiftH2
   1503  4487		       60		      rts
   1504  4488
   1505  4488							;DEBUG -- disable LFO/bender
   1506  4488							;	lda #0
   1507  4488							;	sta shiftL1
   1508  4488							;	sta shiftL2
   1509  4488							;	sta shiftH1
   1510  4488							;	sta shiftH2
   1511  4488
   1512  4488							;----------------------------
   1513  4488
   1514  4488				   processSoundDriver
   1515  4488							; determine whether to use portamento player
   1516  4488							; or regular player...
   1517  4488		       ad 1d 70 	      lda	soundMode
   1518  448b		       f0 28		      beq	polyMode
   1519  448d		       29 10		      and	#PORT_MASK
   1520  448f		       f0 03		      beq	nextSoundModeCheck1
   1521  4491		       4c 36 49 	      jmp	playPort
   1522  4494				   nextSoundModeCheck1
   1523  4494		       ad 1d 70 	      lda	soundMode
   1524  4497		       29 20		      and	#MONO_MASK
   1525  4499		       f0 03		      beq	nextSoundModeCheck2
   1526  449b		       4c d5 44 	      jmp	playMono
   1527  449e				   nextSoundModeCheck2
   1528  449e		       ad 1d 70 	      lda	soundMode
   1529  44a1		       29 40		      and	#ARP_MASK
   1530  44a3		       f0 03		      beq	nextSoundModeCheck3
   1531  44a5		       4c 87 45 	      jmp	playArp
   1532  44a8				   nextSoundModeCheck3
   1533  44a8		       ad 1d 70 	      lda	soundMode
   1534  44ab		       29 08		      and	#CHAN6_MASK
   1535  44ad		       f0 03		      beq	nextSoundModeCheck4
   1536  44af		       4c 06 46 	      jmp	play6Chan
   1537  44b2				   nextSoundModeCheck4
   1538  44b2		       4c 22 45 	      jmp	playFifths	; Otherwise, it's a 5ths mode
   1539  44b5							;lda soundMode
   1540  44b5							;cmp #MODE_5THS
   1541  44b5							;bne endSoundMode
   1542  44b5							;jmp playFifths
   1543  44b5							;endSoundMode:
   1544  44b5							;brk ; Shouldn't ever reach this point in code
   1545  44b5
   1546  44b5
   1547  44b5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1548  44b5							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
   1549  44b5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1550  44b5				   polyMode
   1551  44b5		       a2 02		      ldx	#2
   1552  44b7				   polyCopyLoop
   1553  44b7		       bd a0 70 	      lda	noteNumArray,x
   1554  44ba		       9d b0 70 	      sta	playNoteArray,x
   1555  44bd		       ca		      dex
   1556  44be		       10 f7		      bpl	polyCopyLoop
   1557  44c0
   1558  44c0		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
   1559  44c3		       8d b3 70 	      sta	playNoteArray+3
   1560  44c6		       ad a1 70 	      lda	noteNumArray+1
   1561  44c9		       8d b4 70 	      sta	playNoteArray+4
   1562  44cc		       ad a2 70 	      lda	noteNumArray+2
   1563  44cf		       8d b5 70 	      sta	playNoteArray+5
   1564  44d2
   1565  44d2		       4c 2c 48 	      jmp	sixVoicePlayer
   1566  44d5
   1567  44d5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1568  44d5							; MONO-STACK SOUND DRIVER
   1569  44d5							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1570  44d5				   playMono
   1571  44d5		       ad a0 70 	      lda	noteNumArray
   1572  44d8				   playMonoWithA
   1573  44d8		       8d 0c 70 	      sta	temp
   1574  44db		       8d b0 70 	      sta	playNoteArray+0
   1575  44de		       c9 ff		      cmp	#255
   1576  44e0		       f0 25		      beq	monoMute
   1577  44e2		       ae 1d 70 	      ldx	soundMode
   1578  44e5		       e0 21		      cpx	#MODE_MONO2
   1579  44e7		       f0 03		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
   1580  44e9							;-------------------------------------
   1581  44e9		       18		      clc
   1582  44ea		       69 0c		      adc	#12
   1583  44ec				   noRaiseOctave
   1584  44ec		       8d b1 70 	      sta	playNoteArray+1
   1585  44ef							;lda noteNumArray
   1586  44ef		       ad 0c 70 	      lda	temp
   1587  44f2		       ae 1d 70 	      ldx	soundMode
   1588  44f5		       e0 21		      cpx	#MODE_MONO2
   1589  44f7		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
   1590  44f9		       38		      sec
   1591  44fa		       e9 0c		      sbc	#12
   1592  44fc		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
   1593  44fe		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
   1594  4501							;-------------------------------------
   1595  4501				   noDropOctave
   1596  4501		       8d b2 70 	      sta	playNoteArray+2
   1597  4504		       4c 0d 45 	      jmp	doubleToStereo
   1598  4507				   monoMute
   1599  4507		       8d b1 70 	      sta	playNoteArray+1
   1600  450a		       8d b2 70 	      sta	playNoteArray+2
   1601  450d
   1602  450d				   doubleToStereo
   1603  450d		       ad b0 70 	      lda	playNoteArray+0
   1604  4510		       8d b3 70 	      sta	playNoteArray+3
   1605  4513		       ad b1 70 	      lda	playNoteArray+1
   1606  4516		       8d b4 70 	      sta	playNoteArray+4
   1607  4519		       ad b2 70 	      lda	playNoteArray+2
   1608  451c		       8d b5 70 	      sta	playNoteArray+5
   1609  451f
   1610  451f		       4c 2c 48 	      jmp	sixVoicePlayer
   1611  4522
   1612  4522							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1613  4522							; 5THS SOUND DRIVER (DEFAULT)
   1614  4522							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1615  4522				   playFifths
   1616  4522							;jmp polyMode ; DEBUG!
   1617  4522		       20 f8 58 	      jsr	doSort
   1618  4525		       a2 02		      ldx	#2
   1619  4527				   fifthsCopyLoop
   1620  4527		       bd a0 70 	      lda	noteNumArray,x
   1621  452a		       9d b0 70 	      sta	playNoteArray,x
   1622  452d		       ca		      dex
   1623  452e		       10 f7		      bpl	fifthsCopyLoop
   1624  4530							; Add 5th
   1625  4530		       ad b0 70 	      lda	playNoteArray
   1626  4533		       c9 ff		      cmp	#255
   1627  4535		       f0 26		      beq	end5ths
   1628  4537		       ad b1 70 	      lda	playNoteArray+1
   1629  453a		       c9 ff		      cmp	#255
   1630  453c		       d0 0c		      bne	checkThird
   1631  453e							; Found a note and an empty slot, put 5th in second slot
   1632  453e		       ad b0 70 	      lda	playNoteArray
   1633  4541		       18		      clc
   1634  4542		       69 07		      adc	#7
   1635  4544		       8d b1 70 	      sta	playNoteArray+1
   1636  4547		       4c 5d 45 	      jmp	end5ths
   1637  454a
   1638  454a				   checkThird
   1639  454a		       ad b2 70 	      lda	playNoteArray+2
   1640  454d		       c9 ff		      cmp	#255
   1641  454f		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
   1642  4551							; Third slot is free, so put 5th is 3rd slot
   1643  4551		       ad b1 70 	      lda	playNoteArray+1
   1644  4554		       18		      clc
   1645  4555		       69 07		      adc	#7
   1646  4557		       8d b2 70 	      sta	playNoteArray+2
   1647  455a		       4c 5d 45 	      jmp	end5ths
   1648  455d
   1649  455d				   end5ths
   1650  455d		       ad b0 70 	      lda	playNoteArray+0
   1651  4560		       8d b3 70 	      sta	playNoteArray+3
   1652  4563		       ad b1 70 	      lda	playNoteArray+1
   1653  4566		       8d b4 70 	      sta	playNoteArray+4
   1654  4569		       ad b2 70 	      lda	playNoteArray+2
   1655  456c		       8d b5 70 	      sta	playNoteArray+5
   1656  456f
   1657  456f		       ad 1d 70 	      lda	soundMode
   1658  4572		       c9 02		      cmp	#MODE_5PORT
   1659  4574		       f0 03		      beq	playPort5th
   1660  4576		       4c 2c 48 	      jmp	sixVoicePlayer
   1661  4579				   playPort5th
   1662  4579		       4c 44 49 	      jmp	portPlayer
   1663  457c
   1664  457c
   1665  457c
   1666  457c
   1667  457c				   arpSpeedTable
   1668  457c		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
   1669  4587
   1670  4587							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1671  4587							; ARP STEREO SOUND DRIVER
   1672  4587							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1673  4587				   playArp
   1674  4587
   1675  4587							; Figure out arp speed setting...
   1676  4587		       ad 1d 70 	      lda	soundMode
   1677  458a		       29 0f		      and	#$0F
   1678  458c		       aa		      tax
   1679  458d		       bd 7c 45 	      lda	arpSpeedTable,x
   1680  4590		       8d 0c 70 	      sta	temp
   1681  4593
   1682  4593		       ae 1d 70 	      ldx	soundMode
   1683  4596		       e0 43		      cpx	#MODE_ARP4
   1684  4598		       f0 35		      beq	playArpDown
   1685  459a		       e0 44		      cpx	#MODE_ARP5
   1686  459c		       f0 31		      beq	playArpDown
   1687  459e
   1688  459e							;***********
   1689  459e							; ARP UP
   1690  459e							;***********
   1691  459e							; Increment arpOffset pointer...
   1692  459e		       ad 03 70 	      lda	Frame
   1693  45a1		       2d 0c 70 	      and	temp	; Arp speed
   1694  45a4		       d0 03		      bne	skipArpAdvance
   1695  45a6		       ee 85 70 	      inc	arpOffset
   1696  45a9				   skipArpAdvance
   1697  45a9
   1698  45a9							; Sort note buffer
   1699  45a9		       20 f8 58 	      jsr	doSort
   1700  45ac
   1701  45ac							; Count the number of notes...
   1702  45ac		       a2 00		      ldx	#0
   1703  45ae		       a9 ff		      lda	#255
   1704  45b0				   noteCount
   1705  45b0		       dd a0 70 	      cmp	noteNumArray,x
   1706  45b3		       f0 06		      beq	quitNoteCount
   1707  45b5		       e8		      inx
   1708  45b6		       ec 80 70 	      cpx	bufferSize
   1709  45b9		       d0 f5		      bne	noteCount
   1710  45bb				   quitNoteCount
   1711  45bb							; X now contains the note count
   1712  45bb
   1713  45bb							; Make sure arpOffset isn't past end...
   1714  45bb		       ca		      dex
   1715  45bc		       ec 85 70 	      cpx	arpOffset
   1716  45bf		       10 05		      bpl	noArpOffsetReset
   1717  45c1		       a9 00		      lda	#0	; Reset to zero
   1718  45c3		       8d 85 70 	      sta	arpOffset
   1719  45c6				   noArpOffsetReset
   1720  45c6
   1721  45c6							; Play single arp note...
   1722  45c6		       ac 85 70 	      ldy	arpOffset
   1723  45c9		       b9 a0 70 	      lda	noteNumArray,y
   1724  45cc
   1725  45cc		       4c d8 44 	      jmp	playMonoWithA
   1726  45cf
   1727  45cf
   1728  45cf							;***********
   1729  45cf							; ARP DOWN
   1730  45cf							;***********
   1731  45cf				   playArpDown
   1732  45cf							; Decrement arpOffset pointer...
   1733  45cf		       ad 03 70 	      lda	Frame
   1734  45d2		       2d 0c 70 	      and	temp	; Arp speed
   1735  45d5		       d0 03		      bne	skipArpAdvance2
   1736  45d7		       ce 85 70 	      dec	arpOffset
   1737  45da				   skipArpAdvance2
   1738  45da
   1739  45da							; Sort note buffer
   1740  45da		       20 f8 58 	      jsr	doSort
   1741  45dd
   1742  45dd							; Count the number of notes...
   1743  45dd		       a2 00		      ldx	#0
   1744  45df		       a9 ff		      lda	#255
   1745  45e1				   noteCount2
   1746  45e1		       dd a0 70 	      cmp	noteNumArray,x
   1747  45e4		       f0 06		      beq	quitNoteCount2
   1748  45e6		       e8		      inx
   1749  45e7		       ec 80 70 	      cpx	bufferSize
   1750  45ea		       30 f5		      bmi	noteCount2
   1751  45ec				   quitNoteCount2
   1752  45ec							; X now contains the note count
   1753  45ec		       8e 0c 70 	      stx	temp
   1754  45ef
   1755  45ef							; Make sure arpOffset isn't at zero...
   1756  45ef		       ad 85 70 	      lda	arpOffset
   1757  45f2		       10 09		      bpl	noArpOffsetReset2
   1758  45f4		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
   1759  45f7		       f0 01		      beq	skipTempDecrement
   1760  45f9		       ca		      dex
   1761  45fa				   skipTempDecrement
   1762  45fa		       8e 85 70 	      stx	arpOffset
   1763  45fd				   noArpOffsetReset2
   1764  45fd
   1765  45fd							; Play single arp note...
   1766  45fd		       ac 85 70 	      ldy	arpOffset
   1767  4600		       b9 a0 70 	      lda	noteNumArray,y
   1768  4603
   1769  4603		       4c d8 44 	      jmp	playMonoWithA
   1770  4606
   1771  4606
   1772  4606							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1773  4606							; 6-CHANNEL MONO SOUND DRIVER
   1774  4606							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1775  4606				   play6Chan
   1776  4606		       ad a0 70 	      lda	noteNumArray+0
   1777  4609		       8d b0 70 	      sta	playNoteArray+0
   1778  460c		       ad a1 70 	      lda	noteNumArray+1
   1779  460f		       8d b4 70 	      sta	playNoteArray+4
   1780  4612		       ad a2 70 	      lda	noteNumArray+2
   1781  4615		       8d b2 70 	      sta	playNoteArray+2
   1782  4618
   1783  4618		       ad a3 70 	      lda	noteNumArray+3
   1784  461b		       8d b3 70 	      sta	playNoteArray+3
   1785  461e		       ad a4 70 	      lda	noteNumArray+4
   1786  4621		       8d b1 70 	      sta	playNoteArray+1
   1787  4624		       ad a5 70 	      lda	noteNumArray+5
   1788  4627		       8d b5 70 	      sta	playNoteArray+5
   1789  462a
   1790  462a		       4c 2c 48 	      jmp	sixVoicePlayer
   1791  462d
   1792  462d
   1793  462d				   retuneNoteShiftTable
   1794  462d		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
   1795  4646		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
   1796  465f		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
   1797  4678		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
   1798  4690		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1799  4696		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1800  46af		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1801  46c8
   1802  46c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1803  46c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1804  46c8							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
   1805  46c8							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
   1806  46c8		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
   1807  46e1		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
   1808  46fa		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
   1809  4713		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
   1810  472c
   1811  472c				   retuneTable
   1812  472c		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1813  4745		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1814  475e		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1815  4777		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1816  4790		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1817  4796		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1818  47af		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1819  47c8		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1820  47e1		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1821  47fa		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1822  4813		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1823  482c							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1824  482c
   1825  482c							;************************************************
   1826  482c							; 6-VOICE SOUND DRIVER
   1827  482c							;************************************************
   1828  482c				   sixVoicePlayer
   1829  482c
   1830  482c							; Calculate master tuning...
   1831  482c		       ad f3 70 	      lda	systemTuning
   1832  482f		       18		      clc
   1833  4830		       6d f0 70 	      adc	midiTuning
   1834  4833		       8d f4 70 	      sta	masterTuning
   1835  4836		       a8		      tay
   1836  4837
   1837  4837							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1838  4837							; DEBUG - SHOW TUNING DATA
   1839  4837				  -	      IF	DEBUG_DISPLAY=1
   1840  4837				  -	      tya
   1841  4837				  -	      sta	temp
   1842  4837				  -	      ldy	#20
   1843  4837				  -	      ldx	#20
   1844  4837				  -	      jsr	displayHex
   1845  4837				  -	      lda	temp
   1846  4837				  -	      ldy	temp
   1847  4837					      ENDIF
   1848  4837							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1849  4837
   1850  4837		       b9 2c 47 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
   1851  483a		       18		      clc
   1852  483b		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
   1853  483d
   1854  483d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1855  483d							; DEBUG - SHOW TUNING DATA
   1856  483d				  -	      IF	DEBUG_DISPLAY=1
   1857  483d				  -	      sta	temp
   1858  483d				  -	      ldy	#21
   1859  483d				  -	      ldx	#20
   1860  483d				  -	      jsr	displayHex
   1861  483d				  -	      lda	temp
   1862  483d				  -	      ldy	temp
   1863  483d					      ENDIF
   1864  483d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1865  483d
   1866  483d		       a8		      tay
   1867  483e		       b9 26 6b 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
   1868  4841		       85 22		      sta	tunePtrL
   1869  4843		       b9 30 6b 	      lda	tuneArrPtrLH,y
   1870  4846		       85 23		      sta	tunePtrL+1
   1871  4848		       b9 3a 6b 	      lda	tuneArrPtrHL,y
   1872  484b		       85 24		      sta	tunePtrH
   1873  484d		       b9 44 6b 	      lda	tuneArrPtrHH,y
   1874  4850		       85 25		      sta	tunePtrH+1
   1875  4852
   1876  4852							; Look up note shift from master tuning...
   1877  4852		       ac f4 70 	      ldy	masterTuning
   1878  4855		       b9 2d 46 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
   1879  4858		       8d f6 70 	      sta	noteShift
   1880  485b							; - - - - - - - - - - - - -
   1881  485b		       a2 05		      ldx	#5
   1882  485d				   shiftNoteLoop
   1883  485d		       bd b0 70 	      lda	playNoteArray,x
   1884  4860		       c9 ff		      cmp	#255
   1885  4862		       f0 07		      beq	skipShiftNote
   1886  4864		       18		      clc
   1887  4865		       6d f6 70 	      adc	noteShift
   1888  4868		       9d b0 70 	      sta	playNoteArray,x
   1889  486b				   skipShiftNote
   1890  486b		       ca		      dex
   1891  486c		       10 ef		      bpl	shiftNoteLoop
   1892  486e
   1893  486e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1894  486e							; DEBUG - SHOW TUNING DATA
   1895  486e				  -	      IF	DEBUG_DISPLAY=1
   1896  486e				  -	      sta	temp
   1897  486e				  -	      ldy	#22
   1898  486e				  -	      ldx	#20
   1899  486e				  -	      jsr	displayHex
   1900  486e				  -	      lda	temp
   1901  486e				  -	      ldy	temp
   1902  486e					      ENDIF
   1903  486e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1904  486e
   1905  486e							; For each voice on SID #1...
   1906  486e		       a2 02		      ldx	#2
   1907  4870				   NsetRegsSidA
   1908  4870		       8e 0c 70 	      stx	temp	; save current voice number
   1909  4873		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
   1910  4876		       bd bd 60 	      lda	voiceOffset,x	;
   1911  4879		       aa		      tax
   1912  487a		       c0 ff		      cpy	#255
   1913  487c		       d0 04		      bne	NsoundOnSidA
   1914  487e		       a9 00		      lda	#0
   1915  4880		       f0 3f		      beq	NsoundOffSidA
   1916  4882				   NsoundOnSidA
   1917  4882
   1918  4882							; load note and deal
   1919  4882							; with tuning ------;
   1920  4882		       ad 61 70 	      lda	NTSCmode	;
   1921  4885		       f0 14		      beq	palPlaySidA	;
   1922  4887				   ntscPlaySidA 		;
   1923  4887		       18		      clc		;
   1924  4888		       b9 b2 6b 	      lda	NSoundLArr,y	;
   1925  488b		       71 22		      adc	(tunePtrL),y	;
   1926  488d		       8d 43 70 	      sta	pitchTmpL	;
   1927  4890		       b9 fa 6b 	      lda	NSoundHArr,y	;
   1928  4893		       71 24		      adc	(tunePtrH),y	;
   1929  4895		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1930  4898		       4c ac 48 	      jmp	skipPalPlaySidA	;
   1931  489b							;- - - - - - - - -;
   1932  489b				   palPlaySidA		;
   1933  489b		       18		      clc		;
   1934  489c		       b9 42 6c 	      lda	PSoundLArr,y	;
   1935  489f		       71 22		      adc	(tunePtrL),y	;
   1936  48a1		       8d 43 70 	      sta	pitchTmpL	;
   1937  48a4		       b9 95 6c 	      lda	PSoundHArr,y	;
   1938  48a7		       71 24		      adc	(tunePtrH),y	;
   1939  48a9		       8d 44 70 	      sta	pitchTmpH	;
   1940  48ac				   skipPalPlaySidA		;;;;;
   1941  48ac
   1942  48ac							; play SID #1
   1943  48ac		       18		      clc
   1944  48ad		       ad 43 70 	      lda	pitchTmpL
   1945  48b0		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
   1946  48b3		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
   1947  48b6		       ad 44 70 	      lda	pitchTmpH
   1948  48b9		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
   1949  48bc		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
   1950  48bf
   1951  48bf		       a9 01		      lda	#1
   1952  48c1							; Set voice gates on or off
   1953  48c1				   NsoundOffSidA
   1954  48c1		       1d 30 70 	      ora	WaveType,x
   1955  48c4		       9d 04 d4 	      sta	SID1+SV1WAVE,x
   1956  48c7							;sta SID2+SV1WAVE,x
   1957  48c7		       9d 04 71 	      sta	sidData+SV1WAVE,x
   1958  48ca		       ae 0c 70 	      ldx	temp
   1959  48cd		       ca		      dex
   1960  48ce							;bpl NsetRegsSidA
   1961  48ce		       30 03		      bmi	quitPlayLoop
   1962  48d0		       4c 70 48 	      jmp	NsetRegsSidA
   1963  48d3				   quitPlayLoop
   1964  48d3
   1965  48d3							;rts ; DEBUG!!!
   1966  48d3							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1967  48d3							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1968  48d3							; For each voice on SID #2...
   1969  48d3		       a2 02		      ldx	#2
   1970  48d5				   NsetRegsSidB
   1971  48d5		       8e 0c 70 	      stx	temp
   1972  48d8							;lda playNoteArray+3,x
   1973  48d8
   1974  48d8		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
   1975  48db		       bd bd 60 	      lda	voiceOffset,x
   1976  48de
   1977  48de		       aa		      tax
   1978  48df		       c0 ff		      cpy	#255
   1979  48e1		       d0 04		      bne	NsoundOnSidB
   1980  48e3		       a9 00		      lda	#0
   1981  48e5		       f0 3f		      beq	NsoundOffSidB
   1982  48e7				   NsoundOnSidB
   1983  48e7
   1984  48e7							; load note and deal
   1985  48e7							; with tuning ------;
   1986  48e7		       ad 61 70 	      lda	NTSCmode	;
   1987  48ea		       f0 14		      beq	palPlaySidB	;
   1988  48ec				   ntscPlaySidB 		;
   1989  48ec		       18		      clc		;
   1990  48ed		       b9 b2 6b 	      lda	NSoundLArr,y	;
   1991  48f0		       71 22		      adc	(tunePtrL),y	;
   1992  48f2		       8d 43 70 	      sta	pitchTmpL	;
   1993  48f5		       b9 fa 6b 	      lda	NSoundHArr,y	;
   1994  48f8		       71 24		      adc	(tunePtrH),y	;
   1995  48fa		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1996  48fd		       4c 11 49 	      jmp	skipPalPlaySidB	;
   1997  4900				   palPlaySidB		;
   1998  4900		       18		      clc		;
   1999  4901		       b9 42 6c 	      lda	PSoundLArr,y	;
   2000  4904		       71 22		      adc	(tunePtrL),y	;
   2001  4906		       8d 43 70 	      sta	pitchTmpL	;
   2002  4909		       b9 95 6c 	      lda	PSoundHArr,y	;
   2003  490c		       71 24		      adc	(tunePtrH),y	;
   2004  490e		       8d 44 70 	      sta	pitchTmpH	;
   2005  4911				   skipPalPlaySidB		;;;;;
   2006  4911
   2007  4911							; play SID #2
   2008  4911		       18		      clc
   2009  4912		       ad 43 70 	      lda	pitchTmpL
   2010  4915		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
   2011  4918		       9d 00 df 	      sta	SID2+SV1FL,x	; set low freq
   2012  491b		       ad 44 70 	      lda	pitchTmpH
   2013  491e		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
   2014  4921		       9d 01 df 	      sta	SID2+SV1FH,x	; set high freq
   2015  4924
   2016  4924		       a9 01		      lda	#1
   2017  4926							; Set voice gates on or off
   2018  4926				   NsoundOffSidB
   2019  4926		       1d 30 70 	      ora	WaveType,x
   2020  4929							;sta SID1+SV1WAVE,x
   2021  4929		       9d 04 df 	      sta	SID2+SV1WAVE,x
   2022  492c		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2023  492f		       ae 0c 70 	      ldx	temp
   2024  4932		       ca		      dex
   2025  4933		       10 a0		      bpl	NsetRegsSidB
   2026  4935
   2027  4935							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2028  4935							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2029  4935		       60		      rts
   2030  4936
   2031  4936
   2032  4936
   2033  4936							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2034  4936							; PORTAMENTO SOUND SETUP
   2035  4936							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2036  4936				   playPort
   2037  4936
   2038  4936		       a2 02		      ldx	#2
   2039  4938				   portCopyLoop
   2040  4938		       bd a0 70 	      lda	noteNumArray,x
   2041  493b		       9d b0 70 	      sta	playNoteArray,x
   2042  493e		       ca		      dex
   2043  493f		       10 f7		      bpl	portCopyLoop
   2044  4941
   2045  4941							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
   2046  4941							;sta playNoteArray+3
   2047  4941							;lda noteNumArray+1
   2048  4941							;sta playNoteArray+4
   2049  4941							;lda noteNumArray+2
   2050  4941							;sta playNoteArray+5
   2051  4941
   2052  4941							;jmp sixVoicePlayer
   2053  4941
   2054  4941		       4c 44 49 	      jmp	portPlayer
   2055  4944
   2056  4944
   2057  4944
   2058  4944							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2059  4944							; PORTAMENTO 3-VOICE SOUND DRIVER
   2060  4944							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2061  4944				   portPlayer
   2062  4944							; set up pointer to portamento speed array
   2063  4944							; (which is the tuning array)
   2064  4944		       a2 02		      ldx	#2
   2065  4946				   portLoop
   2066  4946		       bc b0 70 	      ldy	playNoteArray,x
   2067  4949							;ldy KeyA,x
   2068  4949		       c0 ff		      cpy	#255
   2069  494b		       d0 03		      bne	noPlayNote
   2070  494d		       4c 60 49 	      jmp	playNote
   2071  4950				   noPlayNote
   2072  4950		       ad 03 70 	      lda	Frame
   2073  4953		       29 01		      and	#1
   2074  4955		       f0 03		      beq	noPlayNote2
   2075  4957		       4c 60 49 	      jmp	playNote
   2076  495a				   noPlayNote2
   2077  495a
   2078  495a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2079  495a							; DEBUG - SHOW DATA
   2080  495a				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2081  495a				  -	      lda	pitchHA,x	;
   2082  495a				  -	      stx	tempX
   2083  495a				  -	      sty	tempY
   2084  495a				  -	      sta	tempA
   2085  495a				  -			;- - - - -
   2086  495a				  -			;sta temp
   2087  495a				  -	      ldx	#20
   2088  495a				  -	      ldy	#6
   2089  495a				  -	      jsr	displayHex
   2090  495a				  -			;lda temp
   2091  495a				  -			;ldy temp
   2092  495a				  -			;- - - - -
   2093  495a				  -	      ldx	tempX
   2094  495a				  -	      ldy	tempY
   2095  495a				  -	      lda	tempA
   2096  495a					      ENDIF
   2097  495a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2098  495a
   2099  495a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2100  495a							; DEBUG - SHOW DATA
   2101  495a				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2102  495a				  -	      lda	NSoundHArr,y	;
   2103  495a				  -	      stx	tempX
   2104  495a				  -	      sty	tempY
   2105  495a				  -	      sta	tempA
   2106  495a				  -			;- - - - -
   2107  495a				  -			;sta temp
   2108  495a				  -	      ldx	#20
   2109  495a				  -	      ldy	#7
   2110  495a				  -	      jsr	displayHex
   2111  495a				  -			;lda temp
   2112  495a				  -			;ldy temp
   2113  495a				  -			;- - - - -
   2114  495a				  -	      ldx	tempX
   2115  495a				  -	      ldy	tempY
   2116  495a				  -	      lda	tempA
   2117  495a					      ENDIF
   2118  495a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2119  495a
   2120  495a
   2121  495a		       20 b8 49 	      jsr	updatePortPosition
   2122  495d		       20 b8 49 	      jsr	updatePortPosition
   2123  4960
   2124  4960
   2125  4960				   playNote
   2126  4960							; deal with tuning
   2127  4960		       18		      clc
   2128  4961		       bd 16 70 	      lda	pitchLA,x
   2129  4964		       71 22		      adc	(tunePtrL),y
   2130  4966		       8d 43 70 	      sta	pitchTmpL
   2131  4969		       bd 19 70 	      lda	pitchHA,x
   2132  496c		       71 24		      adc	(tunePtrH),y
   2133  496e		       8d 44 70 	      sta	pitchTmpH
   2134  4971
   2135  4971		       98		      tya		; Move the current key to A
   2136  4972		       bc bd 60 	      ldy	voiceOffset,x
   2137  4975		       c9 ff		      cmp	#255	; Check for note off
   2138  4977		       d0 04		      bne	soundOn
   2139  4979		       a9 00		      lda	#0
   2140  497b		       f0 28		      beq	soundOff
   2141  497d				   soundOn
   2142  497d
   2143  497d							; play SID #1
   2144  497d		       18		      clc
   2145  497e		       ad 43 70 	      lda	pitchTmpL
   2146  4981		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
   2147  4984		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
   2148  4987		       ad 44 70 	      lda	pitchTmpH
   2149  498a		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
   2150  498d		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
   2151  4990
   2152  4990							; play SID #2
   2153  4990		       18		      clc
   2154  4991		       ad 43 70 	      lda	pitchTmpL
   2155  4994		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
   2156  4997		       99 00 df 	      sta	SID2+SV1FL,y	; set low freq
   2157  499a		       ad 44 70 	      lda	pitchTmpH
   2158  499d		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
   2159  49a0		       99 01 df 	      sta	SID2+SV1FH,y	; set high freq
   2160  49a3
   2161  49a3				   afterDStep
   2162  49a3
   2163  49a3		       a9 01		      lda	#1
   2164  49a5							; Set voice gates on or off
   2165  49a5				   soundOff
   2166  49a5		       19 30 70 	      ora	WaveType,y
   2167  49a8		       99 04 d4 	      sta	SID1+SV1WAVE,y
   2168  49ab		       99 04 df 	      sta	SID2+SV1WAVE,y
   2169  49ae		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2170  49b1
   2171  49b1		       ca		      dex
   2172  49b2		       30 03		      bmi	quitPort
   2173  49b4		       4c 46 49 	      jmp	portLoop
   2174  49b7				   quitPort
   2175  49b7				   skipPort
   2176  49b7		       60		      rts
   2177  49b8							;--------------------------------------------------------------------
   2178  49b8							;end of portamento play loop
   2179  49b8							;--------------------------------------------------------------------
   2180  49b8
   2181  49b8
   2182  49b8				   updatePortPosition
   2183  49b8							;check portamn direction;
   2184  49b8		       ad 61 70 	      lda	NTSCmode	;
   2185  49bb		       f0 0c		      beq	palPortH	;
   2186  49bd				   ntscPortH		;
   2187  49bd		       bd 19 70 	      lda	pitchHA,x	;
   2188  49c0		       d9 fa 6b 	      cmp	NSoundHArr,y	;
   2189  49c3		       f0 10		      beq	portCheckL	;
   2190  49c5		       30 2a		      bmi	portUp	; PAL/NTSC split
   2191  49c7		       10 3e		      bpl	portDown	;
   2192  49c9							;bpl portUp				; PAL/NTSC split
   2193  49c9							;bmi portDown			;
   2194  49c9				   palPortH		;
   2195  49c9		       bd 19 70 	      lda	pitchHA,x	;
   2196  49cc		       d9 95 6c 	      cmp	PSoundHArr,y	;
   2197  49cf		       f0 04		      beq	portCheckL	;
   2198  49d1		       30 1e		      bmi	portUp	;
   2199  49d3		       10 32		      bpl	portDown	;;;;;
   2200  49d5							;bpl portUp				;
   2201  49d5							;bmi portDown		;;;;;
   2202  49d5
   2203  49d5				   portCheckL
   2204  49d5
   2205  49d5							;check portamn lowbyte--;
   2206  49d5		       ad 61 70 	      lda	NTSCmode	;
   2207  49d8		       f0 0d		      beq	palPortL	;
   2208  49da				   ntscPortL		;
   2209  49da		       bd 16 70 	      lda	pitchLA,x	;
   2210  49dd		       d9 b2 6b 	      cmp	NSoundLArr,y	;
   2211  49e0		       f0 69		      beq	endPortUpdate
   2212  49e2							;beq playNote ; note on	;
   2213  49e2							;the stop so play	;
   2214  49e2		       b0 23		      bcs	portDown	; PAL/NTSC split
   2215  49e4							;bcs portUp			; PAL/NTSC split
   2216  49e4		       4c f1 49 	      jmp	skipPalPortL	;
   2217  49e7				   palPortL		;
   2218  49e7		       bd 16 70 	      lda	pitchLA,x	;
   2219  49ea		       d9 42 6c 	      cmp	PSoundLArr,y	;
   2220  49ed		       f0 5c		      beq	endPortUpdate
   2221  49ef							;beq playNote ; note on	;
   2222  49ef							;the stop so play	;
   2223  49ef		       b0 16		      bcs	portDown	;
   2224  49f1							;bcs portUp				;
   2225  49f1				   skipPalPortL 		;;;;;
   2226  49f1
   2227  49f1
   2228  49f1				   portUp
   2229  49f1		       bd 16 70 	      lda	pitchLA,x
   2230  49f4		       18		      clc
   2231  49f5		       71 35		      adc	(portPtrL),y
   2232  49f7		       9d 16 70 	      sta	pitchLA,x
   2233  49fa		       bd 19 70 	      lda	pitchHA,x
   2234  49fd		       71 47		      adc	(portPtrH),y
   2235  49ff		       9d 19 70 	      sta	pitchHA,x
   2236  4a02		       a9 00		      lda	#0	; indicate port direction
   2237  4a04		       4c 1a 4a 	      jmp	oscCheck
   2238  4a07				   portDown
   2239  4a07		       bd 16 70 	      lda	pitchLA,x
   2240  4a0a		       38		      sec
   2241  4a0b		       f1 35		      sbc	(portPtrL),y
   2242  4a0d		       9d 16 70 	      sta	pitchLA,x
   2243  4a10		       bd 19 70 	      lda	pitchHA,x
   2244  4a13		       f1 47		      sbc	(portPtrH),y
   2245  4a15		       9d 19 70 	      sta	pitchHA,x
   2246  4a18		       a9 01		      lda	#1	; indicate port direction
   2247  4a1a
   2248  4a1a							; check for pitch oscillation
   2249  4a1a							; (which means it's at the correct note)
   2250  4a1a							; it's oscillating if: the port direction
   2251  4a1a							; has changed and the note hasn't.
   2252  4a1a				   oscCheck
   2253  4a1a		       dd 54 70 	      cmp	portLastDir,x
   2254  4a1d		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
   2255  4a20		       f0 29		      beq	skipOsc
   2256  4a22		       98		      tya
   2257  4a23		       dd 51 70 	      cmp	portLastNote,x
   2258  4a26		       9d 51 70 	      sta	portLastNote,x	; save it...
   2259  4a29		       d0 20		      bne	skipOsc
   2260  4a2b
   2261  4a2b							; it's oscilating at;
   2262  4a2b							; the note, so lock ;
   2263  4a2b							; it onto the actual;
   2264  4a2b							; note				;
   2265  4a2b		       ad 61 70 	      lda	NTSCmode	;
   2266  4a2e		       f0 0f		      beq	palLock	;
   2267  4a30				   ntscLock		;
   2268  4a30		       b9 b2 6b 	      lda	NSoundLArr,y	;
   2269  4a33		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
   2270  4a36		       b9 fa 6b 	      lda	NSoundHArr,y	;
   2271  4a39		       9d 19 70 	      sta	pitchHA,x	;
   2272  4a3c		       4c 4b 4a 	      jmp	skipPalLock	;
   2273  4a3f				   palLock		;
   2274  4a3f		       b9 42 6c 	      lda	PSoundLArr,y	;
   2275  4a42		       9d 16 70 	      sta	pitchLA,x	;
   2276  4a45		       b9 95 6c 	      lda	PSoundHArr,y	;
   2277  4a48		       9d 19 70 	      sta	pitchHA,x	;
   2278  4a4b				   skipPalLock		;;;;;
   2279  4a4b
   2280  4a4b				   skipOsc
   2281  4a4b				   endPortUpdate
   2282  4a4b		       60		      rts
   2283  4a4c
   2284  4a4c
   2285  4a4c
   2286  4a4c
   2287  4a4c
   2288  4a4c							;-------------------------------------
   2289  4a4c							; Process FX
   2290  4a4c							;-------------------------------------
   2291  4a4c							;fxType equ $7086
   2292  4a4c							;modValue1 equ $7087
   2293  4a4c							;modDirection equ $7089
   2294  4a4c							;modCounter equ $708A
   2295  4a4c							;modMinValue equ $708B
   2296  4a4c							;modMaxValue equ $708A
   2297  4a4c							; - - - - - - - - - -
   2298  4a4c							;MOD_NONE equ 0
   2299  4a4c							;MOD_PW_LFO equ 1
   2300  4a4c							;MOD_FILT_LFO equ 2
   2301  4a4c							;MOD_FILT_OPEN equ 3
   2302  4a4c							;MOD_FILT_CLOSE equ 4
   2303  4a4c							;MOD_FILT_WOW equ 5
   2304  4a4c
   2305  4a4c				   processFX
   2306  4a4c		       ad 86 70 	      lda	fxType
   2307  4a4f		       d0 0b		      bne	doFX
   2308  4a51		       a9 7f		      lda	#127	; Set default mod values...
   2309  4a53		       8d 9e 70 	      sta	pwModValue
   2310  4a56		       8d 9c 70 	      sta	filterModValue
   2311  4a59		       4c 84 4a 	      jmp	quitFX
   2312  4a5c							; - - - - - - - -
   2313  4a5c				   doFX
   2314  4a5c		       c9 06		      cmp	#MOD_PW_LFO
   2315  4a5e		       d0 03		      bne	notModPulseLFO
   2316  4a60		       4c 6e 4b 	      jmp	modPulseLFO	;------->
   2317  4a63				   notModPulseLFO
   2318  4a63		       c9 01		      cmp	#MOD_FILT_LFO
   2319  4a65		       d0 03		      bne	notModFiltLFO
   2320  4a67		       4c 5a 4b 	      jmp	modFiltLFO	;------->
   2321  4a6a				   notModFiltLFO
   2322  4a6a		       c9 02		      cmp	#MOD_FILT_ENV
   2323  4a6c		       d0 03		      bne	noModFiltEnv
   2324  4a6e		       4c 2a 4b 	      jmp	modFiltEnv	;------->
   2325  4a71				   noModFiltEnv
   2326  4a71		       c9 03		      cmp	#MOD_FILT3
   2327  4a73		       f0 10		      beq	modFilt3	;------->
   2328  4a75		       c9 04		      cmp	#MOD_FILT4
   2329  4a77		       f0 67		      beq	modFilt4	;------->
   2330  4a79		       c9 05		      cmp	#MOD_FILT5
   2331  4a7b		       f0 76		      beq	modFilt5	;------->
   2332  4a7d		       c9 07		      cmp	#MOD_PW2
   2333  4a7f		       d0 03		      bne	quitFX
   2334  4a81		       4c 06 4b 	      jmp	modPW2	;------->
   2335  4a84				   quitFX
   2336  4a84		       60		      rts
   2337  4a85
   2338  4a85
   2339  4a85							;---------------------
   2340  4a85				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
   2341  4a85		       ad 03 70 	      lda	Frame
   2342  4a88		       ad 87 70 	      lda	modValue1
   2343  4a8b		       29 f8		      and	#%11111000
   2344  4a8d		       f0 0b		      beq	noDecModValue2
   2345  4a8f		       ae 87 70 	      ldx	modValue1
   2346  4a92		       ca		      dex
   2347  4a93		       ca		      dex
   2348  4a94		       ca		      dex
   2349  4a95		       ca		      dex
   2350  4a96		       ca		      dex
   2351  4a97		       8e 87 70 	      stx	modValue1
   2352  4a9a				   noDecModValue2
   2353  4a9a		       ad 87 70 	      lda	modValue1
   2354  4a9d		       8d 9c 70 	      sta	filterModValue
   2355  4aa0							;jsr setFilterFromA
   2356  4aa0							;rts ; DEBUG!!
   2357  4aa0
   2358  4aa0		       a9 b4		      lda	#180
   2359  4aa2		       8d 98 70 	      sta	resetValue
   2360  4aa5							;jmp filtEnvReset ;---- end
   2361  4aa5
   2362  4aa5				   filtEnvResetFast
   2363  4aa5		       ad 1d 70 	      lda	soundMode
   2364  4aa8		       c9 20		      cmp	#MODE_MONO1
   2365  4aaa		       f0 22		      beq	handleMonoMode
   2366  4aac		       c9 21		      cmp	#MODE_MONO2
   2367  4aae		       f0 1e		      beq	handleMonoMode
   2368  4ab0
   2369  4ab0							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
   2370  4ab0		       a2 05		      ldx	#5
   2371  4ab2		       a0 00		      ldy	#0
   2372  4ab4				   countNotesLoop
   2373  4ab4		       bd a0 70 	      lda	noteNumArray,x
   2374  4ab7		       c9 ff		      cmp	#255
   2375  4ab9		       d0 01		      bne	skipCountingNote
   2376  4abb		       c8		      iny
   2377  4abc				   skipCountingNote
   2378  4abc		       ca		      dex
   2379  4abd		       10 f5		      bpl	countNotesLoop
   2380  4abf		       cc 99 70 	      cpy	lastNoteCount
   2381  4ac2		       f0 09		      beq	noNewNotes
   2382  4ac4		       8c 99 70 	      sty	lastNoteCount
   2383  4ac7		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2384  4aca		       8d 87 70 	      sta	modValue1
   2385  4acd				   noNewNotes
   2386  4acd		       60		      rts
   2387  4ace
   2388  4ace				   handleMonoMode
   2389  4ace		       ac a0 70 	      ldy	noteNumArray+0
   2390  4ad1		       cc 9a 70 	      cpy	lastNote
   2391  4ad4		       f0 09		      beq	sameOldNote
   2392  4ad6		       8c 9a 70 	      sty	lastNote
   2393  4ad9		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2394  4adc		       8d 87 70 	      sta	modValue1
   2395  4adf				   sameOldNote
   2396  4adf		       60		      rts
   2397  4ae0
   2398  4ae0							; Reset filter env when no notes are held...
   2399  4ae0							;	ldx #5
   2400  4ae0							;filtEnvResetLoop2
   2401  4ae0							;lda noteNumArray,x
   2402  4ae0							;cmp #255
   2403  4ae0							;bne quitFiltEnv2
   2404  4ae0							;dex
   2405  4ae0							;bpl filtEnvResetLoop2
   2406  4ae0							;lda resetValue
   2407  4ae0							;sta modValue1
   2408  4ae0							;quitFiltEnv2:
   2409  4ae0							;rts
   2410  4ae0
   2411  4ae0							;---------------------
   2412  4ae0				   modFilt4		; Filter chopper FAST
   2413  4ae0		       ad 03 70 	      lda	Frame
   2414  4ae3		       29 08		      and	#%1000
   2415  4ae5		       f0 06		      beq	filterClosed
   2416  4ae7		       a9 e6		      lda	#230
   2417  4ae9		       8d 9c 70 	      sta	filterModValue
   2418  4aec		       60		      rts
   2419  4aed							;jmp setFilterFromA
   2420  4aed				   filterClosed
   2421  4aed		       a9 00		      lda	#0
   2422  4aef		       8d 9c 70 	      sta	filterModValue
   2423  4af2		       60		      rts
   2424  4af3							;jmp setFilterFromA
   2425  4af3
   2426  4af3
   2427  4af3							;---------------------
   2428  4af3				   modFilt5		; Filter chopper MEDIUM
   2429  4af3		       ad 03 70 	      lda	Frame
   2430  4af6		       29 02		      and	#%10
   2431  4af8		       f0 06		      beq	filterClosed2
   2432  4afa		       a9 96		      lda	#150
   2433  4afc							;jmp setFilterFromA
   2434  4afc		       8d 9c 70 	      sta	filterModValue
   2435  4aff		       60		      rts
   2436  4b00				   filterClosed2
   2437  4b00		       a9 32		      lda	#50
   2438  4b02							;jmp setFilterFromA
   2439  4b02		       8d 9c 70 	      sta	filterModValue
   2440  4b05		       60		      rts
   2441  4b06
   2442  4b06							;---------------------
   2443  4b06				   modPW2		; PW Envelope
   2444  4b06		       ad 03 70 	      lda	Frame
   2445  4b09		       ad 87 70 	      lda	modValue1
   2446  4b0c							;and #%11111000
   2447  4b0c		       29 e0		      and	#%11100000
   2448  4b0e		       f0 0b		      beq	noDecModValue3
   2449  4b10		       ae 87 70 	      ldx	modValue1
   2450  4b13		       ca		      dex
   2451  4b14		       ca		      dex
   2452  4b15		       ca		      dex
   2453  4b16		       ca		      dex
   2454  4b17		       ca		      dex
   2455  4b18		       8e 87 70 	      stx	modValue1
   2456  4b1b				   noDecModValue3
   2457  4b1b		       ad 87 70 	      lda	modValue1
   2458  4b1e		       20 85 4c 	      jsr	setPulseWidth
   2459  4b21
   2460  4b21		       a9 b4		      lda	#180
   2461  4b23		       8d 98 70 	      sta	resetValue
   2462  4b26
   2463  4b26		       4c a5 4a 	      jmp	filtEnvResetFast
   2464  4b29		       60		      rts
   2465  4b2a
   2466  4b2a
   2467  4b2a
   2468  4b2a
   2469  4b2a							;---------------------
   2470  4b2a				   modFiltEnv
   2471  4b2a		       ad 03 70 	      lda	Frame
   2472  4b2d		       29 01		      and	#%1
   2473  4b2f		       f0 01		      beq	doEnvLFO
   2474  4b31		       60		      rts
   2475  4b32				   doEnvLFO
   2476  4b32		       ad 87 70 	      lda	modValue1
   2477  4b35		       c9 ff		      cmp	#255
   2478  4b37		       f0 03		      beq	noIncreaseModValue
   2479  4b39		       ee 87 70 	      inc	modValue1
   2480  4b3c				   noIncreaseModValue
   2481  4b3c		       ad 87 70 	      lda	modValue1
   2482  4b3f		       8d 9c 70 	      sta	filterModValue
   2483  4b42							;jsr setFilterFromA
   2484  4b42		       a9 00		      lda	#0
   2485  4b44		       8d 98 70 	      sta	resetValue
   2486  4b47							; jmp filtEnvReset
   2487  4b47
   2488  4b47				   filtEnvReset
   2489  4b47		       a2 05		      ldx	#5
   2490  4b49				   filtEnvResetLoop
   2491  4b49		       bd a0 70 	      lda	noteNumArray,x
   2492  4b4c		       c9 ff		      cmp	#255
   2493  4b4e		       d0 09		      bne	quitFiltEnv
   2494  4b50		       ca		      dex
   2495  4b51		       10 f6		      bpl	filtEnvResetLoop
   2496  4b53							;lda #0
   2497  4b53		       ad 98 70 	      lda	resetValue
   2498  4b56		       8d 87 70 	      sta	modValue1
   2499  4b59				   quitFiltEnv
   2500  4b59		       60		      rts
   2501  4b5a
   2502  4b5a							;---------------------
   2503  4b5a				   modFiltLFO
   2504  4b5a		       a9 96		      lda	#150
   2505  4b5c		       8d 8b 70 	      sta	modLFOMinValue
   2506  4b5f		       a9 fe		      lda	#254
   2507  4b61		       8d 8a 70 	      sta	modLFOMaxValue
   2508  4b64		       20 92 4b 	      jsr	doModulationLFO
   2509  4b67		       ad 87 70 	      lda	modValue1
   2510  4b6a		       8d 9c 70 	      sta	filterModValue
   2511  4b6d							;jsr setFilterFromA
   2512  4b6d		       60		      rts
   2513  4b6e
   2514  4b6e
   2515  4b6e
   2516  4b6e							;---------------------
   2517  4b6e				   modPulseLFO
   2518  4b6e
   2519  4b6e							; Reset into range if way off value...
   2520  4b6e		       ad 87 70 	      lda	modValue1
   2521  4b71		       30 05		      bmi	noResetValue
   2522  4b73		       a9 c8		      lda	#200
   2523  4b75		       8d 87 70 	      sta	modValue1
   2524  4b78				   noResetValue
   2525  4b78
   2526  4b78							;inc 1025 ; DEBUG!
   2527  4b78		       a9 96		      lda	#150
   2528  4b7a		       8d 8b 70 	      sta	modLFOMinValue
   2529  4b7d		       a9 fe		      lda	#254
   2530  4b7f		       8d 8a 70 	      sta	modLFOMaxValue
   2531  4b82		       20 92 4b 	      jsr	doModulationLFO
   2532  4b85		       ae 87 70 	      ldx	modValue1
   2533  4b88		       8e 79 70 	      stx	paddleY
   2534  4b8b
   2535  4b8b		       ad 87 70 	      lda	modValue1
   2536  4b8e		       20 85 4c 	      jsr	setPulseWidth
   2537  4b91		       60		      rts
   2538  4b92
   2539  4b92							; Process special LFO for modulation
   2540  4b92							; Store modLFOMaxValue and modLFOMinValue first
   2541  4b92				   doModulationLFO
   2542  4b92		       ad 03 70 	      lda	Frame
   2543  4b95		       29 07		      and	#%111
   2544  4b97		       f0 01		      beq	doModLFO
   2545  4b99		       60		      rts
   2546  4b9a				   doModLFO
   2547  4b9a		       ad 89 70 	      lda	modDirection
   2548  4b9d		       f0 12		      beq	LFODown
   2549  4b9f				   LFOUp
   2550  4b9f		       ae 87 70 	      ldx	modValue1
   2551  4ba2		       e8		      inx
   2552  4ba3		       8e 87 70 	      stx	modValue1
   2553  4ba6							;jsr setPWValue
   2554  4ba6		       8e 79 70 	      stx	paddleY
   2555  4ba9							;jsr setPulseWidth
   2556  4ba9		       ae 87 70 	      ldx	modValue1
   2557  4bac
   2558  4bac		       e0 f5		      cpx	#245
   2559  4bae		       f0 0d		      beq	switchDirections
   2560  4bb0		       60		      rts
   2561  4bb1
   2562  4bb1				   LFODown
   2563  4bb1		       ae 87 70 	      ldx	modValue1
   2564  4bb4		       ca		      dex
   2565  4bb5		       8e 87 70 	      stx	modValue1
   2566  4bb8		       e0 96		      cpx	#150
   2567  4bba		       f0 01		      beq	switchDirections
   2568  4bbc		       60		      rts
   2569  4bbd
   2570  4bbd				   switchDirections
   2571  4bbd		       ad 89 70 	      lda	modDirection
   2572  4bc0		       18		      clc
   2573  4bc1		       69 01		      adc	#1
   2574  4bc3		       29 01		      and	#1
   2575  4bc5		       8d 89 70 	      sta	modDirection
   2576  4bc8		       60		      rts
   2577  4bc9
   2578  4bc9
   2579  4bc9							;setFilterFromA:
   2580  4bc9		       8d 9d 70 	      sta	filterSetValue
   2581  4bcc		       60		      rts
   2582  4bcd
   2583  4bcd							; Old version of FilterFromA...
   2584  4bcd		       8d 16 d4 	      sta	SID1+SFILTH
   2585  4bd0		       8d 16 71 	      sta	sidData+SFILTH
   2586  4bd3		       18		      clc
   2587  4bd4		       69 0a		      adc	#SID_SYMPHONY_FILTER_OFFSET
   2588  4bd6		       90 02		      bcc	noPaddleRoll
   2589  4bd8		       a9 ff		      lda	#255
   2590  4bda				   noPaddleRoll
   2591  4bda		       8d 16 df 	      sta	SID2+SFILTH
   2592  4bdd				   noPaddleControl
   2593  4bdd		       60		      rts
   2594  4bde
   2595  4bde
   2596  4bde							;-------------------------------------
   2597  4bde							; Reading paddles from Prog Ref Guide
   2598  4bde							;-------------------------------------
   2599  4bde				   processPaddles
   2600  4bde				   pdlrd0		; entry point for one pair (condition x 1st)
   2601  4bde							; -  -  -  -  -
   2602  4bde							;sei				; disable interrupts
   2603  4bde		       a9 e0		      lda	#224	; disable keyboard scan
   2604  4be0		       8d 02 dc 	      sta	56322	; disable keyboard scan
   2605  4be3							; -  -  -  -  -
   2606  4be3		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
   2607  4be6		       8d 06 70 	      sta	Buffer	; save it away
   2608  4be9		       a9 c0		      lda	#$c0
   2609  4beb		       8d 02 dc 	      sta	Ciddra	; set port a for input
   2610  4bee		       a9 80		      lda	#$80
   2611  4bf0
   2612  4bf0				   pdlrd1
   2613  4bf0		       8d 00 dc 	      sta	PortA	; address a pair of paddles
   2614  4bf3		       a0 80		      ldy	#$80	; wait a while
   2615  4bf5				   pdlrd2
   2616  4bf5		       ea		      nop
   2617  4bf6		       88		      dey
   2618  4bf7		       10 fc		      bpl	pdlrd2
   2619  4bf9
   2620  4bf9		       ae 19 d4 	      ldx	SID1+25	; get x value
   2621  4bfc		       8e 78 70 	      stx	paddleX
   2622  4bff		       ac 1a d4 	      ldy	SID1+26	; get y value
   2623  4c02		       8c 79 70 	      sty	paddleY
   2624  4c05
   2625  4c05		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
   2626  4c08		       09 50		      ora	#80	; make it the same as other pair
   2627  4c0a		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
   2628  4c0d
   2629  4c0d		       ad 06 70 	      lda	Buffer
   2630  4c10		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
   2631  4c13							; -  -  -  -  -
   2632  4c13							;cli			; enable interrupts
   2633  4c13		       a9 ff		      lda	#255	; enable keyboard scan
   2634  4c15		       8d 02 dc 	      sta	56322	; enable keyboard scan
   2635  4c18							; -  -  -  -  -
   2636  4c18
   2637  4c18							;-------------------------------------
   2638  4c18							; Auto paddle on - turn on paddle control if it's wiggled...
   2639  4c18		       ad 29 70 	      lda	paddle
   2640  4c1b		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
   2641  4c1d		       e0 a0		      cpx	#160
   2642  4c1f		       90 05		      bcc	noPaddleTop
   2643  4c21		       a9 01		      lda	#1
   2644  4c23		       8d 76 70 	      sta	paddleTop
   2645  4c26				   noPaddleTop
   2646  4c26		       e0 60		      cpx	#96
   2647  4c28		       b0 05		      bcs	noPaddleBottom
   2648  4c2a		       a9 01		      lda	#1
   2649  4c2c		       8d 77 70 	      sta	paddleBottom
   2650  4c2f				   noPaddleBottom
   2651  4c2f							;-----------
   2652  4c2f		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
   2653  4c32		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
   2654  4c34		       ad 77 70 	      lda	paddleBottom
   2655  4c37		       f0 05		      beq	noPaddleAutoOn
   2656  4c39		       a9 01		      lda	#1	; turn paddle on
   2657  4c3b		       20 3a 51 	      jsr	setPaddles
   2658  4c3e				   noPaddleAutoOn
   2659  4c3e
   2660  4c3e							;-------------------------------------
   2661  4c3e							; check to see if paddle control is on
   2662  4c3e		       ad 29 70 	      lda	paddle
   2663  4c41		       f0 04		      beq	processPaddle2
   2664  4c43
   2665  4c43							; paddle1 -> filter
   2666  4c43		       8a		      txa
   2667  4c44		       8d 9d 70 	      sta	filterSetValue
   2668  4c47							;jsr setFilterFromA
   2669  4c47
   2670  4c47
   2671  4c47							;sta SID1+SFILTH
   2672  4c47							;sta sidData+SFILTH
   2673  4c47							;clc
   2674  4c47							;adc #SID_SYMPHONY_FILTER_OFFSET
   2675  4c47							;bcc noPaddleRoll
   2676  4c47							;lda #255
   2677  4c47							;noPaddleRoll:
   2678  4c47							;sta SID2+SFILTH
   2679  4c47							;noPaddleControl
   2680  4c47
   2681  4c47							;-------------------------------------
   2682  4c47							; paddle 2
   2683  4c47
   2684  4c47							;	paddle 2 -> Pulse Width
   2685  4c47				   processPaddle2
   2686  4c47		       ad 7a 70 	      lda	paddle2
   2687  4c4a		       c9 01		      cmp	#1
   2688  4c4c		       d0 36		      bne	skipPW
   2689  4c4e		       ad 79 70 	      lda	paddleY
   2690  4c51		       c9 f5		      cmp	#245	; check for top limit (= no sound)
   2691  4c53		       90 05		      bcc	notPTop
   2692  4c55		       a9 f5		      lda	#245	; limit to maximum
   2693  4c57		       8d 79 70 	      sta	paddleY
   2694  4c5a				   notPTop
   2695  4c5a		       ad 79 70 	      lda	paddleY
   2696  4c5d		       20 85 4c 	      jsr	setPulseWidth
   2697  4c60							;-------------
   2698  4c60		       ad 79 70 	      lda	paddleY
   2699  4c63		       0a		      asl
   2700  4c64		       0a		      asl
   2701  4c65		       0a		      asl
   2702  4c66		       0a		      asl
   2703  4c67		       09 0f		      ora	#$0F
   2704  4c69		       8d 02 d4 	      sta	SID1+SV1PWL
   2705  4c6c		       8d 09 d4 	      sta	SID1+SV2PWL
   2706  4c6f		       8d 10 d4 	      sta	SID1+SV3PWL
   2707  4c72		       8d 02 df 	      sta	SID2+SV1PWL
   2708  4c75		       8d 09 df 	      sta	SID2+SV2PWL
   2709  4c78		       8d 10 df 	      sta	SID2+SV3PWL
   2710  4c7b		       8d 02 71 	      sta	sidData+SV1PWL
   2711  4c7e		       8d 09 71 	      sta	sidData+SV2PWL
   2712  4c81		       8d 10 71 	      sta	sidData+SV3PWL
   2713  4c84				   skipPW
   2714  4c84		       60		      rts
   2715  4c85							;END paddle ------------------------------
   2716  4c85
   2717  4c85
   2718  4c85							;------------------
   2719  4c85							; Set pulse width
   2720  4c85							;------------------
   2721  4c85				   setPulseWidth
   2722  4c85		       4a		      lsr
   2723  4c86		       4a		      lsr
   2724  4c87		       4a		      lsr
   2725  4c88		       4a		      lsr
   2726  4c89		       8d 03 d4 	      sta	SID1+SV1PWH
   2727  4c8c		       8d 0a d4 	      sta	SID1+SV2PWH
   2728  4c8f		       8d 11 d4 	      sta	SID1+SV3PWH
   2729  4c92		       8d 03 df 	      sta	SID2+SV1PWH
   2730  4c95		       8d 0a df 	      sta	SID2+SV2PWH
   2731  4c98		       8d 11 df 	      sta	SID2+SV3PWH
   2732  4c9b		       8d 03 71 	      sta	sidData+SV1PWH
   2733  4c9e		       8d 0a 71 	      sta	sidData+SV2PWH
   2734  4ca1		       8d 11 71 	      sta	sidData+SV3PWH
   2735  4ca4		       60		      rts
   2736  4ca5
   2737  4ca5
   2738  4ca5				   processVideoMode
   2739  4ca5							; Turn off Vic when no notes are playing
   2740  4ca5		       ad 20 70 	      lda	VICMode
   2741  4ca8		       f0 1e		      beq	vicOff
   2742  4caa		       c9 02		      cmp	#2
   2743  4cac		       f0 25		      beq	vicOn
   2744  4cae		       ad 1f 70 	      lda	dispOn
   2745  4cb1		       d0 20		      bne	vicOn
   2746  4cb3		       ad a0 70 	      lda	noteNumArray+0
   2747  4cb6							;lda KeyA
   2748  4cb6
   2749  4cb6		       c9 ff		      cmp	#255
   2750  4cb8		       d0 19		      bne	vicOn
   2751  4cba		       ad a1 70 	      lda	noteNumArray+1
   2752  4cbd							;lda KeyB
   2753  4cbd		       c9 ff		      cmp	#255
   2754  4cbf		       d0 12		      bne	vicOn
   2755  4cc1		       ad a2 70 	      lda	noteNumArray+2
   2756  4cc4							;lda KeyC
   2757  4cc4		       c9 ff		      cmp	#255
   2758  4cc6		       d0 0b		      bne	vicOn
   2759  4cc8				   vicOff
   2760  4cc8							; Vic off
   2761  4cc8		       ad 11 d0 	      lda	$d011
   2762  4ccb		       29 ef		      and	#$EF
   2763  4ccd		       8d 11 d0 	      sta	$D011
   2764  4cd0
   2765  4cd0		       4c db 4c 	      jmp	endVic
   2766  4cd3				   vicOn
   2767  4cd3							; Vic on
   2768  4cd3		       ad 11 d0 	      lda	$d011
   2769  4cd6		       09 10		      ora	#$10
   2770  4cd8		       8d 11 d0 	      sta	$d011
   2771  4cdb
   2772  4cdb				   endVic
   2773  4cdb		       a9 00		      lda	#0
   2774  4cdd		       8d 1f 70 	      sta	dispOn
   2775  4ce0
   2776  4ce0		       ad a0 70 	      lda	noteNumArray+0
   2777  4ce3							;lda KeyA
   2778  4ce3		       8d 0c 70 	      sta	temp
   2779  4ce6		       20 fc 4c 	      jsr	drawPattern
   2780  4ce9		       ad a1 70 	      lda	noteNumArray+1
   2781  4cec							;lda KeyB
   2782  4cec		       8d 0c 70 	      sta	temp
   2783  4cef		       20 fc 4c 	      jsr	drawPattern
   2784  4cf2		       ad a2 70 	      lda	noteNumArray+2
   2785  4cf5							;lda KeyC
   2786  4cf5		       8d 0c 70 	      sta	temp
   2787  4cf8		       20 fc 4c 	      jsr	drawPattern
   2788  4cfb
   2789  4cfb		       60		      rts
   2790  4cfc							;jmp Loop
   2791  4cfc							;====================================================
   2792  4cfc							; bottom of main loop
   2793  4cfc							;====================================================
   2794  4cfc
   2795  4cfc
   2796  4cfc							;------------------------------------------
   2797  4cfc							; code to draw colored character patterns
   2798  4cfc							;------------------------------------------
   2799  4cfc							;PTRNTEXTBASE equ 1224
   2800  4cfc		       04 00	   PTRNTEXTBASE equ	1224-40*5
   2801  4cfc							;PTRNCOLORBASE equ 55496
   2802  4cfc		       d8 00	   PTRNCOLORBASE equ	55496-40*5
   2803  4cfc
   2804  4cfc
   2805  4cfc				   drawPattern
   2806  4cfc							; don't draw video when in help mode
   2807  4cfc		       ad 70 70 	      lda	helpMode
   2808  4cff		       f0 01		      beq	continueVideo
   2809  4d01		       60		      rts
   2810  4d02				   continueVideo
   2811  4d02							;---------
   2812  4d02							; setup
   2813  4d02		       ae 21 70 	      ldx	patPtr
   2814  4d05		       e8		      inx
   2815  4d06		       e0 28		      cpx	#40
   2816  4d08		       d0 02		      bne	noPatReset
   2817  4d0a		       a2 00		      ldx	#0
   2818  4d0c				   noPatReset
   2819  4d0c		       8e 21 70 	      stx	patPtr
   2820  4d0f							;---------
   2821  4d0f		       a2 05		      ldx	#5
   2822  4d11							; main pattern loop
   2823  4d11				   patternLoop
   2824  4d11				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
   2825  4d11				  -	      rts		; DEBUG! disable patterns
   2826  4d11					      endif
   2827  4d11
   2828  4d11		       bd b7 60 	      lda	patOffset,x
   2829  4d14							;	clc
   2830  4d14		       6d 21 70 	      adc	patPtr
   2831  4d17		       a8		      tay
   2832  4d18							;	clc
   2833  4d18		       ad 0c 70 	      lda	temp
   2834  4d1b		       c9 ff		      cmp	#255
   2835  4d1d		       f0 0a		      beq	skipExtraColors
   2836  4d1f		       ad 03 70 	      lda	Frame
   2837  4d22		       2d 45 70 	      and	videoMode
   2838  4d25		       18		      clc
   2839  4d26		       6d 0c 70 	      adc	temp
   2840  4d29				   skipExtraColors
   2841  4d29		       69 be		      adc	#190
   2842  4d2b		       8d 8f 70 	      sta	temp2
   2843  4d2e		       ad 0c 70 	      lda	temp
   2844  4d31		       c9 ff		      cmp	#255
   2845  4d33		       d0 05		      bne	reloadValue
   2846  4d35		       a9 7f		      lda	#127
   2847  4d37		       4c 3d 4d 	      jmp	afterReloadValue
   2848  4d3a				   reloadValue
   2849  4d3a		       ad 8f 70 	      lda	temp2
   2850  4d3d				   afterReloadValue
   2851  4d3d		       91 2b		      sta	(lowTextPtr),y
   2852  4d3f		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
   2853  4d42		       99 90 05 	      sta	PTRNTEXTBASE+400,y
   2854  4d45		       99 58 06 	      sta	PTRNTEXTBASE+600,y
   2855  4d48		       c0 f8		      cpy	#248
   2856  4d4a		       30 03		      bmi	noTopText
   2857  4d4c		       99 20 07 	      sta	PTRNTEXTBASE+800,y
   2858  4d4f				   noTopText
   2859  4d4f							;sbc #13
   2860  4d4f		       69 0c		      adc	#12
   2861  4d51		       91 2d		      sta	(lowColorPtr),y
   2862  4d53		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
   2863  4d56		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
   2864  4d59		       99 58 da 	      sta	PTRNCOLORBASE+600,y
   2865  4d5c		       c0 f8		      cpy	#248
   2866  4d5e		       30 03		      bmi	noTopColor
   2867  4d60		       99 20 db 	      sta	PTRNCOLORBASE+800,y
   2868  4d63				   noTopColor
   2869  4d63		       ca		      dex
   2870  4d64		       10 ab		      bpl	patternLoop
   2871  4d66		       60		      rts
   2872  4d67							;--------------------- end of draw patterns
   2873  4d67
   2874  4d67
   2875  4d67							; All notes off
   2876  4d67				   midiPanic
   2877  4d67		       a2 08		      ldx	#NOTE_BUF_SIZE
   2878  4d69		       a9 ff		      lda	#255
   2879  4d6b				   midiPanicLoop
   2880  4d6b		       9d a0 70 	      sta	noteNumArray,x
   2881  4d6e		       ca		      dex
   2882  4d6f		       10 fa		      bpl	midiPanicLoop
   2883  4d71		       60		      rts
   2884  4d72
   2885  4d72
   2886  4d72							;------------------------------------------
   2887  4d72							; Read the keyboard
   2888  4d72							;------------------------------------------
   2889  4d72				   readKeyboard
   2890  4d72							; Keyboard read setup
   2891  4d72		       a9 7f		      lda	#127
   2892  4d74		       8d 0d dc 	      sta	56333
   2893  4d77
   2894  4d77							;------------------------------------------
   2895  4d77							; determine which keyset to use
   2896  4d77							; (raw/shift/commodorekey/runstop)
   2897  4d77							;------------------------------------------
   2898  4d77
   2899  4d77							; default is raw key functions (no modified keys)
   2900  4d77		       a9 15		      lda	#<rawKeyFunctions	;-
   2901  4d79		       85 c2		      sta	keyPtrL	;
   2902  4d7b		       a9 5a		      lda	#>rawKeyFunctions	;
   2903  4d7d		       85 c3		      sta	keyPtrH	;-
   2904  4d7f
   2905  4d7f							; Check for Shift/C=
   2906  4d7f		       a9 bf		      lda	#~64	; (Right Shift)
   2907  4d81		       8d 00 dc 	      sta	56320
   2908  4d84		       ad 01 dc 	      lda	56321
   2909  4d87		       29 10		      and	#16
   2910  4d89		       d0 08		      bne	notAltKeys	;-
   2911  4d8b		       a9 89		      lda	#<shiftKeyFunctions	;
   2912  4d8d		       85 c2		      sta	keyPtrL	;
   2913  4d8f		       a9 5b		      lda	#>shiftKeyFunctions	;-
   2914  4d91		       85 c3		      sta	keyPtrH
   2915  4d93				   notAltKeys
   2916  4d93		       a9 fd		      lda	#~2	; (Left Shift)
   2917  4d95		       8d 00 dc 	      sta	56320
   2918  4d98		       ad 01 dc 	      lda	56321
   2919  4d9b		       29 80		      and	#128
   2920  4d9d		       d0 0b		      bne	notAltKeys2	;-
   2921  4d9f		       a9 89		      lda	#<shiftKeyFunctions	;
   2922  4da1		       85 c2		      sta	keyPtrL	;
   2923  4da3		       a9 5b		      lda	#>shiftKeyFunctions	;-
   2924  4da5		       85 c3		      sta	keyPtrH
   2925  4da7		       4c ac 4e 	      jmp	doKeyCheck
   2926  4daa				   notAltKeys2
   2927  4daa		       a9 7f		      lda	#~128	; (C= key)
   2928  4dac		       8d 00 dc 	      sta	56320
   2929  4daf		       ad 01 dc 	      lda	56321
   2930  4db2		       29 20		      and	#32
   2931  4db4		       d0 08		      bne	notAltKeys3
   2932  4db6		       a9 05		      lda	#<commKeyFunctions	;-
   2933  4db8		       85 c2		      sta	keyPtrL	;
   2934  4dba		       a9 5c		      lda	#>commKeyFunctions	;
   2935  4dbc		       85 c3		      sta	keyPtrH	;-
   2936  4dbe				   notAltKeys3
   2937  4dbe		       a9 7f		      lda	#~128	; (Run Stop)
   2938  4dc0		       8d 00 dc 	      sta	56320
   2939  4dc3		       ad 01 dc 	      lda	56321
   2940  4dc6		       29 80		      and	#128
   2941  4dc8		       d0 08		      bne	notAltKeys4
   2942  4dca		       a9 81		      lda	#<runstopKeyFunctions	;-
   2943  4dcc		       85 c2		      sta	keyPtrL	;
   2944  4dce		       a9 5c		      lda	#>runstopKeyFunctions	;
   2945  4dd0		       85 c3		      sta	keyPtrH	;-
   2946  4dd2				   notAltKeys4
   2947  4dd2		       a9 7f		      lda	#~128	; (CTRL key)
   2948  4dd4		       8d 00 dc 	      sta	56320
   2949  4dd7		       ad 01 dc 	      lda	56321
   2950  4dda		       29 04		      and	#4	; CTRL
   2951  4ddc							;and #2 ; BACK ARROW
   2952  4ddc		       d0 08		      bne	notAltKeys5
   2953  4dde		       a9 0d		      lda	#<CTRLKeyFunctions	;-
   2954  4de0		       85 c2		      sta	keyPtrL	;
   2955  4de2		       a9 5b		      lda	#>CTRLKeyFunctions	;
   2956  4de4		       85 c3		      sta	keyPtrH	;-
   2957  4de6				   notAltKeys5
   2958  4de6
   2959  4de6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2960  4de6				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
   2961  4de6				  -	      lda	#0
   2962  4de6				  -	      sta	keyTimer	; DEBUG!  Disable key timer
   2963  4de6					      ENDIF
   2964  4de6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2965  4de6
   2966  4de6							; handle keytimer
   2967  4de6							; (to avoid accidental keypresses on shifted keys)
   2968  4de6		       ad 58 70 	      lda	keyTimer
   2969  4de9		       f0 06		      beq	readKeys
   2970  4deb		       ce 58 70 	      dec	keyTimer
   2971  4dee		       4c f1 4d 	      jmp	startCheck
   2972  4df1				   readKeys
   2973  4df1
   2974  4df1							;********************************
   2975  4df1							; Check for Notes Being Pressed
   2976  4df1							;********************************
   2977  4df1				   startCheck
   2978  4df1		       a9 00		      lda	#0
   2979  4df3		       8d 9b 70 	      sta	keyCount
   2980  4df6
   2981  4df6							; Save last notes and clear note buffer
   2982  4df6		       ae 80 70 	      ldx	bufferSize
   2983  4df9							;dex
   2984  4df9		       e8		      inx
   2985  4dfa		       e8		      inx
   2986  4dfb				   clearKeys
   2987  4dfb		       bd d0 70 	      lda	kbBuffer,x
   2988  4dfe				  -	      IF	DEBUG_DISPLAY=1
   2989  4dfe				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
   2990  4dfe					      ENDIF
   2991  4dfe		       9d e0 70 	      sta	lastKbBuffer,x
   2992  4e01		       a9 ff		      lda	#255
   2993  4e03		       9d d0 70 	      sta	kbBuffer,x
   2994  4e06		       ca		      dex
   2995  4e07		       10 f2		      bpl	clearKeys
   2996  4e09
   2997  4e09							;lda #255
   2998  4e09							;sta KeyA
   2999  4e09							;sta KeyB
   3000  4e09							;sta KeyC
   3001  4e09
   3002  4e09		       ae 80 70 	      ldx	bufferSize
   3003  4e0c							;dex
   3004  4e0c		       e8		      inx
   3005  4e0d		       e8		      inx
   3006  4e0e		       a0 00		      ldy	#0
   3007  4e10							; check for note keys being pressed
   3008  4e10				   checkLoop
   3009  4e10		       b9 a5 59 	      lda	col,y
   3010  4e13		       f0 1c		      beq	quitCheck
   3011  4e15		       8d 00 dc 	      sta	56320
   3012  4e18		       ad 01 dc 	      lda	56321
   3013  4e1b		       39 be 59 	      and	row,y
   3014  4e1e		       d0 0e		      bne	notPressed
   3015  4e20		       98		      tya
   3016  4e21		       18		      clc
   3017  4e22		       6d 22 70 	      adc	keyOffset
   3018  4e25							;sta KeyA,x
   3019  4e25		       9d d0 70 	      sta	kbBuffer,x
   3020  4e28		       ca		      dex
   3021  4e29		       ee 9b 70 	      inc	keyCount
   3022  4e2c		       30 03		      bmi	quitCheck
   3023  4e2e				   notPressed
   3024  4e2e		       c8		      iny
   3025  4e2f		       d0 df		      bne	checkLoop
   3026  4e31
   3027  4e31				   quitCheck
   3028  4e31							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3029  4e31							; Generate note on/offs from keyboard data
   3030  4e31							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3031  4e31							; FIND NOTE ONS...
   3032  4e31		       ae 80 70 	      ldx	bufferSize
   3033  4e34							;dex
   3034  4e34		       e8		      inx
   3035  4e35		       e8		      inx
   3036  4e36				   noteOnCheck
   3037  4e36		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
   3038  4e39		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3039  4e3c							;dey
   3040  4e3c		       c8		      iny
   3041  4e3d		       c8		      iny
   3042  4e3e				   innerNoteOnCheck
   3043  4e3e		       d9 e0 70 	      cmp	lastKbBuffer,y
   3044  4e41		       f0 12		      beq	checkNextNote
   3045  4e43		       88		      dey
   3046  4e44		       10 f8		      bpl	innerNoteOnCheck
   3047  4e46							;Found new note-on!
   3048  4e46							;inc 53280
   3049  4e46		       8d 81 70 	      sta	noteTempA
   3050  4e49		       8e 82 70 	      stx	noteTempB
   3051  4e4c		       20 ce 43 	      jsr	doNoteOn
   3052  4e4f		       ad 81 70 	      lda	noteTempA
   3053  4e52		       ae 82 70 	      ldx	noteTempB
   3054  4e55							; TODO: call note on function
   3055  4e55				   checkNextNote
   3056  4e55		       ca		      dex
   3057  4e56		       10 de		      bpl	noteOnCheck
   3058  4e58
   3059  4e58							; FIND NOTE OFF...
   3060  4e58		       ae 80 70 	      ldx	bufferSize
   3061  4e5b							;dex
   3062  4e5b		       e8		      inx
   3063  4e5c		       e8		      inx
   3064  4e5d				   noteOnCheck2
   3065  4e5d		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
   3066  4e60		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3067  4e63							;dey
   3068  4e63		       c8		      iny
   3069  4e64		       c8		      iny
   3070  4e65				   innerNoteOnCheck2
   3071  4e65		       d9 d0 70 	      cmp	kbBuffer,y
   3072  4e68		       f0 12		      beq	checkNextNote2
   3073  4e6a		       88		      dey
   3074  4e6b		       10 f8		      bpl	innerNoteOnCheck2
   3075  4e6d							;Found new note-on!
   3076  4e6d							;inc 53280
   3077  4e6d		       8d 81 70 	      sta	noteTempA
   3078  4e70		       8e 82 70 	      stx	noteTempB
   3079  4e73		       20 fc 43 	      jsr	doNoteOff
   3080  4e76		       ad 81 70 	      lda	noteTempA
   3081  4e79		       ae 82 70 	      ldx	noteTempB
   3082  4e7c							; TODO: call note on function
   3083  4e7c				   checkNextNote2
   3084  4e7c		       ca		      dex
   3085  4e7d		       10 de		      bpl	noteOnCheck2
   3086  4e7f							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3087  4e7f							; End of note on/off generation
   3088  4e7f							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3089  4e7f
   3090  4e7f							; Skip key command check if 3 or more piano keys
   3091  4e7f							; are held to avoid quirks with C64 keyboard
   3092  4e7f							; matrix hardware.
   3093  4e7f		       ae 9b 70 	      ldx	keyCount
   3094  4e82		       f0 0d		      beq	skipMinimalKeyboard
   3095  4e84							; default is raw key functions (no modified keys)
   3096  4e84		       a9 91		      lda	#<minimalKeyFunctions	;-
   3097  4e86		       85 c2		      sta	keyPtrL	;
   3098  4e88		       a9 5a		      lda	#>minimalKeyFunctions	;
   3099  4e8a		       85 c3		      sta	keyPtrH	;-
   3100  4e8c							; also disable keytimer...
   3101  4e8c		       a9 00		      lda	#0
   3102  4e8e		       8d 58 70 	      sta	keyTimer
   3103  4e91				   skipMinimalKeyboard
   3104  4e91
   3105  4e91							; Check key timer...
   3106  4e91		       ad 58 70 	      lda	keyTimer
   3107  4e94		       f0 01		      beq	contReadKeys
   3108  4e96		       60		      rts
   3109  4e97				   contReadKeys
   3110  4e97		       8e 66 70 	      stx	lastOsc
   3111  4e9a
   3112  4e9a							; Check for space bar (pitch bender)...
   3113  4e9a		       a9 7f		      lda	#~$80
   3114  4e9c		       8d 00 dc 	      sta	56320
   3115  4e9f		       ad 01 dc 	      lda	56321
   3116  4ea2		       29 10		      and	#$10
   3117  4ea4		       d0 06		      bne	noSpace
   3118  4ea6		       20 15 50 	      jsr	bendBender
   3119  4ea9		       4c fc 4e 	      jmp	skipKeyCheck
   3120  4eac				   noSpace
   3121  4eac
   3122  4eac
   3123  4eac				   doKeyCheck
   3124  4eac							;********************************
   3125  4eac							; Generic command key check
   3126  4eac							;********************************
   3127  4eac
   3128  4eac		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
   3129  4eae				   keyChkLoop
   3130  4eae		       bd d7 59 	      lda	commandKeys,x
   3131  4eb1		       8d 00 dc 	      sta	56320
   3132  4eb4		       ad 01 dc 	      lda	56321
   3133  4eb7		       3d d8 59 	      and	commandKeys+1,x
   3134  4eba		       d0 3c		      bne	keyNotDown
   3135  4ebc
   3136  4ebc							; key down!
   3137  4ebc							;-----------
   3138  4ebc		       8a		      txa		;multiply x by 2
   3139  4ebd		       0a		      asl		;  to get the offset
   3140  4ebe		       a8		      tay		;  into the key functions array
   3141  4ebf
   3142  4ebf							; get address of function to call
   3143  4ebf		       b1 c2		      lda	(keyPtrL),y
   3144  4ec1		       8d 62 70 	      sta	temp16L
   3145  4ec4		       c8		      iny
   3146  4ec5		       b1 c2		      lda	(keyPtrL),y
   3147  4ec7		       8d 63 70 	      sta	temp16H
   3148  4eca		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
   3149  4ecc							;  no function assigned to this key so quit
   3150  4ecc
   3151  4ecc							; put return address onto stack to simulate JSR with a JMP()
   3152  4ecc		       a9 4e		      lda	#>returnAddress
   3153  4ece		       48		      pha
   3154  4ecf		       a9 e6		      lda	#<returnAddress
   3155  4ed1		       48		      pha
   3156  4ed2
   3157  4ed2							; save the value of X
   3158  4ed2		       8e 64 70 	      stx	saveX
   3159  4ed5
   3160  4ed5		       c8		      iny
   3161  4ed6		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
   3162  4ed8		       8d 65 70 	      sta	keyTemp
   3163  4edb		       c8		      iny
   3164  4edc		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
   3165  4ede		       a8		      tay
   3166  4edf		       ad 65 70 	      lda	keyTemp
   3167  4ee2
   3168  4ee2							; indirect jump to function, which acts as a JSR since
   3169  4ee2							;   we pushed the return address onto the stack
   3170  4ee2		       6c 62 70 	      jmp	(temp16L)
   3171  4ee5
   3172  4ee5		       ea		      nop
   3173  4ee6				   returnAddress
   3174  4ee6		       ea		      nop
   3175  4ee7
   3176  4ee7		       ae 64 70 	      ldx	saveX	; restore X
   3177  4eea
   3178  4eea							; only set the keytimer when a raw key is used
   3179  4eea		       a5 c2		      lda	keyPtrL
   3180  4eec		       c9 15		      cmp	#<rawKeyFunctions
   3181  4eee		       f0 08		      beq	keyNotDown
   3182  4ef0
   3183  4ef0		       a9 28		      lda	#KEYTIME
   3184  4ef2		       8d 58 70 	      sta	keyTimer
   3185  4ef5							;-----------
   3186  4ef5		       4c fc 4e 	      jmp	skipKeyCheck	; quit keycheck after a key is found
   3187  4ef8
   3188  4ef8				   keyNotDown
   3189  4ef8		       ca		      dex
   3190  4ef9		       ca		      dex
   3191  4efa		       10 b2		      bpl	keyChkLoop
   3192  4efc
   3193  4efc				   skipKeyCheck
   3194  4efc
   3195  4efc							; done
   3196  4efc		       60		      rts
   3197  4efd
   3198  4efd							;-------------------------------------------
   3199  4efd							; new key-based set functions
   3200  4efd							;-------------------------------------------
   3201  4efd
   3202  4efd				   ksavePatch
   3203  4efd		       a9 01		      lda	#1
   3204  4eff		       8d 75 70 	      sta	customPatchSaved
   3205  4f02							;-------------------
   3206  4f02		       a9 1d		      lda	#SAVED_PATCH_MESSAGE
   3207  4f04		       8d 47 70 	      sta	patchSetY
   3208  4f07		       20 61 54 	      jsr	showPatchName
   3209  4f0a							;----------------
   3210  4f0a		       a2 19		      ldx	#$19
   3211  4f0c				   saveLoop
   3212  4f0c		       bd 00 71 	      lda	sidData,x
   3213  4f0f		       9d 20 71 	      sta	sidSaveData,x
   3214  4f12		       ca		      dex
   3215  4f13		       10 f7		      bpl	saveLoop
   3216  4f15							;----------------
   3217  4f15		       ad 29 70 	      lda	paddle
   3218  4f18		       8d 41 71 	      sta	savePaddle
   3219  4f1b		       ad 6b 70 	      lda	octave
   3220  4f1e		       8d 42 71 	      sta	saveOctave
   3221  4f21		       ad 1d 70 	      lda	soundMode
   3222  4f24		       8d 43 71 	      sta	saveSoundMode
   3223  4f27		       ad 86 70 	      lda	fxType
   3224  4f2a		       8d 43 71 	      sta	saveFXType
   3225  4f2d		       ad 1e 70 	      lda	arpSpeed
   3226  4f30		       8d 44 71 	      sta	saveArpSpeed
   3227  4f33		       ad 49 70 	      lda	LFODepth
   3228  4f36		       8d 46 71 	      sta	saveLFODepth
   3229  4f39		       ad 48 70 	      lda	LFORate
   3230  4f3c		       8d 47 71 	      sta	saveLFORate
   3231  4f3f		       ad 1c 70 	      lda	volume
   3232  4f42		       8d 48 71 	      sta	saveVolume
   3233  4f45		       ad 24 70 	      lda	volModeRAM
   3234  4f48		       8d 49 71 	      sta	saveVolMode
   3235  4f4b		       ad 57 70 	      lda	filter
   3236  4f4e		       8d 4a 71 	      sta	saveFilter
   3237  4f51							;----------------
   3238  4f51		       60		      rts
   3239  4f52
   3240  4f52				   kloadPatch
   3241  4f52							; don't load patch if none has been saved
   3242  4f52		       ad 75 70 	      lda	customPatchSaved
   3243  4f55		       d0 01		      bne	contLoadPatch
   3244  4f57		       60		      rts
   3245  4f58				   contLoadPatch
   3246  4f58							; Maybe show this name with direct text instead?...
   3247  4f58							;lda #SAVED_PATCH_MESSAGE
   3248  4f58							;sta patchSetY
   3249  4f58							;jsr showPatchName
   3250  4f58							;----------------
   3251  4f58		       a9 1e		      lda	#CUSTOM_PATCH_NUMBER
   3252  4f5a		       8d 47 70 	      sta	patchSetY
   3253  4f5d		       20 61 54 	      jsr	showPatchName
   3254  4f60							;-----------------------
   3255  4f60		       ad 49 71 	      lda	saveVolMode
   3256  4f63		       8d 24 70 	      sta	volModeRAM
   3257  4f66							;.....................
   3258  4f66		       ad 48 71 	      lda	saveVolume
   3259  4f69		       8d 1c 70 	      sta	volume
   3260  4f6c							;.....................
   3261  4f6c		       ad 41 71 	      lda	savePaddle
   3262  4f6f		       20 3a 51 	      jsr	setPaddles
   3263  4f72							;.....................
   3264  4f72		       ad 42 71 	      lda	saveOctave
   3265  4f75		       20 b2 52 	      jsr	setOctave
   3266  4f78							;.....................
   3267  4f78		       ad 43 71 	      lda	saveSoundMode
   3268  4f7b		       8d 1d 70 	      sta	soundMode
   3269  4f7e							;lda saveArpSpeed
   3270  4f7e		       20 14 53 	      jsr	setMode
   3271  4f81							;.....................
   3272  4f81		       ad 43 71 	      lda	saveFXType
   3273  4f84		       8d 86 70 	      sta	fxType
   3274  4f87		       20 ec 52 	      jsr	setFX
   3275  4f8a							;.....................
   3276  4f8a		       ad 46 71 	      lda	saveLFODepth
   3277  4f8d		       20 5b 51 	      jsr	setLFODepth
   3278  4f90							;.....................
   3279  4f90		       ad 47 71 	      lda	saveLFORate
   3280  4f93		       20 71 51 	      jsr	setLFORate
   3281  4f96							;.....................
   3282  4f96		       ad 4a 71 	      lda	saveFilter
   3283  4f99		       8d 57 70 	      sta	filter
   3284  4f9c							;----------------
   3285  4f9c		       a2 19		      ldx	#$19
   3286  4f9e				   loadLoop
   3287  4f9e		       bd 20 71 	      lda	sidSaveData,x
   3288  4fa1		       9d 00 d4 	      sta	SID1,x
   3289  4fa4		       9d 00 df 	      sta	SID2,x
   3290  4fa7		       9d 00 71 	      sta	sidData,x
   3291  4faa		       ca		      dex
   3292  4fab		       10 f1		      bpl	loadLoop
   3293  4fad							;----------------
   3294  4fad		       ad 04 71 	      lda	sidData+SV1WAVE
   3295  4fb0		       8d 30 70 	      sta	WaveType
   3296  4fb3		       ad 0b 71 	      lda	sidData+SV2WAVE
   3297  4fb6		       8d 37 70 	      sta	WaveType2
   3298  4fb9		       ad 12 71 	      lda	sidData+SV3WAVE
   3299  4fbc		       8d 3e 70 	      sta	WaveType3
   3300  4fbf							;----------------
   3301  4fbf		       60		      rts
   3302  4fc0
   3303  4fc0				   khelp
   3304  4fc0		       a9 00		      lda	#0
   3305  4fc2		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
   3306  4fc5
   3307  4fc5		       20 34 58 	      jsr	clrScr
   3308  4fc8		       a9 28		      lda	#KEYTIME
   3309  4fca		       8d 58 70 	      sta	keyTimer
   3310  4fcd		       ad 70 70 	      lda	helpMode
   3311  4fd0		       49 01		      eor	#1
   3312  4fd2							;sta helpMode
   3313  4fd2		       20 db 50 	      jsr	setHelpMode
   3314  4fd5		       20 23 57 	      jsr	displayInit
   3315  4fd8		       ad 70 70 	      lda	helpMode
   3316  4fdb		       f0 07		      beq	showHelpMessage
   3317  4fdd							;---------------
   3318  4fdd							; Show full help page...
   3319  4fdd		       a2 64		      ldx	#>normalHelp	;low/MSB
   3320  4fdf		       a0 6b		      ldy	#<normalHelp	;high/LSB
   3321  4fe1		       4c 8b 58 	      jmp	displayPage	; <--- Draw full help page
   3322  4fe4							; \/ Show help message at bottom of screen
   3323  4fe4				   showHelpMessage
   3324  4fe4							; Show help key...
   3325  4fe4		       a2 00		      ldx	#0
   3326  4fe6				   helpMessageLoop
   3327  4fe6		       bd 4d 64 	      lda	helpMessage,x
   3328  4fe9		       f0 11		      beq	endHelpMsgLoop
   3329  4feb		       c9 40		      cmp	#64
   3330  4fed		       30 02		      bmi	showSpace99
   3331  4fef		       e9 40		      sbc	#64
   3332  4ff1				   showSpace99
   3333  4ff1		       9d c0 07 	      sta	1024+24*40,x
   3334  4ff4		       a9 0b		      lda	#11
   3335  4ff6		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
   3336  4ff9		       e8		      inx
   3337  4ffa		       d0 ea		      bne	helpMessageLoop
   3338  4ffc				   endHelpMsgLoop
   3339  4ffc
   3340  4ffc		       20 f1 51 	      jsr	showMidiMode
   3341  4fff
   3342  4fff
   3343  4fff							;	jsr displayInit
   3344  4fff
   3345  4fff
   3346  4fff
   3347  4fff							;	ldx #39
   3348  4fff							;	lda #32
   3349  4fff							;clearLastRow:
   3350  4fff							;	sta 1024+23*40,x
   3351  4fff							;	dex
   3352  4fff							;	bpl clearLastRow
   3353  4fff		       60		      rts
   3354  5000
   3355  5000				   kclearModulation
   3356  5000		       a9 00		      lda	#0
   3357  5002		       20 e9 52 	      jsr	ksetFX
   3358  5005		       a9 00		      lda	#0
   3359  5007		       20 5b 51 	      jsr	setLFODepth
   3360  500a		       a9 00		      lda	#0
   3361  500c		       4c 71 51 	      jmp	setLFORate
   3362  500f
   3363  500f
   3364  500f
   3365  500f				   ksetPalNtsc
   3366  500f		       8d 61 70 	      sta	NTSCmode
   3367  5012		       4c 23 57 	      jmp	displayInit
   3368  5015
   3369  5015							; bend the bender down
   3370  5015				   bendBender
   3371  5015		       ad 40 70 	      lda	bender
   3372  5018		       c9 fc		      cmp	#252
   3373  501a		       f0 11		      beq	notBender
   3374  501c		       ee 40 70 	      inc	bender
   3375  501f		       ee 40 70 	      inc	bender
   3376  5022		       ee 40 70 	      inc	bender
   3377  5025		       ee 40 70 	      inc	bender
   3378  5028		       a9 01		      lda	#1
   3379  502a		       8d 83 70 	      sta	benderAutoreset
   3380  502d				   notBender
   3381  502d		       60		      rts
   3382  502e
   3383  502e							; set VIC video chip mode
   3384  502e				   setVIC
   3385  502e		       8d 20 70 	      sta	VICMode
   3386  5031		       60		      rts
   3387  5032
   3388  5032							; set paddle on/off
   3389  5032				   ksetPaddles
   3390  5032		       20 3a 51 	      jsr	setPaddles
   3391  5035		       ad 57 70 	      lda	filter
   3392  5038		       8d 9d 70 	      sta	filterSetValue
   3393  503b							;jmp setFilter
   3394  503b
   3395  503b				   ksetPad2
   3396  503b		       8d 7a 70 	      sta	paddle2
   3397  503e		       c9 00		      cmp	#0
   3398  5040		       f0 03		      beq	skipLastPadSave
   3399  5042		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
   3400  5045				   skipLastPadSave
   3401  5045		       0a		      asl
   3402  5046		       0a		      asl
   3403  5047		       18		      clc
   3404  5048		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
   3405  504a		       aa		      tax
   3406  504b		       a0 c4		      ldy	#PAD2TEXT	; screen position
   3407  504d		       4c 03 57 	      jmp	updateText
   3408  5050
   3409  5050				   ksetFilter
   3410  5050		       a2 00		      ldx	#0
   3411  5052		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
   3412  5055							;jsr setFilter
   3413  5055		       8d 9d 70 	      sta	filterSetValue
   3414  5058		       a9 00		      lda	#0
   3415  505a		       4c 3a 51 	      jmp	setPaddles
   3416  505d
   3417  505d
   3418  505d				   kfiltOnOff
   3419  505d		       8c 6c 70 	      sty	filterStatus
   3420  5060				   setResonance
   3421  5060		       ac 6c 70 	      ldy	filterStatus
   3422  5063							;------------------
   3423  5063							;lda sidData+SFILTC
   3424  5063		       ad 97 70 	      lda	resonance
   3425  5066		       19 8d 50 	      ora	filtOrValue,y
   3426  5069		       39 90 50 	      and	filtAndValue,y
   3427  506c		       8d 17 d4 	      sta	SID1+SFILTC
   3428  506f		       8d 17 71 	      sta	sidData+SFILTC
   3429  5072							;------------------
   3430  5072		       ad 17 71 	      lda	sidData+SFILTC
   3431  5075		       19 8d 50 	      ora	filtOrValue,y
   3432  5078		       39 90 50 	      and	filtAndValue,y
   3433  507b		       8d 17 df 	      sta	SID2+SFILTC
   3434  507e							;------------------
   3435  507e		       b9 93 50 	      lda	filtDisableValue,y
   3436  5081		       8d 5c 70 	      sta	filterDisable
   3437  5084							;------------------
   3438  5084				   showFiltOnOff
   3439  5084		       b9 96 50 	      lda	filtTextValue,y
   3440  5087		       aa		      tax
   3441  5088		       a0 4c		      ldy	#FILTERTEXT2
   3442  508a		       4c 03 57 	      jmp	updateText
   3443  508d
   3444  508d
   3445  508d				   filtOrValue
   3446  508d		       0f 00 00 	      byte.b	$0F,0,0
   3447  5090				   filtAndValue
   3448  5090		       ff f0 f0 	      byte.b	$FF,$F0,$F0
   3449  5093				   filtDisableValue
   3450  5093		       00 00 01 	      byte.b	0,0,1
   3451  5096				   filtTextValue
   3452  5096		       04 00 60 	      byte.b	4,0,DISABLED
   3453  5099
   3454  5099				   ksetTune
   3455  5099		       8c 71 70 	      sty	tuneSetting
   3456  509c
   3457  509c		       98		      tya
   3458  509d		       38		      sec
   3459  509e		       e9 04		      sbc	#4
   3460  50a0		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
   3461  50a3
   3462  50a3							;lda tuneArrPtrLL,y
   3463  50a3							;sta tunePtrL
   3464  50a3							;lda tuneArrPtrLH,y
   3465  50a3							;sta tunePtrL+1
   3466  50a3							;lda tuneArrPtrHL,y
   3467  50a3							;sta tunePtrH
   3468  50a3							;lda tuneArrPtrHH,y
   3469  50a3							;sta tunePtrH+1
   3470  50a3		       98		      tya
   3471  50a4		       0a		      asl
   3472  50a5		       0a		      asl
   3473  50a6		       18		      clc
   3474  50a7		       69 14		      adc	#TUNING
   3475  50a9		       aa		      tax
   3476  50aa		       a0 57		      ldy	#TUNINGTEXT
   3477  50ac		       4c 03 57 	      jmp	updateText
   3478  50af
   3479  50af
   3480  50af				   setFullScreenMode
   3481  50af		       8d 67 70 	      sta	fullScreenMode
   3482  50b2		       c9 00		      cmp	#0
   3483  50b4		       f0 11		      beq	notFullScreen
   3484  50b6							;--------
   3485  50b6		       a9 00		      lda	#<(PTRNTEXTBASE)
   3486  50b8		       85 2b		      sta	lowTextPtr
   3487  50ba		       a9 04		      lda	#>(PTRNTEXTBASE)
   3488  50bc		       85 2c		      sta	lowTextPtr+1
   3489  50be		       a9 00		      lda	#<(PTRNCOLORBASE)
   3490  50c0		       85 2d		      sta	lowColorPtr
   3491  50c2		       a9 d8		      lda	#>(PTRNCOLORBASE)
   3492  50c4		       85 2e		      sta	lowColorPtr+1
   3493  50c6		       60		      rts
   3494  50c7							;--------
   3495  50c7				   notFullScreen
   3496  50c7		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
   3497  50c9		       85 2b		      sta	lowTextPtr
   3498  50cb		       a9 04		      lda	#>(PTRNTEXTBASE+200)
   3499  50cd		       85 2c		      sta	lowTextPtr+1
   3500  50cf		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
   3501  50d1		       85 2d		      sta	lowColorPtr
   3502  50d3		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
   3503  50d5		       85 2e		      sta	lowColorPtr+1
   3504  50d7		       20 23 57 	      jsr	displayInit
   3505  50da		       60		      rts
   3506  50db
   3507  50db				   setHelpMode
   3508  50db		       8d 70 70 	      sta	helpMode
   3509  50de		       60		      rts
   3510  50df
   3511  50df							;--------------------------------
   3512  50df							; Set Sync
   3513  50df							;--------------------------------
   3514  50df							; This function does not appear to be used anywhere
   3515  50df							;--------------------------------
   3516  50df				   setSync
   3517  50df		       8d 45 70 	      sta	videoMode
   3518  50e2		       a8		      tay
   3519  50e3		       0a		      asl
   3520  50e4		       0a		      asl
   3521  50e5		       f0 1e		      beq	syncOff
   3522  50e7		       8d 0c 70 	      sta	temp
   3523  50ea		       0d 30 70 	      ora	WaveType
   3524  50ed		       8d 30 70 	      sta	WaveType
   3525  50f0		       ad 0c 70 	      lda	temp
   3526  50f3		       0d 37 70 	      ora	WaveType2
   3527  50f6		       8d 37 70 	      sta	WaveType2
   3528  50f9		       ad 0c 70 	      lda	temp
   3529  50fc		       0d 3e 70 	      ora	WaveType3
   3530  50ff		       8d 3e 70 	      sta	WaveType3
   3531  5102		       4c 22 51 	      jmp	contSync
   3532  5105				   syncOff
   3533  5105		       49 ff		      eor	#255
   3534  5107		       8d 0c 70 	      sta	temp
   3535  510a		       2d 30 70 	      and	WaveType
   3536  510d		       8d 30 70 	      sta	WaveType
   3537  5110		       ad 0c 70 	      lda	temp
   3538  5113		       2d 37 70 	      and	WaveType2
   3539  5116		       8d 37 70 	      sta	WaveType2
   3540  5119		       ad 0c 70 	      lda	temp
   3541  511c		       2d 3e 70 	      and	WaveType3
   3542  511f		       8d 3e 70 	      sta	WaveType3
   3543  5122				   contSync
   3544  5122		       98		      tya
   3545  5123		       0a		      asl
   3546  5124		       0a		      asl
   3547  5125		       aa		      tax
   3548  5126		       a0 12		      ldy	#SYNCTEXT
   3549  5128		       4c 03 57 	      jmp	updateText
   3550  512b		       60		      rts
   3551  512c
   3552  512c							;--------------------------------
   3553  512c							; Set Video Mode
   3554  512c							;--------------------------------
   3555  512c				   setVideoMode
   3556  512c		       8d 45 70 	      sta	videoMode
   3557  512f		       8c 68 70 	      sty	videoText
   3558  5132		       98		      tya
   3559  5133		       18		      clc
   3560  5134		       69 30		      adc	#"0"
   3561  5136		       8d bc 04 	      sta	1024+VIDEOTEXT
   3562  5139		       60		      rts
   3563  513a
   3564  513a							;--------------------------------
   3565  513a							; Set Paddles
   3566  513a							;--------------------------------
   3567  513a				   setPaddles
   3568  513a		       8d 29 70 	      sta	paddle
   3569  513d		       0a		      asl
   3570  513e		       d0 0c		      bne	noFilterReset
   3571  5140		       ae 57 70 	      ldx	filter
   3572  5143		       8e 16 d4 	      stx	SID1+SFILTH
   3573  5146		       8e 16 df 	      stx	SID2+SFILTH
   3574  5149		       8d 16 71 	      sta	sidData+SFILTH
   3575  514c				   noFilterReset
   3576  514c		       a0 00		      ldy	#0
   3577  514e		       8c 76 70 	      sty	paddleTop
   3578  5151		       8c 77 70 	      sty	paddleBottom
   3579  5154				   showPaddle
   3580  5154		       0a		      asl
   3581  5155		       aa		      tax
   3582  5156		       a0 9c		      ldy	#PADDLETEXT
   3583  5158		       4c 03 57 	      jmp	updateText
   3584  515b
   3585  515b
   3586  515b							;--------------------------------
   3587  515b							; Set LFO Depth
   3588  515b							;--------------------------------
   3589  515b				   setLFODepth
   3590  515b		       8d 49 70 	      sta	LFODepth
   3591  515e							;showLFO:
   3592  515e		       ac 70 70 	      ldy	helpMode
   3593  5161		       f0 01		      beq	doShowLFO
   3594  5163		       60		      rts
   3595  5164				   doShowLFO
   3596  5164		       a0 6c		      ldy	#LFODEPTHTEXT
   3597  5166		       18		      clc
   3598  5167		       69 30		      adc	#"0"
   3599  5169		       99 00 04 	      sta	1024,y
   3600  516c		       a9 20		      lda	#32
   3601  516e		       a2 08		      ldx	#8
   3602  5170		       60		      rts
   3603  5171
   3604  5171
   3605  5171							;--------------------------------
   3606  5171							; Set LFO Rate
   3607  5171							;--------------------------------
   3608  5171				   setLFORate
   3609  5171		       8d 48 70 	      sta	LFORate
   3610  5174				   showLFORate
   3611  5174		       ac 70 70 	      ldy	helpMode
   3612  5177		       f0 01		      beq	doShowLFORate
   3613  5179		       60		      rts
   3614  517a				   doShowLFORate
   3615  517a		       a0 94		      ldy	#LFORATETEXT
   3616  517c		       18		      clc
   3617  517d		       69 30		      adc	#"0"
   3618  517f		       99 00 04 	      sta	1024,y
   3619  5182							;lda #32
   3620  5182		       a9 02		      lda	#CYNTHCART_COLOR
   3621  5184		       a2 08		      ldx	#8
   3622  5186				   LFOClear
   3623  5186							;sta 1064,x
   3624  5186		       9d 00 d8 	      sta	55296,x
   3625  5189		       ca		      dex
   3626  518a		       10 fa		      bpl	LFOClear
   3627  518c		       60		      rts
   3628  518d
   3629  518d							;--------------------------------
   3630  518d							; Set Release
   3631  518d							;--------------------------------
   3632  518d							; A = release value
   3633  518d				   setRelease
   3634  518d		       8d 6a 70 	      sta	release
   3635  5190		       8d 06 d4 	      sta	SID1+SV1SR
   3636  5193		       8d 0d d4 	      sta	SID1+SV2SR
   3637  5196		       8d 14 d4 	      sta	SID1+SV3SR
   3638  5199		       8d 06 df 	      sta	SID2+SV1SR
   3639  519c		       8d 0d df 	      sta	SID2+SV2SR
   3640  519f		       8d 14 df 	      sta	SID2+SV3SR
   3641  51a2		       8d 06 71 	      sta	sidData+SV1SR
   3642  51a5		       8d 0d 71 	      sta	sidData+SV2SR
   3643  51a8		       8d 14 71 	      sta	sidData+SV3SR
   3644  51ab							;----------------
   3645  51ab				   showRelease
   3646  51ab		       ac 70 70 	      ldy	helpMode
   3647  51ae		       f0 01		      beq	doShowRelease
   3648  51b0		       60		      rts
   3649  51b1				   doShowRelease
   3650  51b1		       29 0f		      and	#$0F
   3651  51b3		       a8		      tay
   3652  51b4		       b9 de 51 	      lda	sixteenToTen,y
   3653  51b7		       18		      clc
   3654  51b8		       69 30		      adc	#"0"
   3655  51ba		       8d 8a 04 	      sta	1024+RELTEXT
   3656  51bd		       60		      rts
   3657  51be
   3658  51be		       a0 8a		      ldy	#RELTEXT
   3659  51c0		       a9 e0		      lda	#REL_SHORT
   3660  51c2		       cd 6a 70 	      cmp	release
   3661  51c5		       30 05		      bmi	notRel0
   3662  51c7		       a9 30		      lda	#"0"
   3663  51c9		       4c da 51 	      jmp	setReleaseText
   3664  51cc				   notRel0
   3665  51cc		       a9 e9		      lda	#REL_MED
   3666  51ce		       cd 6a 70 	      cmp	release
   3667  51d1		       30 05		      bmi	notRel1
   3668  51d3		       a9 31		      lda	#"1"
   3669  51d5		       4c da 51 	      jmp	setReleaseText
   3670  51d8				   notRel1
   3671  51d8		       a9 32		      lda	#"2"
   3672  51da				   setReleaseText
   3673  51da		       99 00 04 	      sta	1024,y
   3674  51dd		       60		      rts
   3675  51de
   3676  51de				   sixteenToTen
   3677  51de		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
   3678  51ee
   3679  51ee
   3680  51ee				   setMidiMode
   3681  51ee		       8d f7 70 	      sta	midiMode
   3682  51f1				   showMidiMode
   3683  51f1		       a9 2f		      lda	#47
   3684  51f3		       8d dc 07 	      sta	2012
   3685  51f6		       8d e1 07 	      sta	2017
   3686  51f9		       ae f7 70 	      ldx	midiMode
   3687  51fc		       30 19		      bmi	showOmni
   3688  51fe							;sta 2010
   3689  51fe				   showChannel
   3690  51fe		       a9 20		      lda	#32
   3691  5200		       8d d8 07 	      sta	2008
   3692  5203		       a9 03		      lda	#3
   3693  5205		       8d d9 07 	      sta	2009
   3694  5208		       a9 08		      lda	#8
   3695  520a		       8d da 07 	      sta	2010
   3696  520d		       a9 31		      lda	#49
   3697  520f		       18		      clc
   3698  5210		       6d f7 70 	      adc	midiMode
   3699  5213		       8d db 07 	      sta	2011
   3700  5216		       60		      rts
   3701  5217				   showOmni
   3702  5217		       a9 0f		      lda	#15
   3703  5219		       8d d8 07 	      sta	2008
   3704  521c		       a9 0d		      lda	#13
   3705  521e		       8d d9 07 	      sta	2009
   3706  5221		       a9 0e		      lda	#14
   3707  5223		       8d da 07 	      sta	2010
   3708  5226		       a9 09		      lda	#9
   3709  5228		       8d db 07 	      sta	2011
   3710  522b		       60		      rts
   3711  522c
   3712  522c							;--------------------------------
   3713  522c							; Set Attack
   3714  522c							;--------------------------------
   3715  522c							; A = Attack value
   3716  522c				   setAttack
   3717  522c		       8d 69 70 	      sta	attack
   3718  522f		       8d 0c d4 	      sta	SID1+SV2AD
   3719  5232		       8d 13 d4 	      sta	SID1+SV3AD
   3720  5235		       8d 0c df 	      sta	SID2+SV2AD
   3721  5238		       8d 13 df 	      sta	SID2+SV3AD
   3722  523b		       8d 05 d4 	      sta	SID1+SV1AD
   3723  523e		       8d 05 df 	      sta	SID2+SV1AD
   3724  5241		       8d 0c 71 	      sta	sidData+SV2AD
   3725  5244		       8d 13 71 	      sta	sidData+SV3AD
   3726  5247		       8d 05 71 	      sta	sidData+SV1AD
   3727  524a							;----------------
   3728  524a				   showAttack
   3729  524a		       ac 70 70 	      ldy	helpMode
   3730  524d		       f0 01		      beq	doShowAttack
   3731  524f		       60		      rts
   3732  5250				   doShowAttack
   3733  5250		       4a		      lsr
   3734  5251		       4a		      lsr
   3735  5252		       4a		      lsr
   3736  5253		       4a		      lsr
   3737  5254		       a8		      tay
   3738  5255		       b9 de 51 	      lda	sixteenToTen,y
   3739  5258		       18		      clc
   3740  5259		       69 30		      adc	#"0"
   3741  525b		       8d 62 04 	      sta	1024+ATKTEXT
   3742  525e		       60		      rts
   3743  525f
   3744  525f
   3745  525f							;-----------------------------------
   3746  525f							; Set Volume to A (for key command)
   3747  525f							;-----------------------------------
   3748  525f				   ksetVolume
   3749  525f		       8d 1c 70 	      sta	volume
   3750  5262
   3751  5262
   3752  5262							;-----------------------------------
   3753  5262							; Set Volume
   3754  5262							;-----------------------------------
   3755  5262				   setVolume
   3756  5262		       ad 24 70 	      lda	volModeRAM
   3757  5265		       29 f0		      and	#$F0
   3758  5267		       0d 1c 70 	      ora	volume
   3759  526a		       8d 18 d4 	      sta	SID1+SVOLMODE
   3760  526d		       8d 18 df 	      sta	SID2+SVOLMODE
   3761  5270		       8d 18 71 	      sta	sidData+SVOLMODE
   3762  5273				   showVolume
   3763  5273		       ac 70 70 	      ldy	helpMode
   3764  5276		       f0 01		      beq	doShowVolume
   3765  5278		       60		      rts
   3766  5279				   doShowVolume
   3767  5279		       29 0f		      and	#$0F
   3768  527b		       aa		      tax
   3769  527c		       bd de 51 	      lda	sixteenToTen,x
   3770  527f		       18		      clc
   3771  5280		       69 30		      adc	#"0"
   3772  5282		       8d a7 04 	      sta	1024+VOLTEXT
   3773  5285		       60		      rts
   3774  5286
   3775  5286		       aa		      tax
   3776  5287		       bd de 51 	      lda	sixteenToTen,x
   3777  528a		       aa		      tax
   3778  528b		       a0 a7		      ldy	#VOLTEXT
   3779  528d		       a9 07		      lda	#VOLLOW
   3780  528f		       20 03 57 	      jsr	updateText
   3781  5292		       60		      rts
   3782  5293
   3783  5293
   3784  5293							; set volume text
   3785  5293		       a0 a7		      ldy	#VOLTEXT
   3786  5295		       a9 07		      lda	#VOLLOW
   3787  5297		       cd 1c 70 	      cmp	volume
   3788  529a		       30 05		      bmi	notLow
   3789  529c		       a2 50		      ldx	#VLOW
   3790  529e		       4c 03 57 	      jmp	updateText
   3791  52a1				   notLow
   3792  52a1		       a9 0b		      lda	#VOLMED
   3793  52a3		       cd 1c 70 	      cmp	volume
   3794  52a6		       30 05		      bmi	notMed
   3795  52a8		       a2 54		      ldx	#VMED
   3796  52aa		       4c 03 57 	      jmp	updateText
   3797  52ad				   notMed
   3798  52ad		       a2 58		      ldx	#VHIGH
   3799  52af		       4c 03 57 	      jmp	updateText
   3800  52b2							;-------------------------------------
   3801  52b2
   3802  52b2
   3803  52b2							;-----------------------------------
   3804  52b2							; Set Octave
   3805  52b2							;-----------------------------------
   3806  52b2				   setOctave
   3807  52b2		       8d 6b 70 	      sta	octave
   3808  52b5		       aa		      tax
   3809  52b6		       bd a2 60 	      lda	octaveTable,x
   3810  52b9		       8d 22 70 	      sta	keyOffset
   3811  52bc				   showOctave
   3812  52bc		       ac 70 70 	      ldy	helpMode
   3813  52bf		       f0 01		      beq	doShowOctave
   3814  52c1		       60		      rts
   3815  52c2				   doShowOctave
   3816  52c2		       8a		      txa
   3817  52c3		       18		      clc
   3818  52c4		       69 30		      adc	#"0"
   3819  52c6		       aa		      tax
   3820  52c7		       8d 7f 04 	      sta	1024+OCTAVETEXT
   3821  52ca		       60		      rts
   3822  52cb
   3823  52cb							;-----------------------------------
   3824  52cb							; Set Filter
   3825  52cb							;-----------------------------------
   3826  52cb				   setFilter
   3827  52cb		       8d 16 d4 	      sta	SID1+SFILTH
   3828  52ce		       8d 16 df 	      sta	SID2+SFILTH
   3829  52d1		       8d 16 71 	      sta	sidData+SFILTH
   3830  52d4
   3831  52d4		       8d 57 70 	      sta	filter
   3832  52d7				   showFilter
   3833  52d7		       ac 70 70 	      ldy	helpMode
   3834  52da		       f0 01		      beq	doShowFilter
   3835  52dc		       60		      rts
   3836  52dd				   doShowFilter
   3837  52dd		       4a		      lsr
   3838  52de		       4a		      lsr
   3839  52df		       4a		      lsr
   3840  52e0		       4a		      lsr
   3841  52e1		       4a		      lsr
   3842  52e2		       18		      clc
   3843  52e3		       69 30		      adc	#"0"
   3844  52e5				   endFilter
   3845  52e5		       8d 75 04 	      sta	1024+FILTERTEXT
   3846  52e8		       60		      rts
   3847  52e9
   3848  52e9
   3849  52e9							;-----------------------------------
   3850  52e9							; Set FX mode with A,Y (for key command)
   3851  52e9							;-----------------------------------
   3852  52e9				   ksetFX
   3853  52e9		       8d 86 70 	      sta	fxType
   3854  52ec							;-----------------------------------
   3855  52ec							; Set FX mode
   3856  52ec							;-----------------------------------
   3857  52ec				   setFX
   3858  52ec		       ad 70 70 	      lda	helpMode
   3859  52ef		       f0 01		      beq	doShowFX
   3860  52f1		       60		      rts
   3861  52f2				   doShowFX
   3862  52f2							;lda fxType
   3863  52f2
   3864  52f2							; Draw name of new sound mode on screen...
   3865  52f2		       ad 86 70 	      lda	fxType
   3866  52f5		       0a		      asl
   3867  52f6		       0a		      asl
   3868  52f7		       0a		      asl
   3869  52f8							;lda modeNameOffsets,x
   3870  52f8							;lda fxNames,x
   3871  52f8		       aa		      tax
   3872  52f9		       a0 00		      ldy	#0
   3873  52fb				   drawModeLoopFX
   3874  52fb							;lda modeNamesPolyphony,x
   3875  52fb		       bd 70 61 	      lda	fxNames,x
   3876  52fe		       c9 40		      cmp	#64
   3877  5300		       30 02		      bmi	showSpaceZFX
   3878  5302		       e9 40		      sbc	#64
   3879  5304				   showSpaceZFX
   3880  5304		       99 ae 04 	      sta	1024+FXTEXT,y
   3881  5307		       e8		      inx
   3882  5308		       c8		      iny
   3883  5309		       c0 05		      cpy	#5
   3884  530b		       d0 ee		      bne	drawModeLoopFX
   3885  530d							; - - - - -
   3886  530d							;inx ; Get polyphony value at end of name string...
   3887  530d							;inx
   3888  530d							;lda modeNamesPolyphony,x
   3889  530d							;sta polyphony
   3890  530d
   3891  530d							;lda #8
   3892  530d							;sta bufferSize
   3893  530d
   3894  530d		       60		      rts
   3895  530e
   3896  530e
   3897  530e
   3898  530e				   portSpeedTable
   3899  530e		       06 07 09 	      byte.b	6,7,9
   3900  5311							;byte 5,7,9
   3901  5311
   3902  5311							;-----------------------------------
   3903  5311							; set port with A,Y (for key command)
   3904  5311							;-----------------------------------
   3905  5311				   ksetMode
   3906  5311							;sta portOn
   3907  5311		       8d 1d 70 	      sta	soundMode
   3908  5314							;sty portSpd
   3909  5314							; . . . . . . . . . .
   3910  5314							;-----------------------------------
   3911  5314							; Set sound mode
   3912  5314							;-----------------------------------
   3913  5314				   setMode
   3914  5314				   showModeName
   3915  5314		       ac 70 70 	      ldy	helpMode
   3916  5317		       f0 01		      beq	doShowModeName
   3917  5319		       60		      rts
   3918  531a				   doShowModeName
   3919  531a
   3920  531a		       ad 1d 70 	      lda	soundMode	; This probably needs work
   3921  531d
   3922  531d							; Draw name of new sound mode on screen...
   3923  531d		       ae 1d 70 	      ldx	soundMode
   3924  5320		       bd be 6a 	      lda	modeNameOffsets,x
   3925  5323		       aa		      tax
   3926  5324		       a0 00		      ldy	#0
   3927  5326				   drawModeLoop
   3928  5326		       bd 46 6a 	      lda	modeNamesPolyphony,x
   3929  5329		       c9 40		      cmp	#64
   3930  532b		       30 02		      bmi	showSpaceZ
   3931  532d		       e9 40		      sbc	#64
   3932  532f				   showSpaceZ
   3933  532f		       99 2d 04 	      sta	1024+MODETEXT,y
   3934  5332		       e8		      inx
   3935  5333		       c8		      iny
   3936  5334		       c0 05		      cpy	#5
   3937  5336		       d0 ee		      bne	drawModeLoop
   3938  5338							; - - - - -
   3939  5338		       e8		      inx		; Get polyphony value at end of name string...
   3940  5339		       e8		      inx
   3941  533a		       bd 46 6a 	      lda	modeNamesPolyphony,x
   3942  533d		       8d 84 70 	      sta	polyphony
   3943  5340
   3944  5340		       a9 08		      lda	#8
   3945  5342		       8d 80 70 	      sta	bufferSize
   3946  5345
   3947  5345
   3948  5345							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3949  5345							;sta 1024+161 ;DEBUG
   3950  5345							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3951  5345
   3952  5345
   3953  5345							; set up pointer to portamento speed array
   3954  5345							; (which is the tuning array)
   3955  5345							;lda portSpd
   3956  5345							;clc
   3957  5345							;adc #4
   3958  5345
   3959  5345							; New version of code above...
   3960  5345		       ad 1d 70 	      lda	soundMode
   3961  5348		       29 0f		      and	#$0F	; Get portamento speed
   3962  534a		       a8		      tay
   3963  534b		       b9 0e 53 	      lda	portSpeedTable,y
   3964  534e
   3965  534e							;clc
   3966  534e							;asl ; X2
   3967  534e							;adc #5
   3968  534e
   3969  534e		       a8		      tay
   3970  534f							;	ldy #5 ; portSpd DEBUG
   3971  534f		       b9 26 6b 	      lda	tuneArrPtrLL,y
   3972  5352		       85 35		      sta	portPtrL
   3973  5354		       b9 30 6b 	      lda	tuneArrPtrLH,y
   3974  5357		       85 36		      sta	portPtrL+1
   3975  5359		       b9 3a 6b 	      lda	tuneArrPtrHL,y
   3976  535c		       85 47		      sta	portPtrH
   3977  535e		       b9 44 6b 	      lda	tuneArrPtrHH,y
   3978  5361		       85 48		      sta	portPtrH+1
   3979  5363		       60		      rts
   3980  5364
   3981  5364
   3982  5364							;----------------------------------------
   3983  5364							; subroutine to set up patch
   3984  5364							; (patch # stored in Y)
   3985  5364							;----------------------------------------
   3986  5364				   setPatch
   3987  5364
   3988  5364		       8c 47 70 	      sty	patchSetY
   3989  5367
   3990  5367		       b9 ee 5f 	      lda	patchVol,y
   3991  536a		       8d 1c 70 	      sta	volume
   3992  536d
   3993  536d		       b9 b2 5f 	      lda	patchPaddle,y
   3994  5370		       20 3a 51 	      jsr	setPaddles
   3995  5373
   3996  5373							;.....................
   3997  5373		       20 67 4d 	      jsr	midiPanic
   3998  5376							;.....................
   3999  5376
   4000  5376							; Reset modulation values
   4001  5376		       a9 7f		      lda	#127
   4002  5378		       8d 9c 70 	      sta	filterModValue
   4003  537b		       8d 9e 70 	      sta	pwModValue
   4004  537e
   4005  537e		       ac 47 70 	      ldy	patchSetY
   4006  5381		       b9 d0 5f 	      lda	newPatchFiltCut,y
   4007  5384		       8d 9d 70 	      sta	filterSetValue
   4008  5387							;jsr setFilter
   4009  5387
   4010  5387							;lda patchFilt,y
   4011  5387							;sta SID1+SV1PWL
   4012  5387
   4013  5387
   4014  5387		       ac 47 70 	      ldy	patchSetY
   4015  538a		       b9 fd 5e 	      lda	patchSoundMode,y
   4016  538d		       8d 1d 70 	      sta	soundMode
   4017  5390		       20 14 53 	      jsr	setMode
   4018  5393
   4019  5393		       ac 47 70 	      ldy	patchSetY
   4020  5396		       b9 0c 60 	      lda	patchPWL,y
   4021  5399		       8d 02 d4 	      sta	SID1+SV1PWL
   4022  539c		       8d 09 d4 	      sta	SID1+SV2PWL
   4023  539f		       8d 10 d4 	      sta	SID1+SV3PWL
   4024  53a2		       8d 02 df 	      sta	SID2+SV1PWL
   4025  53a5		       8d 09 df 	      sta	SID2+SV2PWL
   4026  53a8		       8d 10 df 	      sta	SID2+SV3PWL
   4027  53ab		       8d 02 71 	      sta	sidData+SV1PWL
   4028  53ae		       8d 09 71 	      sta	sidData+SV2PWL
   4029  53b1		       8d 10 71 	      sta	sidData+SV3PWL
   4030  53b4
   4031  53b4		       ac 47 70 	      ldy	patchSetY
   4032  53b7		       b9 2a 60 	      lda	patchPWH,y
   4033  53ba		       8d 03 d4 	      sta	SID1+SV1PWH
   4034  53bd		       8d 0a d4 	      sta	SID1+SV2PWH
   4035  53c0		       8d 11 d4 	      sta	SID1+SV3PWH
   4036  53c3		       8d 03 df 	      sta	SID2+SV1PWH
   4037  53c6		       8d 0a df 	      sta	SID2+SV2PWH
   4038  53c9		       8d 11 df 	      sta	SID2+SV3PWH
   4039  53cc		       8d 03 71 	      sta	sidData+SV1PWH
   4040  53cf		       8d 0a 71 	      sta	sidData+SV2PWH
   4041  53d2		       8d 11 71 	      sta	sidData+SV3PWH
   4042  53d5
   4043  53d5		       ac 47 70 	      ldy	patchSetY
   4044  53d8		       b9 48 60 	      lda	patchWave,y
   4045  53db		       8d 37 70 	      sta	WaveType2
   4046  53de		       8d 3e 70 	      sta	WaveType3
   4047  53e1		       8d 30 70 	      sta	WaveType
   4048  53e4
   4049  53e4		       ac 47 70 	      ldy	patchSetY
   4050  53e7		       b9 3a 5f 	      lda	patchLFO,y
   4051  53ea		       29 0f		      and	#$0F
   4052  53ec		       8c 0c 70 	      sty	temp
   4053  53ef		       20 71 51 	      jsr	setLFORate
   4054  53f2		       ac 0c 70 	      ldy	temp
   4055  53f5		       b9 3a 5f 	      lda	patchLFO,y
   4056  53f8		       29 f0		      and	#$F0
   4057  53fa		       4a		      lsr
   4058  53fb		       4a		      lsr
   4059  53fc		       4a		      lsr
   4060  53fd		       4a		      lsr
   4061  53fe							;lda #2
   4062  53fe		       20 5b 51 	      jsr	setLFODepth
   4063  5401
   4064  5401		       ac 0c 70 	      ldy	temp
   4065  5404		       b9 76 5f 	      lda	patchAD,y
   4066  5407							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
   4067  5407							;lda #$F0
   4068  5407		       20 2c 52 	      jsr	setAttack
   4069  540a		       ac 47 70 	      ldy	patchSetY
   4070  540d
   4071  540d		       ac 0c 70 	      ldy	temp
   4072  5410		       b9 94 5f 	      lda	patchSR,y
   4073  5413		       20 8d 51 	      jsr	setRelease
   4074  5416		       ac 47 70 	      ldy	patchSetY
   4075  5419
   4076  5419		       b9 66 60 	      lda	patchFilt,y
   4077  541c		       ae 5c 70 	      ldx	filterDisable
   4078  541f		       f0 02		      beq	skipFilterDisable
   4079  5421		       29 f0		      and	#$F0
   4080  5423				   skipFilterDisable
   4081  5423		       8d 17 d4 	      sta	SID1+SFILTC
   4082  5426		       8d 17 df 	      sta	SID2+SFILTC
   4083  5429		       8d 17 71 	      sta	sidData+SFILTC
   4084  542c		       29 01		      and	#$01
   4085  542e		       f0 07		      beq	skipFilterOnText
   4086  5430		       a0 4c		      ldy	#FILTERTEXT2
   4087  5432		       a2 04		      ldx	#4
   4088  5434		       20 03 57 	      jsr	updateText
   4089  5437				   skipFilterOnText
   4090  5437		       ac 47 70 	      ldy	patchSetY
   4091  543a
   4092  543a		       b9 84 60 	      lda	patchVolMode,y
   4093  543d		       29 f0		      and	#$F0
   4094  543f		       0d 1c 70 	      ora	volume
   4095  5442		       8d 24 70 	      sta	volModeRAM
   4096  5445		       20 62 52 	      jsr	setVolume
   4097  5448		       ac 47 70 	      ldy	patchSetY
   4098  544b
   4099  544b		       b9 58 5f 	      lda	patchOctave,y
   4100  544e		       20 b2 52 	      jsr	setOctave
   4101  5451		       ac 47 70 	      ldy	patchSetY
   4102  5454
   4103  5454		       b9 1c 5f 	      lda	patchFX,y
   4104  5457		       8d 86 70 	      sta	fxType
   4105  545a		       20 ec 52 	      jsr	setFX
   4106  545d
   4107  545d		       20 61 54 	      jsr	showPatchName
   4108  5460
   4109  5460		       60		      rts
   4110  5461							;------------------------ end of setpatch
   4111  5461
   4112  5461				   showPatchName
   4113  5461		       ad 70 70 	      lda	helpMode
   4114  5464		       f0 01		      beq	doShowPatchName
   4115  5466		       60		      rts
   4116  5467				   doShowPatchName
   4117  5467		       ad 47 70 	      lda	patchSetY
   4118  546a		       29 f0		      and	#%11110000
   4119  546c		       d0 1f		      bne	patchNameSecondBank
   4120  546e							;tay
   4121  546e		       ac 47 70 	      ldy	patchSetY
   4122  5471		       c8		      iny
   4123  5472		       98		      tya
   4124  5473		       0a		      asl
   4125  5474		       0a		      asl
   4126  5475		       0a		      asl
   4127  5476		       0a		      asl
   4128  5477		       a8		      tay
   4129  5478		       88		      dey
   4130  5479		       a2 0f		      ldx	#15
   4131  547b				   patchText
   4132  547b		       b9 fd 5c 	      lda	patchName,y
   4133  547e		       c9 40		      cmp	#64
   4134  5480		       30 03		      bmi	pshowSpace
   4135  5482		       38		      sec
   4136  5483		       e9 40		      sbc	#64
   4137  5485				   pshowSpace
   4138  5485		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4139  5488		       88		      dey
   4140  5489		       ca		      dex
   4141  548a		       10 ef		      bpl	patchText
   4142  548c		       60		      rts
   4143  548d
   4144  548d				   patchNameSecondBank
   4145  548d							;tay
   4146  548d		       ac 47 70 	      ldy	patchSetY
   4147  5490		       c8		      iny
   4148  5491		       98		      tya
   4149  5492		       0a		      asl
   4150  5493		       0a		      asl
   4151  5494		       0a		      asl
   4152  5495		       0a		      asl
   4153  5496		       a8		      tay
   4154  5497		       88		      dey
   4155  5498		       a2 0f		      ldx	#15
   4156  549a				   patchText2
   4157  549a		       b9 fd 5d 	      lda	patchName2,y
   4158  549d		       c9 40		      cmp	#64
   4159  549f		       30 03		      bmi	pshowSpace2
   4160  54a1		       38		      sec
   4161  54a2		       e9 40		      sbc	#64
   4162  54a4				   pshowSpace2
   4163  54a4		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4164  54a7		       88		      dey
   4165  54a8		       ca		      dex
   4166  54a9		       10 ef		      bpl	patchText2
   4167  54ab		       60		      rts
   4168  54ac
   4169  54ac
   4170  54ac
   4171  54ac		       00 04	   HEX_DISP_OFFSET equ	4
   4172  54ac
   4173  54ac
   4174  54ac							;---------------------------------
   4175  54ac							; Wait until no hex key is down
   4176  54ac							; (doesn't check all keys, only hex keys!)
   4177  54ac				   waitForKeyRelease
   4178  54ac		       20 5d 56 	      jsr	readHexKey
   4179  54af		       c9 ff		      cmp	#255
   4180  54b1		       d0 f9		      bne	waitForKeyRelease
   4181  54b3		       a2 ff		      ldx	#255	; Always 255
   4182  54b5		       a0 60		      ldy	#96	; Delay amount
   4183  54b7				   delay		; Delay a short time to avoid catching key bounce...
   4184  54b7		       ca		      dex
   4185  54b8		       d0 fd		      bne	delay
   4186  54ba		       88		      dey
   4187  54bb		       d0 fa		      bne	delay
   4188  54bd		       60		      rts
   4189  54be
   4190  54be
   4191  54be							;===============================================
   4192  54be							; Allow the user to hex edit the SID registers
   4193  54be							; directly.
   4194  54be				   SIDEdit
   4195  54be
   4196  54be		       8d 60 70 	      sta	hexKeyMode
   4197  54c1
   4198  54c1		       20 d3 56 	      jsr	beep
   4199  54c4		       20 d3 56 	      jsr	beep
   4200  54c7		       20 d3 56 	      jsr	beep
   4201  54ca
   4202  54ca		       20 34 58 	      jsr	clrScr
   4203  54cd		       20 23 57 	      jsr	displayInit
   4204  54d0
   4205  54d0							; X = low data address
   4206  54d0							; Y = high data address
   4207  54d0		       a2 61		      ldx	#>hexEditHelp	;low/MSB
   4208  54d2		       a0 b8		      ldy	#<hexEditHelp	;high/LSB
   4209  54d4		       20 8b 58 	      jsr	displayPage
   4210  54d7
   4211  54d7		       20 e2 55 	      jsr	showSidValues
   4212  54da
   4213  54da
   4214  54da							;enable keyboard interrupt
   4215  54da							;	lda #129
   4216  54da							;	sta 56333
   4217  54da							; wait for all keys to be released first
   4218  54da							;waitForNoKey:
   4219  54da							;	lda 197
   4220  54da							;	cmp #64
   4221  54da							;	bne waitForNoKey
   4222  54da
   4223  54da
   4224  54da							; clear top line
   4225  54da		       a2 09		      ldx	#9
   4226  54dc		       a9 20		      lda	#32
   4227  54de				   hexClearA
   4228  54de		       9d 00 04 	      sta	1024,x
   4229  54e1		       ca		      dex
   4230  54e2		       10 fa		      bpl	hexClearA
   4231  54e4
   4232  54e4							; display "sid edit" text
   4233  54e4		       a2 5c		      ldx	#92
   4234  54e6		       a0 00		      ldy	#0
   4235  54e8		       20 03 57 	      jsr	updateText
   4236  54eb
   4237  54eb							;jsr waitForKeyRelease
   4238  54eb
   4239  54eb							; get/display the first hex digit of the address to edit
   4240  54eb		       a9 24		      lda	#36
   4241  54ed		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4242  54f0		       20 52 56 	      jsr	getHexKey
   4243  54f3		       aa		      tax
   4244  54f4		       0a		      asl
   4245  54f5		       0a		      asl
   4246  54f6		       0a		      asl
   4247  54f7		       0a		      asl
   4248  54f8		       8d 5a 70 	      sta	SIDeditAddr
   4249  54fb		       bd 52 6b 	      lda	hexDisplay,x
   4250  54fe		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4251  5501
   4252  5501							;sta 1024
   4253  5501							;jsr waitForKeyRelease
   4254  5501							;sta 1024
   4255  5501
   4256  5501							; get/display the second hex digit of the address to edit
   4257  5501		       a9 24		      lda	#36
   4258  5503		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4259  5506		       20 52 56 	      jsr	getHexKey
   4260  5509		       aa		      tax
   4261  550a		       0d 5a 70 	      ora	SIDeditAddr
   4262  550d		       8d 5a 70 	      sta	SIDeditAddr
   4263  5510		       bd 52 6b 	      lda	hexDisplay,x
   4264  5513		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4265  5516
   4266  5516							; display a '>' between
   4267  5516		       a9 3e		      lda	#62
   4268  5518		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
   4269  551b
   4270  551b							; get/display the first hex digit of the value to write
   4271  551b		       a9 24		      lda	#36
   4272  551d		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4273  5520		       20 52 56 	      jsr	getHexKey
   4274  5523		       aa		      tax
   4275  5524		       0a		      asl
   4276  5525		       0a		      asl
   4277  5526		       0a		      asl
   4278  5527		       0a		      asl
   4279  5528		       8d 5b 70 	      sta	SIDeditValue
   4280  552b		       bd 52 6b 	      lda	hexDisplay,x
   4281  552e		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4282  5531
   4283  5531							; get/display the second hex digit of the value to write
   4284  5531		       a9 24		      lda	#36
   4285  5533		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4286  5536		       20 52 56 	      jsr	getHexKey
   4287  5539		       aa		      tax
   4288  553a		       0d 5b 70 	      ora	SIDeditValue
   4289  553d		       8d 5b 70 	      sta	SIDeditValue
   4290  5540		       bd 52 6b 	      lda	hexDisplay,x
   4291  5543		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4292  5546
   4293  5546							; if <=$20 then write to all 3 SID oscillator regs
   4294  5546		       ae 5a 70 	      ldx	SIDeditAddr
   4295  5549		       e0 20		      cpx	#$20
   4296  554b		       30 2e		      bmi	normalWrite
   4297  554d							;--------------
   4298  554d		       ad 5b 70 	      lda	SIDeditValue
   4299  5550		       9d e0 d3 	      sta	SID1-32,x
   4300  5553		       9d e0 de 	      sta	SID2-32,x
   4301  5556		       9d e0 70 	      sta	sidData-32,x
   4302  5559		       9d e7 d3 	      sta	SID1-32+#$7,x
   4303  555c		       9d e7 de 	      sta	SID2-32+#$7,x
   4304  555f		       9d e7 70 	      sta	sidData-32+#$7,x
   4305  5562		       9d ee d3 	      sta	SID1-32+#$E,x
   4306  5565		       9d ee de 	      sta	SID2-32+#$E,x
   4307  5568		       9d ee 70 	      sta	sidData-32+#$E,x
   4308  556b		       e0 24		      cpx	#SV1WAVE+32
   4309  556d		       d0 09		      bne	no3Wave
   4310  556f		       8d 30 70 	      sta	WaveType
   4311  5572		       8d 37 70 	      sta	WaveType2
   4312  5575		       8d 3e 70 	      sta	WaveType3
   4313  5578				   no3Wave
   4314  5578		       4c b6 55 	      jmp	skipNormalWrite
   4315  557b							;...............
   4316  557b				   normalWrite
   4317  557b							; write the value to both sids
   4318  557b		       ae 5a 70 	      ldx	SIDeditAddr
   4319  557e		       ad 5b 70 	      lda	SIDeditValue
   4320  5581		       9d 00 d4 	      sta	SID1,x
   4321  5584		       9d 00 df 	      sta	SID2,x
   4322  5587		       9d 00 71 	      sta	sidData,x
   4323  558a
   4324  558a		       e0 04		      cpx	#SV1WAVE
   4325  558c		       d0 03		      bne	noWave1
   4326  558e		       8d 30 70 	      sta	WaveType
   4327  5591				   noWave1
   4328  5591
   4329  5591		       e0 0b		      cpx	#SV2WAVE
   4330  5593		       d0 03		      bne	noWave2
   4331  5595		       8d 37 70 	      sta	WaveType2
   4332  5598				   noWave2
   4333  5598
   4334  5598		       e0 12		      cpx	#SV3WAVE
   4335  559a		       d0 03		      bne	noWave3
   4336  559c		       8d 3e 70 	      sta	WaveType3
   4337  559f				   noWave3
   4338  559f
   4339  559f		       e0 16		      cpx	#SFILTH
   4340  55a1		       d0 03		      bne	noFiltSave
   4341  55a3		       8d 57 70 	      sta	filter
   4342  55a6				   noFiltSave
   4343  55a6
   4344  55a6							; turn off paddles if filter was adjusted
   4345  55a6		       e0 15		      cpx	#SFILTL
   4346  55a8		       f0 04		      beq	paddleOffhex
   4347  55aa		       e0 16		      cpx	#SFILTH
   4348  55ac		       d0 08		      bne	noPaddleOff
   4349  55ae				   paddleOffhex
   4350  55ae		       a9 00		      lda	#0
   4351  55b0		       8d 29 70 	      sta	paddle	; turn off paddle controller first
   4352  55b3		       20 54 51 	      jsr	showPaddle
   4353  55b6				   noPaddleOff
   4354  55b6
   4355  55b6				   skipNormalWrite
   4356  55b6		       ae 5a 70 	      ldx	SIDeditAddr
   4357  55b9		       ad 5b 70 	      lda	SIDeditValue
   4358  55bc
   4359  55bc							; check for a volume/mode change...
   4360  55bc							; if changed, write it to related variables too
   4361  55bc		       e0 18		      cpx	#SVOLMODE
   4362  55be		       d0 10		      bne	noVolumeSetting
   4363  55c0		       8d 0c 70 	      sta	temp
   4364  55c3		       29 f0		      and	#$F0
   4365  55c5		       8d 24 70 	      sta	volModeRAM
   4366  55c8		       ad 0c 70 	      lda	temp
   4367  55cb		       29 0f		      and	#$0F
   4368  55cd		       8d 1c 70 	      sta	volume
   4369  55d0				   noVolumeSetting
   4370  55d0							;	lda volModeRAM
   4371  55d0							;	and #$F0
   4372  55d0							;	ora volume
   4373  55d0
   4374  55d0							; wait for key to be released before returning
   4375  55d0				   waitKeyRelease
   4376  55d0		       a5 c5		      lda	197
   4377  55d2		       c9 40		      cmp	#64
   4378  55d4		       d0 fa		      bne	waitKeyRelease
   4379  55d6
   4380  55d6							; reset volume (messed up from clicks)
   4381  55d6		       20 62 52 	      jsr	setVolume
   4382  55d9
   4383  55d9		       a9 00		      lda	#0
   4384  55db							;sta helpMode
   4385  55db		       20 db 50 	      jsr	setHelpMode
   4386  55de		       20 23 57 	      jsr	displayInit
   4387  55e1							; X = low data address
   4388  55e1							; Y = high data address
   4389  55e1							;	ldx #>hexEditHelp ;low/MSB
   4390  55e1							;	ldy #<hexEditHelp ;high/LSB
   4391  55e1							;	jsr displayPage
   4392  55e1							;	jsr showSidValues
   4393  55e1
   4394  55e1		       60		      rts
   4395  55e2
   4396  55e2
   4397  55e2
   4398  55e2							;************************************
   4399  55e2				   showSidValues
   4400  55e2		       a0 02		      ldy	#2
   4401  55e4				   sidDispLoop1
   4402  55e4		       8c 73 70 	      sty	sidTemp1
   4403  55e7		       b9 00 71 	      lda	sidData,y
   4404  55ea		       8d 74 70 	      sta	sidTemp2
   4405  55ed		       98		      tya
   4406  55ee		       0a		      asl
   4407  55ef		       18		      clc
   4408  55f0		       69 04		      adc	#4
   4409  55f2		       a8		      tay
   4410  55f3		       ad 74 70 	      lda	sidTemp2
   4411  55f6		       a2 06		      ldx	#6
   4412  55f8		       20 48 58 	      jsr	displayHex
   4413  55fb		       ac 73 70 	      ldy	sidTemp1
   4414  55fe							;---------------
   4415  55fe		       b9 07 71 	      lda	sidData+7,y
   4416  5601		       8d 74 70 	      sta	sidTemp2
   4417  5604		       98		      tya
   4418  5605		       0a		      asl
   4419  5606		       18		      clc
   4420  5607		       69 04		      adc	#4
   4421  5609		       a8		      tay
   4422  560a		       ad 74 70 	      lda	sidTemp2
   4423  560d		       a2 0a		      ldx	#10
   4424  560f		       20 48 58 	      jsr	displayHex
   4425  5612		       ac 73 70 	      ldy	sidTemp1
   4426  5615							;---------------
   4427  5615		       b9 0e 71 	      lda	sidData+14,y
   4428  5618		       8d 74 70 	      sta	sidTemp2
   4429  561b		       98		      tya
   4430  561c		       0a		      asl
   4431  561d		       18		      clc
   4432  561e		       69 04		      adc	#4
   4433  5620		       a8		      tay
   4434  5621		       ad 74 70 	      lda	sidTemp2
   4435  5624		       a2 0e		      ldx	#14
   4436  5626		       20 48 58 	      jsr	displayHex
   4437  5629		       ac 73 70 	      ldy	sidTemp1
   4438  562c
   4439  562c		       c8		      iny
   4440  562d		       c0 07		      cpy	#7
   4441  562f		       d0 b3		      bne	sidDispLoop1
   4442  5631							;---------------
   4443  5631							;---------------
   4444  5631		       a0 15		      ldy	#$15
   4445  5633				   sidDispLoop2
   4446  5633		       8c 73 70 	      sty	sidTemp1
   4447  5636		       b9 00 71 	      lda	sidData,y
   4448  5639		       8d 74 70 	      sta	sidTemp2
   4449  563c		       98		      tya
   4450  563d		       38		      sec
   4451  563e		       e9 02		      sbc	#2
   4452  5640		       a8		      tay
   4453  5641		       ad 74 70 	      lda	sidTemp2
   4454  5644		       a2 05		      ldx	#5
   4455  5646		       20 48 58 	      jsr	displayHex
   4456  5649		       ac 73 70 	      ldy	sidTemp1
   4457  564c
   4458  564c		       c8		      iny
   4459  564d		       c0 19		      cpy	#$19
   4460  564f		       d0 e2		      bne	sidDispLoop2
   4461  5651							;---------------
   4462  5651		       60		      rts
   4463  5652
   4464  5652
   4465  5652
   4466  5652							;=======================================================================
   4467  5652							; waits for user to press a key (0-F) and returns
   4468  5652							; the value in A
   4469  5652				   getHexKey
   4470  5652		       20 ac 54 	      jsr	waitForKeyRelease
   4471  5655				   getHexLoop
   4472  5655							;inc 1024
   4473  5655		       20 5d 56 	      jsr	readHexKey
   4474  5658		       c9 ff		      cmp	#255
   4475  565a		       f0 f9		      beq	getHexLoop
   4476  565c							;inc 1025
   4477  565c		       60		      rts
   4478  565d
   4479  565d
   4480  565d
   4481  565d							;=======================================================================
   4482  565d							; Returns the currently pressed hex key, or #255 if none
   4483  565d							; is currently pressed
   4484  565d				   readHexKey
   4485  565d
   4486  565d		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4487  5660							;sta 1024
   4488  5660		       f0 1a		      beq	normalHexKey
   4489  5662
   4490  5662							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4491  5662							; Use piano keys to enter hex numbers
   4492  5662				   pianoHexKey
   4493  5662		       a0 00		      ldy	#0
   4494  5664				   checkLoop2
   4495  5664		       b9 61 59 	      lda	hexColPiano,y
   4496  5667		       f0 10		      beq	quitCheck2
   4497  5669		       8d 00 dc 	      sta	56320
   4498  566c		       ad 01 dc 	      lda	56321
   4499  566f		       39 83 59 	      and	hexRowPiano,y
   4500  5672		       d0 02		      bne	notPressed2
   4501  5674		       98		      tya
   4502  5675							;sta 1027
   4503  5675		       60		      rts
   4504  5676							;jmp quitCheck2
   4505  5676				   notPressed2
   4506  5676		       c8		      iny
   4507  5677		       d0 eb		      bne	checkLoop2
   4508  5679				   quitCheck2
   4509  5679		       a9 ff		      lda	#255	; no key pressed
   4510  567b		       60		      rts
   4511  567c							;jmp pianoHexKey
   4512  567c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4513  567c
   4514  567c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4515  567c							; Use normal keys (0-9,A-F) to enter hex numbers
   4516  567c				   normalHexKey
   4517  567c		       a0 00		      ldy	#0
   4518  567e				   checkLoop3
   4519  567e		       b9 72 59 	      lda	hexCol,y
   4520  5681		       f0 10		      beq	quitCheck3
   4521  5683		       8d 00 dc 	      sta	56320
   4522  5686		       ad 01 dc 	      lda	56321
   4523  5689		       39 94 59 	      and	hexRow,y
   4524  568c		       d0 02		      bne	notPressed3
   4525  568e		       98		      tya
   4526  568f							;sta 1027
   4527  568f		       60		      rts
   4528  5690							;jmp quitCheck3
   4529  5690				   notPressed3
   4530  5690		       c8		      iny
   4531  5691		       d0 eb		      bne	checkLoop3
   4532  5693				   quitCheck3
   4533  5693		       a9 ff		      lda	#255	; no key pressed
   4534  5695		       60		      rts
   4535  5696							;jmp normalHexKey
   4536  5696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4537  5696
   4538  5696
   4539  5696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4540  5696							;lda #<shiftKeyFunctions		;
   4541  5696							;sta keyPtrL						;
   4542  5696							;lda #>shiftKeyFunctions		;-
   4543  5696							;sta keyPtrH
   4544  5696							;jmp doKeyCheck
   4545  5696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4546  5696
   4547  5696							;sei
   4548  5696
   4549  5696							;enable keyboard interrupt
   4550  5696		       a9 81		      lda	#129
   4551  5698		       8d 0d dc 	      sta	56333
   4552  569b
   4553  569b		       8d 00 04 	      sta	1024
   4554  569e
   4555  569e		       a5 c5		      lda	197
   4556  56a0		       cd 5d 70 	      cmp	lastKey
   4557  56a3		       f0 ad		      beq	getHexKey
   4558  56a5				   restartHexKey
   4559  56a5		       a2 00		      ldx	#0
   4560  56a7		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4561  56aa		       f0 02		      beq	noAltKeyMode
   4562  56ac		       a2 10		      ldx	#16	; use alternate keys for piano keyboard
   4563  56ae				   noAltKeyMode
   4564  56ae		       a5 c5		      lda	197
   4565  56b0				   keyCmpLoop
   4566  56b0							;sta 1026
   4567  56b0							;stx 1025
   4568  56b0		       dd 62 6b 	      cmp	keyData,x
   4569  56b3		       f0 0c		      beq	foundKey
   4570  56b5		       e8		      inx
   4571  56b6		       e0 10		      cpx	#16
   4572  56b8		       f0 eb		      beq	restartHexKey
   4573  56ba		       e0 20		      cpx	#32
   4574  56bc		       f0 e7		      beq	restartHexKey
   4575  56be		       4c b0 56 	      jmp	keyCmpLoop
   4576  56c1				   foundKey
   4577  56c1		       8d 5d 70 	      sta	lastKey
   4578  56c4
   4579  56c4		       20 d3 56 	      jsr	beep
   4580  56c7							;	jsr beep
   4581  56c7
   4582  56c7		       ad 60 70 	      lda	hexKeyMode
   4583  56ca		       f0 05		      beq	noKeySubtract
   4584  56cc		       8a		      txa
   4585  56cd		       38		      sec
   4586  56ce		       e9 10		      sbc	#16
   4587  56d0		       aa		      tax
   4588  56d1				   noKeySubtract
   4589  56d1
   4590  56d1		       8a		      txa
   4591  56d2
   4592  56d2
   4593  56d2		       60		      rts
   4594  56d3
   4595  56d3				   beep
   4596  56d3							;	lda #$10
   4597  56d3							;	sta SID1+SV1FH
   4598  56d3		       ad 24 70 	      lda	volModeRAM
   4599  56d6		       09 0f		      ora	#$0F
   4600  56d8		       8d 18 d4 	      sta	SID1+SVOLMODE
   4601  56db		       8d 18 df 	      sta	SID2+SVOLMODE
   4602  56de		       8d 18 71 	      sta	sidData+SVOLMODE
   4603  56e1							;	lda SID1+SV1WAVE
   4604  56e1							;	ora #$01
   4605  56e1							;	sta SID1+SV1WAVE
   4606  56e1		       20 f3 56 	      jsr	clickDelay
   4607  56e4		       ad 24 70 	      lda	volModeRAM
   4608  56e7		       29 f0		      and	#$F0
   4609  56e9		       8d 18 d4 	      sta	SID1+SVOLMODE
   4610  56ec		       8d 18 df 	      sta	SID2+SVOLMODE
   4611  56ef		       8d 18 71 	      sta	sidData+SVOLMODE
   4612  56f2							;	lda SID1+SV1WAVE
   4613  56f2							;	and #$FE
   4614  56f2							;	sta SID1+SV1WAVE
   4615  56f2		       60		      rts
   4616  56f3
   4617  56f3
   4618  56f3							; ------------------------------------
   4619  56f3							; delay for click -- uses Y
   4620  56f3				   clickDelay
   4621  56f3		       a0 40		      ldy	#$40
   4622  56f5		       8c 0c 70 	      sty	temp
   4623  56f8				   mainDelayLoop
   4624  56f8		       a0 00		      ldy	#0
   4625  56fa				   innerDelayLoop
   4626  56fa		       88		      dey
   4627  56fb		       d0 fd		      bne	innerDelayLoop
   4628  56fd		       ce 0c 70 	      dec	temp
   4629  5700		       d0 f6		      bne	mainDelayLoop
   4630  5702		       60		      rts
   4631  5703
   4632  5703
   4633  5703							;------------------------------------------
   4634  5703							; update text
   4635  5703							;------------------------------------------
   4636  5703							; Show text out of the textData array.
   4637  5703							; x=textData, y=screen position
   4638  5703				   updateText
   4639  5703		       ad 70 70 	      lda	helpMode
   4640  5706		       f0 01		      beq	doUpdateText
   4641  5708		       60		      rts
   4642  5709				   doUpdateText
   4643  5709							;	lda helpMode
   4644  5709							;	bne doUpdateText
   4645  5709							;	rts
   4646  5709							;doUpdateText:
   4647  5709		       18		      clc
   4648  570a		       a9 04		      lda	#4
   4649  570c		       8d 46 70 	      sta	textTemp
   4650  570f				   updateTextLoop
   4651  570f		       bd ce 69 	      lda	textData,x
   4652  5712		       c9 40		      cmp	#64
   4653  5714		       30 02		      bmi	showSpaceU
   4654  5716		       e9 40		      sbc	#64
   4655  5718				   showSpaceU
   4656  5718		       99 00 04 	      sta	1024,y
   4657  571b		       e8		      inx
   4658  571c		       c8		      iny
   4659  571d		       ce 46 70 	      dec	textTemp
   4660  5720		       d0 ed		      bne	updateTextLoop
   4661  5722		       60		      rts
   4662  5723
   4663  5723
   4664  5723							; ***************************
   4665  5723							; Display Setup
   4666  5723							; ***************************
   4667  5723				   displayInit
   4668  5723
   4669  5723		       a9 15		      lda	#21
   4670  5725		       8d 18 d0 	      sta	53272	; UPPERCASE mode
   4671  5728
   4672  5728							; draw static text at the top of the screen
   4673  5728		       a2 68		      ldx	#>mainColorText	;low/MSB
   4674  572a		       a0 46		      ldy	#<mainColorText	;high/LSB
   4675  572c		       20 8b 58 	      jsr	displayPage
   4676  572f
   4677  572f							; Draw bottom text (version number+PAL/NTSC setting)
   4678  572f		       03 dd	   BOTTOMTEXT equ	40*24+29
   4679  572f
   4680  572f		       20 e4 4f 	      jsr	showHelpMessage
   4681  5732
   4682  5732							; choose which text to show from PAL/NTSC test at startup
   4683  5732		       a2 00		      ldx	#0
   4684  5734		       a0 00		      ldy	#0
   4685  5736		       ad 61 70 	      lda	NTSCmode
   4686  5739		       f0 02		      beq	showPAL
   4687  573b		       a2 0c		      ldx	#12
   4688  573d				   showPAL
   4689  573d							; Show version number and NTSC/PAL designation...
   4690  573d				   TextLoop2
   4691  573d		       bd 0e 6b 	      lda	bottomText,x
   4692  5740		       f0 12		      beq	endText2
   4693  5742		       c9 40		      cmp	#64
   4694  5744		       30 02		      bmi	showSpace2
   4695  5746		       e9 40		      sbc	#64
   4696  5748				   showSpace2
   4697  5748		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
   4698  574b		       a9 0b		      lda	#11
   4699  574d		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
   4700  5750				   notBlank2
   4701  5750		       e8		      inx
   4702  5751		       c8		      iny
   4703  5752		       d0 e9		      bne	TextLoop2
   4704  5754				   endText2
   4705  5754
   4706  5754		       20 f1 51 	      jsr	showMidiMode
   4707  5757
   4708  5757							;---------------------------------------------
   4709  5757							; Display current sound parameter values
   4710  5757
   4711  5757							; set tuning text
   4712  5757		       ac 71 70 	      ldy	tuneSetting
   4713  575a		       20 99 50 	      jsr	ksetTune
   4714  575d
   4715  575d							; Video Mode
   4716  575d		       ad 45 70 	      lda	videoMode
   4717  5760		       ac 68 70 	      ldy	videoText
   4718  5763		       20 2c 51 	      jsr	setVideoMode	;********************************
   4719  5766
   4720  5766		       ad 49 70 	      lda	LFODepth
   4721  5769		       20 5b 51 	      jsr	setLFODepth	;********************************
   4722  576c		       ad 48 70 	      lda	LFORate
   4723  576f		       20 71 51 	      jsr	setLFORate	;********************************
   4724  5772
   4725  5772		       ad 29 70 	      lda	paddle
   4726  5775		       20 3a 51 	      jsr	setPaddles
   4727  5778
   4728  5778		       ad 57 70 	      lda	filter
   4729  577b		       8d 9d 70 	      sta	filterSetValue
   4730  577e							;jsr setFilter
   4731  577e
   4732  577e		       20 14 53 	      jsr	setMode
   4733  5781
   4734  5781		       20 ec 52 	      jsr	setFX
   4735  5784
   4736  5784		       ad 69 70 	      lda	attack
   4737  5787		       20 4a 52 	      jsr	showAttack
   4738  578a
   4739  578a		       20 f1 51 	      jsr	showMidiMode
   4740  578d
   4741  578d		       ad 6a 70 	      lda	release
   4742  5790		       20 ab 51 	      jsr	showRelease
   4743  5793
   4744  5793		       ac 6c 70 	      ldy	filterStatus
   4745  5796		       20 84 50 	      jsr	showFiltOnOff
   4746  5799
   4747  5799		       20 62 52 	      jsr	setVolume
   4748  579c
   4749  579c		       ad 6b 70 	      lda	octave
   4750  579f		       20 b2 52 	      jsr	setOctave
   4751  57a2
   4752  57a2		       20 61 54 	      jsr	showPatchName
   4753  57a5
   4754  57a5		       ad 7a 70 	      lda	paddle2
   4755  57a8		       20 3b 50 	      jsr	ksetPad2
   4756  57ab
   4757  57ab		       60		      rts
   4758  57ac							;---------------------------------------------------
   4759  57ac
   4760  57ac							; ***************************
   4761  57ac							; Variable Setup
   4762  57ac							; ***************************
   4763  57ac				   variableInit
   4764  57ac		       a9 00		      lda	#0
   4765  57ae		       8d 7a 70 	      sta	paddle2
   4766  57b1		       8d 5c 70 	      sta	filterDisable
   4767  57b4		       8d 6c 70 	      sta	filterStatus
   4768  57b7		       8d 58 70 	      sta	keyTimer
   4769  57ba		       8d 40 70 	      sta	bender
   4770  57bd		       8d 70 70 	      sta	helpMode
   4771  57c0		       8d 21 70 	      sta	patPtr
   4772  57c3		       8d 03 70 	      sta	Frame
   4773  57c6		       8d 02 70 	      sta	FrameH
   4774  57c9		       8d 05 70 	      sta	EchoCur
   4775  57cc		       8d 75 70 	      sta	customPatchSaved
   4776  57cf		       8d 76 70 	      sta	paddleTop
   4777  57d2		       8d 77 70 	      sta	paddleBottom
   4778  57d5
   4779  57d5		       a9 02		      lda	#2
   4780  57d7		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
   4781  57da
   4782  57da		       a9 04		      lda	#4	; set normal tuning
   4783  57dc		       8d 71 70 	      sta	tuneSetting
   4784  57df
   4785  57df		       a9 00		      lda	#0
   4786  57e1		       20 5b 51 	      jsr	setLFODepth	;********************************
   4787  57e4		       a9 00		      lda	#0
   4788  57e6		       20 71 51 	      jsr	setLFORate	;********************************
   4789  57e9
   4790  57e9							; set up tuning array pointers
   4791  57e9		       a9 ec		      lda	#<tuningL4
   4792  57eb		       85 22		      sta	tunePtrL
   4793  57ed		       a9 6e		      lda	#>tuningL4
   4794  57ef		       85 23		      sta	tunePtrL+1
   4795  57f1
   4796  57f1		       a9 ec		      lda	#<tuningH4
   4797  57f3		       85 24		      sta	tunePtrH
   4798  57f5		       a9 6e		      lda	#>tuningH4
   4799  57f7		       85 25		      sta	tunePtrH+1
   4800  57f9
   4801  57f9		       a9 02		      lda	#2
   4802  57fb		       8d 20 70 	      sta	VICMode
   4803  57fe		       a9 00		      lda	#0
   4804  5800		       8d 1d 70 	      sta	soundMode
   4805  5803							;lda #40
   4806  5803							;sta portSpd
   4807  5803
   4808  5803							; Video Mode
   4809  5803		       a9 03		      lda	#3
   4810  5805		       a0 02		      ldy	#2
   4811  5807		       20 2c 51 	      jsr	setVideoMode	;********************************
   4812  580a
   4813  580a							; Default full volume
   4814  580a		       a9 0f		      lda	#$0F
   4815  580c		       8d 1c 70 	      sta	volume
   4816  580f
   4817  580f							; Echo?
   4818  580f		       a9 70		      lda	#$70
   4819  5811		       8d 04 70 	      sta	EchoPtr
   4820  5814
   4821  5814		       a0 00		      ldy	#0
   4822  5816		       20 64 53 	      jsr	setPatch	;set bass sound
   4823  5819
   4824  5819							; Set up starting portamento values
   4825  5819		       a2 0c		      ldx	#12
   4826  581b		       bd b2 6b 	      lda	NSoundLArr,x
   4827  581e		       8d 16 70 	      sta	pitchLA
   4828  5821		       8d 17 70 	      sta	pitchLB
   4829  5824		       8d 18 70 	      sta	pitchLC
   4830  5827							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4831  5827							;sta lastKeyB
   4832  5827							;sta lastKeyC
   4833  5827		       bd fa 6b 	      lda	NSoundHArr,x
   4834  582a		       8d 19 70 	      sta	pitchHA
   4835  582d		       8d 1a 70 	      sta	pitchHB
   4836  5830		       8d 1b 70 	      sta	pitchHC
   4837  5833							;----------
   4838  5833		       60		      rts
   4839  5834
   4840  5834
   4841  5834							;************************************
   4842  5834							; clrScr - Clear Screen
   4843  5834							;************************************
   4844  5834				   clrScr
   4845  5834		       a2 00		      ldx	#0
   4846  5836		       a9 20		      lda	#32
   4847  5838				   clrScrLoop
   4848  5838		       9d 00 04 	      sta	$400,x
   4849  583b		       9d 00 05 	      sta	$500,x
   4850  583e		       9d 00 06 	      sta	$600,x
   4851  5841		       9d 00 07 	      sta	$700,x
   4852  5844		       ca		      dex
   4853  5845		       d0 f1		      bne	clrScrLoop
   4854  5847		       60		      rts
   4855  5848
   4856  5848
   4857  5848							;************************************
   4858  5848							; DisplayHex - draw hex value on screen
   4859  5848							;************************************
   4860  5848							; note uses helpWritePointer so can't be
   4861  5848							; used within displayPage routine
   4862  5848							; X = horizontal location
   4863  5848							; Y = vertical location
   4864  5848							; A = value
   4865  5848							; hexDispColor = color
   4866  5848				   displayHex
   4867  5848							; figure out screen location
   4868  5848							; and store in word pointer
   4869  5848		       8e 72 70 	      stx	hexDispTemp
   4870  584b		       aa		      tax		; save the hex value in X
   4871  584c		       b9 c0 60 	      lda	lineOffsetL,y
   4872  584f		       18		      clc
   4873  5850		       6d 72 70 	      adc	hexDispTemp
   4874  5853		       85 31		      sta	helpWritePointerL
   4875  5855		       85 33		      sta	helpColorPointerL
   4876  5857
   4877  5857		       b9 da 60 	      lda	lineOffsetM,y
   4878  585a		       69 00		      adc	#0
   4879  585c		       85 32		      sta	helpWritePointerM
   4880  585e		       18		      clc
   4881  585f		       69 d4		      adc	#$D4
   4882  5861		       85 34		      sta	helpColorPointerM
   4883  5863							;--------------------
   4884  5863		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
   4885  5866		       8a		      txa
   4886  5867		       29 0f		      and	#$0F	; isolate the LS nibble
   4887  5869		       aa		      tax
   4888  586a		       bd 52 6b 	      lda	hexDisplay,x	; get character to display
   4889  586d		       a0 01		      ldy	#1
   4890  586f		       91 31		      sta	(helpWritePointerL),y
   4891  5871							;lda #$E
   4892  5871		       ad 8d 70 	      lda	hexDispColor
   4893  5874		       91 33		      sta	(helpColorPointerL),y
   4894  5876							;-------------------
   4895  5876		       ad 72 70 	      lda	hexDispTemp
   4896  5879		       4a		      lsr		; get the MS nibble
   4897  587a		       4a		      lsr
   4898  587b		       4a		      lsr
   4899  587c		       4a		      lsr
   4900  587d		       aa		      tax
   4901  587e		       bd 52 6b 	      lda	hexDisplay,x	; get character to display
   4902  5881		       a0 00		      ldy	#0
   4903  5883		       91 31		      sta	(helpWritePointerL),y
   4904  5885							;lda #$E
   4905  5885		       ad 8d 70 	      lda	hexDispColor
   4906  5888		       91 33		      sta	(helpColorPointerL),y
   4907  588a							;-------------------
   4908  588a		       60		      rts
   4909  588b
   4910  588b
   4911  588b							;************************************
   4912  588b							; DisplayPage - display an entire
   4913  588b							; page of help info with color support
   4914  588b							;************************************
   4915  588b							; X = LSB of data address
   4916  588b							; Y = MSB of data address
   4917  588b							; data format:
   4918  588b							; line_number, color, text, 0
   4919  588b							; line_number, color, text, 0
   4920  588b							; 255
   4921  588b				   displayPage
   4922  588b		       84 2f		      sty	helpReadPointerL
   4923  588d		       86 30		      stx	helpReadPointerM
   4924  588f		       a9 01		      lda	#1
   4925  5891		       8d 6d 70 	      sta	helpColor	; default to white
   4926  5894				   helpLoop
   4927  5894		       a0 00		      ldy	#0
   4928  5896							; get line number and set up output pointers
   4929  5896		       b1 2f		      lda	(helpReadPointerL),y
   4930  5898		       c9 ff		      cmp	#255
   4931  589a		       f0 5b		      beq	quitHelp
   4932  589c		       aa		      tax
   4933  589d		       bd da 60 	      lda	lineOffsetM,x
   4934  58a0		       85 32		      sta	helpWritePointerM
   4935  58a2		       18		      clc
   4936  58a3		       69 d4		      adc	#$D4
   4937  58a5		       85 34		      sta	helpColorPointerM
   4938  58a7		       bd c0 60 	      lda	lineOffsetL,x
   4939  58aa		       85 31		      sta	helpWritePointerL
   4940  58ac		       85 33		      sta	helpColorPointerL
   4941  58ae							;--------------------
   4942  58ae		       a0 01		      ldy	#1
   4943  58b0		       8c 6e 70 	      sty	helpYIn
   4944  58b3		       a0 00		      ldy	#0
   4945  58b5		       8c 6f 70 	      sty	helpYOut
   4946  58b8				   helpTextLoop
   4947  58b8							; get the first character
   4948  58b8		       ac 6e 70 	      ldy	helpYIn
   4949  58bb		       b1 2f		      lda	(helpReadPointerL),y
   4950  58bd		       f0 28		      beq	quitTextLoop
   4951  58bf		       c8		      iny
   4952  58c0		       8c 6e 70 	      sty	helpYIn
   4953  58c3							; see if it's a color command
   4954  58c3		       c9 80		      cmp	#128
   4955  58c5		       10 17		      bpl	setColor	;---
   4956  58c7		       c9 40		      cmp	#64
   4957  58c9		       30 02		      bmi	showSpaceHelp
   4958  58cb		       e9 40		      sbc	#64
   4959  58cd							;lda #126
   4960  58cd				   showSpaceHelp
   4961  58cd							; write the color and character to the screen
   4962  58cd		       ac 6f 70 	      ldy	helpYOut
   4963  58d0		       91 31		      sta	(helpWritePointerL),y
   4964  58d2		       ad 6d 70 	      lda	helpColor
   4965  58d5		       91 33		      sta	(helpColorPointerL),y
   4966  58d7		       c8		      iny
   4967  58d8		       8c 6f 70 	      sty	helpYOut
   4968  58db		       4c b8 58 	      jmp	helpTextLoop
   4969  58de				   setColor
   4970  58de		       38		      sec
   4971  58df		       e9 80		      sbc	#128
   4972  58e1		       8d 6d 70 	      sta	helpColor
   4973  58e4		       4c b8 58 	      jmp	helpTextLoop
   4974  58e7							;---------------
   4975  58e7				   quitTextLoop
   4976  58e7							; update the input pointer
   4977  58e7		       c8		      iny
   4978  58e8		       98		      tya
   4979  58e9		       18		      clc
   4980  58ea		       65 2f		      adc	helpReadPointerL
   4981  58ec		       85 2f		      sta	helpReadPointerL
   4982  58ee		       a5 30		      lda	helpReadPointerM
   4983  58f0		       69 00		      adc	#0
   4984  58f2		       85 30		      sta	helpReadPointerM
   4985  58f4		       4c 94 58 	      jmp	helpLoop	;/\/\/\/\/\
   4986  58f7				   quitHelp
   4987  58f7		       60		      rts
   4988  58f8
   4989  58f8							; Extra subroutines
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  58f8					      include	"cynth_subroutines.asm"
      1  58f8							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  58f8							;
      3  58f8							; input:
      4  58f8							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  58f8							;			 should point to the byte just before the first byte to be sorted
      6  58f8							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  58f8							;nval	 - number of values,  1<= nval <= 255
      8  58f8							;			 value will be destroyed (set to zero)
      9  58f8							;
     10  58f8
     11  58f8
     12  58f8							;*=$6000			;code anywhere in ram or rom
     13  58f8
     14  58f8							;=====================================================================
     15  58f8							; CUSTOM SORT FOR NOTE ARRAY
     16  58f8				   doSort
     17  58f8		       a9 08		      lda	#8
     18  58fa		       8d 22 01 	      sta	nval
     19  58fd				   sort
     20  58fd		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  5900		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  5903		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  5906		       4c 14 59 	      jmp	l2
     24  5909				   l1
     25  5909		       88		      dey
     26  590a		       f0 11		      beq	l3
     27  590c		       b9 9f 70 	      lda	noteNumArray-1,y
     28  590f		       cd 26 01 	      cmp	work2
     29  5912		       90 f5		      bcc	l1
     30  5914				   l2
     31  5914		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  5917		       8d 26 01 	      sta	work2	;potentially largest value
     33  591a		       4c 09 59 	      jmp	l1
     34  591d				   l3
     35  591d		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  5920		       ad 26 01 	      lda	work2	;the largest value
     37  5923		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  5926		       ac 25 01 	      ldy	work1	;index of free space
     39  5929		       ad 27 01 	      lda	work3	;the over-written value
     40  592c		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  592f		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  5932		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  5934		       60		      rts
     44  5935							;=====================================================================
     45  5935
     46  5935
     47  5935
     48  5935
     49  5935							;=====================================================================
     50  5935							; ORIGINAL VERSION
     51  5935							;originalSort:
     52  5935		       ac 22 01 	      ldy	nval	;start of subroutine sort
     53  5938							;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  5938		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     55  593b		       4c 14 59 	      jmp	l2
     56  593e							;l1:
     57  593e		       88		      dey
     58  593f		       f0 dc		      beq	l3
     59  5941							;lda (zpadd),y
     60  5941		       cd 26 01 	      cmp	work2
     61  5944		       90 c3		      bcc	l1
     62  5946							;l2:
     63  5946		       8c 25 01 	      sty	work1	;index of potentially largest value
     64  5949		       8d 26 01 	      sta	work2	;potentially largest value
     65  594c		       4c 09 59 	      jmp	l1
     66  594f							;l3:
     67  594f		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     68  5952		       ad 26 01 	      lda	work2	;the largest value
     69  5955							;sta (zpadd),y		;put largest value in place
     70  5955		       ac 25 01 	      ldy	work1	;index of free space
     71  5958		       ad 27 01 	      lda	work3	;the over-written value
     72  595b							;sta (zpadd),y		;put the over-written value in the free space
     73  595b		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     74  595e		       d0 9d		      bne	sort	;start working with the shorter sequence
     75  5960		       60		      rts
     76  5961							;=====================================================================
     77  5961
     78  5961
------- FILE cynthcart152.asm
   4991  5961
   4992  5961							; Screen text, data tables, note tuning tables, etc.
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  5961					      include	"cynth_data.asm"
      1  5961
      2  5961							;------------------------------------------
      3  5961							; Keyboard Reading Data
      4  5961							;------------------------------------------
      5  5961
      6  5961				   hexColPiano
      7  5961		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$F7,$F7, $EF,$EF,$DF,$DF ,0	; PIANO KEYBOARD
      8  5972							;byte $7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$BF,$F7,$F7, $EF,$EF,$DF,$DF ,0 ; PIANO KEYBOARD
      9  5972				   hexCol
     10  5972		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04,0
     11  5983							; 0   1   2   3    4	5   6	7    8	 9   A	 B    C   D   E   F
     12  5983				   hexRowPiano
     13  5983		       08 08 01 01*	      byte.b	$08,$08,$01,$01,$08, $01,$01,$08,$08, $01,$02,$40, $02,$40,$02,$40 ,0	; PIANO KEYBOARD
     14  5994							;byte $08,$01,$01,$08, $01,$01,$08,$08, $01,$08,$02,$40, $02,$40,$02,$40 ,0 ; PIANO KEYBOARD
     15  5994				   hexRow
     16  5994		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, 0
     17  59a5							; 0   1   2   3    4	5   6	7    8	 9   A	 B	 C   D	 E   F
     18  59a5
     19  59a5							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     20  59a5							; Column activation data
     21  59a5				   col			;	   x	     x		      x 	  x    A    x	 B
     22  59a5		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     23  59b1		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     24  59be							;    C    x	D    x	    E	 F    x 	  x	    x
     25  59be
     26  59be							; Row testing data
     27  59be				   row			;	   x	     x		      x 	  x    A    x	 B
     28  59be		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     29  59ca		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     30  59d7							;    C    x	D    x	    E	 F    x 	  x	    x
     31  59d7							;-----------------------------------------------
     32  59d7							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     33  59d7							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     34  59d7							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     35  59d7							;-----------------------------------------------
     36  59d7							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     37  59d7							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     38  59d7							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     39  59d7							;-----------------------------------------------
     40  59d7
     41  59d7				   commandKeys		; row, column
     42  59d7		       7f 10		      byte.b	~$80, $10	;spc 28
     43  59d9		       fd 04		      byte.b	~$02, $04	;A   0
     44  59db		       fd 20		      byte.b	~$02, $20	;S   1
     45  59dd		       fb 04		      byte.b	~$04, $04	;D   2
     46  59df		       fb 20		      byte.b	~$04, $20	;F   3
     47  59e1		       f7 04		      byte.b	~$08, $04	;G   4
     48  59e3		       f7 20		      byte.b	~$08, $20	;H   5
     49  59e5		       ef 04		      byte.b	~$10, $04	;J   6
     50  59e7		       ef 20		      byte.b	~$10, $20	;K   7
     51  59e9		       df 04		      byte.b	~$20, $04	;L   8
     52  59eb		       df 20		      byte.b	~$20, $20	;:   9
     53  59ed		       bf 04		      byte.b	~$40, $04	;;   10
     54  59ef		       bf 20		      byte.b	~$40, $20	;=   11
     55  59f1		       fd 10		      byte.b	~$02, $10	;Z   12
     56  59f3		       fb 80		      byte.b	~$04, $80	;X   13
     57  59f5		       fb 10		      byte.b	~$04, $10	;C   14
     58  59f7		       f7 80		      byte.b	~$08, $80	;V   15
     59  59f9		       f7 10		      byte.b	~$08, $10	;B   16
     60  59fb		       ef 80		      byte.b	~$10, $80	;N   17
     61  59fd		       ef 10		      byte.b	~$10, $10	;M   18
     62  59ff		       df 80		      byte.b	~$20, $80	;,   19
     63  5a01		       df 10		      byte.b	~$20, $10	;.   20
     64  5a03		       bf 80		      byte.b	~$40, $80	;/   21
     65  5a05		       fe 80		      byte.b	~$01, $80	;u/d 22
     66  5a07		       fe 04		      byte.b	~$01, $04	;l/r 23
     67  5a09		       fe 10		      byte.b	~$01, $10	;F1  24
     68  5a0b		       fe 20		      byte.b	~$01, $20	;F3  25
     69  5a0d		       fe 40		      byte.b	~$01, $40	;F5  26
     70  5a0f		       fe 08		      byte.b	~$01, $08	;F7  27
     71  5a11		       fe 02		      byte.b	~$01, $02	;ret 29
     72  5a13		       7f 02		      byte.b	~$80, $02	;Larr 30
     73  5a15							;byte ~$80, $04		;Larr 30
     74  5a15
     75  5a15				   rawKeyFunctions
     76  5a15							;    functionPointer, inputData:Y,A
     77  5a15		       15 50 00 00	      word.w	bendBender, $0000	;space
     78  5a19		       64 53 00 0a	      word.w	setPatch, $0A00	;A
     79  5a1d		       64 53 00 0b	      word.w	setPatch, $0B00	;S
     80  5a21		       64 53 00 0c	      word.w	setPatch, $0C00	;D
     81  5a25		       64 53 00 0d	      word.w	setPatch, $0D00	;F
     82  5a29		       64 53 00 0e	      word.w	setPatch, $0E00	;G
     83  5a2d		       64 53 00 0f	      word.w	setPatch, $0F00	;H
     84  5a31		       64 53 00 10	      word.w	setPatch, $1000	;J
     85  5a35		       64 53 00 11	      word.w	setPatch, $1100	;K
     86  5a39		       64 53 00 12	      word.w	setPatch, $1200	;L
     87  5a3d		       64 53 00 13	      word.w	setPatch, $1300	;:
     88  5a41		       64 53 00 15	      word.w	setPatch, $1500	;;
     89  5a45		       64 53 00 14	      word.w	setPatch, $1400	;=
     90  5a49		       64 53 00 00	      word.w	setPatch, $0000	;Z
     91  5a4d		       64 53 00 01	      word.w	setPatch, $0100	;X
     92  5a51		       64 53 00 02	      word.w	setPatch, $0200	;C
     93  5a55		       64 53 00 03	      word.w	setPatch, $0300	;V
     94  5a59		       64 53 00 04	      word.w	setPatch, $0400	;B
     95  5a5d		       64 53 00 05	      word.w	setPatch, $0500	;N
     96  5a61		       64 53 00 06	      word.w	setPatch, $0600	;M
     97  5a65		       64 53 00 07	      word.w	setPatch, $0700	;,
     98  5a69		       64 53 00 08	      word.w	setPatch, $0800	;.
     99  5a6d		       64 53 00 09	      word.w	setPatch, $0900	;/
    100  5a71		       11 53 00 00	      word.w	ksetMode, $0000	;up/down
    101  5a75		       11 53 01 00	      word.w	ksetMode, $0001	;left/right
    102  5a79		       b2 52 03 00	      word.w	setOctave, 3	;F1
    103  5a7d		       b2 52 02 00	      word.w	setOctave, 2	;F3
    104  5a81		       b2 52 01 00	      word.w	setOctave, 1	;F5
    105  5a85		       b2 52 00 00	      word.w	setOctave, 0	;F7
    106  5a89		       c0 4f 00 00	      word.w	khelp,0	;return
    107  5a8d		       52 4f 00 00	      word.w	kloadPatch,0	;Larrow
    108  5a91
    109  5a91				   minimalKeyFunctions
    110  5a91							;    functionPointer, inputData:Y,A
    111  5a91		       15 50 00 00	      word.w	bendBender, $0000	;space
    112  5a95		       00 00 00 0a	      word.w	0, $0A00	;A
    113  5a99		       00 00 00 0b	      word.w	0, $0B00	;S
    114  5a9d		       00 00 00 0c	      word.w	0, $0C00	;D
    115  5aa1		       00 00 00 0d	      word.w	0, $0D00	;F
    116  5aa5		       00 00 00 0e	      word.w	0, $0E00	;G
    117  5aa9		       00 00 00 0f	      word.w	0, $0F00	;H
    118  5aad		       00 00 00 10	      word.w	0, $1000	;J
    119  5ab1		       00 00 00 11	      word.w	0, $1100	;K
    120  5ab5		       00 00 00 12	      word.w	0, $1200	;L
    121  5ab9		       00 00 00 13	      word.w	0, $1300	;:
    122  5abd		       00 00 00 14	      word.w	0, $1400	;;
    123  5ac1		       00 00 00 15	      word.w	0, $1500	;=
    124  5ac5		       00 00 00 00	      word.w	0, $0000	;Z
    125  5ac9		       00 00 00 01	      word.w	0, $0100	;X
    126  5acd		       00 00 00 02	      word.w	0, $0200	;C
    127  5ad1		       00 00 00 03	      word.w	0, $0300	;V
    128  5ad5		       00 00 00 04	      word.w	0, $0400	;B
    129  5ad9		       00 00 00 05	      word.w	0, $0500	;N
    130  5add		       00 00 00 06	      word.w	0, $0600	;M
    131  5ae1		       00 00 00 07	      word.w	0, $0700	;,
    132  5ae5		       00 00 00 08	      word.w	0, $0800	;.
    133  5ae9		       00 00 00 09	      word.w	0, $0900	;/
    134  5aed		       00 00 00 00	      word.w	0, $0000	;up/down
    135  5af1		       00 00 01 00	      word.w	0, $0001	;left/right
    136  5af5		       b2 52 03 00	      word.w	setOctave, 3	;F1
    137  5af9		       b2 52 02 00	      word.w	setOctave, 2	;F3
    138  5afd		       b2 52 01 00	      word.w	setOctave, 1	;F5
    139  5b01		       b2 52 00 00	      word.w	setOctave, 0	;F7
    140  5b05		       00 00 00 00	      word.w	0,0	;return
    141  5b09		       00 00 00 00	      word.w	0,0	;Larrow
    142  5b0d
    143  5b0d				   CTRLKeyFunctions
    144  5b0d							;    functionPointer, inputData:Y,A
    145  5b0d		       00 00 00 00	      word.w	0, $0000	;space
    146  5b11		       8d 51 e0 00	      word.w	setRelease, REL_SHORT	;A
    147  5b15		       8d 51 e9 00	      word.w	setRelease, REL_MED	;S
    148  5b19		       8d 51 ee 00	      word.w	setRelease, REL_LONG	;D
    149  5b1d		       11 53 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    150  5b21		       11 53 01 00	      word.w	ksetMode, MODE_5THS	;G
    151  5b25		       11 53 02 00	      word.w	ksetMode, MODE_5PORT	;H
    152  5b29		       11 53 20 00	      word.w	ksetMode, MODE_MONO1	;J
    153  5b2d		       11 53 40 00	      word.w	ksetMode, MODE_ARP1	;K
    154  5b31		       11 53 41 00	      word.w	ksetMode, MODE_ARP2	;L
    155  5b35		       11 53 42 00	      word.w	ksetMode, MODE_ARP3	;:
    156  5b39		       11 53 43 00	      word.w	ksetMode, MODE_ARP4	;;
    157  5b3d		       11 53 44 00	      word.w	ksetMode, MODE_ARP5	;=
    158  5b41		       e9 52 00 00	      word.w	ksetFX, $0000	;Z
    159  5b45		       e9 52 01 00	      word.w	ksetFX, $0001	;X
    160  5b49		       e9 52 02 00	      word.w	ksetFX, $0002	;C
    161  5b4d		       e9 52 03 00	      word.w	ksetFX, $0003	;V
    162  5b51		       e9 52 04 00	      word.w	ksetFX, $0004	;B
    163  5b55		       e9 52 05 00	      word.w	ksetFX, $0005	;N
    164  5b59		       e9 52 06 00	      word.w	ksetFX, $0006	;M
    165  5b5d		       e9 52 07 00	      word.w	ksetFX, $0007	;,
    166  5b61		       e9 52 08 00	      word.w	ksetFX, $0008	;.
    167  5b65							;word ksetFX,	$0009	;/
    168  5b65		       00 00 00 00	      word.w	0, $0000	;/
    169  5b69		       11 53 21 00	      word.w	ksetMode, MODE_MONO2	;up/down
    170  5b6d		       11 53 21 00	      word.w	ksetMode, MODE_MONO2	;left/right
    171  5b71		       5f 52 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    172  5b75		       5f 52 0b 00	      word.w	ksetVolume, VOLMED	;F3
    173  5b79		       5f 52 07 00	      word.w	ksetVolume, VOLLOW	;F5
    174  5b7d		       5f 52 00 00	      word.w	ksetVolume, VOLOFF	;F7
    175  5b81		       11 53 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    176  5b85		       00 00 00 00	      word.w	0,0	;Larrow
    177  5b89
    178  5b89				   shiftKeyFunctions
    179  5b89							;    functionPointer, inputData:Y,A
    180  5b89		       00 00 00 00	      word.w	0, $0000	;space
    181  5b8d		       2c 52 00 00	      word.w	setAttack,ATK_SHORT	;A
    182  5b91		       2c 52 90 00	      word.w	setAttack,ATK_MED	;S
    183  5b95		       2c 52 e0 00	      word.w	setAttack,ATK_LONG	;D
    184  5b99		       2c 51 08 01	      word.w	setVideoMode,$0108	;F
    185  5b9d		       2c 51 03 02	      word.w	setVideoMode,$0203	;G
    186  5ba1		       2c 51 15 03	      word.w	setVideoMode,$0315	;H
    187  5ba5		       2e 50 02 00	      word.w	setVIC, 2	;J
    188  5ba9		       2e 50 01 00	      word.w	setVIC, 1	;K
    189  5bad		       2e 50 00 00	      word.w	setVIC, 0	;L
    190  5bb1		       af 50 01 00	      word.w	setFullScreenMode, $0001	;:
    191  5bb5		       af 50 00 00	      word.w	setFullScreenMode, $0000	;;
    192  5bb9		       00 00 00 00	      word.w	0, $0000	;=
    193  5bbd		       71 51 00 00	      word.w	setLFORate,0	;Z
    194  5bc1		       71 51 01 00	      word.w	setLFORate,1	;X
    195  5bc5		       71 51 02 00	      word.w	setLFORate,2	;C
    196  5bc9		       71 51 03 00	      word.w	setLFORate,3	;V
    197  5bcd		       5b 51 00 00	      word.w	setLFODepth,0	;B
    198  5bd1		       5b 51 01 00	      word.w	setLFODepth,1	;N
    199  5bd5		       5b 51 02 00	      word.w	setLFODepth,2	;M
    200  5bd9		       5b 51 03 00	      word.w	setLFODepth,3	;,
    201  5bdd		       00 00 00 00	      word.w	0, $0000	;.
    202  5be1		       00 00 00 00	      word.w	0, $0000	;/
    203  5be5		       32 50 00 00	      word.w	ksetPaddles, 0	;up/down
    204  5be9		       32 50 01 00	      word.w	ksetPaddles, 1	;left/right
    205  5bed		       11 53 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    206  5bf1		       11 53 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    207  5bf5		       11 53 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    208  5bf9		       11 53 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    209  5bfd		       00 50 00 00	      word.w	kclearModulation,0	;return
    210  5c01		       00 00 00 00	      word.w	0,0	;Larrow
    211  5c05
    212  5c05				   commKeyFunctions
    213  5c05							;    functionPointer, inputData:Y,A
    214  5c05		       00 00 00 00	      word.w	0, $0000	;space
    215  5c09		       50 50 00 00	      word.w	ksetFilter, $0000	;A
    216  5c0d		       50 50 20 00	      word.w	ksetFilter, $0020	;S
    217  5c11		       50 50 40 00	      word.w	ksetFilter, $0040	;D
    218  5c15		       50 50 60 00	      word.w	ksetFilter, $0060	;F
    219  5c19		       50 50 80 00	      word.w	ksetFilter, $0080	;G
    220  5c1d		       50 50 a0 00	      word.w	ksetFilter, $00A0	;H
    221  5c21		       50 50 c0 00	      word.w	ksetFilter, $00C0	;J
    222  5c25		       50 50 e0 00	      word.w	ksetFilter, $00E0	;K
    223  5c29		       00 00 00 00	      word.w	0, $0000	;L
    224  5c2d		       00 00 00 00	      word.w	0, $0000	;:
    225  5c31		       00 00 00 00	      word.w	0, $0000	;;
    226  5c35		       00 00 00 00	      word.w	0, $0000	;=
    227  5c39		       5d 50 00 00	      word.w	kfiltOnOff,$0000	;Z
    228  5c3d		       5d 50 00 01	      word.w	kfiltOnOff,$0100	;X
    229  5c41		       5d 50 00 02	      word.w	kfiltOnOff,$0200	;C
    230  5c45		       3b 50 00 00	      word.w	ksetPad2, $0000	;V
    231  5c49		       3b 50 01 00	      word.w	ksetPad2, $0001	;B
    232  5c4d		       3b 50 03 00	      word.w	ksetPad2, $0003	;N
    233  5c51		       3b 50 04 00	      word.w	ksetPad2, $0004	;M
    234  5c55		       ee 51 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    235  5c59		       ee 51 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    236  5c5d		       ee 51 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    237  5c61		       00 00 00 00	      word.w	0, $0000	;up/down
    238  5c65		       00 00 00 00	      word.w	0, $0000	;left/right
    239  5c69		       00 00 00 00	      word.w	0, $0000	;F1
    240  5c6d		       00 00 00 00	      word.w	0, $0000	;F3
    241  5c71		       00 00 00 00	      word.w	0, $0000	;F5
    242  5c75		       00 00 00 00	      word.w	0, $0000	;F7
    243  5c79		       00 00 00 00	      word.w	0,0	;return
    244  5c7d		       00 00 00 00	      word.w	0,0	;Larrow
    245  5c81
    246  5c81
    247  5c81
    248  5c81				   runstopKeyFunctions
    249  5c81							;    functionPointer, inputData:Y,A
    250  5c81		       00 00 00 00	      word.w	0, $0000	;space
    251  5c85		       99 50 00 00	      word.w	ksetTune,$0000	;A
    252  5c89		       99 50 00 01	      word.w	ksetTune,$0100	;S
    253  5c8d		       99 50 00 02	      word.w	ksetTune,$0200	;D
    254  5c91		       99 50 00 03	      word.w	ksetTune,$0300	;F
    255  5c95		       99 50 00 04	      word.w	ksetTune,$0400	;G
    256  5c99		       99 50 00 05	      word.w	ksetTune,$0500	;H
    257  5c9d		       99 50 00 06	      word.w	ksetTune,$0600	;J
    258  5ca1		       99 50 00 07	      word.w	ksetTune,$0700	;K
    259  5ca5		       99 50 00 08	      word.w	ksetTune,$0800	;L
    260  5ca9		       99 50 00 09	      word.w	ksetTune,$0900	;:
    261  5cad		       99 50 00 0a	      word.w	ksetTune,$0A00	;;
    262  5cb1		       00 00 00 00	      word.w	0, $0000	;=
    263  5cb5		       0f 50 01 00	      word.w	ksetPalNtsc,$0001	;Z
    264  5cb9		       0f 50 00 00	      word.w	ksetPalNtsc,$0000	;X
    265  5cbd		       00 00 00 00	      word.w	0, $0000	;C
    266  5cc1		       00 00 00 00	      word.w	0, $0000	;V
    267  5cc5		       00 00 00 00	      word.w	0, $0000	;B
    268  5cc9		       00 00 00 00	      word.w	0, $0000	;N
    269  5ccd		       00 00 00 00	      word.w	0, $0000	;M
    270  5cd1		       00 00 00 00	      word.w	0, $0000	;,
    271  5cd5		       00 00 00 00	      word.w	0, $0000	;.
    272  5cd9		       00 00 00 00	      word.w	0, $0000	;/
    273  5cdd		       00 00 00 00	      word.w	0, $0000	;up/down
    274  5ce1		       00 00 00 00	      word.w	0, $0000	;left/right
    275  5ce5		       be 54 00 00	      word.w	SIDEdit,$0000	;F1
    276  5ce9		       fd 4e 00 00	      word.w	ksavePatch,0	;F3
    277  5ced		       00 00 00 00	      word.w	0,0	;F5
    278  5cf1		       be 54 ff ff	      word.w	SIDEdit,$FFFF	;F7
    279  5cf5		       00 00 00 00	      word.w	0,0	;return
    280  5cf9		       00 00 00 00	      word.w	0,0	;Larrow
    281  5cfd
    282  5cfd		       00 1c	   MAX_PATCH_NUMBER equ	28
    283  5cfd
    284  5cfd				   patchName
    285  5cfd		       53 41 57 20*	      byte.b	"SAW BASS	  "	;0
    286  5d0d		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
    287  5d1d		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
    288  5d2d		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
    289  5d3d		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
    290  5d4d		       50 55 4c 53*	      byte.b	"PULSE HIGH	  "	;5
    291  5d5d		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
    292  5d6d		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
    293  5d7d		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
    294  5d8d		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
    295  5d9d		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
    296  5dad		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
    297  5dbd		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
    298  5dcd		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
    299  5ddd		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
    300  5ded		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
    301  5dfd
    302  5dfd				   patchName2
    303  5dfd		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
    304  5e0d		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
    305  5e1d		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
    306  5e2d		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
    307  5e3d		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
    308  5e4d		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
    309  5e5d		       4e 45 57 20*	      byte.b	"NEW PATCH 13	  "	;22
    310  5e6d		       4e 45 57 20*	      byte.b	"NEW PATCH 14	  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
    311  5e7d		       4e 45 57 20*	      byte.b	"NEW PATCH 15	  "	;24
    312  5e8d		       4e 45 57 20*	      byte.b	"NEW PATCH 16	  "	;25
    313  5e9d		       4e 45 57 20*	      byte.b	"NEW PATCH 17	  "	;26
    314  5ead		       4e 45 57 20*	      byte.b	"NEW PATCH 18	  "	;27
    315  5ebd		       4e 45 57 20*	      byte.b	"NEW PATCH 19	  "	;28
    316  5ecd		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;29
    317  5edd		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;30
    318  5eed
    319  5eed		       00 1d	   SAVED_PATCH_MESSAGE equ	29
    320  5eed		       00 1e	   CUSTOM_PATCH_NUMBER equ	30
    321  5eed
    322  5eed				   modeList
    323  5eed		       00		      byte.b	MODE_NORMAL
    324  5eee		       01		      byte.b	MODE_5THS
    325  5eef		       02		      byte.b	MODE_5PORT
    326  5ef0		       10		      byte.b	MODE_PORT1
    327  5ef1		       11		      byte.b	MODE_PORT2
    328  5ef2		       12		      byte.b	MODE_PORT3
    329  5ef3		       20		      byte.b	MODE_MONO1
    330  5ef4		       21		      byte.b	MODE_MONO2
    331  5ef5		       40		      byte.b	MODE_ARP1
    332  5ef6		       41		      byte.b	MODE_ARP2
    333  5ef7		       42		      byte.b	MODE_ARP3
    334  5ef8		       43		      byte.b	MODE_ARP4
    335  5ef9		       44		      byte.b	MODE_ARP5
    336  5efa		       08		      byte.b	MODE_6CHAN
    337  5efb		       08		      byte.b	MODE_6CHAN
    338  5efc		       08		      byte.b	MODE_6CHAN	;16
    339  5efd
    340  5efd
    341  5efd				   patchSoundMode
    342  5efd		       00		      byte.b	MODE_NORMAL	;0
    343  5efe		       00		      byte.b	MODE_NORMAL	;1
    344  5eff		       02		      byte.b	MODE_5PORT	;2
    345  5f00		       11		      byte.b	MODE_PORT2	;3
    346  5f01		       01		      byte.b	MODE_5THS	;4
    347  5f02		       11		      byte.b	MODE_PORT2	;5
    348  5f03		       00		      byte.b	MODE_NORMAL	;6
    349  5f04		       20		      byte.b	MODE_MONO1	;7
    350  5f05		       10		      byte.b	MODE_PORT1	;8
    351  5f06		       00		      byte.b	MODE_NORMAL	;9
    352  5f07		       00		      byte.b	MODE_NORMAL	;10 <--- start of new patches
    353  5f08		       40		      byte.b	MODE_ARP1	;11
    354  5f09		       41		      byte.b	MODE_ARP2	;12
    355  5f0a		       42		      byte.b	MODE_ARP3	;13
    356  5f0b		       20		      byte.b	MODE_MONO1	;14
    357  5f0c		       21		      byte.b	MODE_MONO2	;15
    358  5f0d		       00		      byte.b	MODE_NORMAL	;16
    359  5f0e		       20		      byte.b	MODE_MONO1	;17
    360  5f0f		       00		      byte.b	MODE_NORMAL	;18
    361  5f10		       12		      byte.b	MODE_PORT3	;19
    362  5f11		       08		      byte.b	MODE_6CHAN	;20
    363  5f12		       44		      byte.b	MODE_ARP5	;21
    364  5f13		       08		      byte.b	MODE_6CHAN	;22
    365  5f14		       00		      byte.b	MODE_NORMAL	;23
    366  5f15		       00		      byte.b	MODE_NORMAL	;24
    367  5f16		       00		      byte.b	MODE_NORMAL	;25
    368  5f17		       00		      byte.b	MODE_NORMAL	;26
    369  5f18		       00		      byte.b	MODE_NORMAL	;27
    370  5f19		       00		      byte.b	MODE_NORMAL	;28
    371  5f1a		       00		      byte.b	MODE_NORMAL	;29
    372  5f1b		       00		      byte.b	MODE_NORMAL	;30
    373  5f1c
    374  5f1c							; FX TYPES:
    375  5f1c							;MOD_NONE equ 0
    376  5f1c							;MOD_FILT_LFO equ 1
    377  5f1c							;MOD_FILT_ENV equ 2
    378  5f1c							;MOD_FILT3 equ 3
    379  5f1c							;MOD_FILT4 equ 4
    380  5f1c							;MOD_FILT5 equ 5
    381  5f1c							;MOD_PW_LFO equ 6
    382  5f1c							;MOD_PW2 equ 7
    383  5f1c
    384  5f1c							;	 0	 1	 2	 3	 4	  5	  6	  7	 8	 9
    385  5f1c				   patchFX
    386  5f1c		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
    387  5f26		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
    388  5f30		       00 03 00 00*	      byte.b	0, 3, 0, 0, 0, 0, 0, 0, 0, 0
    389  5f3a				   patchLFO
    390  5f3a		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $10, $01, $02, $13, $00
    391  5f44		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
    392  5f4e		       10 12 00 00*	      byte.b	$10, $12, $00, $00, $00, $00, $00, $00, $00, $00
    393  5f58				   patchOctave
    394  5f58		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
    395  5f62		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
    396  5f6c		       01 03 01 01*	      byte.b	1, 3, 1, 1, 1, 2, 3, 2, 0, 0
    397  5f76				   patchAD
    398  5f76		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    399  5f80		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
    400  5f8a		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    401  5f94				   patchSR
    402  5f94		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    403  5f9e		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    404  5fa8		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F0, $F0, 0
    405  5fb2				   patchPaddle
    406  5fb2		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    407  5fbc		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    408  5fc6		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    409  5fd0							;patchFiltCut
    410  5fd0							;	byte	$c0,	$80,	$c0,	$FF,	$40,	$50,	$c0,	$c0,	$80,	0
    411  5fd0							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	$80
    412  5fd0							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	0
    413  5fd0				   newPatchFiltCut
    414  5fd0		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    415  5fda		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    416  5fe4		       c0 f0 c0 ff*	      byte.b	$c0, $F0, $c0, $FF, $c0, $c0, $c0, $c0, $80, 0
    417  5fee				   patchVol
    418  5fee		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $6, $7, $F, $C, $c, 0
    419  5ff8		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $c, $C
    420  6002		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $b, $8, $F, $F, $c, 0
    421  600c				   patchPWL
    422  600c		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    423  6016		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    424  6020		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    425  602a				   patchPWH
    426  602a		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    427  6034		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    428  603e		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    429  6048				   patchWave
    430  6048		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    431  6052		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    432  605c		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    433  6066				   patchFilt
    434  6066		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    435  6070		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    436  607a		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    437  6084				   patchVolMode
    438  6084		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    439  608e		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    440  6098		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    441  60a2
    442  60a2				   octaveTable
    443  60a2		       00 0c 18 24*	      byte.b	0,12,24,36,48
    444  60a7
    445  60a7
    446  60a7				   pwLFO
    447  60a7		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    448  60ab		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    449  60af		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    450  60b3		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    451  60b7
    452  60b7				   patOffset
    453  60b7		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    454  60bd
    455  60bd				   voiceOffset
    456  60bd		       00 07 0e 	      byte.b	$0,$7,$E
    457  60c0
    458  60c0
    459  60c0
    460  60c0							;---------------------------- displayPage
    461  60c0
    462  60c0							; This chart references each line
    463  60c0							; on the standard character based screen.
    464  60c0							; = value x 40 + 0x400
    465  60c0				   lineOffsetL
    466  60c0		       00		      byte.b	$00
    467  60c1		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    468  60c7		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    469  60cd		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    470  60d3		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    471  60d9		       e8		      byte.b	$E8
    472  60da				   lineOffsetM
    473  60da		       04		      byte.b	$04
    474  60db		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    475  60e1		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    476  60e7		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    477  60ed		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    478  60f3		       07		      byte.b	$07
    479  60f4
    480  60f4				   debugOverlay
    481  60f4		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    482  60ff		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    483  610b		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    484  6136		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    485  6161							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    486  6161							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    487  6161							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    488  6161							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    489  6161		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    490  616f		       ff		      byte.b	255
    491  6170
    492  6170				   fxNames
    493  6170		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    494  6178		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    495  6180		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    496  6188		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    497  6190		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    498  6198		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    499  61a0		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    500  61a8		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    501  61b0		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    502  61b8
    503  61b8				   hexEditHelp
    504  61b8		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    505  61e3		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    506  620f		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    507  6220		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    508  624c		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    509  625d		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    510  6289		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    511  629a		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    512  62c6		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    513  62d7		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    514  6303		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    515  6314		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    516  633f		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",0
    517  6362		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",0
    518  6387		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",0
    519  63ac		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",0
    520  63d1		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    521  63f6		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    522  6421		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    523  644c		       ff		      byte.b	255
    524  644d
    525  644d				   helpMessage
    526  644d		       52 45 54 55*	      byte.b	"RETURN FOR COMMANDS	       ",0
    527  646b							;byte "RETURN FOR HELP 	     ",0
    528  646b				   normalHelp
    529  646b		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81," KEYBOARD COMMANDS ",$82,"-		",0
    530  649a		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    531  64c5		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS ROWS",$8F," ARE ",$81,"PIANO KEYS  ",0
    532  64f4		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV ROWS",$8F," SELECT",$81," SOUND PRESETS ",0
    533  6523		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    534  6550		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83,"    _",$8F,"=CUSTOM-PRESET",0
    535  657d		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    536  65a8		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    537  65b7		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND MODE",0
    538  65e1		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNMM",$8F,"=FX MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    539  660f		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    540  6639		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    541  6649		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A,"  JKL",$8F,"=VID-MODE"
    542  6677		       00		      byte.b	0
    543  6678		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    544  66a7		       00		      byte.b	0
    545  66a8		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    546  66c6		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR MODULATION",0
    547  66f4		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    548  671e		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    549  6736		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF ",$8E,":;=",$8F,"=OMNI/CH1/CH5"
    550  6761		       00		      byte.b	0
    551  6762		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    552  678b		       00		      byte.b	0
    553  678c		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    554  67b6		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    555  67c9		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ZX",$8F,"=PAL/NTSC"
    556  67ed		       00		      byte.b	0
    557  67ee		       17 87 46 31*	      byte.b	23,$87,"F1",$8F,"=SID-EDIT-KB" ,$87," F3",$8F,"=SAVE-CUSTOM-PRESET"
    558  6817		       00		      byte.b	0
    559  6818		       18 87 46 37*	      byte.b	24,$87,"F7",$8F,"=SID-EDIT-PIANO	  ",$8B,"RETURN TO EXIT"
    560  6844		       00		      byte.b	0
    561  6845		       ff		      byte.b	255
    562  6846
    563  6846				   mainColorText
    564  6846		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    565  6875		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83,"       ",$8D,"	    ",$8F,"	 ",$8D,"FILTR",$8C,"=",$81,"X	",0
    566  68a8		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    567  68de		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    568  6914		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"FX",$8C,"=",$81,"XXXXX ",$8F,"	VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    569  694a		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    570  6975
    571  6975							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    572  6975							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    573  6975							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    574  6975							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    575  6975							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    576  6975							;byte 255
    577  6975
    578  6975		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    579  6975		       00 02	   CYNTHCART_COLOR equ	2
    580  6975
    581  6975
    582  6975		       00 2d	   MODETEXT   equ	40*1+5
    583  6975		       00 57	   TUNINGTEXT equ	40*2+7
    584  6975		       00 7f	   OCTAVETEXT equ	40*3+7
    585  6975		       00 a7	   VOLTEXT    equ	40*4+7
    586  6975
    587  6975		       00 62	   ATKTEXT    equ	40*2+18
    588  6975		       00 8a	   RELTEXT    equ	40*3+18
    589  6975		       00 12	   PATCHTEXT  equ	40*0+18
    590  6975
    591  6975		       00 94	   LFORATETEXT equ	40*3+28
    592  6975		       00 6c	   LFODEPTHTEXT equ	40*2+28
    593  6975		       00 bc	   VIDEOTEXT  equ	40*4+28
    594  6975
    595  6975		       00 ae	   FXTEXT     equ	40*4+14
    596  6975
    597  6975		       00 4c	   FILTERTEXT2 equ	40*1+36
    598  6975		       00 75	   FILTERTEXT equ	40*2+37
    599  6975		       00 9c	   PADDLETEXT equ	40*3+36
    600  6975		       00 c4	   PAD2TEXT   equ	40*4+36
    601  6975
    602  6975		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    603  6975
    604  6975							;MODE
    605  6975							;ATTACK
    606  6975							;RELEASE
    607  6975							;VOL
    608  6975
    609  6975
    610  6975
    611  6975
    612  6975		       ff		      byte.b	255
    613  6976
    614  6976				   modeText
    615  6976		       50 4f 4c 59*	      byte.b	"POLY	  "	;0
    616  697e		       50 4f 52 54*	      byte.b	"PORT1   "	;1
    617  6986		       50 4f 52 54*	      byte.b	"PORT2   "	;2
    618  698e		       50 4f 52 54*	      byte.b	"PORT3   "	;3
    619  6996		       4d 4f 4e 4f*	      byte.b	"MONO	  "	;4
    620  699e		       41 52 50 31*	      byte.b	"ARP1	  "	;5
    621  69a6		       41 52 50 32*	      byte.b	"ARP2	  "	;6
    622  69ae		       41 52 50 33*	      byte.b	"ARP3	  "	;7
    623  69b6		       41 52 50 34*	      byte.b	"ARP4	  "	;8
    624  69be		       41 52 50 35*	      byte.b	"ARP5	  "	;9
    625  69c6		       36 2d 56 4f*	      byte.b	"6-VOICE "	;10
    626  69ce
    627  69ce
    628  69ce				   textData		; can contain 64 four byte texts
    629  69ce		       4f 46 46 20	      byte.b	"OFF "	;0
    630  69d2		       4f 4e 20 20	      byte.b	"ON  "	;4
    631  69d6		       53 4c 4f 57	      byte.b	"SLOW"	;8
    632  69da		       4d 45 44 20	      byte.b	"MED "	;12
    633  69de		       46 41 53 54	      byte.b	"FAST"	;16
    634  69e2		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    635  69e6		       2d 33 30 20	      byte.b	"-30 "	;24
    636  69ea		       2d 32 30 20	      byte.b	"-20 "	;28
    637  69ee		       2d 31 30 20	      byte.b	"-10 "	;32
    638  69f2		       30 20 20 20	      byte.b	"0   "	;36
    639  69f6		       2b 31 30 20	      byte.b	"+10 "	;40
    640  69fa		       2b 32 30 20	      byte.b	"+20 "	;44
    641  69fe		       2b 33 30 20	      byte.b	"+30 "	;48
    642  6a02		       2b 34 30 20	      byte.b	"+40 "	;52
    643  6a06		       2b 35 30 20	      byte.b	"+50 "	;56
    644  6a0a		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    645  6a0e		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    646  6a12		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    647  6a16		       46 49 4c 54	      byte.b	"FILT"	;72
    648  6a1a		       56 4f 4c 20	      byte.b	"VOL "	;76
    649  6a1e		       4c 4f 57 20	      byte.b	"LOW "	;80
    650  6a22		       4d 45 44 20	      byte.b	"MED "	;84
    651  6a26		       48 49 47 48	      byte.b	"HIGH"	;88
    652  6a2a		       53 49 44 3a	      byte.b	"SID:"	;92
    653  6a2e		       44 49 53 20	      byte.b	"DIS "	;96
    654  6a32		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    655  6a36		       50 55 4c 53	      byte.b	"PULS"	;104
    656  6a3a		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    657  6a3e		       4c 46 4f 20	      byte.b	"LFO "	;112
    658  6a42		       42 45 4e 44	      byte.b	"BEND"	;116
    659  6a46
    660  6a46
    661  6a46				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    662  6a46		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00
    663  6a4e		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08
    664  6a56		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10
    665  6a5e		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18
    666  6a66		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20
    667  6a6e		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28
    668  6a76		       4d 4f 4e 4f*	      byte.b	"MONO3  ",1	;$30
    669  6a7e		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38
    670  6a86		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40
    671  6a8e		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48
    672  6a96		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50
    673  6a9e		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58
    674  6aa6		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60
    675  6aae		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68
    676  6ab6		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70
    677  6abe
    678  6abe				   modeNameOffsets
    679  6abe							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    680  6abe		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    681  6ace		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    682  6ade		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    683  6aee		       00 00 00 00*	      byte.b	$00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    684  6afe		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    685  6b0e
    686  6b0e
    687  6b0e							; soundModes
    688  6b0e							;MODE_NORM	equ $00
    689  6b0e							;MODE_6CHAN equ $08
    690  6b0e							;MODE_PORT1	equ $10
    691  6b0e							;MODE_PORT2	equ $11
    692  6b0e							;MODE_PORT3	equ $12
    693  6b0e							;MODE_MONO1 equ $20
    694  6b0e							;MODE_MONO2 equ $21
    695  6b0e							;MODE_MONO3 equ $22
    696  6b0e							;MODE_ARP1	equ $40
    697  6b0e							;MODE_ARP2	equ $41
    698  6b0e							;MODE_ARP3	equ $42
    699  6b0e							;MODE_ARP4	equ $43
    700  6b0e							;MODE_ARP5	equ $44
    701  6b0e
    702  6b0e
    703  6b0e							; VERSION NUMBER
    704  6b0e				   bottomText
    705  6b0e		       20 50 41 4c*	      byte.b	" PAL V1.5.2",0
    706  6b1a		       4e 54 53 43*	      byte.b	"NTSC V1.5.2",0
    707  6b26
    708  6b26
    709  6b26							; contant pointers into the textData array
    710  6b26		       00 00	   ON	      equ	0
    711  6b26		       00 04	   OFF	      equ	4
    712  6b26		       00 08	   SLOW       equ	8
    713  6b26		       00 0c	   MED	      equ	12
    714  6b26		       00 10	   FAST       equ	16
    715  6b26		       00 14	   TUNING     equ	20
    716  6b26		       00 3c	   POLY       equ	60
    717  6b26		       00 40	   MONO       equ	64
    718  6b26		       00 44	   FREQ       equ	68
    719  6b26		       00 48	   FILT       equ	72
    720  6b26		       00 4c	   VOL	      equ	76
    721  6b26		       00 50	   VLOW       equ	80
    722  6b26		       00 54	   VMED       equ	84
    723  6b26		       00 58	   VHIGH      equ	88
    724  6b26		       00 60	   DISABLED   equ	96
    725  6b26		       00 64	   PAD2VALTEXT equ	100
    726  6b26
    727  6b26
    728  6b26
    729  6b26
    730  6b26				   tuneArrPtrLL
    731  6b26		       e8 78 08 50*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    732  6b30				   tuneArrPtrLH
    733  6b30		       6c 6d 6e 6e*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    734  6b3a				   tuneArrPtrHL
    735  6b3a		       30 c0 a4 98*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    736  6b44				   tuneArrPtrHH
    737  6b44		       6d 6d 6e 6e*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    738  6b4e
    739  6b4e				   LFODepthArray
    740  6b4e		       00 02 05 0f	      byte.b	0,2,5,15
    741  6b52
    742  6b52
    743  6b52
    744  6b52
    745  6b52				   hexDisplay
    746  6b52		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    747  6b62
    748  6b62				   keyData		; numbers 0-9 and letters a-f
    749  6b62		       23 38 3b 08*	      byte.b	35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    750  6b72
    751  6b72							; key set for piano keyboard: black keys + middle A-F on the white keys
    752  6b72		       33 3b 08 10*	      byte.b	51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    753  6b82
    754  6b82							; array of LFO values
    755  6b82				   LFOArrL
    756  6b82		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    757  6b92				   LFOArrH
    758  6b92		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    759  6ba2				   LFOdisp
    760  6ba2		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    761  6bb2
    762  6bb2							; NTSC Note Table
    763  6bb2				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    764  6bb2		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    765  6bbe		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    766  6bca		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    767  6bd6		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    768  6be2		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    769  6bee		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    770  6bfa							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    771  6bfa				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    772  6bfa		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    773  6c06		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    774  6c12		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    775  6c1e		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    776  6c2a		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    777  6c36		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    778  6c42
    779  6c42							; PAL Note Table
    780  6c42				   PSoundLArr
    781  6c42		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    782  6c4e		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    783  6c5a		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    784  6c66		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    785  6c72		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    786  6c7e		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    787  6c8a		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    788  6c95
    789  6c95				   PSoundHArr
    790  6c95		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    791  6ca1		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    792  6cad		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    793  6cb9		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    794  6cc5		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    795  6cd1		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    796  6cdd		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart152.asm
   4994  6ce8
   4995  6ce8							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  6ce8					      include	"cynth_tuning.asm"
      1  6ce8
      2  6ce8				   tuningL0
      3  6ce8		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  6cf4		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  6d00		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  6d0c		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  6d18		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  6d24		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  6d30				   tuningH0
     10  6d30		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  6d3c		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  6d48		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  6d54		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  6d60		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  6d6c		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  6d78
     17  6d78				   tuningL1
     18  6d78		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  6d84		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  6d90		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  6d9c		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  6da8		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  6db4		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  6dc0				   tuningH1
     25  6dc0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  6dcc		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  6dd8		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  6de4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  6df0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  6dfc		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  6e08
     32  6e08				   tuningL2
     33  6e08		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  6e14		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  6e20		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  6e2c		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  6e38		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  6e44		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  6e50							;tuningH2
     40  6e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  6e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  6e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  6e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  6e50							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  6e50							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  6e50
     47  6e50				   tuningL3
     48  6e50		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  6e5c		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  6e68		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  6e74		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  6e80		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  6e8c		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  6e98				   tuningH3
     55  6e98		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  6ea4				   tuningH2
     57  6ea4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  6eb0		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  6ebc		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  6ec8		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  6ed4		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  6ee0		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  6eec
     64  6eec				   tuningL4
     65  6eec				   tuningH4
     66  6eec				   tuningH5
     67  6eec		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  6ef8				   tuningH6
     69  6ef8		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  6f04		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  6f10		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  6f1c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  6f28		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  6f34		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  6f40							;tuningH4
     76  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  6f40							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  6f40
     83  6f40				   tuningL5
     84  6f40		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  6f4c		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  6f58		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  6f64		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  6f70		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  6f7c		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  6f88
     91  6f88							;tuningH5
     92  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  6f88							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  6f88
     99  6f88				   tuningL6
    100  6f88		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  6f94		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  6fa0		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  6fac		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  6fb8		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  6fc4		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  6fd0							;tuningH6
    107  6fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  6fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  6fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  6fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  6fd0							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  6fd0							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  6fd0
    114  6fd0				   tuningL7
    115  6fd0		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  6fdc		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  6fe8		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  6ff4		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  7000		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  700c		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  7018				   tuningH7
    122  7018		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  7024		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  7030		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  703c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  7048		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  7054		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  7060
    129  7060				   tuningL8
    130  7060		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  706c		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  7078		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  7084		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  7090		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  709c		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  70a8				   tuningH8
    137  70a8		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  70b4		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  70c0		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  70cc		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  70d8		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  70e4		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  70f0
    144  70f0				   tuningL9
    145  70f0		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  70fc		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  7108		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  7114		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  7120		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  712c		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  7138				   tuningH9
    152  7138		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  7144		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  7150		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  715c		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  7168		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  7174		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart152.asm
   4997  7180
   4998  7180							; Frank's MIDI interface code
   4999  7180				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   5000  7180				  -	      include	"cynth_midi_dummy.asm"
   5001  7180					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  7180					      include	"cynth_midi.asm"
      1  7180							; public MIDI interface routines:
      2  7180							; midiDetect
      3  7180							; midiInit
      4  7180							; midiRead
      5  7180							; midiWrite
      6  7180
      7  7180							; interface type for midiDetect and midiInit:
      8  7180							; 0: no MIDI interface was detected
      9  7180							; 1: Sequential Circuits Inc.
     10  7180							; 2: Passport & Syntech
     11  7180							; 3: DATEL/Siel/JMS
     12  7180							; 4: Namesoft
     13  7180
     14  7180							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  7180		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  7180
     17  7180
     18  7180					      processor	6502
     19  7180
     20  7180		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     21  7180		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     22  7180
     23  7180		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     24  7180		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     25  7180
     26  7180							; detec MIDI interface, return type in accu
     27  7180				   midiDetect		; TODO
     28  7180		       a9 00		      lda	#0
     29  7182		       60		      rts
     30  7183
     31  7183							; init MIDI interface, type in accu from midiDetect
     32  7183				   midiInit
     33  7183		       78		      sei
     34  7184
     35  7184		       85 6e		      sta	midiInterfaceType
     36  7186		       aa		      tax
     37  7187		       ca		      dex
     38  7188
     39  7188		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
     40  718a		       8d 02 dc 	      sta	DDRA
     41  718d
     42  718d		       a9 00		      lda	#0	; CIA#1 port B = inputs
     43  718f		       8d 03 dc 	      sta	DDRB
     44  7192
     45  7192		       a9 00		      lda	#0
     46  7194		       85 71		      sta	keyPressed
     47  7196		       85 6f		      sta	keyTestIndex
     48  7198		       85 70		      sta	keyPressedIntern
     49  719a
     50  719a							; init addresses
     51  719a		       bd 69 72 	      lda	midiControlOfs,x
     52  719d		       85 64		      sta	midiControl
     53  719f		       bd 6d 72 	      lda	midiStatusOfs,x
     54  71a2		       85 66		      sta	midiStatus
     55  71a4		       bd 71 72 	      lda	midiTxOfs,x
     56  71a7		       85 68		      sta	midiTx
     57  71a9		       bd 75 72 	      lda	midiRxOfs,x
     58  71ac		       85 6a		      sta	midiRx
     59  71ae		       a9 de		      lda	#$de
     60  71b0		       85 65		      sta	midiControl+1
     61  71b2		       85 67		      sta	midiStatus+1
     62  71b4		       85 69		      sta	midiTx+1
     63  71b6		       85 6b		      sta	midiRx+1
     64  71b8
     65  71b8		       20 fd 71 	      jsr	midiReset
     66  71bb
     67  71bb							; clear ringbuffer
     68  71bb		       a9 00		      lda	#0
     69  71bd		       85 6c		      sta	midiRingbufferReadIndex
     70  71bf		       85 6d		      sta	midiRingbufferWriteIndex
     71  71c1
     72  71c1		       bd 7d 72 	      lda	midiIrqType,x
     73  71c4		       d0 0a		      bne	midiSetIrq
     74  71c6
     75  71c6							; set NMI routine
     76  71c6		       a9 26		      lda	#<midiNmi
     77  71c8		       8d 18 03 	      sta	$0318
     78  71cb		       a9 72		      lda	#>midiNmi
     79  71cd		       8d 19 03 	      sta	$0319
     80  71d0
     81  71d0							; set IRQ routine
     82  71d0		       a9 3c	   midiSetIrq lda	#<midiIrq
     83  71d2		       8d 14 03 	      sta	$0314
     84  71d5		       a9 72		      lda	#>midiIrq
     85  71d7		       8d 15 03 	      sta	$0315
     86  71da
     87  71da							; enable IRQ/NMI
     88  71da		       a9 94		      lda	#$94
     89  71dc		       1d 79 72 	      ora	midiCr0Cr1,x
     90  71df		       91 64		      sta	(midiControl),y
     91  71e1
     92  71e1		       58		      cli
     93  71e2		       60		      rts
     94  71e3
     95  71e3		       78	   midiRelease sei
     96  71e4		       20 fd 71 	      jsr	midiReset
     97  71e7		       a9 31		      lda	#$31
     98  71e9		       8d 14 03 	      sta	$0314
     99  71ec		       a9 ea		      lda	#$ea
    100  71ee		       8d 15 03 	      sta	$0315
    101  71f1		       a9 47		      lda	#$47
    102  71f3		       8d 18 03 	      sta	$0318
    103  71f6		       a9 fe		      lda	#$fe
    104  71f8		       8d 19 03 	      sta	$0319
    105  71fb		       58		      cli
    106  71fc		       60		      rts
    107  71fd
    108  71fd							; MC68B50 master reset and IRQ off
    109  71fd				   midiReset
    110  71fd		       a0 00		      ldy	#0
    111  71ff		       a9 03		      lda	#3
    112  7201		       91 64		      sta	(midiControl),y
    113  7203		       60		      rts
    114  7204
    115  7204		       a6 6c	   midiCanRead ldx	midiRingbufferReadIndex
    116  7206		       e4 6d		      cpx	midiRingbufferWriteIndex
    117  7208		       60		      rts
    118  7209
    119  7209							; read MIDI byte from ringbuffer
    120  7209				   midiRead
    121  7209		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    122  720b		       e4 6d		      cpx	midiRingbufferWriteIndex
    123  720d		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    124  720f							;beq midiRead
    125  720f		       60		      rts		; No new data, so return
    126  7210
    127  7210							; wait for MIDI byte and read it from ringbuffer
    128  7210				   midiReadWait
    129  7210		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    130  7212		       e4 6d		      cpx	midiRingbufferWriteIndex
    131  7214		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    132  7216		       4c 10 72 	      jmp	midiReadWait
    133  7219							;rts ; No new data, so return
    134  7219
    135  7219
    136  7219				   processMidi
    137  7219							; read next character from ringbuffer
    138  7219		       bd 00 7f 	      lda	midiRingbuffer,x
    139  721c		       a8		      tay		; save next byte into y
    140  721d		       e8		      inx		; increment buffer pointer...
    141  721e		       8a		      txa
    142  721f							;and #31 ; wrap around at end
    143  721f		       29 ff		      and	#BUFFER_SIZE_MASK
    144  7221		       85 6c		      sta	midiRingbufferReadIndex	; save it
    145  7223		       98		      tya		; the byte read from the buffer ends up in both y and a
    146  7224
    147  7224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    148  7224							; DEBUG - SHOW MIDI DATA
    149  7224				  -	      IF	DEBUG_SHOW_MIDI=1
    150  7224				  -			;IF DEBUG_DISPLAY=1
    151  7224				  -	      sta	temp
    152  7224				  -	      bpl	notStatusByte
    153  7224				  -	      lda	#$E
    154  7224				  -	      sta	hexDispColor
    155  7224				  -	      jmp	endColor
    156  7224				  -notStatusByte
    157  7224				  -	      lda	#$F
    158  7224				  -	      sta	hexDispColor
    159  7224				  -endColor
    160  7224				  -	      lda	debugOffset
    161  7224				  -	      and	#$F0
    162  7224				  -	      lsr
    163  7224				  -	      lsr
    164  7224				  -	      lsr
    165  7224				  -	      tax
    166  7224				  -			;ldx #34
    167  7224				  -	      lda	debugOffset
    168  7224				  -	      and	#$0F
    169  7224				  -	      tay
    170  7224				  -	      iny
    171  7224				  -	      iny
    172  7224				  -	      iny
    173  7224				  -	      iny
    174  7224				  -	      iny
    175  7224				  -	      iny
    176  7224				  -	      lda	temp
    177  7224				  -	      jsr	displayHex
    178  7224				  -	      inc	debugOffset
    179  7224				  -			;ldy debugOffset
    180  7224				  -			;iny
    181  7224				  -			;tya
    182  7224				  -			;and #$0F
    183  7224				  -			;sta debugOffset
    184  7224				  -			;adc #5
    185  7224				  -			;tay
    186  7224				  -	      lda	temp
    187  7224				  -	      ldy	temp
    188  7224					      ENDIF
    189  7224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  7224
    191  7224		       60		      rts
    192  7225
    193  7225							; write MIDI byte and wait for write complete
    194  7225		       60	   midiWrite  rts		; TODO
    195  7226
    196  7226							; NMI handler
    197  7226		       48	   midiNmi    pha
    198  7227		       8a		      txa
    199  7228		       48		      pha
    200  7229		       98		      tya
    201  722a		       48		      pha
    202  722b
    203  722b							; test if it was a NMI from the MIDI interface
    204  722b		       a0 00		      ldy	#0
    205  722d		       b1 66		      lda	(midiStatus),y
    206  722f		       29 01		      and	#1
    207  7231		       f0 03		      beq	midiNmiEnd
    208  7233		       20 5b 72 	      jsr	midiStore
    209  7236		       68	   midiNmiEnd pla
    210  7237		       a8		      tay
    211  7238		       68		      pla
    212  7239		       aa		      tax
    213  723a		       68		      pla
    214  723b		       40		      rti
    215  723c
    216  723c							; IRQ handler
    217  723c		       a6 6e	   midiIrq    ldx	midiInterfaceType
    218  723e		       ca		      dex
    219  723f		       bd 7d 72 	      lda	midiIrqType,x
    220  7242		       f0 0e		      beq	midiIrqKey
    221  7244
    222  7244							; test if it was an IRQ from the MIDI interface
    223  7244		       a0 00		      ldy	#0
    224  7246		       b1 66		      lda	(midiStatus),y
    225  7248		       29 01		      and	#1
    226  724a		       f0 06		      beq	midiIrqKey
    227  724c		       20 5b 72 	      jsr	midiStore
    228  724f		       4c 36 72 	      jmp	midiNmiEnd
    229  7252
    230  7252							; keyboard test
    231  7252		       20 81 72    midiIrqKey jsr	keyboardTest
    232  7255		       ad 0d dc 	      lda	$dc0d
    233  7258		       4c 36 72 	      jmp	midiNmiEnd
    234  725b
    235  725b							; get MIDI byte and store in ringbuffer
    236  725b		       b1 6a	   midiStore  lda	(midiRx),y
    237  725d		       a6 6d		      ldx	midiRingbufferWriteIndex
    238  725f		       9d 00 7f 	      sta	midiRingbuffer,x
    239  7262		       e8		      inx
    240  7263		       8a		      txa
    241  7264							;and #31
    242  7264		       29 ff		      and	#BUFFER_SIZE_MASK
    243  7266		       85 6d		      sta	midiRingbufferWriteIndex
    244  7268		       60		      rts
    245  7269
    246  7269							; MC68B50 control register (relative to $de00)
    247  7269		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    248  726d
    249  726d							; MC68B50 status register
    250  726d		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    251  7271
    252  7271							; MC68B50 TX register
    253  7271		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    254  7275
    255  7275							; MC68B50 RX register offset
    256  7275		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    257  7279
    258  7279							; counter divide bits CR0 and CR1 for the MC68B50
    259  7279				   midiCr0Cr1
    260  7279		       01 01 02 01	      .byte.b	1, 1, 2, 1
    261  727d
    262  727d							; 1=IRQ, 0=NMI
    263  727d				   midiIrqType
    264  727d		       01 01 01 00	      .byte.b	1, 1, 1, 0
    265  7281
    266  7281
    267  7281							; keyboard test
    268  7281				   keyboardTest
    269  7281		       a6 6f		      ldx	keyTestIndex
    270  7283		       bd c5 72 	      lda	keys,x	; load colum
    271  7286		       8d 00 dc 	      sta	PRA
    272  7289		       e8		      inx
    273  728a		       ad 01 dc 	      lda	PRB
    274  728d		       3d c5 72 	      and	keys,x	; mask row
    275  7290		       e8		      inx
    276  7291		       c9 00		      cmp	#0
    277  7293		       d0 0d		      bne	kbt2
    278  7295		       bd c5 72 	      lda	keys,x
    279  7298		       c9 80		      cmp	#$80
    280  729a		       d0 04		      bne	jump1
    281  729c		       e6 72		      inc	shiftPressed
    282  729e		       d0 02		      bne	kbt2
    283  72a0				   jump1
    284  72a0		       85 70		      sta	keyPressedIntern
    285  72a2				   kbt2
    286  72a2		       e8		      inx
    287  72a3		       e0 12		      cpx	#18
    288  72a5		       d0 1b		      bne	kbt3
    289  72a7		       a6 70		      ldx	keyPressedIntern
    290  72a9		       f0 05		      beq	jump2
    291  72ab		       a5 72		      lda	shiftPressed
    292  72ad		       f0 01		      beq	jump2
    293  72af		       e8		      inx
    294  72b0				   jump2
    295  72b0		       86 71		      stx	keyPressed
    296  72b2		       d0 08		      bne	jump3
    297  72b4		       a5 72		      lda	shiftPressed
    298  72b6		       f0 04		      beq	jump3
    299  72b8		       a9 40		      lda	#$40
    300  72ba		       85 71		      sta	keyPressed
    301  72bc				   jump3
    302  72bc		       a2 00		      ldx	#0
    303  72be		       86 72		      stx	shiftPressed
    304  72c0		       86 70		      stx	keyPressedIntern
    305  72c2				   kbt3
    306  72c2		       86 6f		      stx	keyTestIndex
    307  72c4		       60		      rts
    308  72c5
    309  72c5				   keys
    310  72c5		       fe 10 01 	      .byte.b	%11111110, %00010000, 1	; F1
    311  72c8		       fe 20 03 	      .byte.b	%11111110, %00100000, 3	; F3
    312  72cb		       fe 40 05 	      .byte.b	%11111110, %01000000, 5	; F5
    313  72ce		       fe 08 07 	      .byte.b	%11111110, %00001000, 7	; F7
    314  72d1		       bf 10 80 	      .byte.b	%10111111, %00010000, $80	; right shift
    315  72d4		       bd 80 80 	      .byte.b	%10111101, %10000000, $80	; left shift
------- FILE cynthcart152.asm
   5003  72d7					      ENDIF
   5004  72d7
   5005  72d7
   5006  72d7				  -	      IF	MODE=KERNEL_OBSOLETE
   5007  72d7				  -	      org	$bfff
   5008  72d7				  -	      byte	0
   5009  72d7					      ENDIF

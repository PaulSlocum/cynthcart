------- FILE cynthcart2.0.1.asm LEVEL 1 PASS 2
      1  3b6d ????						; Commodore 64 Cynthcart
      2  3b6d ????						; by Paul Slocum
      3  3b6d ????						;------------------------
      4  3b6d ????						; TEXT EDITOR TAB=3
      5  3b6d ????						;------------------------
      6  3b6d ????
      7  3b6d ????						;     ~~~==========================================================================================~~~
      8  3b6d ????						; <<<<<<"MODE" AND "DEVICE_CONFIG" SHOULD BE DEFINED IN DASM CALL (dasm -DMODE=1 -DDEVICE_CONFIG=0) >>>>>>
      9  3b6d ????						;     ~~~==========================================================================================~~~
     10  3b6d ????
     11  3b6d ????						; IMAGE RUN MODES:
     12  3b6d ????	       00 00	   CART_OBSOLETE equ	0	; run at $8000 off cartridge ROM (No longer supported because the ROM is bigger than 8K)
     13  3b6d ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word (PRG format)
     14  3b6d ????	       00 02	   RAM	      equ	2	; run at $3000, needs to be copied or decompressed into $3000 (used for compresed version)
     15  3b6d ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (No longer supported because the ROM is bigger than 8K)
     16  3b6d ????						; -- - -- - -- - -- - -- -
     17  3b6d ????						;;;MODE equ RAM   ; DISK, CART_OBSOLETE, RAM (for compression), or KERNEL_OBSOLETE
     18  3b6d ????						; -- - -- - -- - -- - -- -
     19  3b6d ????
     20  3b6d ????
     21  3b6d ????						; MIDI AND SID2 CONFIGURATION:
     22  3b6d ????	       00 00	   DEFAULT    equ	0	; Midi autodetect, SID2 at $DF00
     23  3b6d ????	       00 01	   KERBEROS   equ	1	; Datel Midi, SID2 at $D420
     24  3b6d ????	       00 02	   EMU	      equ	2	; Midi disabled, SID2 at $D420
     25  3b6d ????	       00 03	   SIDSYMPHONY equ	3	; Midi disabled, SID2 at $DE00
     26  3b6d ????						; -- - -- - -- - -- - -- -
     27  3b6d ????						;;;DEVICE_CONFIG equ DEFAULT
     28  3b6d ????						; -- - -- - -- - -- - -- -
     29  3b6d ????
     30  3b6d ????
     31  3b6d ????	       00 00	   BETA_RELEASE equ	0
     32  3b6d ????
     33  3b6d ????						;=================================------------ - - - -  -   -
     34  3b6d ????						;
     35  3b6d ????						; TODO:
     36  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     37  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     38  3b6d ????						;
     39  3b6d ????						;=================================------------ - - - -  -   -
     40  3b6d ????						;
     41  3b6d ????						; - - - - - - - - - - - - - -
     42  3b6d ????						; Change Log:
     43  3b6d ????						; - - - - - - - - - - - - - -
     44  3b6d ????						; 2.0.1
     45  3b6d ????						; + disabled Restore key, which causes a lock up on a few 64C models
     46  3b6d ????						; + reset paddle2 pitch value when pitch control is turned off
     47  3b6d ????						; 2.0
     48  3b6d ????						; + 7 additional presets
     49  3b6d ????						; + added mono stack portamento modes
     50  3b6d ????						; + wrote new instruction manual
     51  3b6d ????						; + moved secondary SID to $DF00 to work with SIDcart II (note: must build with SID #2 at $D420 for Kerberos)
     52  3b6d ????						; + now supports and autodetects Passport, Datel, Sequential, and Kerberos MIDI adapters (note: autodetect is incompatible with VICE)
     53  3b6d ????						; + created new compression system to fit latest ROM onto 8K cartridge
     54  3b6d ????						; + presets now have independent waveform and sustain/release for each oscillator
     55  3b6d ????						; + added a button to cancel out of the SID editor
     56  3b6d ????						; + help screen now displays even when video is off
     57  3b6d ????						; + fixed SID editor waveform bug
     58  3b6d ????						; + other minor bugfixes
     59  3b6d ????						; + added build switch for alternate midi and SID configurations
     60  3b6d ????						; - - - - - - - - - - - - - -
     61  3b6d ????						; 1.5.1
     62  3b6d ????						; + fixed clock and sysex bytes causing crashes/stuck notes (Midi 0xF0-0xFF)
     63  3b6d ????						; + fixed bad pitch bend startup value		Q
     64  3b6d ????						; + added non-omni modes for channel 1 and 5
     65  3b6d ????						; - - - - - - - - - - - - - -
     66  3b6d ????						; 1.5.0 (major update for Kerberos)
     67  3b6d ????						; + added MIDI support for Kerberos cartridge/DATEL MIDI interface
     68  3b6d ????						; + arpeggiator
     69  3b6d ????						; + mono stack mode and 6-voice mode
     70  3b6d ????						; + new filter and pulse width effects modes
     71  3b6d ????						; + 12 additional presets
     72  3b6d ????						; + improved clarity of help screen text
     73  3b6d ????						; + moved SID location for MIDI version to $D420 since MIDI address overlaps with SID Symphony ($DE00)
     74  3b6d ????						; + refactored much of project source
     75  3b6d ????						; + new smarter note buffering system
     76  3b6d ????						; + reworked patch parameter display
     77  3b6d ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     78  3b6d ????						; + optimized the tuning shift tables for space by overlapping tables
     79  3b6d ????						; + made LFO and all pitch modulations use proper tuning/scaling
     80  3b6d ????						; + fixed some errors in the tuning shift tables
     81  3b6d ????						; + added "RETURN FOR CONTROLS" message at bottom
     82  3b6d ????						; - - - - - - - - - - - - - -
     83  3b6d ????						; 1.2.4
     84  3b6d ????						; + designated paddle 1 and 2 in help screen
     85  3b6d ????						; - - - - - - - - - - - - - -
     86  3b6d ????						; 1.2.3
     87  3b6d ????						; + disable key-commands when 3 piano keys are held
     88  3b6d ????						;		to avoid quirks with keyboard matrix
     89  3b6d ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     90  3b6d ????						; + reinstated shift-lock holding notes
     91  3b6d ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     92  3b6d ????						; + add another octave to tuning charts for 5ths in top octave
     93  3b6d ????						; + auto-paddle on
     94  3b6d ????						; + set up custom test for space bar
     95  3b6d ????						; + disable settings changes w/ space bar
     96  3b6d ????						; + corrected "sine" to "tringl" in patch names
     97  3b6d ????						; + restored startup patch to "saw bass"
     98  3b6d ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     99  3b6d ????						;	+ add key command to switch controls and turn off
    100  3b6d ????						;	+ add display of paddle status
    101  3b6d ????						;	+ add code to run things from the second paddle
    102  3b6d ????						; - - - - - - - - - - - - - -
    103  3b6d ????						; 1.2.2
    104  3b6d ????						; + keyboard driver rewrite
    105  3b6d ????						; + moved tuning from piano to ASDF...
    106  3b6d ????						; + moved filter On/Off to ZXC
    107  3b6d ????						; + keys swap portamento and octave
    108  3b6d ????						; + move video mode to SHFT+FGH and require shift for VIC mode
    109  3b6d ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
    110  3b6d ????						; + separate functions for "show everything" and "variable init"
    111  3b6d ????						; + video mode with no text (shift+:/;)
    112  3b6d ????						; + SID register $20-$26 edits all 3 oscillators at once
    113  3b6d ????						; + write help display routine
    114  3b6d ????						; + add help screen
    115  3b6d ????						; + reverse octave keys
    116  3b6d ????						; + add help for SID edit mode
    117  3b6d ????						; + redo hex editor piano KB layout
    118  3b6d ????						; + save SID edits
    119  3b6d ????						; + added "COPYING TO RAM" text when RAM copy is on
    120  3b6d ????						; - - - - - - - - - - - - - -
    121  3b6d ????						; 1.2.1
    122  3b6d ????						; + pitch fix for PAL
    123  3b6d ????						; + autodetection for PAL/NTSC
    124  3b6d ????						; - - - - - - - - - - - - - -
    125  3b6d ????						; 1.2.0
    126  3b6d ????						; + filter adjustment for SID Symphony
    127  3b6d ????						; - - - - - - - - - - - - - -
    128  3b6d ????						; 1.1 RELEASE
    129  3b6d ????						; + added SID HEX editor
    130  3b6d ????						; + changed tuning keys to avoid accidentally changing the tuning
    131  3b6d ????						; + added ability to turn the SID filter on and off
    132  3b6d ????						; - - - - - - - - - - - - - -
    133  3b6d ????						; 1.0 RELEASE
    134  3b6d ????						; + first official release
    135  3b6d ????						;-----------------------------------------------------
    136  3b6d ????
    137  3b6d ????
    138  3b6d ????						;-----------------------------------------------------
    139  3b6d ????						; FUTURE TODO LIST:
    140  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    141  3b6d ????						; - make port modes respond to pitch wheel
    142  3b6d ????						; - figure out why pulse LFO is so slow
    143  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    144  3b6d ????						; - fix patch saver issue where mode and FX are sometimes not saved
    145  3b6d ????						; - bug is bypassed, but figure out why showScreen messes up the filter setting
    146  3b6d ????						; - figure out why portamento is slower going down than up
    147  3b6d ????						; - make (IRQ) detector that works with VICE?
    148  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    149  3b6d ????						; - make envelope reset on every new note in mono modes
    150  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    151  3b6d ????						; - automatically relocate SID when using Kerberos
    152  3b6d ????						; - move video settings keys to a less used location?
    153  3b6d ????						; - add more FX modes
    154  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    155  3b6d ????						; - add some of Gert's mixed waveform sounds
    156  3b6d ????						; - add a button that resets all settings and turns video on
    157  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    158  3b6d ????						; - automatically turn off paddle when MIDI mod wheel data is received
    159  3b6d ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    160  3b6d ????						; - 'O' key specifically may be out of tune
    161  3b6d ????						; - - - - - - - - - - - - - - -
    162  3b6d ????						; - consider adding per-patch filter on/off/disabled setting
    163  3b6d ????						; - midi trigger to turn off/on omni
    164  3b6d ????						; - - - - - - - - - - - - - - -
    165  3b6d ????						; - make rising mod not drop
    166  3b6d ????						; - wire up pwModValue from functions
    167  3b6d ????						; - wire up pwSetValue from midi and paddle
    168  3b6d ????						; - create filter and PW setter that runs every frame
    169  3b6d ????						; - - - - - - - - - - - - - - -
    170  3b6d ????						; - have mono-stack check to make sure notes aren't too low or too high
    171  3b6d ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    172  3b6d ????						; - create system that cycles which spots are favored for new empty or replacement notes
    173  3b6d ????						; - - - - - - - - - - - - - - -
    174  3b6d ????						; - auto-detect secondary SID
    175  3b6d ????						; - automatic setup for Kerberos MIDI
    176  3b6d ????						; - - - - - - - - - - - - - - -
    177  3b6d ????						; - fix note off bug with drum machine?
    178  3b6d ????						; - - - - - - - - - - - - - - -
    179  3b6d ????						; -- show held modifier keys
    180  3b6d ????						; - link SID memory to a controller block
    181  3b6d ????						; - make fifths buttons preserve the portamento setting
    182  3b6d ????						; - - - - - - - - - - - - - - -
    183  3b6d ????						; - new intervals other than 5ths
    184  3b6d ????						; - better mute/noise reduction
    185  3b6d ????						; - alternate set of keybindings for use without the keyboard overlay
    186  3b6d ????						; - - - - - - - - - - - - - - -
    187  3b6d ????						; - more patches
    188  3b6d ????						; - paddle 2 auto-on
    189  3b6d ????						;--------------------------
    190  3b6d ????						; - add echo long/med/short
    191  3b6d ????						; - more extreme variations in video mode
    192  3b6d ????						; - noise reduction
    193  3b6d ????						; - Envelope -> Filter Cutoff
    194  3b6d ????						; - filter type
    195  3b6d ????						; - ring modulation
    196  3b6d ????						; - sync
    197  3b6d ????						; - Whammy speed control
    198  3b6d ????						;--------------------------
    199  3b6d ????						; - filter Q
    200  3b6d ????						; - save patches to disk
    201  3b6d ????						;--------------------------
    202  3b6d ????						;--------------------------
    203  3b6d ????
    204  3b6d ????
    205  3b6d ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    206  3b6d ????						;# MEMORY MAP
    207  3b6d ????						;#
    208  3b6d ????						;# $0800-$3800 Program and data
    209  3b6d ????						;# $7000-$7200 Variables and buffers (512 bytes)
    210  3b6d ????						;# $7F00-$7FFF MIDI ring buffer
    211  3b6d ????						;#
    212  3b6d ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    213  3b6d ????
    214  3b6d ????
    215  3b6d ????
    216  3b6d ????
    217  3b6d ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    218  3b6d ????				      processor	6502
    219  3b6d ????
    220  3b6d ????
    221  3b6d ????						;**********************************************************
    222  3b6d ????						;**********************************************************
    223  3b6d ????						; PROGRAM CONFIGURATION SWITCHES
    224  3b6d ????						;**********************************************************
    225  3b6d ????						;**********************************************************
    226  3b6d ????
    227  3b6d ????
    228  3b6d ????
    229  3b6d ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running (this should always be enabled)
    230  3b6d ????
    231  3b6d ????				      IF	DEVICE_CONFIG=KERBEROS
    232  3b6d ????	       d4 20	   SID2       equ	$D420
    233  3b6d ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    234  3b6d ????				      ENDIF
    235  3b6d ????			  -	      IF	DEVICE_CONFIG=EMU
    236  3b6d ????			  -SID2       equ	$D420
    237  3b6d ????			  -ENABLE_MIDI_COMMANDS equ	0
    238  3b6d ????				      ENDIF
    239  3b6d ????			  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    240  3b6d ????			  -SID2       equ	$DE00
    241  3b6d ????			  -ENABLE_MIDI_COMMANDS equ	0
    242  3b6d ????				      ENDIF
    243  3b6d ????			  -	      IF	DEVICE_CONFIG=DEFAULT
    244  3b6d ????			  -SID2       equ	$DF00
    245  3b6d ????			  -ENABLE_MIDI_COMMANDS equ	1
    246  3b6d ????				      ENDIF
    247  3b6d ????
    248  3b6d ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    249  3b6d ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    250  3b6d ????
    251  3b6d ????						;ENABLE_MIDI_COMMANDS equ 1
    252  3b6d ????
    253  3b6d ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    254  3b6d ????	       00 00	   DEBUG_DISPLAY equ	0
    255  3b6d ????	       00 00	   OFFSET_CONTROLLERS equ	0
    256  3b6d ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    257  3b6d ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    258  3b6d ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    259  3b6d ????
    260  3b6d ????
    261  3b6d ????						;**********************************************************
    262  3b6d ????						;**********************************************************
    263  3b6d ????						;**********************************************************
    264  3b6d ????
    265  3b6d ????						; *********************************************
    266  3b6d ????						; START OF PROGRAM IN MEMORY
    267  3b6d ????						; *********************************************
    268  3b6d ????
    269  3b6d ????						;==================================================
    270  3b6d ????						; load from disk as PRG with auto-run
    271  3b6d ????				      IF	MODE=DISK
    272  3b6d ????	       07 ff	   BASEADDR   equ	2047	; 2047 = $7FF
    273  07ff					      org	BASEADDR	; the beginning of the BASIC program area
    274  07ff
    275  07ff							; disk load location
    276  07ff		       01 08		      byte.b	$01,$08
    277  0801							; BASIC program to call the cynthcart machine code...
    278  0801							; 10 SYS 2061
    279  0801		       0b 08 0a 00*	      byte.b	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    280  080d							; next effective address after this is 2061 / $80D
    281  080d					      ENDIF
    282  080d
    283  080d							;==================================================
    284  080d							; straight cart ROM
    285  080d				  -	      IF	MODE=CART_OBSOLETE
    286  080d				  -BASEADDR   equ	$8000
    287  080d				  -	      org	BASEADDR
    288  080d				  -	      word	Startup
    289  080d				  -	      word	Startup
    290  080d				  -			; 5 byte cartridge startup code
    291  080d				  -	      byte	$C3, $C2, $CD, $38, $30
    292  080d					      ENDIF
    293  080d
    294  080d							;==================================================
    295  080d							; load from RAM, requires wrapper to load into RAM (used for compressed version)
    296  080d				  -	      IF	MODE=RAM
    297  080d				  -BASEADDR   equ	$3000
    298  080d				  -			;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    299  080d				  -	      org	BASEADDR
    300  080d				  -			;byte $00,$50 ; DEBUG SETUP AS PRG
    301  080d					      ENDIF
    302  080d
    303  080d							;==================================================
    304  080d							; to replace BASIC ROM (NO LONGER SUPPORTED)
    305  080d				  -	      IF	MODE=KERNEL_OBSOLETE
    306  080d				  -BASEADDR   equ	$8000
    307  080d				  -	      org	BASEADDR
    308  080d				  -	      word	$E394	; RESET
    309  080d				  -	      word	$E37B	; Warm Start
    310  080d					      ENDIF
    311  080d
    312  080d							;---------------------------------------
    313  080d							; variables and constants here
    314  080d							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  080d					      include	cynth_vars.asm
      1  080d							; *********************************************
      2  080d							; Constants
      3  080d							; *********************************************
      4  080d
      5  080d							;KEYTIME equ 128
      6  080d							;KEYTIME equ 64
      7  080d		       00 28	   KEYTIME    equ	40
      8  080d
      9  080d		       00 e0	   REL_SHORT  equ	$E0
     10  080d		       00 e9	   REL_MED    equ	$E9
     11  080d		       00 ee	   REL_LONG   equ	$EE
     12  080d
     13  080d		       00 00	   ATK_SHORT  equ	$00
     14  080d		       00 90	   ATK_MED    equ	$90
     15  080d		       00 e0	   ATK_LONG   equ	$E0
     16  080d
     17  080d
     18  080d		       00 00	   VOLOFF     equ	$00
     19  080d		       00 07	   VOLLOW     equ	$07
     20  080d		       00 0b	   VOLMED     equ	$0B
     21  080d		       00 0f	   VOLHIGH    equ	$0F
     22  080d
     23  080d		       00 c5	   CURRENTKEY equ	197
     24  080d
     25  080d		       d0 20	   BACK_COLOR equ	53280
     26  080d		       d0 21	   BORD_COLOR equ	53281
     27  080d
     28  080d		       d4 00	   SID1       equ	$D400
     29  080d
     30  080d
     31  080d							;SID2 equ $DEE0
     32  080d
     33  080d		       00 04	   SID2OFFSET equ	4
     34  080d
     35  080d		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  080d
     37  080d		       00 00	   SV1FL      equ	$00
     38  080d		       00 01	   SV1FH      equ	$01
     39  080d		       00 02	   SV1PWL     equ	$02
     40  080d		       00 03	   SV1PWH     equ	$03
     41  080d		       00 04	   SV1WAVE    equ	$04
     42  080d		       00 05	   SV1AD      equ	$05
     43  080d		       00 06	   SV1SR      equ	$06
     44  080d
     45  080d		       00 07	   SV2FL      equ	$07
     46  080d		       00 08	   SV2FH      equ	$08
     47  080d		       00 09	   SV2PWL     equ	$09
     48  080d		       00 0a	   SV2PWH     equ	$0A
     49  080d		       00 0b	   SV2WAVE    equ	$0B
     50  080d		       00 0c	   SV2AD      equ	$0C
     51  080d		       00 0d	   SV2SR      equ	$0D
     52  080d
     53  080d		       00 0e	   SV3FL      equ	$0E
     54  080d		       00 0f	   SV3FH      equ	$0F
     55  080d		       00 10	   SV3PWL     equ	$10
     56  080d		       00 11	   SV3PWH     equ	$11
     57  080d		       00 12	   SV3WAVE    equ	$12
     58  080d		       00 13	   SV3AD      equ	$13
     59  080d		       00 14	   SV3SR      equ	$14
     60  080d
     61  080d		       00 15	   SFILTL     equ	$15
     62  080d		       00 16	   SFILTH     equ	$16
     63  080d		       00 17	   SFILTC     equ	$17
     64  080d		       00 18	   SVOLMODE   equ	$18
     65  080d
     66  080d		       00 19	   SPAD1      equ	$19
     67  080d		       00 1a	   SPAD2      equ	$1A
     68  080d
     69  080d		       00 1b	   SRAND      equ	$1B
     70  080d
     71  080d		       dc 00	   PortA      equ	$dc00
     72  080d		       dc 02	   Ciddra     equ	$dc02
     73  080d
     74  080d
     75  080d							; *********************************************
     76  080d							; RAM Variables
     77  080d							; *********************************************
     78  080d
     79  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  080d							; ZERO PAGE
     81  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  080d
     83  080d							; FROM SORTING ROUTINE
     84  080d		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  080d		       01 22	   nval       =	$122	;set by calling program
     86  080d		       01 25	   work1      =	$125	;3 bytes used as working area
     87  080d		       01 26	   work2      =	$126
     88  080d		       01 27	   work3      =	$127
     89  080d
     90  080d							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  080d							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  080d							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  080d							;WORK2  = $34
     94  080d							;WORK3  = $35
     95  080d
     96  080d							; CYNTHCART
     97  080d		       00 22	   tunePtrL   equ	34	;2 bytes
     98  080d		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  080d		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  080d		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  080d
    102  080d		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  080d		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  080d
    105  080d		       00 2f	   helpReadPointerL equ	47
    106  080d		       00 30	   helpReadPointerM equ	48
    107  080d		       00 31	   helpWritePointerL equ	49
    108  080d		       00 32	   helpWritePointerM equ	50
    109  080d		       00 33	   helpColorPointerL equ	51
    110  080d		       00 34	   helpColorPointerM equ	52
    111  080d
    112  080d		       00 35	   portPtrL   equ	53	;2 bytes
    113  080d		       00 47	   portPtrH   equ	71	;2 bytes
    114  080d
    115  080d		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  080d		       00 c3	   keyPtrH    equ	195
    117  080d
    118  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  080d							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  080d							; private addresses ======
    121  080d		       00 64	   midiControl equ	$64	; $64 = 100
    122  080d		       00 66	   midiStatus =	$66	; 102
    123  080d		       00 68	   midiTx     =	$68	;104
    124  080d		       00 6a	   midiRx     =	$6a	;106
    125  080d		       00 6f	   keyTestIndex =	$6f	; 111
    126  080d		       00 70	   keyPressedIntern =	$70	; 112
    127  080d		       00 72	   shiftPressed =	$72	; 114
    128  080d							; public addresses ======
    129  080d		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  080d		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  080d		       00 6e	   midiInterfaceType =	$6e	;110
    132  080d		       00 71	   keyPressed =	$71	; 113
    133  080d							; this module ======
    134  080d		       00 59	   midiMessage equ	$59	; 95
    135  080d		       00 5a	   lastWaveform equ	$5a	; 90
    136  080d							; - - - - - - - - - - - - - -
    137  080d							; - - - - - - - - - - - - - -
    138  080d							; Non-zero page
    139  080d		       7f 00	   midiRingbuffer =	$7F00
    140  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  080d
    142  080d							;-------------------------------------
    143  080d
    144  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  080d							; NON-ZERO PAGE ($7000-$7FFF)
    146  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  080d
    148  080d		       70 00	   Trem       equ	$7000
    149  080d
    150  080d		       70 02	   FrameH     equ	$7002
    151  080d		       70 03	   Frame      equ	$7003
    152  080d
    153  080d		       70 04	   EchoPtr    equ	$7004
    154  080d		       70 05	   EchoCur    equ	$7005
    155  080d
    156  080d		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  080d
    158  080d		       70 07	   MagicVoice equ	$7007
    159  080d
    160  080d		       70 08	   LastKey    equ	$7008
    161  080d
    162  080d		       70 09	   Button     equ	$7009
    163  080d
    164  080d		       70 0a	   LFO	      equ	$700A
    165  080d
    166  080d		       70 0b	   PatchTune  equ	$700B
    167  080d
    168  080d		       70 0c	   temp       equ	$700C
    169  080d
    170  080d							;KeyA	equ $700D
    171  080d							;KeyB	equ $700E
    172  080d							;KeyC	equ $700F
    173  080d
    174  080d							;lastKeyA equ $7010
    175  080d							;lastKeyB equ $7011
    176  080d							;lastKeyC equ $7012
    177  080d
    178  080d		       70 13	   portDirA   equ	$7013
    179  080d		       70 14	   portDirB   equ	$7014
    180  080d		       70 15	   portDirC   equ	$7015
    181  080d
    182  080d		       70 16	   pitchLA    equ	$7016
    183  080d		       70 17	   pitchLB    equ	$7017
    184  080d		       70 18	   pitchLC    equ	$7018
    185  080d
    186  080d		       70 19	   pitchHA    equ	$7019
    187  080d		       70 1a	   pitchHB    equ	$701A
    188  080d		       70 1b	   pitchHC    equ	$701B
    189  080d
    190  080d		       70 1c	   volume     equ	$701C
    191  080d
    192  080d							; soundModes
    193  080d							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  080d		       00 00	   MODE_NORMAL equ	$00
    195  080d		       00 08	   MODE_6CHAN equ	$08
    196  080d		       00 10	   MODE_PORT1 equ	$10
    197  080d		       00 11	   MODE_PORT2 equ	$11
    198  080d		       00 12	   MODE_PORT3 equ	$12
    199  080d		       00 20	   MODE_MONO1 equ	$20
    200  080d		       00 21	   MODE_MONO2 equ	$21
    201  080d		       00 31	   MODE_MONOPORT1 equ	$31
    202  080d		       00 32	   MODE_MONOPORT2 equ	$32
    203  080d		       00 40	   MODE_ARP1  equ	$40
    204  080d		       00 41	   MODE_ARP2  equ	$41
    205  080d		       00 42	   MODE_ARP3  equ	$42
    206  080d		       00 43	   MODE_ARP4  equ	$43
    207  080d		       00 44	   MODE_ARP5  equ	$44
    208  080d		       00 01	   MODE_5THS  equ	$01
    209  080d		       00 02	   MODE_5PORT equ	$02
    210  080d							;- - - - - - - - - - -
    211  080d
    212  080d		       00 10	   PORT_MASK  equ	$10
    213  080d		       00 20	   MONO_MASK  equ	$20
    214  080d		       00 40	   ARP_MASK   equ	$40
    215  080d		       00 08	   CHAN6_MASK equ	$08
    216  080d
    217  080d
    218  080d		       70 1d	   soundMode  equ	$701D
    219  080d		       70 1e	   arpSpeed   equ	$701E
    220  080d
    221  080d		       70 1f	   dispOn     equ	$701F
    222  080d
    223  080d		       70 20	   VICMode    equ	$7020
    224  080d
    225  080d		       70 21	   patPtr     equ	$7021
    226  080d
    227  080d		       70 22	   keyOffset  equ	$7022
    228  080d
    229  080d		       70 24	   volModeRAM equ	$7024
    230  080d
    231  080d		       70 25	   shiftL1    equ	$7025
    232  080d		       70 26	   shiftH1    equ	$7026
    233  080d		       70 27	   shiftL2    equ	$7027
    234  080d		       70 28	   shiftH2    equ	$7028
    235  080d
    236  080d							;$7025 - $7028 free
    237  080d
    238  080d		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    239  080d
    240  080d		       70 30	   WaveType   equ	$7030
    241  080d		       70 37	   WaveType2  equ	$7037
    242  080d		       70 3e	   WaveType3  equ	$703E
    243  080d
    244  080d		       70 3f	   LFObend    equ	$703F
    245  080d		       70 40	   bender     equ	$7040
    246  080d
    247  080d		       70 43	   pitchTmpL  equ	$7043
    248  080d		       70 44	   pitchTmpH  equ	$7044
    249  080d
    250  080d		       70 45	   videoMode  equ	$7045
    251  080d
    252  080d		       70 46	   textTemp   equ	$7046
    253  080d
    254  080d		       70 47	   patchSetY  equ	$7047
    255  080d
    256  080d		       70 48	   LFORate    equ	$7048
    257  080d		       70 49	   LFODepth   equ	$7049
    258  080d
    259  080d		       70 50	   videoModeNum equ	$7050
    260  080d
    261  080d		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    262  080d		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    263  080d
    264  080d		       70 57	   filter     equ	$7057
    265  080d
    266  080d		       70 58	   keyTimer   equ	$7058
    267  080d
    268  080d		       70 59	   bendSpd    equ	$7059
    269  080d
    270  080d		       70 5a	   SIDeditAddr equ	$705A
    271  080d		       70 5b	   SIDeditValue equ	$705B
    272  080d
    273  080d		       70 5c	   filterDisable equ	$705C
    274  080d
    275  080d		       70 5d	   lastKey    equ	$705D
    276  080d
    277  080d		       70 60	   hexKeyMode equ	$7060
    278  080d
    279  080d		       70 61	   NTSCmode   equ	$7061
    280  080d
    281  080d		       70 62	   temp16L    equ	$7062
    282  080d		       70 63	   temp16H    equ	$7063
    283  080d
    284  080d		       70 64	   saveX      equ	$7064
    285  080d
    286  080d							;EchoBuffer	equ 1184 ; 256 bytes
    287  080d
    288  080d		       70 65	   keyTemp    equ	$7065
    289  080d
    290  080d		       70 66	   lastOsc    equ	$7066
    291  080d
    292  080d		       70 67	   fullScreenMode equ	$7067
    293  080d
    294  080d		       70 68	   videoText  equ	$7068
    295  080d
    296  080d		       70 69	   attack     equ	$7069
    297  080d		       70 6a	   release    equ	$706A
    298  080d		       70 6b	   octave     equ	$706B
    299  080d		       70 6c	   filterStatus equ	$706C
    300  080d
    301  080d		       70 6d	   helpColor  equ	$706D
    302  080d		       70 6e	   helpYIn    equ	$706E
    303  080d		       70 6f	   helpYOut   equ	$706F
    304  080d
    305  080d		       70 70	   helpMode   equ	$7070
    306  080d
    307  080d		       70 71	   tuneSetting equ	$7071
    308  080d
    309  080d		       70 72	   hexDispTemp equ	$7072
    310  080d
    311  080d		       70 73	   sidTemp1   equ	$7073
    312  080d		       70 74	   sidTemp2   equ	$7074
    313  080d
    314  080d		       70 75	   customPatchSaved equ	$7075
    315  080d
    316  080d		       70 76	   paddleTop  equ	$7076
    317  080d		       70 77	   paddleBottom equ	$7077
    318  080d
    319  080d		       70 78	   paddleX    equ	$7078
    320  080d		       70 79	   paddleY    equ	$7079
    321  080d
    322  080d		       70 7a	   paddle2    equ	$707A
    323  080d		       70 7b	   lastPad2   equ	$707B
    324  080d
    325  080d		       70 7c	   debugOffset equ	$707C
    326  080d		       70 7d	   savedMidiStatus equ	$707D
    327  080d		       70 7e	   firstDataByte equ	$707E
    328  080d		       70 7f	   tempVelocity equ	$707F
    329  080d		       70 80	   bufferSize equ	$7080
    330  080d		       70 81	   noteTempA  equ	$7081
    331  080d		       70 82	   noteTempB  equ	$7082
    332  080d
    333  080d		       70 83	   benderAutoreset equ	$7083
    334  080d		       70 84	   polyphony  equ	$7084
    335  080d
    336  080d		       70 85	   arpOffset  equ	$7085
    337  080d
    338  080d		       70 86	   fxType     equ	$7086
    339  080d		       70 87	   modValue1  equ	$7087
    340  080d		       70 89	   modDirection equ	$7089
    341  080d		       70 8a	   modCounter equ	$708A
    342  080d		       70 8b	   modLFOMinValue equ	$708B
    343  080d		       70 8a	   modLFOMaxValue equ	$708A
    344  080d
    345  080d		       00 00	   MOD_NONE   equ	0
    346  080d		       00 01	   MOD_FILT_LFO equ	1
    347  080d		       00 02	   MOD_FILT_ENV equ	2
    348  080d		       00 03	   MOD_FILT3  equ	3
    349  080d		       00 04	   MOD_FILT4  equ	4
    350  080d		       00 05	   MOD_FILT5  equ	5
    351  080d		       00 06	   MOD_PW_LFO equ	6
    352  080d		       00 07	   MOD_PW2    equ	7
    353  080d
    354  080d		       70 8b	   noteOffCount equ	$708B
    355  080d		       70 8c	   noteOnCount equ	$708C
    356  080d
    357  080d		       70 8d	   hexDispColor equ	$708D
    358  080d
    359  080d		       70 8e	   midiBendValue equ	$708E
    360  080d
    361  080d		       70 8f	   temp2      equ	$708F
    362  080d
    363  080d
    364  080d		       70 97	   resonance  equ	$7097
    365  080d
    366  080d		       70 98	   resetValue equ	$7098
    367  080d
    368  080d		       70 99	   lastNoteCount equ	$7099
    369  080d		       70 9a	   lastNote   equ	$709A
    370  080d
    371  080d		       70 9b	   keyCount   equ	$709B
    372  080d
    373  080d		       70 9c	   filterModValue equ	$709C
    374  080d		       70 9d	   filterSetValue equ	$709D
    375  080d		       70 9e	   pwModValue equ	$709E
    376  080d		       70 9f	   pwSetValue equ	$709F
    377  080d
    378  080d		       70 f0	   midiTuning equ	$70F0
    379  080d		       70 f1	   benderTuning equ	$70F1
    380  080d		       70 f2	   lfoTuning  equ	$70F2
    381  080d		       70 f3	   systemTuning equ	$70F3
    382  080d		       70 f4	   masterTuning equ	$70F4
    383  080d		       70 f5	   finalTuning equ	$70F5
    384  080d		       70 f6	   noteShift  equ	$70F6
    385  080d
    386  080d		       70 f7	   midiMode   equ	$70F7
    387  080d
    388  080d
    389  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    390  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  080d							; BUFFERS
    392  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    393  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    394  080d
    395  080d		       00 08	   NOTE_BUF_SIZE equ	8
    396  080d		       70 a0	   noteNumArray equ	$70A0
    397  080d		       70 b0	   playNoteArray equ	$70B0
    398  080d
    399  080d							;noteVelArray equ $70C0
    400  080d
    401  080d		       70 d0	   kbBuffer   equ	$70D0
    402  080d		       70 e0	   lastKbBuffer equ	$70E0
    403  080d
    404  080d		       70 e1	   tempA      equ	$70E1
    405  080d		       70 e2	   tempX      equ	$70E2
    406  080d		       70 e3	   tempY      equ	$70E3
    407  080d
    408  080d
    409  080d							;-----------------------------------------------
    410  080d
    411  080d							; SID editor custom preset data...
    412  080d		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    413  080d
    414  080d		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    415  080d		       71 41	   savePaddle equ	$7141
    416  080d		       71 42	   saveOctave equ	$7142
    417  080d		       71 43	   saveSoundMode equ	$7143
    418  080d		       71 43	   saveFXType equ	$7143
    419  080d		       71 44	   saveArpSpeed equ	$7144
    420  080d		       71 46	   saveLFODepth equ	$7146
    421  080d		       71 47	   saveLFORate equ	$7147
    422  080d		       71 48	   saveVolume equ	$7148
    423  080d		       71 49	   saveVolMode equ	$7149
    424  080d		       71 4a	   saveFilter equ	$714A
    425  080d
    426  080d							;--------------------------------------------------
    427  080d
    428  080d		       71 50	   midiEnabled equ	$7150
    429  080d		       71 51	   dummyMidiIncrementer equ	$7151
    430  080d
    431  080d		       70 52	   sidEditSaveTemp1 equ	$7052
    432  080d		       70 54	   sidEditSaveTemp5 equ	$7054
    433  080d
    434  080d							;pulseModulationValue equ $7056
    435  080d							;pulseMidiValue equ $7057
------- FILE cynthcart2.0.1.asm
    316  080d
    317  080d
    318  080d							; *********************************************
    319  080d							; Start of program
    320  080d							; *********************************************
    321  080d				   Startup
    322  080d
    323  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    324  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    329  080d							; switch to (upper?) lowercase mode
    330  080d		       a9 17		      lda	#23
    331  080f		       8d 18 d0 	      sta	$d018
    332  0812
    333  0812		       a9 c1		      lda	#193
    334  0814		       8d 18 03 	      sta	792
    335  0817
    336  0817							; clear screen and show info
    337  0817							;	ldx #0
    338  0817							;	stx $d020
    339  0817							;	stx $d021
    340  0817							;loop1:	; clear screen...
    341  0817							;	lda #32
    342  0817							;	sta $0400,x
    343  0817							;	sta $0400+250,x
    344  0817							;	sta $0400+500,x
    345  0817							;	sta $0400+750,x
    346  0817							;	lda #14
    347  0817							;	sta $d800,x
    348  0817							;	sta $d800+250,x
    349  0817							;	sta $d800+500,x
    350  0817							;	sta $d800+750,x
    351  0817							;	inx
    352  0817							;	cpx #250
    353  0817							;	bne loop1
    354  0817							;	ldx #0
    355  0817							;loop2:	; show info...
    356  0817							;	lda #1
    357  0817							;	sta $0400+10*40,x
    358  0817							;	inx
    359  0817							;	cpx #80
    360  0817							;	bne loop2
    361  0817
    362  0817							; init SID...
    363  0817		       a9 00		      lda	#0
    364  0819		       a2 00		      ldx	#0
    365  081b		       9d 00 d4    initSid    sta	$d400,x
    366  081e		       e8		      inx
    367  081f		       e0 19		      cpx	#25
    368  0821		       d0 f8		      bne	initSid
    369  0823		       a9 0f		      lda	#15
    370  0825		       8d 18 d4 	      sta	$d418
    371  0828		       a9 01		      lda	#1
    372  082a		       8d 03 d4 	      sta	$d403
    373  082d
    374  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    375  082d							;lock: jmp lock
    376  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    377  082d
    378  082d					      IF	ENABLE_MIDI_COMMANDS=1
    379  082d		       20 fa 39 	      jsr	midiDetect	; AUTODETECT MIDI IF NOT KERBEROS BUILD
    380  0830				  -	      ELSE
    381  0830				  -	      lda	#0
    382  0830					      ENDIF
    383  0830		       8d 50 71 	      sta	midiEnabled
    384  0833		       20 72 3a 	      jsr	midiInit
    385  0836							;ENDIF
    386  0836
    387  0836							; Set default hex color
    388  0836		       a9 0e		      lda	#$E
    389  0838		       8d 8d 70 	      sta	hexDispColor
    390  083b
    391  083b		       20 08 0b 	      jsr	disableRestoreKey
    392  083e
    393  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    394  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    395  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    396  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    397  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    398  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    399  083e
    400  083e				   skipTest
    401  083e
    402  083e							; Copy program into RAM if running from cartridge...
    403  083e				  -	      IF	MODE=CART_OBSOLETE
    404  083e				  -	      ldx	#0
    405  083e				  -RAMTextCopy
    406  083e				  -	      lda	RAMText,x
    407  083e				  -	      beq	quitRAMTextCopy
    408  083e				  -	      cmp	#64
    409  083e				  -	      bmi	showSpaceRAM
    410  083e				  -	      sbc	#64
    411  083e				  -showSpaceRAM
    412  083e				  -	      sta	1024,x
    413  083e				  -	      inx
    414  083e				  -	      jmp	RAMTextCopy
    415  083e				  -RAMText
    416  083e				  -	      byte	"COPYING TO RAM...",0
    417  083e				  -quitRAMTextCopy
    418  083e				  -			;------------
    419  083e				  -	      ldx	#8*4
    420  083e				  -	      lda	#<copyStart
    421  083e				  -	      sta	copyPtrS
    422  083e				  -	      lda	#>copyStart
    423  083e				  -	      sta	copyPtrS+1
    424  083e				  -	      lda	#<ramStart
    425  083e				  -	      sta	copyPtrD
    426  083e				  -	      lda	#>ramStart
    427  083e				  -	      sta	copyPtrD+1
    428  083e				  -ramCopy1
    429  083e				  -	      ldy	#0
    430  083e				  -ramCopy2
    431  083e				  -	      lda	(copyPtrS),y
    432  083e				  -	      sta	(copyPtrD),y
    433  083e				  -	      dey
    434  083e				  -	      bne	ramCopy2
    435  083e				  -	      inc	copyPtrS+1
    436  083e				  -	      inc	copyPtrD+1
    437  083e				  -	      dex
    438  083e				  -	      bne	ramCopy1
    439  083e				  -	      jmp	ramStart
    440  083e				  -copyStart
    441  083e				  -	      rorg	$3000	; RAM destination
    442  083e				  -ramStart
    443  083e					      ENDIF
    444  083e
    445  083e				  -	      IF	MODE=CART_OBSOLETE
    446  083e				  -			; System Startup Stuff
    447  083e				  -			; (not needed if starting from disk)
    448  083e				  -	      sei
    449  083e				  -	      jsr	$FF84	; initialize I/O devices
    450  083e				  -	      jsr	$FF87	; initalise memory pointers
    451  083e				  -	      jsr	$FF8A	; restore I/O vectors
    452  083e				  -	      jsr	$FF81	; initalise screen and keyboard
    453  083e				  -	      cli
    454  083e					      ENDIF
    455  083e
    456  083e				  -	      IF	MODE=KERNEL_OBSOLETE
    457  083e				  -	      org	$A483
    458  083e					      ENDIF
    459  083e
    460  083e		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    461  0841		       29 ef		      AND	#$EF	; badlines
    462  0843		       8d 11 d0 	      STA	$D011
    463  0846
    464  0846							; Disable RESTORE key
    465  0846		       a9 c1		      lda	#193
    466  0848		       8d 18 03 	      sta	792
    467  084b
    468  084b		       a9 00		      lda	#0
    469  084d		       8d 20 d0 	      sta	BACK_COLOR
    470  0850		       8d 21 d0 	      sta	BORD_COLOR
    471  0853
    472  0853							;*****************************
    473  0853							; Detect PAL/NTSC
    474  0853							;*****************************
    475  0853							;palntsc:
    476  0853		       78		      sei		; disable interrupts
    477  0854				   wait
    478  0854		       ad 12 d0 	      lda	$d012
    479  0857		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    480  0859				   wait1
    481  0859		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    482  085c		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    483  085e				   wait2
    484  085e		       a0 00		      ldy	#$00
    485  0860				   synch1
    486  0860		       ad 12 d0 	      lda	$d012
    487  0863		       c9 37		      cmp	#$37	; top PAL rasterline
    488  0865		       d0 f9		      bne	synch1
    489  0867		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    490  086a				   synch2
    491  086a		       cd 12 d0 	      cmp	$d012
    492  086d		       f0 fb		      beq	synch2
    493  086f		       ad 12 d0 	      lda	$d012
    494  0872		       58		      cli		; enable interrupts
    495  0873
    496  0873		       8d 61 70 	      sta	NTSCmode
    497  0876
    498  0876
    499  0876
    500  0876
    501  0876							;****************************************************
    502  0876							; init screen and variables
    503  0876							;****************************************************
    504  0876		       a9 00		      lda	#0
    505  0878		       8d 97 70 	      sta	resonance
    506  087b		       8d 8c 70 	      sta	noteOnCount
    507  087e		       8d 8b 70 	      sta	noteOffCount
    508  0881		       20 fe 10 	      jsr	setFullScreenMode
    509  0884		       20 80 0a 	      jsr	variableInit
    510  0887		       20 f5 0b 	      jsr	displayInit
    511  088a
    512  088a							; Clear note buffer...
    513  088a		       a2 08		      ldx	#8
    514  088c		       a9 ff		      lda	#255
    515  088e				   clearBufferLoop
    516  088e		       ca		      dex
    517  088f		       9d a0 70 	      sta	noteNumArray,x
    518  0892							;sta noteAgeArray,x
    519  0892							;sta noteVelArray,x
    520  0892		       d0 fa		      bne	clearBufferLoop
    521  0894
    522  0894
    523  0894				  -	      IF	DEBUG_DISPLAY=1
    524  0894				  -	      ldx	#>debugOverlay	;low/MSB
    525  0894				  -	      ldy	#<debugOverlay	;high/LSB
    526  0894				  -	      jsr	displayPage
    527  0894					      ENDIF
    528  0894
    529  0894		       a9 00		      lda	#0
    530  0896		       a0 00		      ldy	#0
    531  0898		       20 aa 13 	      jsr	setPatch
    532  089b
    533  089b		       a9 00		      lda	#0
    534  089d		       8d f0 70 	      sta	midiTuning
    535  08a0
    536  08a0		       a9 ff		      lda	#$FF
    537  08a2		       20 04 12 	      jsr	setMidiMode
    538  08a5							;sta midiMode
    539  08a5
    540  08a5							;===========================================
    541  08a5							;===========================================
    542  08a5							;===========================================
    543  08a5							; Main Loop
    544  08a5							;===========================================
    545  08a5							;===========================================
    546  08a5							;===========================================
    547  08a5				   Loop
    548  08a5							; Increment frame counter
    549  08a5		       ee 03 70 	      inc	Frame
    550  08a8		       ad 03 70 	      lda	Frame
    551  08ab		       29 3f		      and	#%00111111
    552  08ad		       d0 03		      bne	SkipHFrame
    553  08af		       ee 02 70 	      inc	FrameH
    554  08b2				   SkipHFrame
    555  08b2
    556  08b2
    557  08b2		       20 f0 08 	      jsr	processLFO
    558  08b5		       20 78 0d 	      jsr	processFX
    559  08b8
    560  08b8					      IF	ENABLE_MIDI_COMMANDS=1
    561  08b8		       20 61 1c 	      jsr	processMIDI
    562  08bb					      ENDIF
    563  08bb
    564  08bb		       20 d6 1a 	      jsr	readKeyboard
    565  08be		       20 b2 09 	      jsr	processBender
    566  08c1		       20 07 15 	      jsr	processSoundDriver
    567  08c4		       20 ef 09 	      jsr	processPaddles
    568  08c7		       20 2e 0b 	      jsr	processVideoMode
    569  08ca		       20 d0 08 	      jsr	updateFilterAndPW
    570  08cd		       4c a5 08 	      jmp	Loop
    571  08d0							;-------- BOTTOM OF MAIN LOOP ---------------------------
    572  08d0							;--------------------------------------------------------
    573  08d0							;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
    574  08d0
    575  08d0				   updateFilterAndPW
    576  08d0		       ad 9c 70 	      lda	filterModValue
    577  08d3		       38		      sec
    578  08d4		       e9 7f		      sbc	#127
    579  08d6		       30 0a		      bmi	negativeFilterMod
    580  08d8							; Positive
    581  08d8		       6d 9d 70 	      adc	filterSetValue
    582  08db		       90 0f		      bcc	doSetFilter
    583  08dd		       a9 ff		      lda	#255
    584  08df		       4c ec 08 	      jmp	doSetFilter
    585  08e2
    586  08e2				   negativeFilterMod
    587  08e2							; Negative
    588  08e2		       6d 9d 70 	      adc	filterSetValue
    589  08e5		       b0 05		      bcs	doSetFilter
    590  08e7		       a9 00		      lda	#0
    591  08e9		       4c ec 08 	      jmp	doSetFilter
    592  08ec
    593  08ec							;and #$F0
    594  08ec				   doSetFilter
    595  08ec		       20 ef 12 	      jsr	setFilter
    596  08ef							; TODO: add PW setting
    597  08ef		       60		      rts
    598  08f0
    599  08f0
    600  08f0							;-------------------------------
    601  08f0							; LFO
    602  08f0							;-------------------------------
    603  08f0				   processLFO
    604  08f0							; Set current LFO modulation
    605  08f0							; into (pitch) shift variables
    606  08f0
    607  08f0							;---------------------------
    608  08f0							; get pitch bend from paddle2
    609  08f0		       ad 7a 70 	      lda	paddle2
    610  08f3		       c9 04		      cmp	#4	; is pitch bend mode on for paddle 2?
    611  08f5		       d0 09		      bne	noPadBend	; no -->
    612  08f7		       ad 79 70 	      lda	paddleY	; get paddles values
    613  08fa		       8d 40 70 	      sta	bender	; set as bender value
    614  08fd		       4c 00 09 	      jmp	skipZeroBend
    615  0900				   noPadBend
    616  0900							;lda #0
    617  0900							;sta bender
    618  0900				   skipZeroBend
    619  0900
    620  0900							;----------------------------
    621  0900							; get depth from paddle2
    622  0900		       ad 7a 70 	      lda	paddle2
    623  0903		       c9 03		      cmp	#3
    624  0905		       d0 0a		      bne	noPadLFO
    625  0907		       ad 79 70 	      lda	paddleY
    626  090a		       4a		      lsr
    627  090b		       4a		      lsr
    628  090c		       4a		      lsr
    629  090d		       a8		      tay
    630  090e		       4c 17 09 	      jmp	skipFixedLFODepth
    631  0911							;---------------------
    632  0911							; calculate LFO depth
    633  0911							; increases per octave
    634  0911				   noPadLFO
    635  0911		       ae 49 70 	      ldx	LFODepth
    636  0914		       bc e8 33 	      ldy	LFODepthArray,x
    637  0917				   skipFixedLFODepth
    638  0917		       ad 22 70 	      lda	keyOffset	; current octave offset
    639  091a		       c9 0c		      cmp	#12
    640  091c		       30 08		      bmi	endDepth
    641  091e		       c8		      iny
    642  091f		       c9 24		      cmp	#36
    643  0921		       d0 03		      bne	endDepth
    644  0923		       98		      tya
    645  0924		       0a		      asl
    646  0925		       a8		      tay
    647  0926				   endDepth		; y now contains the depth value
    648  0926
    649  0926
    650  0926							; figure out LFO position
    651  0926		       ad 02 70 	      lda	FrameH
    652  0929		       ae 48 70 	      ldx	LFORate
    653  092c		       f0 0e		      beq	LFOSkip
    654  092e		       ad 03 70 	      lda	Frame
    655  0931		       ca		      dex
    656  0932		       ca		      dex
    657  0933		       ca		      dex
    658  0934		       f0 06		      beq	LFOSkip
    659  0936		       4a		      lsr
    660  0937		       e8		      inx
    661  0938		       f0 02		      beq	LFOSkip
    662  093a		       4a		      lsr
    663  093b		       4a		      lsr
    664  093c				   LFOSkip
    665  093c		       4a		      lsr
    666  093d
    667  093d		       29 0f		      and	#$0F
    668  093f		       aa		      tax
    669  0940		       bd 0c 34 	      lda	LFOArrH,x
    670  0943		       8d 26 70 	      sta	shiftH1
    671  0946		       d0 10		      bne	negativeLFO
    672  0948
    673  0948		       18		      clc
    674  0949		       bd fc 33 	      lda	LFOArrL,x
    675  094c				   depthLoop
    676  094c		       7d fc 33 	      adc	LFOArrL,x
    677  094f		       88		      dey
    678  0950		       d0 fa		      bne	depthLoop
    679  0952		       8d 25 70 	      sta	shiftL1
    680  0955		       4c 6d 09 	      jmp	endLFO
    681  0958
    682  0958				   negativeLFO
    683  0958		       bd fc 33 	      lda	LFOArrL,x
    684  095b				   depthLoopN
    685  095b		       7d fc 33 	      adc	LFOArrL,x
    686  095e		       88		      dey
    687  095f		       d0 fa		      bne	depthLoopN
    688  0961		       8d 0c 70 	      sta	temp
    689  0964		       a9 ff		      lda	#255
    690  0966		       38		      sec
    691  0967		       ed 0c 70 	      sbc	temp
    692  096a		       8d 25 70 	      sta	shiftL1
    693  096d				   endLFO
    694  096d
    695  096d							; if depth=0 then cancel LFO
    696  096d		       ad 7a 70 	      lda	paddle2
    697  0970		       c9 03		      cmp	#3
    698  0972		       f0 0d		      beq	doLFO
    699  0974		       ad 49 70 	      lda	LFODepth
    700  0977		       d0 08		      bne	doLFO
    701  0979		       a9 00		      lda	#0
    702  097b		       8d 25 70 	      sta	shiftL1
    703  097e		       8d 26 70 	      sta	shiftH1
    704  0981				   doLFO
    705  0981
    706  0981		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    707  0984		       d0 05		      bne	showLFO
    708  0986		       ad 67 70 	      lda	fullScreenMode
    709  0989		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    710  098b							;--------
    711  098b							; Show it
    712  098b				   showLFO
    713  098b		       bd 1c 34 	      lda	LFOdisp,x
    714  098e		       aa		      tax
    715  098f		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    716  0991							;adc #10
    717  0991
    718  0991							;lda #160
    719  0991							;sta 1063,x
    720  0991		       9d ff d7 	      sta	55296-1,x
    721  0994
    722  0994							;clear the previous one
    723  0994							;lda #32
    724  0994		       a9 02		      lda	#CYNTHCART_COLOR
    725  0996							;sta 1064,x
    726  0996		       9d 00 d8 	      sta	55296+0,x
    727  0999		       e0 01		      cpx	#1
    728  099b		       f0 03		      beq	dontErase
    729  099d							;sta 1062,x
    730  099d		       9d fe d7 	      sta	55296-2,x
    731  09a0				   dontErase
    732  09a0
    733  09a0							; set up shift for second SID
    734  09a0							; chip, pitch a tad higher for
    735  09a0							; awesome chorus effect
    736  09a0		       18		      clc
    737  09a1		       ad 25 70 	      lda	shiftL1
    738  09a4		       69 04		      adc	#SID2OFFSET
    739  09a6		       8d 27 70 	      sta	shiftL2
    740  09a9		       ad 26 70 	      lda	shiftH1
    741  09ac		       69 00		      adc	#0
    742  09ae		       8d 28 70 	      sta	shiftH2
    743  09b1
    744  09b1							; LFO->filter
    745  09b1							;	lda shiftL1
    746  09b1							;	clc
    747  09b1							;	adc #128
    748  09b1							;	sta SID1+SFILTH
    749  09b1							;	sta SID2+SFILTH
    750  09b1
    751  09b1				   skipLFO
    752  09b1		       60		      rts
    753  09b2
    754  09b2
    755  09b2
    756  09b2
    757  09b2							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  09b2							; PROCESS BENDER
    759  09b2							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    760  09b2				   processBender
    761  09b2							; Update space-bar pitch bend...
    762  09b2		       ad 83 70 	      lda	benderAutoreset
    763  09b5		       f0 13		      beq	endBenderReset
    764  09b7		       ad 40 70 	      lda	bender
    765  09ba		       d0 08		      bne	doBenderReset
    766  09bc		       a9 00		      lda	#0
    767  09be		       8d 83 70 	      sta	benderAutoreset
    768  09c1		       4c ca 09 	      jmp	endBenderReset
    769  09c4				   doBenderReset
    770  09c4		       ce 40 70 	      dec	bender
    771  09c7		       ce 40 70 	      dec	bender
    772  09ca				   endBenderReset
    773  09ca
    774  09ca
    775  09ca							; Insert bender into LFO offset...
    776  09ca		       ad 25 70 	      lda	shiftL1
    777  09cd		       38		      sec
    778  09ce		       ed 40 70 	      sbc	bender
    779  09d1		       8d 25 70 	      sta	shiftL1
    780  09d4		       ad 26 70 	      lda	shiftH1
    781  09d7		       e9 00		      sbc	#0
    782  09d9		       8d 26 70 	      sta	shiftH1
    783  09dc
    784  09dc		       ad 27 70 	      lda	shiftL2
    785  09df		       38		      sec
    786  09e0		       ed 40 70 	      sbc	bender
    787  09e3		       8d 27 70 	      sta	shiftL2
    788  09e6		       ad 28 70 	      lda	shiftH2
    789  09e9		       e9 00		      sbc	#0
    790  09eb		       8d 28 70 	      sta	shiftH2
    791  09ee		       60		      rts
    792  09ef
    793  09ef							;DEBUG -- disable LFO/bender
    794  09ef							;	lda #0
    795  09ef							;	sta shiftL1
    796  09ef							;	sta shiftL2
    797  09ef							;	sta shiftH1
    798  09ef							;	sta shiftH2
    799  09ef
    800  09ef							;----------------------------
    801  09ef
    802  09ef
    803  09ef
    804  09ef
    805  09ef
    806  09ef							;-------------------------------------
    807  09ef							; Reading paddles from Prog Ref Guide
    808  09ef							;-------------------------------------
    809  09ef				   processPaddles
    810  09ef				   pdlrd0		; entry point for one pair (condition x 1st)
    811  09ef							; -  -  -  -  -
    812  09ef							;sei				; disable interrupts
    813  09ef		       a9 e0		      lda	#224	; disable keyboard scan
    814  09f1		       8d 02 dc 	      sta	56322	; disable keyboard scan
    815  09f4							; -  -  -  -  -
    816  09f4		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
    817  09f7		       8d 06 70 	      sta	Buffer	; save it away
    818  09fa		       a9 c0		      lda	#$c0
    819  09fc		       8d 02 dc 	      sta	Ciddra	; set port a for input
    820  09ff		       a9 80		      lda	#$80
    821  0a01
    822  0a01				   pdlrd1
    823  0a01		       8d 00 dc 	      sta	PortA	; address a pair of paddles
    824  0a04		       a0 80		      ldy	#$80	; wait a while
    825  0a06				   pdlrd2
    826  0a06		       ea		      nop
    827  0a07		       88		      dey
    828  0a08		       10 fc		      bpl	pdlrd2
    829  0a0a
    830  0a0a		       ae 19 d4 	      ldx	SID1+25	; get x value
    831  0a0d		       8e 78 70 	      stx	paddleX
    832  0a10		       ac 1a d4 	      ldy	SID1+26	; get y value
    833  0a13		       8c 79 70 	      sty	paddleY
    834  0a16
    835  0a16		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
    836  0a19		       09 50		      ora	#80	; make it the same as other pair
    837  0a1b		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
    838  0a1e
    839  0a1e		       ad 06 70 	      lda	Buffer
    840  0a21		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
    841  0a24							; -  -  -  -  -
    842  0a24							;cli			; enable interrupts
    843  0a24		       a9 ff		      lda	#255	; enable keyboard scan
    844  0a26		       8d 02 dc 	      sta	56322	; enable keyboard scan
    845  0a29							; -  -  -  -  -
    846  0a29
    847  0a29							;-------------------------------------
    848  0a29							; Auto paddle on - turn on paddle control if it's wiggled...
    849  0a29		       ad 29 70 	      lda	paddle
    850  0a2c		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
    851  0a2e		       e0 a0		      cpx	#160
    852  0a30		       90 05		      bcc	noPaddleTop
    853  0a32		       a9 01		      lda	#1
    854  0a34		       8d 76 70 	      sta	paddleTop
    855  0a37				   noPaddleTop
    856  0a37		       e0 60		      cpx	#96
    857  0a39		       b0 05		      bcs	noPaddleBottom
    858  0a3b		       a9 01		      lda	#1
    859  0a3d		       8d 77 70 	      sta	paddleBottom
    860  0a40				   noPaddleBottom
    861  0a40							;-----------
    862  0a40		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
    863  0a43		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
    864  0a45		       ad 77 70 	      lda	paddleBottom
    865  0a48		       f0 05		      beq	noPaddleAutoOn
    866  0a4a		       a9 01		      lda	#1	; turn paddle on
    867  0a4c		       20 3c 11 	      jsr	setPaddles
    868  0a4f				   noPaddleAutoOn
    869  0a4f
    870  0a4f							;-------------------------------------
    871  0a4f							; check to see if paddle control is on
    872  0a4f		       ad 29 70 	      lda	paddle
    873  0a52		       f0 04		      beq	processPaddle2
    874  0a54
    875  0a54							; paddle1 -> filter
    876  0a54		       8a		      txa
    877  0a55		       8d 9d 70 	      sta	filterSetValue
    878  0a58							;jsr setFilterFromA
    879  0a58
    880  0a58
    881  0a58							;sta SID1+SFILTH
    882  0a58							;sta sidData+SFILTH
    883  0a58							;clc
    884  0a58							;adc #SID_SYMPHONY_FILTER_OFFSET
    885  0a58							;bcc noPaddleRoll
    886  0a58							;lda #255
    887  0a58							;noPaddleRoll:
    888  0a58							;sta SID2+SFILTH
    889  0a58							;noPaddleControl
    890  0a58
    891  0a58							;-------------------------------------
    892  0a58							; paddle 2
    893  0a58
    894  0a58							;	paddle 2 -> Pulse Width
    895  0a58				   processPaddle2
    896  0a58		       ad 7a 70 	      lda	paddle2
    897  0a5b		       c9 01		      cmp	#1
    898  0a5d		       d0 15		      bne	skipPW
    899  0a5f		       ad 79 70 	      lda	paddleY
    900  0a62		       c9 f5		      cmp	#245	; check for top limit (= no sound)
    901  0a64		       90 05		      bcc	notPTop
    902  0a66		       a9 f5		      lda	#245	; limit to maximum
    903  0a68		       8d 79 70 	      sta	paddleY
    904  0a6b				   notPTop
    905  0a6b		       ad 79 70 	      lda	paddleY
    906  0a6e		       20 69 10 	      jsr	setPulseWidth
    907  0a71							;-------------
    908  0a71							;inc 1024+80
    909  0a71		       ad 79 70 	      lda	paddleY
    910  0a74				   skipPW
    911  0a74		       60		      rts
    912  0a75							;END paddle ------------------------------
    913  0a75
    914  0a75
    915  0a75
    916  0a75
    917  0a75
    918  0a75							; All notes off
    919  0a75				   midiPanic
    920  0a75		       a2 08		      ldx	#NOTE_BUF_SIZE
    921  0a77		       a9 ff		      lda	#255
    922  0a79				   midiPanicLoop
    923  0a79		       9d a0 70 	      sta	noteNumArray,x
    924  0a7c		       ca		      dex
    925  0a7d		       10 fa		      bpl	midiPanicLoop
    926  0a7f		       60		      rts
    927  0a80
    928  0a80
    929  0a80
    930  0a80
    931  0a80
    932  0a80
    933  0a80
    934  0a80							; ***************************
    935  0a80							; Variable Setup
    936  0a80							; ***************************
    937  0a80				   variableInit
    938  0a80		       a9 00		      lda	#0
    939  0a82		       8d 7a 70 	      sta	paddle2
    940  0a85		       8d 5c 70 	      sta	filterDisable
    941  0a88		       8d 6c 70 	      sta	filterStatus
    942  0a8b		       8d 58 70 	      sta	keyTimer
    943  0a8e		       8d 40 70 	      sta	bender
    944  0a91		       8d 70 70 	      sta	helpMode
    945  0a94		       8d 21 70 	      sta	patPtr
    946  0a97		       8d 03 70 	      sta	Frame
    947  0a9a		       8d 02 70 	      sta	FrameH
    948  0a9d		       8d 05 70 	      sta	EchoCur
    949  0aa0		       8d 75 70 	      sta	customPatchSaved
    950  0aa3		       8d 76 70 	      sta	paddleTop
    951  0aa6		       8d 77 70 	      sta	paddleBottom
    952  0aa9
    953  0aa9		       a9 02		      lda	#2
    954  0aab		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
    955  0aae
    956  0aae		       a9 04		      lda	#4	; set normal tuning
    957  0ab0		       8d 71 70 	      sta	tuneSetting
    958  0ab3
    959  0ab3		       a9 00		      lda	#0
    960  0ab5		       20 5d 11 	      jsr	setLFODepth	;********************************
    961  0ab8		       a9 00		      lda	#0
    962  0aba		       20 73 11 	      jsr	setLFORate	;********************************
    963  0abd
    964  0abd							; set up tuning array pointers
    965  0abd		       a9 66		      lda	#<tuningL4
    966  0abf		       85 22		      sta	tunePtrL
    967  0ac1		       a9 37		      lda	#>tuningL4
    968  0ac3		       85 23		      sta	tunePtrL+1
    969  0ac5
    970  0ac5		       a9 66		      lda	#<tuningH4
    971  0ac7		       85 24		      sta	tunePtrH
    972  0ac9		       a9 37		      lda	#>tuningH4
    973  0acb		       85 25		      sta	tunePtrH+1
    974  0acd
    975  0acd		       a9 02		      lda	#2
    976  0acf		       8d 20 70 	      sta	VICMode
    977  0ad2		       a9 00		      lda	#0
    978  0ad4		       8d 1d 70 	      sta	soundMode
    979  0ad7							;lda #40
    980  0ad7							;sta portSpd
    981  0ad7
    982  0ad7							; Video Mode
    983  0ad7		       a9 03		      lda	#3
    984  0ad9		       a0 02		      ldy	#2
    985  0adb		       20 2e 11 	      jsr	setVideoMode	;********************************
    986  0ade
    987  0ade							; Default full volume
    988  0ade		       a9 0f		      lda	#$0F
    989  0ae0		       8d 1c 70 	      sta	volume
    990  0ae3
    991  0ae3							; Echo?
    992  0ae3		       a9 70		      lda	#$70
    993  0ae5		       8d 04 70 	      sta	EchoPtr
    994  0ae8
    995  0ae8		       a0 00		      ldy	#0
    996  0aea		       20 aa 13 	      jsr	setPatch	;set bass sound
    997  0aed
    998  0aed							; Set up starting portamento values
    999  0aed		       a2 0c		      ldx	#12
   1000  0aef		       bd 2c 34 	      lda	NSoundLArr,x
   1001  0af2		       8d 16 70 	      sta	pitchLA
   1002  0af5		       8d 17 70 	      sta	pitchLB
   1003  0af8		       8d 18 70 	      sta	pitchLC
   1004  0afb							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1005  0afb							;sta lastKeyB
   1006  0afb							;sta lastKeyC
   1007  0afb		       bd 74 34 	      lda	NSoundHArr,x
   1008  0afe		       8d 19 70 	      sta	pitchHA
   1009  0b01		       8d 1a 70 	      sta	pitchHB
   1010  0b04		       8d 1b 70 	      sta	pitchHC
   1011  0b07							;----------
   1012  0b07		       60		      rts
   1013  0b08
   1014  0b08							;__________________________________________________________
   1015  0b08							;
   1016  0b08							; DISABLE RESTORE KEY
   1017  0b08							;
   1018  0b08				   disableRestoreKey
   1019  0b08		       a9 2d		      lda	#<nmiRestoreKey	;Set NMI vector
   1020  0b0a		       8d 18 03 	      sta	$0318
   1021  0b0d		       8d fa ff 	      sta	$fffa
   1022  0b10		       a9 0b		      lda	#>nmiRestoreKey
   1023  0b12		       8d 19 03 	      sta	$0319
   1024  0b15		       8d fb ff 	      sta	$fffb
   1025  0b18		       a9 81		      lda	#$81
   1026  0b1a		       8d 0d dd 	      sta	$dd0d	;Use Timer A
   1027  0b1d		       a9 01		      lda	#$01	;Timer A count ($0001)
   1028  0b1f		       8d 04 dd 	      sta	$dd04
   1029  0b22		       a9 00		      lda	#$00
   1030  0b24		       8d 05 dd 	      sta	$dd05
   1031  0b27		       a9 19		      lda	#%00011001	;Run Timer A
   1032  0b29		       8d 0e dd 	      sta	$dd0e
   1033  0b2c		       60		      rts
   1034  0b2d
   1035  0b2d				   nmiRestoreKey
   1036  0b2d		       40		      rti
   1037  0b2e
   1038  0b2e
   1039  0b2e
------- FILE cynth_display.asm LEVEL 2 PASS 2
      0  0b2e					      include	"cynth_display.asm"
      1  0b2e
      2  0b2e							; ***************************
      3  0b2e							; Process Video Mode
      4  0b2e							; ***************************
      5  0b2e
      6  0b2e				   processVideoMode
      7  0b2e							; Turn off Vic when no notes are playing
      8  0b2e		       ad 70 70 	      lda	helpMode
      9  0b31		       d0 2e		      bne	vicOn
     10  0b33
     11  0b33		       ad 20 70 	      lda	VICMode
     12  0b36		       f0 1e		      beq	vicOff
     13  0b38		       c9 02		      cmp	#2
     14  0b3a		       f0 25		      beq	vicOn
     15  0b3c		       ad 1f 70 	      lda	dispOn
     16  0b3f		       d0 20		      bne	vicOn
     17  0b41		       ad a0 70 	      lda	noteNumArray+0
     18  0b44							;lda KeyA
     19  0b44
     20  0b44		       c9 ff		      cmp	#255
     21  0b46		       d0 19		      bne	vicOn
     22  0b48		       ad a1 70 	      lda	noteNumArray+1
     23  0b4b							;lda KeyB
     24  0b4b		       c9 ff		      cmp	#255
     25  0b4d		       d0 12		      bne	vicOn
     26  0b4f		       ad a2 70 	      lda	noteNumArray+2
     27  0b52							;lda KeyC
     28  0b52		       c9 ff		      cmp	#255
     29  0b54		       d0 0b		      bne	vicOn
     30  0b56				   vicOff
     31  0b56							; Vic off
     32  0b56		       ad 11 d0 	      lda	$d011
     33  0b59		       29 ef		      and	#$EF
     34  0b5b		       8d 11 d0 	      sta	$D011
     35  0b5e
     36  0b5e		       4c 69 0b 	      jmp	endVic
     37  0b61				   vicOn
     38  0b61							; Vic on
     39  0b61		       ad 11 d0 	      lda	$d011
     40  0b64		       09 10		      ora	#$10
     41  0b66		       8d 11 d0 	      sta	$d011
     42  0b69
     43  0b69				   endVic
     44  0b69		       a9 00		      lda	#0
     45  0b6b		       8d 1f 70 	      sta	dispOn
     46  0b6e
     47  0b6e		       ad a0 70 	      lda	noteNumArray+0
     48  0b71							;lda KeyA
     49  0b71		       8d 0c 70 	      sta	temp
     50  0b74		       20 8a 0b 	      jsr	drawPattern
     51  0b77		       ad a1 70 	      lda	noteNumArray+1
     52  0b7a							;lda KeyB
     53  0b7a		       8d 0c 70 	      sta	temp
     54  0b7d		       20 8a 0b 	      jsr	drawPattern
     55  0b80		       ad a2 70 	      lda	noteNumArray+2
     56  0b83							;lda KeyC
     57  0b83		       8d 0c 70 	      sta	temp
     58  0b86		       20 8a 0b 	      jsr	drawPattern
     59  0b89
     60  0b89		       60		      rts
     61  0b8a							;jmp Loop
     62  0b8a							;====================================================
     63  0b8a							; bottom of main loop
     64  0b8a							;====================================================
     65  0b8a
     66  0b8a
     67  0b8a							; ***************************
     68  0b8a							; code to draw colored character patterns
     69  0b8a							; ***************************
     70  0b8a							;PTRNTEXTBASE equ 1224
     71  0b8a		       04 00	   PTRNTEXTBASE equ	1224-40*5
     72  0b8a							;PTRNCOLORBASE equ 55496
     73  0b8a		       d8 00	   PTRNCOLORBASE equ	55496-40*5
     74  0b8a
     75  0b8a
     76  0b8a				   drawPattern
     77  0b8a							; don't draw video when in help mode
     78  0b8a		       ad 70 70 	      lda	helpMode
     79  0b8d		       f0 01		      beq	continueVideo
     80  0b8f		       60		      rts
     81  0b90				   continueVideo
     82  0b90							;---------
     83  0b90							; setup
     84  0b90		       ae 21 70 	      ldx	patPtr
     85  0b93		       e8		      inx
     86  0b94		       e0 28		      cpx	#40
     87  0b96		       d0 02		      bne	noPatReset
     88  0b98		       a2 00		      ldx	#0
     89  0b9a				   noPatReset
     90  0b9a		       8e 21 70 	      stx	patPtr
     91  0b9d							;---------
     92  0b9d		       a2 05		      ldx	#5
     93  0b9f							; main pattern loop
     94  0b9f				   patternLoop
     95  0b9f				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
     96  0b9f				  -	      rts		; DEBUG! disable patterns
     97  0b9f					      endif
     98  0b9f
     99  0b9f		       bd 3d 29 	      lda	patOffset,x
    100  0ba2							;	clc
    101  0ba2		       6d 21 70 	      adc	patPtr
    102  0ba5		       a8		      tay
    103  0ba6							;	clc
    104  0ba6		       ad 0c 70 	      lda	temp
    105  0ba9		       c9 ff		      cmp	#255
    106  0bab		       f0 0a		      beq	skipExtraColors
    107  0bad		       ad 03 70 	      lda	Frame
    108  0bb0		       2d 45 70 	      and	videoMode
    109  0bb3		       18		      clc
    110  0bb4		       6d 0c 70 	      adc	temp
    111  0bb7				   skipExtraColors
    112  0bb7		       69 be		      adc	#190
    113  0bb9		       8d 8f 70 	      sta	temp2
    114  0bbc		       ad 0c 70 	      lda	temp
    115  0bbf		       c9 ff		      cmp	#255
    116  0bc1		       d0 05		      bne	reloadValue
    117  0bc3		       a9 7f		      lda	#127
    118  0bc5		       4c cb 0b 	      jmp	afterReloadValue
    119  0bc8				   reloadValue
    120  0bc8		       ad 8f 70 	      lda	temp2
    121  0bcb				   afterReloadValue
    122  0bcb		       91 2b		      sta	(lowTextPtr),y
    123  0bcd		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
    124  0bd0		       99 90 05 	      sta	PTRNTEXTBASE+400,y
    125  0bd3		       99 58 06 	      sta	PTRNTEXTBASE+600,y
    126  0bd6		       c0 f8		      cpy	#248
    127  0bd8		       30 03		      bmi	noTopText
    128  0bda		       99 20 07 	      sta	PTRNTEXTBASE+800,y
    129  0bdd				   noTopText
    130  0bdd							;sbc #13
    131  0bdd		       69 0c		      adc	#12
    132  0bdf		       91 2d		      sta	(lowColorPtr),y
    133  0be1		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
    134  0be4		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
    135  0be7		       99 58 da 	      sta	PTRNCOLORBASE+600,y
    136  0bea		       c0 f8		      cpy	#248
    137  0bec		       30 03		      bmi	noTopColor
    138  0bee		       99 20 db 	      sta	PTRNCOLORBASE+800,y
    139  0bf1				   noTopColor
    140  0bf1		       ca		      dex
    141  0bf2		       10 ab		      bpl	patternLoop
    142  0bf4		       60		      rts
    143  0bf5							;--------------------- end of draw patterns
    144  0bf5
    145  0bf5
    146  0bf5
    147  0bf5							; ***************************
    148  0bf5							; Display Setup
    149  0bf5							; ***************************
    150  0bf5				   displayInit
    151  0bf5
    152  0bf5		       a9 15		      lda	#21
    153  0bf7		       8d 18 d0 	      sta	53272	; UPPERCASE mode
    154  0bfa
    155  0bfa							; draw static text at the top of the screen
    156  0bfa		       a2 31		      ldx	#>mainColorText	;low/MSB
    157  0bfc		       a0 22		      ldy	#<mainColorText	;high/LSB
    158  0bfe		       20 0b 0d 	      jsr	displayPage
    159  0c01
    160  0c01							; Draw bottom text (version number+PAL/NTSC setting)
    161  0c01		       03 dd	   BOTTOMTEXT equ	40*24+29
    162  0c01
    163  0c01		       20 e9 0f 	      jsr	showHelpMessage
    164  0c04
    165  0c04							; SHOW BETA MESSAGE IF IN BETA MODE
    166  0c04		       a2 0c		      ldx	#12
    167  0c06				   betaInfoLoop
    168  0c06		       bd b2 33 	      lda	betaInfo,x
    169  0c09		       c9 40		      cmp	#64
    170  0c0b		       30 02		      bmi	showSpaceBeta
    171  0c0d		       e9 40		      sbc	#64
    172  0c0f				   showSpaceBeta
    173  0c0f		       9d b2 07 	      sta	1024+BOTTOMTEXT-40-3,x
    174  0c12		       ca		      dex
    175  0c13		       10 f1		      bpl	betaInfoLoop
    176  0c15
    177  0c15							; choose which text to show from PAL/NTSC test at startup
    178  0c15		       a2 00		      ldx	#0
    179  0c17		       a0 00		      ldy	#0
    180  0c19		       ad 61 70 	      lda	NTSCmode
    181  0c1c		       f0 02		      beq	showPAL
    182  0c1e		       a2 0c		      ldx	#12
    183  0c20				   showPAL
    184  0c20							; Show version number and NTSC/PAL designation...
    185  0c20				   TextLoop2
    186  0c20		       bd 9a 33 	      lda	bottomText,x
    187  0c23		       f0 12		      beq	endText2
    188  0c25		       c9 40		      cmp	#64
    189  0c27		       30 02		      bmi	showSpace2
    190  0c29		       e9 40		      sbc	#64
    191  0c2b				   showSpace2
    192  0c2b		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
    193  0c2e		       a9 0b		      lda	#11
    194  0c30		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
    195  0c33				   notBlank2
    196  0c33		       e8		      inx
    197  0c34		       c8		      iny
    198  0c35		       d0 e9		      bne	TextLoop2
    199  0c37				   endText2
    200  0c37
    201  0c37		       07 e2	   MODE_INDICATOR_POS equ	2018
    202  0c37					      IF	DEVICE_CONFIG=KERBEROS
    203  0c37		       a9 0b		      lda	#11	; "K"
    204  0c39		       8d e2 07 	      sta	MODE_INDICATOR_POS
    205  0c3c					      ENDIF
    206  0c3c				  -	      IF	DEVICE_CONFIG=EMU
    207  0c3c				  -	      lda	#5	; "E"
    208  0c3c				  -	      sta	MODE_INDICATOR_POS
    209  0c3c					      ENDIF
    210  0c3c				  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    211  0c3c				  -	      lda	#19	; "S"
    212  0c3c				  -	      sta	MODE_INDICATOR_POS
    213  0c3c					      ENDIF
    214  0c3c
    215  0c3c		       20 07 12 	      jsr	showMidiMode
    216  0c3f
    217  0c3f							;---------------------------------------------
    218  0c3f							; Display current sound parameter values
    219  0c3f
    220  0c3f							; set tuning text
    221  0c3f		       ac 71 70 	      ldy	tuneSetting
    222  0c42		       20 e8 10 	      jsr	ksetTune
    223  0c45
    224  0c45							; Video Mode
    225  0c45		       ad 45 70 	      lda	videoMode
    226  0c48		       ac 68 70 	      ldy	videoText
    227  0c4b		       20 2e 11 	      jsr	setVideoMode	;********************************
    228  0c4e
    229  0c4e		       ad 49 70 	      lda	LFODepth
    230  0c51		       20 5d 11 	      jsr	setLFODepth	;********************************
    231  0c54		       ad 48 70 	      lda	LFORate
    232  0c57		       20 73 11 	      jsr	setLFORate	;********************************
    233  0c5a
    234  0c5a		       ad 29 70 	      lda	paddle
    235  0c5d		       20 3c 11 	      jsr	setPaddles
    236  0c60
    237  0c60		       ad 57 70 	      lda	filter
    238  0c63		       8d 9d 70 	      sta	filterSetValue
    239  0c66							;jsr setFilter
    240  0c66
    241  0c66		       20 5a 13 	      jsr	setMode
    242  0c69
    243  0c69		       20 32 13 	      jsr	setFX
    244  0c6c
    245  0c6c		       ad 69 70 	      lda	attack
    246  0c6f		       20 6e 12 	      jsr	showAttack
    247  0c72
    248  0c72		       20 07 12 	      jsr	showMidiMode
    249  0c75
    250  0c75		       ad 6a 70 	      lda	release
    251  0c78		       20 c1 11 	      jsr	showRelease
    252  0c7b
    253  0c7b		       ac 6c 70 	      ldy	filterStatus
    254  0c7e		       20 d3 10 	      jsr	showFiltOnOff
    255  0c81
    256  0c81		       20 86 12 	      jsr	setVolume
    257  0c84
    258  0c84		       ad 6b 70 	      lda	octave
    259  0c87		       20 d6 12 	      jsr	setOctave
    260  0c8a
    261  0c8a		       20 bc 14 	      jsr	showPatchName
    262  0c8d
    263  0c8d		       ad 7a 70 	      lda	paddle2
    264  0c90		       20 47 10 	      jsr	ksetPad2
    265  0c93
    266  0c93		       60		      rts
    267  0c94							;---------------------------------------------------
    268  0c94
    269  0c94							;************************************
    270  0c94							; update text
    271  0c94							;************************************
    272  0c94							; Show text out of the textData array.
    273  0c94							; x=textData, y=screen position
    274  0c94				   updateText
    275  0c94		       ad 70 70 	      lda	helpMode
    276  0c97		       f0 01		      beq	doUpdateText
    277  0c99		       60		      rts
    278  0c9a				   doUpdateText
    279  0c9a							;	lda helpMode
    280  0c9a							;	bne doUpdateText
    281  0c9a							;	rts
    282  0c9a							;doUpdateText:
    283  0c9a		       18		      clc
    284  0c9b		       a9 04		      lda	#4
    285  0c9d		       8d 46 70 	      sta	textTemp
    286  0ca0				   updateTextLoop
    287  0ca0		       bd 52 32 	      lda	textData,x
    288  0ca3		       c9 40		      cmp	#64
    289  0ca5		       30 02		      bmi	showSpaceU
    290  0ca7		       e9 40		      sbc	#64
    291  0ca9				   showSpaceU
    292  0ca9		       99 00 04 	      sta	1024,y
    293  0cac		       e8		      inx
    294  0cad		       c8		      iny
    295  0cae		       ce 46 70 	      dec	textTemp
    296  0cb1		       d0 ed		      bne	updateTextLoop
    297  0cb3		       60		      rts
    298  0cb4
    299  0cb4
    300  0cb4							;************************************
    301  0cb4							; clrScr - Clear Screen
    302  0cb4							;************************************
    303  0cb4				   clrScr
    304  0cb4		       a2 00		      ldx	#0
    305  0cb6		       a9 20		      lda	#32
    306  0cb8				   clrScrLoop
    307  0cb8		       9d 00 04 	      sta	$400,x
    308  0cbb		       9d 00 05 	      sta	$500,x
    309  0cbe		       9d 00 06 	      sta	$600,x
    310  0cc1		       9d 00 07 	      sta	$700,x
    311  0cc4		       ca		      dex
    312  0cc5		       d0 f1		      bne	clrScrLoop
    313  0cc7		       60		      rts
    314  0cc8
    315  0cc8
    316  0cc8							;************************************
    317  0cc8							; DisplayHex - draw hex value on screen
    318  0cc8							;************************************
    319  0cc8							; note uses helpWritePointer so can't be
    320  0cc8							; used within displayPage routine
    321  0cc8							; X = horizontal location
    322  0cc8							; Y = vertical location
    323  0cc8							; A = value
    324  0cc8							; hexDispColor = color
    325  0cc8				   displayHex
    326  0cc8							; figure out screen location
    327  0cc8							; and store in word pointer
    328  0cc8		       8e 72 70 	      stx	hexDispTemp
    329  0ccb		       aa		      tax		; save the hex value in X
    330  0ccc		       b9 46 29 	      lda	lineOffsetL,y
    331  0ccf		       18		      clc
    332  0cd0		       6d 72 70 	      adc	hexDispTemp
    333  0cd3		       85 31		      sta	helpWritePointerL
    334  0cd5		       85 33		      sta	helpColorPointerL
    335  0cd7
    336  0cd7		       b9 60 29 	      lda	lineOffsetM,y
    337  0cda		       69 00		      adc	#0
    338  0cdc		       85 32		      sta	helpWritePointerM
    339  0cde		       18		      clc
    340  0cdf		       69 d4		      adc	#$D4
    341  0ce1		       85 34		      sta	helpColorPointerM
    342  0ce3							;--------------------
    343  0ce3		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
    344  0ce6		       8a		      txa
    345  0ce7		       29 0f		      and	#$0F	; isolate the LS nibble
    346  0ce9		       aa		      tax
    347  0cea		       bd ec 33 	      lda	hexDisplay,x	; get character to display
    348  0ced		       a0 01		      ldy	#1
    349  0cef		       91 31		      sta	(helpWritePointerL),y
    350  0cf1							;lda #$E
    351  0cf1		       ad 8d 70 	      lda	hexDispColor
    352  0cf4		       91 33		      sta	(helpColorPointerL),y
    353  0cf6							;-------------------
    354  0cf6		       ad 72 70 	      lda	hexDispTemp
    355  0cf9		       4a		      lsr		; get the MS nibble
    356  0cfa		       4a		      lsr
    357  0cfb		       4a		      lsr
    358  0cfc		       4a		      lsr
    359  0cfd		       aa		      tax
    360  0cfe		       bd ec 33 	      lda	hexDisplay,x	; get character to display
    361  0d01		       a0 00		      ldy	#0
    362  0d03		       91 31		      sta	(helpWritePointerL),y
    363  0d05							;lda #$E
    364  0d05		       ad 8d 70 	      lda	hexDispColor
    365  0d08		       91 33		      sta	(helpColorPointerL),y
    366  0d0a							;-------------------
    367  0d0a		       60		      rts
    368  0d0b
    369  0d0b
    370  0d0b							;************************************
    371  0d0b							; DisplayPage - display an entire
    372  0d0b							; page of help info with color support
    373  0d0b							;************************************
    374  0d0b							; X = LSB of data address
    375  0d0b							; Y = MSB of data address
    376  0d0b							; data format:
    377  0d0b							; line_number, color, text, 0
    378  0d0b							; line_number, color, text, 0
    379  0d0b							; 255
    380  0d0b				   displayPage
    381  0d0b		       84 2f		      sty	helpReadPointerL
    382  0d0d		       86 30		      stx	helpReadPointerM
    383  0d0f
    384  0d0f							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    385  0d0f							;lda filterSetValue
    386  0d0f							;sta sidEditSaveTemp1
    387  0d0f
    388  0d0f		       a9 01		      lda	#1
    389  0d11		       8d 6d 70 	      sta	helpColor	; default to white
    390  0d14				   helpLoop
    391  0d14		       a0 00		      ldy	#0
    392  0d16							; get line number and set up output pointers
    393  0d16		       b1 2f		      lda	(helpReadPointerL),y
    394  0d18		       c9 ff		      cmp	#255
    395  0d1a		       f0 5b		      beq	quitHelp
    396  0d1c		       aa		      tax
    397  0d1d		       bd 60 29 	      lda	lineOffsetM,x
    398  0d20		       85 32		      sta	helpWritePointerM
    399  0d22		       18		      clc
    400  0d23		       69 d4		      adc	#$D4
    401  0d25		       85 34		      sta	helpColorPointerM
    402  0d27		       bd 46 29 	      lda	lineOffsetL,x
    403  0d2a		       85 31		      sta	helpWritePointerL
    404  0d2c		       85 33		      sta	helpColorPointerL
    405  0d2e							;--------------------
    406  0d2e		       a0 01		      ldy	#1
    407  0d30		       8c 6e 70 	      sty	helpYIn
    408  0d33		       a0 00		      ldy	#0
    409  0d35		       8c 6f 70 	      sty	helpYOut
    410  0d38				   helpTextLoop
    411  0d38							; get the first character
    412  0d38		       ac 6e 70 	      ldy	helpYIn
    413  0d3b		       b1 2f		      lda	(helpReadPointerL),y
    414  0d3d		       f0 28		      beq	quitTextLoop
    415  0d3f		       c8		      iny
    416  0d40		       8c 6e 70 	      sty	helpYIn
    417  0d43							; see if it's a color command
    418  0d43		       c9 80		      cmp	#128
    419  0d45		       10 17		      bpl	setColor	;---
    420  0d47		       c9 40		      cmp	#64
    421  0d49		       30 02		      bmi	showSpaceHelp
    422  0d4b		       e9 40		      sbc	#64
    423  0d4d							;lda #126
    424  0d4d				   showSpaceHelp
    425  0d4d							; write the color and character to the screen
    426  0d4d		       ac 6f 70 	      ldy	helpYOut
    427  0d50		       91 31		      sta	(helpWritePointerL),y
    428  0d52		       ad 6d 70 	      lda	helpColor
    429  0d55		       91 33		      sta	(helpColorPointerL),y
    430  0d57		       c8		      iny
    431  0d58		       8c 6f 70 	      sty	helpYOut
    432  0d5b		       4c 38 0d 	      jmp	helpTextLoop
    433  0d5e				   setColor
    434  0d5e		       38		      sec
    435  0d5f		       e9 80		      sbc	#128
    436  0d61		       8d 6d 70 	      sta	helpColor
    437  0d64		       4c 38 0d 	      jmp	helpTextLoop
    438  0d67							;---------------
    439  0d67				   quitTextLoop
    440  0d67							; update the input pointer
    441  0d67		       c8		      iny
    442  0d68		       98		      tya
    443  0d69		       18		      clc
    444  0d6a		       65 2f		      adc	helpReadPointerL
    445  0d6c		       85 2f		      sta	helpReadPointerL
    446  0d6e		       a5 30		      lda	helpReadPointerM
    447  0d70		       69 00		      adc	#0
    448  0d72		       85 30		      sta	helpReadPointerM
    449  0d74		       4c 14 0d 	      jmp	helpLoop	;/\/\/\/\/\
    450  0d77				   quitHelp
    451  0d77
    452  0d77							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    453  0d77							;lda sidEditSaveTemp1
    454  0d77							;sta filterSetValue
    455  0d77
    456  0d77		       60		      rts		; END OF DISPLAY PAGE
------- FILE cynthcart2.0.1.asm
------- FILE cynth_modulation.asm LEVEL 2 PASS 2
      0  0d78					      include	"cynth_modulation.asm"
      1  0d78
      2  0d78
      3  0d78							;-------------------------------------
      4  0d78							; Process FX
      5  0d78							;-------------------------------------
      6  0d78							;fxType equ $7086
      7  0d78							;modValue1 equ $7087
      8  0d78							;modDirection equ $7089
      9  0d78							;modCounter equ $708A
     10  0d78							;modMinValue equ $708B
     11  0d78							;modMaxValue equ $708A
     12  0d78							; - - - - - - - - - -
     13  0d78							;MOD_NONE equ 0
     14  0d78							;MOD_PW_LFO equ 1
     15  0d78							;MOD_FILT_LFO equ 2
     16  0d78							;MOD_FILT_OPEN equ 3
     17  0d78							;MOD_FILT_CLOSE equ 4
     18  0d78							;MOD_FILT_WOW equ 5
     19  0d78
     20  0d78				   processFX
     21  0d78		       ad 86 70 	      lda	fxType
     22  0d7b		       d0 0b		      bne	doFX
     23  0d7d		       a9 7f		      lda	#127	; Set default mod values...
     24  0d7f		       8d 9e 70 	      sta	pwModValue
     25  0d82		       8d 9c 70 	      sta	filterModValue
     26  0d85		       4c b0 0d 	      jmp	quitFX
     27  0d88							; - - - - - - - -
     28  0d88				   doFX
     29  0d88		       c9 06		      cmp	#MOD_PW_LFO
     30  0d8a		       d0 03		      bne	notModPulseLFO
     31  0d8c		       4c 9a 0e 	      jmp	modPulseLFO	;------->
     32  0d8f				   notModPulseLFO
     33  0d8f		       c9 01		      cmp	#MOD_FILT_LFO
     34  0d91		       d0 03		      bne	notModFiltLFO
     35  0d93		       4c 86 0e 	      jmp	modFiltLFO	;------->
     36  0d96				   notModFiltLFO
     37  0d96		       c9 02		      cmp	#MOD_FILT_ENV
     38  0d98		       d0 03		      bne	noModFiltEnv
     39  0d9a		       4c 56 0e 	      jmp	modFiltEnv	;------->
     40  0d9d				   noModFiltEnv
     41  0d9d		       c9 03		      cmp	#MOD_FILT3
     42  0d9f		       f0 10		      beq	modFilt3	;------->
     43  0da1		       c9 04		      cmp	#MOD_FILT4
     44  0da3		       f0 67		      beq	modFilt4	;------->
     45  0da5		       c9 05		      cmp	#MOD_FILT5
     46  0da7		       f0 76		      beq	modFilt5	;------->
     47  0da9		       c9 07		      cmp	#MOD_PW2
     48  0dab		       d0 03		      bne	quitFX
     49  0dad		       4c 32 0e 	      jmp	modPW2	;------->
     50  0db0				   quitFX
     51  0db0		       60		      rts
     52  0db1
     53  0db1
     54  0db1							;---------------------
     55  0db1				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
     56  0db1		       ad 03 70 	      lda	Frame
     57  0db4		       ad 87 70 	      lda	modValue1
     58  0db7		       29 f8		      and	#%11111000
     59  0db9		       f0 0b		      beq	noDecModValue2
     60  0dbb		       ae 87 70 	      ldx	modValue1
     61  0dbe		       ca		      dex
     62  0dbf		       ca		      dex
     63  0dc0		       ca		      dex
     64  0dc1		       ca		      dex
     65  0dc2		       ca		      dex
     66  0dc3		       8e 87 70 	      stx	modValue1
     67  0dc6				   noDecModValue2
     68  0dc6		       ad 87 70 	      lda	modValue1
     69  0dc9		       8d 9c 70 	      sta	filterModValue
     70  0dcc							;jsr setFilterFromA
     71  0dcc							;rts ; DEBUG!!
     72  0dcc
     73  0dcc		       a9 b4		      lda	#180
     74  0dce		       8d 98 70 	      sta	resetValue
     75  0dd1							;jmp filtEnvReset ;---- end
     76  0dd1
     77  0dd1				   filtEnvResetFast
     78  0dd1		       ad 1d 70 	      lda	soundMode
     79  0dd4		       c9 20		      cmp	#MODE_MONO1
     80  0dd6		       f0 22		      beq	handleMonoMode
     81  0dd8		       c9 21		      cmp	#MODE_MONO2
     82  0dda		       f0 1e		      beq	handleMonoMode
     83  0ddc
     84  0ddc							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
     85  0ddc		       a2 05		      ldx	#5
     86  0dde		       a0 00		      ldy	#0
     87  0de0				   countNotesLoop
     88  0de0		       bd a0 70 	      lda	noteNumArray,x
     89  0de3		       c9 ff		      cmp	#255
     90  0de5		       d0 01		      bne	skipCountingNote
     91  0de7		       c8		      iny
     92  0de8				   skipCountingNote
     93  0de8		       ca		      dex
     94  0de9		       10 f5		      bpl	countNotesLoop
     95  0deb		       cc 99 70 	      cpy	lastNoteCount
     96  0dee		       f0 09		      beq	noNewNotes
     97  0df0		       8c 99 70 	      sty	lastNoteCount
     98  0df3		       ad 98 70 	      lda	resetValue	; Reset filter envelope
     99  0df6		       8d 87 70 	      sta	modValue1
    100  0df9				   noNewNotes
    101  0df9		       60		      rts
    102  0dfa
    103  0dfa				   handleMonoMode
    104  0dfa		       ac a0 70 	      ldy	noteNumArray+0
    105  0dfd		       cc 9a 70 	      cpy	lastNote
    106  0e00		       f0 09		      beq	sameOldNote
    107  0e02		       8c 9a 70 	      sty	lastNote
    108  0e05		       ad 98 70 	      lda	resetValue	; Reset filter envelope
    109  0e08		       8d 87 70 	      sta	modValue1
    110  0e0b				   sameOldNote
    111  0e0b		       60		      rts
    112  0e0c
    113  0e0c							; Reset filter env when no notes are held...
    114  0e0c							;	ldx #5
    115  0e0c							;filtEnvResetLoop2
    116  0e0c							;lda noteNumArray,x
    117  0e0c							;cmp #255
    118  0e0c							;bne quitFiltEnv2
    119  0e0c							;dex
    120  0e0c							;bpl filtEnvResetLoop2
    121  0e0c							;lda resetValue
    122  0e0c							;sta modValue1
    123  0e0c							;quitFiltEnv2:
    124  0e0c							;rts
    125  0e0c
    126  0e0c							;---------------------
    127  0e0c				   modFilt4		; Filter chopper FAST
    128  0e0c		       ad 03 70 	      lda	Frame
    129  0e0f		       29 08		      and	#%1000
    130  0e11		       f0 06		      beq	filterClosed
    131  0e13		       a9 e6		      lda	#230
    132  0e15		       8d 9c 70 	      sta	filterModValue
    133  0e18		       60		      rts
    134  0e19							;jmp setFilterFromA
    135  0e19				   filterClosed
    136  0e19		       a9 00		      lda	#0
    137  0e1b		       8d 9c 70 	      sta	filterModValue
    138  0e1e		       60		      rts
    139  0e1f							;jmp setFilterFromA
    140  0e1f
    141  0e1f
    142  0e1f							;---------------------
    143  0e1f				   modFilt5		; Filter chopper MEDIUM
    144  0e1f		       ad 03 70 	      lda	Frame
    145  0e22		       29 02		      and	#%10
    146  0e24		       f0 06		      beq	filterClosed2
    147  0e26		       a9 96		      lda	#150
    148  0e28							;jmp setFilterFromA
    149  0e28		       8d 9c 70 	      sta	filterModValue
    150  0e2b		       60		      rts
    151  0e2c				   filterClosed2
    152  0e2c		       a9 32		      lda	#50
    153  0e2e							;jmp setFilterFromA
    154  0e2e		       8d 9c 70 	      sta	filterModValue
    155  0e31		       60		      rts
    156  0e32
    157  0e32							;---------------------
    158  0e32				   modPW2		; PW Envelope
    159  0e32		       ad 03 70 	      lda	Frame
    160  0e35		       ad 87 70 	      lda	modValue1
    161  0e38							;and #%11111000
    162  0e38		       29 e0		      and	#%11100000
    163  0e3a		       f0 0b		      beq	noDecModValue3
    164  0e3c		       ae 87 70 	      ldx	modValue1
    165  0e3f		       ca		      dex
    166  0e40		       ca		      dex
    167  0e41		       ca		      dex
    168  0e42		       ca		      dex
    169  0e43		       ca		      dex
    170  0e44		       8e 87 70 	      stx	modValue1
    171  0e47				   noDecModValue3
    172  0e47		       ad 87 70 	      lda	modValue1
    173  0e4a		       20 69 10 	      jsr	setPulseWidth
    174  0e4d
    175  0e4d		       a9 b4		      lda	#180
    176  0e4f		       8d 98 70 	      sta	resetValue
    177  0e52
    178  0e52		       4c d1 0d 	      jmp	filtEnvResetFast
    179  0e55		       60		      rts
    180  0e56
    181  0e56
    182  0e56
    183  0e56
    184  0e56							;---------------------
    185  0e56				   modFiltEnv
    186  0e56		       ad 03 70 	      lda	Frame
    187  0e59		       29 01		      and	#%1
    188  0e5b		       f0 01		      beq	doEnvLFO
    189  0e5d		       60		      rts
    190  0e5e				   doEnvLFO
    191  0e5e		       ad 87 70 	      lda	modValue1
    192  0e61		       c9 ff		      cmp	#255
    193  0e63		       f0 03		      beq	noIncreaseModValue
    194  0e65		       ee 87 70 	      inc	modValue1
    195  0e68				   noIncreaseModValue
    196  0e68		       ad 87 70 	      lda	modValue1
    197  0e6b		       8d 9c 70 	      sta	filterModValue
    198  0e6e							;jsr setFilterFromA
    199  0e6e		       a9 00		      lda	#0
    200  0e70		       8d 98 70 	      sta	resetValue
    201  0e73							; jmp filtEnvReset
    202  0e73
    203  0e73				   filtEnvReset
    204  0e73		       a2 05		      ldx	#5
    205  0e75				   filtEnvResetLoop
    206  0e75		       bd a0 70 	      lda	noteNumArray,x
    207  0e78		       c9 ff		      cmp	#255
    208  0e7a		       d0 09		      bne	quitFiltEnv
    209  0e7c		       ca		      dex
    210  0e7d		       10 f6		      bpl	filtEnvResetLoop
    211  0e7f							;lda #0
    212  0e7f		       ad 98 70 	      lda	resetValue
    213  0e82		       8d 87 70 	      sta	modValue1
    214  0e85				   quitFiltEnv
    215  0e85		       60		      rts
    216  0e86
    217  0e86							;---------------------
    218  0e86				   modFiltLFO
    219  0e86		       a9 96		      lda	#150
    220  0e88		       8d 8b 70 	      sta	modLFOMinValue
    221  0e8b		       a9 fe		      lda	#254
    222  0e8d		       8d 8a 70 	      sta	modLFOMaxValue
    223  0e90		       20 be 0e 	      jsr	doModulationLFO
    224  0e93		       ad 87 70 	      lda	modValue1
    225  0e96		       8d 9c 70 	      sta	filterModValue
    226  0e99							;jsr setFilterFromA
    227  0e99		       60		      rts
    228  0e9a
    229  0e9a
    230  0e9a
    231  0e9a							;---------------------
    232  0e9a				   modPulseLFO
    233  0e9a
    234  0e9a							; Reset into range if way off value...
    235  0e9a		       ad 87 70 	      lda	modValue1
    236  0e9d		       30 05		      bmi	noResetValue
    237  0e9f		       a9 c8		      lda	#200
    238  0ea1		       8d 87 70 	      sta	modValue1
    239  0ea4				   noResetValue
    240  0ea4
    241  0ea4							;inc 1025 ; DEBUG!
    242  0ea4		       a9 96		      lda	#150
    243  0ea6		       8d 8b 70 	      sta	modLFOMinValue
    244  0ea9		       a9 fe		      lda	#254
    245  0eab		       8d 8a 70 	      sta	modLFOMaxValue
    246  0eae		       20 be 0e 	      jsr	doModulationLFO
    247  0eb1		       ae 87 70 	      ldx	modValue1
    248  0eb4		       8e 79 70 	      stx	paddleY
    249  0eb7
    250  0eb7		       ad 87 70 	      lda	modValue1
    251  0eba		       20 69 10 	      jsr	setPulseWidth
    252  0ebd		       60		      rts
    253  0ebe
    254  0ebe							; Process special LFO for modulation
    255  0ebe							; Store modLFOMaxValue and modLFOMinValue first
    256  0ebe				   doModulationLFO
    257  0ebe		       ad 03 70 	      lda	Frame
    258  0ec1		       29 07		      and	#%111
    259  0ec3		       f0 01		      beq	doModLFO
    260  0ec5		       60		      rts
    261  0ec6				   doModLFO
    262  0ec6		       ad 89 70 	      lda	modDirection
    263  0ec9		       f0 12		      beq	LFODown
    264  0ecb				   LFOUp
    265  0ecb		       ae 87 70 	      ldx	modValue1
    266  0ece		       e8		      inx
    267  0ecf		       8e 87 70 	      stx	modValue1
    268  0ed2							;jsr setPWValue
    269  0ed2		       8e 79 70 	      stx	paddleY
    270  0ed5							;jsr setPulseWidth
    271  0ed5		       ae 87 70 	      ldx	modValue1
    272  0ed8
    273  0ed8		       e0 f5		      cpx	#245
    274  0eda		       f0 0d		      beq	switchDirections
    275  0edc		       60		      rts
    276  0edd
    277  0edd				   LFODown
    278  0edd		       ae 87 70 	      ldx	modValue1
    279  0ee0		       ca		      dex
    280  0ee1		       8e 87 70 	      stx	modValue1
    281  0ee4		       e0 96		      cpx	#150
    282  0ee6		       f0 01		      beq	switchDirections
    283  0ee8		       60		      rts
    284  0ee9
    285  0ee9				   switchDirections
    286  0ee9		       ad 89 70 	      lda	modDirection
    287  0eec		       18		      clc
    288  0eed		       69 01		      adc	#1
    289  0eef		       29 01		      and	#1
    290  0ef1		       8d 89 70 	      sta	modDirection
    291  0ef4		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_setshow.asm LEVEL 2 PASS 2
      0  0ef5					      include	"cynth_setshow.asm"
      1  0ef5
      2  0ef5							;-------------------------------------------
      3  0ef5							; new key-based set functions
      4  0ef5							;-------------------------------------------
      5  0ef5
      6  0ef5				   ksavePatch
      7  0ef5		       a9 01		      lda	#1
      8  0ef7		       8d 75 70 	      sta	customPatchSaved
      9  0efa							;-------------------
     10  0efa		       a9 1e		      lda	#SAVED_PATCH_MESSAGE
     11  0efc		       8d 47 70 	      sta	patchSetY
     12  0eff		       20 bc 14 	      jsr	showPatchName
     13  0f02							;----------------
     14  0f02		       a2 19		      ldx	#$19
     15  0f04				   saveLoop
     16  0f04		       bd 00 71 	      lda	sidData,x
     17  0f07		       9d 20 71 	      sta	sidSaveData,x
     18  0f0a		       ca		      dex
     19  0f0b		       10 f7		      bpl	saveLoop
     20  0f0d							;----------------
     21  0f0d		       ad 29 70 	      lda	paddle
     22  0f10		       8d 41 71 	      sta	savePaddle
     23  0f13		       ad 6b 70 	      lda	octave
     24  0f16		       8d 42 71 	      sta	saveOctave
     25  0f19		       ad 1d 70 	      lda	soundMode
     26  0f1c		       8d 43 71 	      sta	saveSoundMode
     27  0f1f		       ad 86 70 	      lda	fxType
     28  0f22		       8d 43 71 	      sta	saveFXType
     29  0f25		       ad 1e 70 	      lda	arpSpeed
     30  0f28		       8d 44 71 	      sta	saveArpSpeed
     31  0f2b		       ad 49 70 	      lda	LFODepth
     32  0f2e		       8d 46 71 	      sta	saveLFODepth
     33  0f31		       ad 48 70 	      lda	LFORate
     34  0f34		       8d 47 71 	      sta	saveLFORate
     35  0f37		       ad 1c 70 	      lda	volume
     36  0f3a		       8d 48 71 	      sta	saveVolume
     37  0f3d		       ad 24 70 	      lda	volModeRAM
     38  0f40		       8d 49 71 	      sta	saveVolMode
     39  0f43		       ad 57 70 	      lda	filter
     40  0f46		       8d 4a 71 	      sta	saveFilter
     41  0f49							;----------------
     42  0f49		       60		      rts
     43  0f4a
     44  0f4a				   kloadPatch
     45  0f4a							; don't load patch if none has been saved
     46  0f4a		       ad 75 70 	      lda	customPatchSaved
     47  0f4d		       d0 01		      bne	contLoadPatch
     48  0f4f		       60		      rts
     49  0f50				   contLoadPatch
     50  0f50							; Maybe show this name with direct text instead?...
     51  0f50							;lda #SAVED_PATCH_MESSAGE
     52  0f50							;sta patchSetY
     53  0f50							;jsr showPatchName
     54  0f50							;----------------
     55  0f50		       a9 1f		      lda	#CUSTOM_PATCH_NUMBER
     56  0f52		       8d 47 70 	      sta	patchSetY
     57  0f55		       20 bc 14 	      jsr	showPatchName
     58  0f58							;-----------------------
     59  0f58		       ad 49 71 	      lda	saveVolMode
     60  0f5b		       8d 24 70 	      sta	volModeRAM
     61  0f5e							;.....................
     62  0f5e		       ad 48 71 	      lda	saveVolume
     63  0f61		       8d 1c 70 	      sta	volume
     64  0f64							;.....................
     65  0f64		       ad 41 71 	      lda	savePaddle
     66  0f67		       20 3c 11 	      jsr	setPaddles
     67  0f6a							;.....................
     68  0f6a		       ad 42 71 	      lda	saveOctave
     69  0f6d		       20 d6 12 	      jsr	setOctave
     70  0f70							;.....................
     71  0f70		       ad 43 71 	      lda	saveSoundMode
     72  0f73		       8d 1d 70 	      sta	soundMode
     73  0f76							;lda saveArpSpeed
     74  0f76		       20 5a 13 	      jsr	setMode
     75  0f79							;.....................
     76  0f79		       ad 43 71 	      lda	saveFXType
     77  0f7c		       8d 86 70 	      sta	fxType
     78  0f7f		       20 32 13 	      jsr	setFX
     79  0f82							;.....................
     80  0f82		       ad 46 71 	      lda	saveLFODepth
     81  0f85		       20 5d 11 	      jsr	setLFODepth
     82  0f88							;.....................
     83  0f88		       ad 47 71 	      lda	saveLFORate
     84  0f8b		       20 73 11 	      jsr	setLFORate
     85  0f8e							;.....................
     86  0f8e		       ad 4a 71 	      lda	saveFilter
     87  0f91		       8d 57 70 	      sta	filter
     88  0f94							;----------------
     89  0f94		       a2 19		      ldx	#$19
     90  0f96				   loadLoop
     91  0f96		       bd 20 71 	      lda	sidSaveData,x
     92  0f99		       9d 00 d4 	      sta	SID1,x
     93  0f9c		       9d 20 d4 	      sta	SID2,x
     94  0f9f		       9d 00 71 	      sta	sidData,x
     95  0fa2		       ca		      dex
     96  0fa3		       10 f1		      bpl	loadLoop
     97  0fa5							;----------------
     98  0fa5		       ad 04 71 	      lda	sidData+SV1WAVE
     99  0fa8		       8d 30 70 	      sta	WaveType
    100  0fab		       ad 0b 71 	      lda	sidData+SV2WAVE
    101  0fae		       8d 37 70 	      sta	WaveType2
    102  0fb1		       ad 12 71 	      lda	sidData+SV3WAVE
    103  0fb4		       8d 3e 70 	      sta	WaveType3
    104  0fb7							;----------------
    105  0fb7		       60		      rts
    106  0fb8
    107  0fb8				   khelp
    108  0fb8							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    109  0fb8		       ad 9d 70 	      lda	filterSetValue
    110  0fbb		       8d 52 70 	      sta	sidEditSaveTemp1
    111  0fbe
    112  0fbe
    113  0fbe		       a9 00		      lda	#0
    114  0fc0		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
    115  0fc3
    116  0fc3		       20 b4 0c 	      jsr	clrScr
    117  0fc6		       a9 28		      lda	#KEYTIME
    118  0fc8		       8d 58 70 	      sta	keyTimer
    119  0fcb		       ad 70 70 	      lda	helpMode
    120  0fce		       49 01		      eor	#1
    121  0fd0							;sta helpMode
    122  0fd0		       20 2a 11 	      jsr	setHelpMode
    123  0fd3		       20 f5 0b 	      jsr	displayInit
    124  0fd6		       ad 70 70 	      lda	helpMode
    125  0fd9		       f0 0e		      beq	showHelpMessage
    126  0fdb							;---------------
    127  0fdb							; Show full help page...
    128  0fdb		       a2 2d		      ldx	#>normalHelp	;low/MSB
    129  0fdd		       a0 36		      ldy	#<normalHelp	;high/LSB
    130  0fdf		       20 0b 0d 	      jsr	displayPage	; <--- Draw full help page
    131  0fe2
    132  0fe2							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    133  0fe2		       ad 52 70 	      lda	sidEditSaveTemp1
    134  0fe5		       8d 9d 70 	      sta	filterSetValue
    135  0fe8		       60		      rts
    136  0fe9
    137  0fe9							; \/ Show help message at bottom of screen
    138  0fe9				   showHelpMessage
    139  0fe9							; Show help key...
    140  0fe9		       a2 00		      ldx	#0
    141  0feb				   helpMessageLoop
    142  0feb		       bd 18 2d 	      lda	helpMessage,x
    143  0fee		       f0 11		      beq	endHelpMsgLoop
    144  0ff0		       c9 40		      cmp	#64
    145  0ff2		       30 02		      bmi	showSpace99
    146  0ff4		       e9 40		      sbc	#64
    147  0ff6				   showSpace99
    148  0ff6		       9d c0 07 	      sta	1024+24*40,x
    149  0ff9		       a9 0b		      lda	#11
    150  0ffb		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
    151  0ffe		       e8		      inx
    152  0fff		       d0 ea		      bne	helpMessageLoop
    153  1001				   endHelpMsgLoop
    154  1001
    155  1001		       20 07 12 	      jsr	showMidiMode
    156  1004
    157  1004
    158  1004							;	jsr displayInit
    159  1004
    160  1004
    161  1004							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    162  1004		       ad 52 70 	      lda	sidEditSaveTemp1
    163  1007		       8d 9d 70 	      sta	filterSetValue
    164  100a
    165  100a							;	ldx #39
    166  100a							;	lda #32
    167  100a							;clearLastRow:
    168  100a							;	sta 1024+23*40,x
    169  100a							;	dex
    170  100a							;	bpl clearLastRow
    171  100a		       60		      rts
    172  100b
    173  100b				   kclearModulation
    174  100b		       a9 00		      lda	#0
    175  100d		       20 2f 13 	      jsr	ksetFX
    176  1010		       a9 00		      lda	#0
    177  1012		       20 5d 11 	      jsr	setLFODepth
    178  1015		       a9 00		      lda	#0
    179  1017		       4c 73 11 	      jmp	setLFORate
    180  101a
    181  101a
    182  101a							;ksetBlackBG
    183  101a							;	lda #0
    184  101a							;	sta 53281
    185  101a							;	sta 53280
    186  101a							;	rts
    187  101a
    188  101a							;ksetBlueBG
    189  101a							;	lda #6
    190  101a							;	sta 53281
    191  101a							;	lda #14
    192  101a							;	sta 53280
    193  101a							;	rts
    194  101a
    195  101a
    196  101a				   ksetPalNtsc
    197  101a		       8d 61 70 	      sta	NTSCmode
    198  101d		       4c f5 0b 	      jmp	displayInit
    199  1020
    200  1020							; bend the bender down
    201  1020				   bendBender
    202  1020		       ad 40 70 	      lda	bender
    203  1023		       c9 fc		      cmp	#252
    204  1025		       f0 11		      beq	notBender
    205  1027		       ee 40 70 	      inc	bender
    206  102a		       ee 40 70 	      inc	bender
    207  102d		       ee 40 70 	      inc	bender
    208  1030		       ee 40 70 	      inc	bender
    209  1033		       a9 01		      lda	#1
    210  1035		       8d 83 70 	      sta	benderAutoreset
    211  1038				   notBender
    212  1038		       60		      rts
    213  1039
    214  1039							; set VIC video chip mode
    215  1039				   setVIC
    216  1039		       8d 20 70 	      sta	VICMode
    217  103c		       60		      rts
    218  103d
    219  103d							; set paddle on/off
    220  103d				   ksetPaddles
    221  103d		       20 3c 11 	      jsr	setPaddles
    222  1040		       ad 57 70 	      lda	filter
    223  1043		       8d 9d 70 	      sta	filterSetValue
    224  1046							;jmp setFilter
    225  1046		       60		      rts
    226  1047
    227  1047				   ksetPad2
    228  1047		       8d 7a 70 	      sta	paddle2
    229  104a		       c9 00		      cmp	#0
    230  104c		       f0 03		      beq	skipLastPadSave
    231  104e		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
    232  1051				   skipLastPadSave
    233  1051		       0a		      asl
    234  1052		       0a		      asl
    235  1053		       18		      clc
    236  1054		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
    237  1056		       aa		      tax
    238  1057		       a0 c4		      ldy	#PAD2TEXT	; screen position
    239  1059		       4c 94 0c 	      jmp	updateText
    240  105c
    241  105c				   ksetFilter
    242  105c		       a2 00		      ldx	#0
    243  105e		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
    244  1061							;jsr setFilter
    245  1061		       8d 9d 70 	      sta	filterSetValue
    246  1064		       a9 00		      lda	#0
    247  1066		       4c 3c 11 	      jmp	setPaddles
    248  1069
    249  1069
    250  1069							;------------------
    251  1069							; Set pulse width
    252  1069							;------------------
    253  1069							; MIDI CONTROLLER	      <- 1 1 1	1 1 1 1
    254  1069							; PULSE WIDTH	      1 1 1 1  1 1 1 1	1 1 1 1
    255  1069							; -----------------------------------------------
    256  1069				   setPulseWidth
    257  1069							; write pulse high byte
    258  1069		       aa		      tax
    259  106a		       4a		      lsr
    260  106b		       4a		      lsr
    261  106c		       4a		      lsr
    262  106d		       4a		      lsr
    263  106e							;sta 1025+40 ; DEBUG!
    264  106e		       8d 03 d4 	      sta	SID1+SV1PWH
    265  1071		       8d 0a d4 	      sta	SID1+SV2PWH
    266  1074		       8d 11 d4 	      sta	SID1+SV3PWH
    267  1077		       8d 23 d4 	      sta	SID2+SV1PWH
    268  107a		       8d 2a d4 	      sta	SID2+SV2PWH
    269  107d		       8d 31 d4 	      sta	SID2+SV3PWH
    270  1080		       8d 03 71 	      sta	sidData+SV1PWH
    271  1083		       8d 0a 71 	      sta	sidData+SV2PWH
    272  1086		       8d 11 71 	      sta	sidData+SV3PWH
    273  1089
    274  1089							; write pulse low byte
    275  1089		       8a		      txa
    276  108a		       0a		      asl
    277  108b		       0a		      asl
    278  108c		       0a		      asl
    279  108d		       0a		      asl
    280  108e							;asl ; extra ?
    281  108e		       09 0f		      ora	#$0F
    282  1090							;sta 1024+40 ; DEBUG!
    283  1090		       8d 02 d4 	      sta	SID1+SV1PWL
    284  1093		       8d 09 d4 	      sta	SID1+SV2PWL
    285  1096		       8d 10 d4 	      sta	SID1+SV3PWL
    286  1099		       8d 22 d4 	      sta	SID2+SV1PWL
    287  109c		       8d 29 d4 	      sta	SID2+SV2PWL
    288  109f		       8d 30 d4 	      sta	SID2+SV3PWL
    289  10a2		       8d 02 71 	      sta	sidData+SV1PWL
    290  10a5		       8d 09 71 	      sta	sidData+SV2PWL
    291  10a8		       8d 10 71 	      sta	sidData+SV3PWL
    292  10ab		       60		      rts
    293  10ac
    294  10ac
    295  10ac							;setAllOscillators:
    296  10ac							;sta SID1+0,y
    297  10ac							;sta SID1+7,y
    298  10ac							;sta SID1+14,y
    299  10ac							;sta SID2+0,y
    300  10ac							;sta SID2+7,y
    301  10ac							;sta SID2+14,y
    302  10ac							;sta sidData+0,y
    303  10ac							;sta sidData+7,y
    304  10ac							;sta sidData+14,y
    305  10ac							;rts
    306  10ac
    307  10ac
    308  10ac
    309  10ac				   kfiltOnOff
    310  10ac		       8c 6c 70 	      sty	filterStatus
    311  10af				   setResonance
    312  10af		       ac 6c 70 	      ldy	filterStatus
    313  10b2							;------------------
    314  10b2							;lda sidData+SFILTC
    315  10b2		       ad 97 70 	      lda	resonance
    316  10b5		       19 dc 10 	      ora	filtOrValue,y
    317  10b8		       39 df 10 	      and	filtAndValue,y
    318  10bb		       8d 17 d4 	      sta	SID1+SFILTC
    319  10be		       8d 17 71 	      sta	sidData+SFILTC
    320  10c1							;------------------
    321  10c1		       ad 17 71 	      lda	sidData+SFILTC
    322  10c4		       19 dc 10 	      ora	filtOrValue,y
    323  10c7		       39 df 10 	      and	filtAndValue,y
    324  10ca		       8d 37 d4 	      sta	SID2+SFILTC
    325  10cd							;------------------
    326  10cd		       b9 e2 10 	      lda	filtDisableValue,y
    327  10d0		       8d 5c 70 	      sta	filterDisable
    328  10d3							;------------------
    329  10d3				   showFiltOnOff
    330  10d3		       b9 e5 10 	      lda	filtTextValue,y
    331  10d6		       aa		      tax
    332  10d7		       a0 4c		      ldy	#FILTERTEXT2
    333  10d9		       4c 94 0c 	      jmp	updateText
    334  10dc
    335  10dc
    336  10dc				   filtOrValue
    337  10dc		       0f 00 00 	      byte.b	$0F,0,0
    338  10df				   filtAndValue
    339  10df		       ff f0 f0 	      byte.b	$FF,$F0,$F0
    340  10e2				   filtDisableValue
    341  10e2		       00 00 01 	      byte.b	0,0,1
    342  10e5				   filtTextValue
    343  10e5		       04 00 60 	      byte.b	4,0,DISABLED
    344  10e8
    345  10e8				   ksetTune
    346  10e8		       8c 71 70 	      sty	tuneSetting
    347  10eb
    348  10eb		       98		      tya
    349  10ec		       38		      sec
    350  10ed		       e9 04		      sbc	#4
    351  10ef		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
    352  10f2
    353  10f2							;lda tuneArrPtrLL,y
    354  10f2							;sta tunePtrL
    355  10f2							;lda tuneArrPtrLH,y
    356  10f2							;sta tunePtrL+1
    357  10f2							;lda tuneArrPtrHL,y
    358  10f2							;sta tunePtrH
    359  10f2							;lda tuneArrPtrHH,y
    360  10f2							;sta tunePtrH+1
    361  10f2		       98		      tya
    362  10f3		       0a		      asl
    363  10f4		       0a		      asl
    364  10f5		       18		      clc
    365  10f6		       69 14		      adc	#TUNING
    366  10f8		       aa		      tax
    367  10f9		       a0 57		      ldy	#TUNINGTEXT
    368  10fb		       4c 94 0c 	      jmp	updateText
    369  10fe
    370  10fe
    371  10fe				   setFullScreenMode
    372  10fe		       8d 67 70 	      sta	fullScreenMode
    373  1101		       c9 00		      cmp	#0
    374  1103		       f0 11		      beq	notFullScreen
    375  1105							;--------
    376  1105		       a9 00		      lda	#<(PTRNTEXTBASE)
    377  1107		       85 2b		      sta	lowTextPtr
    378  1109		       a9 04		      lda	#>(PTRNTEXTBASE)
    379  110b		       85 2c		      sta	lowTextPtr+1
    380  110d		       a9 00		      lda	#<(PTRNCOLORBASE)
    381  110f		       85 2d		      sta	lowColorPtr
    382  1111		       a9 d8		      lda	#>(PTRNCOLORBASE)
    383  1113		       85 2e		      sta	lowColorPtr+1
    384  1115		       60		      rts
    385  1116							;--------
    386  1116				   notFullScreen
    387  1116		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
    388  1118		       85 2b		      sta	lowTextPtr
    389  111a		       a9 04		      lda	#>(PTRNTEXTBASE+200)
    390  111c		       85 2c		      sta	lowTextPtr+1
    391  111e		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
    392  1120		       85 2d		      sta	lowColorPtr
    393  1122		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
    394  1124		       85 2e		      sta	lowColorPtr+1
    395  1126		       20 f5 0b 	      jsr	displayInit
    396  1129		       60		      rts
    397  112a
    398  112a				   setHelpMode
    399  112a		       8d 70 70 	      sta	helpMode
    400  112d		       60		      rts
    401  112e
    402  112e							;--------------------------------
    403  112e							; Set Video Mode
    404  112e							;--------------------------------
    405  112e				   setVideoMode
    406  112e		       8d 45 70 	      sta	videoMode
    407  1131		       8c 68 70 	      sty	videoText
    408  1134		       98		      tya
    409  1135		       18		      clc
    410  1136		       69 30		      adc	#"0"
    411  1138		       8d bc 04 	      sta	1024+VIDEOTEXT
    412  113b		       60		      rts
    413  113c
    414  113c							;--------------------------------
    415  113c							; Set Paddles
    416  113c							;--------------------------------
    417  113c				   setPaddles
    418  113c		       8d 29 70 	      sta	paddle
    419  113f		       0a		      asl
    420  1140		       d0 0c		      bne	noFilterReset
    421  1142		       ae 57 70 	      ldx	filter
    422  1145		       8e 16 d4 	      stx	SID1+SFILTH
    423  1148		       8e 36 d4 	      stx	SID2+SFILTH
    424  114b		       8d 16 71 	      sta	sidData+SFILTH
    425  114e				   noFilterReset
    426  114e		       a0 00		      ldy	#0
    427  1150		       8c 76 70 	      sty	paddleTop
    428  1153		       8c 77 70 	      sty	paddleBottom
    429  1156				   showPaddle
    430  1156		       0a		      asl
    431  1157		       aa		      tax
    432  1158		       a0 9c		      ldy	#PADDLETEXT
    433  115a		       4c 94 0c 	      jmp	updateText
    434  115d
    435  115d
    436  115d							;--------------------------------
    437  115d							; Set LFO Depth
    438  115d							;--------------------------------
    439  115d				   setLFODepth
    440  115d		       8d 49 70 	      sta	LFODepth
    441  1160							;showLFO:
    442  1160		       ac 70 70 	      ldy	helpMode
    443  1163		       f0 01		      beq	doShowLFO
    444  1165		       60		      rts
    445  1166				   doShowLFO
    446  1166		       a0 6c		      ldy	#LFODEPTHTEXT
    447  1168		       18		      clc
    448  1169		       69 30		      adc	#"0"
    449  116b		       99 00 04 	      sta	1024,y
    450  116e		       a9 20		      lda	#32
    451  1170		       a2 08		      ldx	#8
    452  1172		       60		      rts
    453  1173
    454  1173
    455  1173							;--------------------------------
    456  1173							; Set LFO Rate
    457  1173							;--------------------------------
    458  1173				   setLFORate
    459  1173		       8d 48 70 	      sta	LFORate
    460  1176				   showLFORate
    461  1176		       ac 70 70 	      ldy	helpMode
    462  1179		       f0 01		      beq	doShowLFORate
    463  117b		       60		      rts
    464  117c				   doShowLFORate
    465  117c		       a0 94		      ldy	#LFORATETEXT
    466  117e		       18		      clc
    467  117f		       69 30		      adc	#"0"
    468  1181		       99 00 04 	      sta	1024,y
    469  1184							;lda #32
    470  1184		       a9 02		      lda	#CYNTHCART_COLOR
    471  1186		       a2 08		      ldx	#8
    472  1188				   LFOClear
    473  1188							;sta 1064,x
    474  1188		       9d 00 d8 	      sta	55296,x
    475  118b		       ca		      dex
    476  118c		       10 fa		      bpl	LFOClear
    477  118e		       60		      rts
    478  118f
    479  118f							;--------------------------------
    480  118f							; Set Release for each OSC2 indpendently
    481  118f							;--------------------------------
    482  118f							; A = release OSC2 value
    483  118f				   setReleaseOSC2
    484  118f							;sta release
    485  118f		       8d 0d d4 	      sta	SID1+SV2SR
    486  1192		       8d 2d d4 	      sta	SID2+SV2SR
    487  1195		       8d 0d 71 	      sta	sidData+SV2SR
    488  1198		       60		      rts
    489  1199							;jmp showRelease
    490  1199							;----------------
    491  1199
    492  1199							;--------------------------------
    493  1199							; Set Release for each OSC3 indpendently
    494  1199							;--------------------------------
    495  1199							; A = release OSC2 value
    496  1199				   setReleaseOSC3
    497  1199							;sta release
    498  1199		       8d 14 d4 	      sta	SID1+SV3SR
    499  119c		       8d 34 d4 	      sta	SID2+SV3SR
    500  119f		       8d 14 71 	      sta	sidData+SV3SR
    501  11a2		       60		      rts
    502  11a3							;jmp showRelease
    503  11a3							;----------------
    504  11a3							;--------------------------------
    505  11a3							; Set Release
    506  11a3							;--------------------------------
    507  11a3							; A = release OSC1 value
    508  11a3							; X = release OSC2 value
    509  11a3							; Y = release OSC3 value
    510  11a3				   setRelease
    511  11a3		       8d 6a 70 	      sta	release
    512  11a6		       8d 06 d4 	      sta	SID1+SV1SR
    513  11a9		       8d 0d d4 	      sta	SID1+SV2SR
    514  11ac		       8d 14 d4 	      sta	SID1+SV3SR
    515  11af		       8d 26 d4 	      sta	SID2+SV1SR
    516  11b2		       8d 2d d4 	      sta	SID2+SV2SR
    517  11b5		       8d 34 d4 	      sta	SID2+SV3SR
    518  11b8		       8d 06 71 	      sta	sidData+SV1SR
    519  11bb		       8d 0d 71 	      sta	sidData+SV2SR
    520  11be		       8d 14 71 	      sta	sidData+SV3SR
    521  11c1							;----------------
    522  11c1				   showRelease
    523  11c1		       ac 70 70 	      ldy	helpMode
    524  11c4		       f0 01		      beq	doShowRelease
    525  11c6		       60		      rts
    526  11c7				   doShowRelease
    527  11c7		       29 0f		      and	#$0F
    528  11c9		       a8		      tay
    529  11ca		       b9 f4 11 	      lda	sixteenToTen,y
    530  11cd		       18		      clc
    531  11ce		       69 30		      adc	#"0"
    532  11d0		       8d 8a 04 	      sta	1024+RELTEXT
    533  11d3		       60		      rts
    534  11d4
    535  11d4		       a0 8a		      ldy	#RELTEXT
    536  11d6		       a9 e0		      lda	#REL_SHORT
    537  11d8		       cd 6a 70 	      cmp	release
    538  11db		       30 05		      bmi	notRel0
    539  11dd		       a9 30		      lda	#"0"
    540  11df		       4c f0 11 	      jmp	setReleaseText
    541  11e2				   notRel0
    542  11e2		       a9 e9		      lda	#REL_MED
    543  11e4		       cd 6a 70 	      cmp	release
    544  11e7		       30 05		      bmi	notRel1
    545  11e9		       a9 31		      lda	#"1"
    546  11eb		       4c f0 11 	      jmp	setReleaseText
    547  11ee				   notRel1
    548  11ee		       a9 32		      lda	#"2"
    549  11f0				   setReleaseText
    550  11f0		       99 00 04 	      sta	1024,y
    551  11f3		       60		      rts
    552  11f4
    553  11f4				   sixteenToTen
    554  11f4		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
    555  1204
    556  1204
    557  1204				   setMidiMode
    558  1204		       8d f7 70 	      sta	midiMode
    559  1207				   showMidiMode
    560  1207		       a9 2f		      lda	#47
    561  1209		       8d e1 07 	      sta	2017
    562  120c		       ad 50 71 	      lda	midiEnabled
    563  120f		       d0 01		      bne	doShowMidiMode
    564  1211		       60		      rts
    565  1212				   doShowMidiMode
    566  1212		       a9 2f		      lda	#47
    567  1214		       8d dc 07 	      sta	2012
    568  1217		       8d d7 07 	      sta	2007
    569  121a		       ae f7 70 	      ldx	midiMode
    570  121d		       30 19		      bmi	showOmni
    571  121f							;sta 2010
    572  121f				   showChannel
    573  121f		       a9 20		      lda	#32
    574  1221		       8d d8 07 	      sta	2008
    575  1224		       a9 03		      lda	#3
    576  1226		       8d d9 07 	      sta	2009
    577  1229		       a9 08		      lda	#8
    578  122b		       8d da 07 	      sta	2010
    579  122e		       a9 31		      lda	#49
    580  1230		       18		      clc
    581  1231		       6d f7 70 	      adc	midiMode
    582  1234		       8d db 07 	      sta	2011
    583  1237		       60		      rts
    584  1238				   showOmni
    585  1238		       a9 0f		      lda	#15
    586  123a		       8d d8 07 	      sta	2008
    587  123d		       a9 0d		      lda	#13
    588  123f		       8d d9 07 	      sta	2009
    589  1242		       a9 0e		      lda	#14
    590  1244		       8d da 07 	      sta	2010
    591  1247		       a9 09		      lda	#9
    592  1249		       8d db 07 	      sta	2011
    593  124c
    594  124c		       20 13 13 	      jsr	showAdapter
    595  124f		       60		      rts
    596  1250
    597  1250							;--------------------------------
    598  1250							; Set Attack
    599  1250							;--------------------------------
    600  1250							; A = Attack value
    601  1250				   setAttack
    602  1250		       8d 69 70 	      sta	attack
    603  1253		       8d 0c d4 	      sta	SID1+SV2AD
    604  1256		       8d 13 d4 	      sta	SID1+SV3AD
    605  1259		       8d 2c d4 	      sta	SID2+SV2AD
    606  125c		       8d 33 d4 	      sta	SID2+SV3AD
    607  125f		       8d 05 d4 	      sta	SID1+SV1AD
    608  1262		       8d 25 d4 	      sta	SID2+SV1AD
    609  1265		       8d 0c 71 	      sta	sidData+SV2AD
    610  1268		       8d 13 71 	      sta	sidData+SV3AD
    611  126b		       8d 05 71 	      sta	sidData+SV1AD
    612  126e							;----------------
    613  126e				   showAttack
    614  126e		       ac 70 70 	      ldy	helpMode
    615  1271		       f0 01		      beq	doShowAttack
    616  1273		       60		      rts
    617  1274				   doShowAttack
    618  1274		       4a		      lsr
    619  1275		       4a		      lsr
    620  1276		       4a		      lsr
    621  1277		       4a		      lsr
    622  1278		       a8		      tay
    623  1279		       b9 f4 11 	      lda	sixteenToTen,y
    624  127c		       18		      clc
    625  127d		       69 30		      adc	#"0"
    626  127f		       8d 62 04 	      sta	1024+ATKTEXT
    627  1282		       60		      rts
    628  1283
    629  1283
    630  1283							;-----------------------------------
    631  1283							; Set Volume to A (for key command)
    632  1283							;-----------------------------------
    633  1283				   ksetVolume
    634  1283		       8d 1c 70 	      sta	volume
    635  1286
    636  1286
    637  1286							;-----------------------------------
    638  1286							; Set Volume
    639  1286							;-----------------------------------
    640  1286				   setVolume
    641  1286		       ad 24 70 	      lda	volModeRAM
    642  1289		       29 f0		      and	#$F0
    643  128b		       0d 1c 70 	      ora	volume
    644  128e		       8d 18 d4 	      sta	SID1+SVOLMODE
    645  1291		       8d 38 d4 	      sta	SID2+SVOLMODE
    646  1294		       8d 18 71 	      sta	sidData+SVOLMODE
    647  1297				   showVolume
    648  1297		       ac 70 70 	      ldy	helpMode
    649  129a		       f0 01		      beq	doShowVolume
    650  129c		       60		      rts
    651  129d				   doShowVolume
    652  129d		       29 0f		      and	#$0F
    653  129f		       aa		      tax
    654  12a0		       bd f4 11 	      lda	sixteenToTen,x
    655  12a3		       18		      clc
    656  12a4		       69 30		      adc	#"0"
    657  12a6		       8d a7 04 	      sta	1024+VOLTEXT
    658  12a9		       60		      rts
    659  12aa
    660  12aa		       aa		      tax
    661  12ab		       bd f4 11 	      lda	sixteenToTen,x
    662  12ae		       aa		      tax
    663  12af		       a0 a7		      ldy	#VOLTEXT
    664  12b1		       a9 07		      lda	#VOLLOW
    665  12b3		       20 94 0c 	      jsr	updateText
    666  12b6		       60		      rts
    667  12b7
    668  12b7
    669  12b7							; set volume text
    670  12b7		       a0 a7		      ldy	#VOLTEXT
    671  12b9		       a9 07		      lda	#VOLLOW
    672  12bb		       cd 1c 70 	      cmp	volume
    673  12be		       30 05		      bmi	notLow
    674  12c0		       a2 50		      ldx	#VLOW
    675  12c2		       4c 94 0c 	      jmp	updateText
    676  12c5				   notLow
    677  12c5		       a9 0b		      lda	#VOLMED
    678  12c7		       cd 1c 70 	      cmp	volume
    679  12ca		       30 05		      bmi	notMed
    680  12cc		       a2 54		      ldx	#VMED
    681  12ce		       4c 94 0c 	      jmp	updateText
    682  12d1				   notMed
    683  12d1		       a2 58		      ldx	#VHIGH
    684  12d3		       4c 94 0c 	      jmp	updateText
    685  12d6							;-------------------------------------
    686  12d6
    687  12d6
    688  12d6							;-----------------------------------
    689  12d6							; Set Octave
    690  12d6							;-----------------------------------
    691  12d6				   setOctave
    692  12d6		       8d 6b 70 	      sta	octave
    693  12d9		       aa		      tax
    694  12da		       bd 28 29 	      lda	octaveTable,x
    695  12dd		       8d 22 70 	      sta	keyOffset
    696  12e0				   showOctave
    697  12e0		       ac 70 70 	      ldy	helpMode
    698  12e3		       f0 01		      beq	doShowOctave
    699  12e5		       60		      rts
    700  12e6				   doShowOctave
    701  12e6		       8a		      txa
    702  12e7		       18		      clc
    703  12e8		       69 30		      adc	#"0"
    704  12ea		       aa		      tax
    705  12eb		       8d 7f 04 	      sta	1024+OCTAVETEXT
    706  12ee		       60		      rts
    707  12ef
    708  12ef							;-----------------------------------
    709  12ef							; Set Filter
    710  12ef							;-----------------------------------
    711  12ef				   setFilter
    712  12ef		       8d 16 d4 	      sta	SID1+SFILTH
    713  12f2		       8d 36 d4 	      sta	SID2+SFILTH
    714  12f5		       8d 16 71 	      sta	sidData+SFILTH
    715  12f8
    716  12f8		       8d 57 70 	      sta	filter
    717  12fb				   showFilter
    718  12fb		       ac 70 70 	      ldy	helpMode
    719  12fe		       f0 01		      beq	testFullScreenMode
    720  1300							;beq doShowFilter
    721  1300		       60		      rts
    722  1301				   testFullScreenMode
    723  1301		       ac 67 70 	      ldy	fullScreenMode
    724  1304		       f0 01		      beq	doShowFilter
    725  1306		       60		      rts
    726  1307				   doShowFilter
    727  1307		       4a		      lsr
    728  1308		       4a		      lsr
    729  1309		       4a		      lsr
    730  130a		       4a		      lsr
    731  130b		       4a		      lsr
    732  130c		       18		      clc
    733  130d		       69 30		      adc	#"0"
    734  130f				   endFilter
    735  130f		       8d 75 04 	      sta	1024+FILTERTEXT
    736  1312		       60		      rts
    737  1313
    738  1313
    739  1313							;-----------------------------------
    740  1313							; Set Midi mode
    741  1313							;-----------------------------------
    742  1313				   showAdapter
    743  1313							; Draw name of new sound mode on screen...
    744  1313		       ad 50 71 	      lda	midiEnabled
    745  1316		       0a		      asl
    746  1317		       0a		      asl
    747  1318		       0a		      asl
    748  1319							;lda modeNameOffsets,x
    749  1319							;lda fxNames,x
    750  1319		       aa		      tax
    751  131a		       a0 00		      ldy	#0
    752  131c				   drawMidiModeLoop
    753  131c							;lda modeNamesPolyphony,x
    754  131c		       bd f6 29 	      lda	midiModeNames,x
    755  131f		       c9 40		      cmp	#64
    756  1321		       30 02		      bmi	showSpaceZMidiMode
    757  1323		       e9 40		      sbc	#64
    758  1325				   showSpaceZMidiMode
    759  1325		       99 cf 07 	      sta	1024+40*24+15,y
    760  1328		       e8		      inx
    761  1329		       c8		      iny
    762  132a		       c0 08		      cpy	#8
    763  132c		       d0 ee		      bne	drawMidiModeLoop
    764  132e							; - - - - -
    765  132e							;inx ; Get polyphony value at end of name string...
    766  132e							;inx
    767  132e							;lda modeNamesPolyphony,x
    768  132e							;sta polyphony
    769  132e
    770  132e							;lda #8
    771  132e							;sta bufferSize
    772  132e
    773  132e		       60		      rts
    774  132f
    775  132f
    776  132f
    777  132f							;-----------------------------------
    778  132f							; Set FX mode with A,Y (for key command)
    779  132f							;-----------------------------------
    780  132f				   ksetFX
    781  132f		       8d 86 70 	      sta	fxType
    782  1332							;-----------------------------------
    783  1332							; Set FX mode
    784  1332							;-----------------------------------
    785  1332				   setFX
    786  1332		       ad 70 70 	      lda	helpMode
    787  1335		       f0 01		      beq	doShowFX
    788  1337		       60		      rts
    789  1338				   doShowFX
    790  1338							;lda fxType
    791  1338
    792  1338							; Draw name of new sound mode on screen...
    793  1338		       ad 86 70 	      lda	fxType
    794  133b		       0a		      asl
    795  133c		       0a		      asl
    796  133d		       0a		      asl
    797  133e							;lda modeNameOffsets,x
    798  133e							;lda fxNames,x
    799  133e		       aa		      tax
    800  133f		       a0 00		      ldy	#0
    801  1341				   drawModeLoopFX
    802  1341							;lda modeNamesPolyphony,x
    803  1341		       bd 1e 2a 	      lda	fxNames,x
    804  1344		       c9 40		      cmp	#64
    805  1346		       30 02		      bmi	showSpaceZFX
    806  1348		       e9 40		      sbc	#64
    807  134a				   showSpaceZFX
    808  134a		       99 af 04 	      sta	1024+FXTEXT,y
    809  134d		       e8		      inx
    810  134e		       c8		      iny
    811  134f		       c0 05		      cpy	#5
    812  1351		       d0 ee		      bne	drawModeLoopFX
    813  1353							; - - - - -
    814  1353							;inx ; Get polyphony value at end of name string...
    815  1353							;inx
    816  1353							;lda modeNamesPolyphony,x
    817  1353							;sta polyphony
    818  1353
    819  1353							;lda #8
    820  1353							;sta bufferSize
    821  1353
    822  1353		       60		      rts
    823  1354
    824  1354
    825  1354
    826  1354				   portSpeedTable
    827  1354		       06 07 09 	      byte.b	6,7,9
    828  1357							;byte 5,7,9
    829  1357
    830  1357							;-----------------------------------
    831  1357							; set port with A,Y (for key command)
    832  1357							;-----------------------------------
    833  1357				   ksetMode
    834  1357							;sta portOn
    835  1357		       8d 1d 70 	      sta	soundMode
    836  135a							;sty portSpd
    837  135a							; . . . . . . . . . .
    838  135a							;-----------------------------------
    839  135a							; Set sound mode
    840  135a							;-----------------------------------
    841  135a				   setMode
    842  135a				   showModeName
    843  135a		       ac 70 70 	      ldy	helpMode
    844  135d		       f0 01		      beq	doShowModeName
    845  135f		       60		      rts
    846  1360				   doShowModeName
    847  1360
    848  1360		       ad 1d 70 	      lda	soundMode	; This probably needs work
    849  1363
    850  1363							; Draw name of new sound mode on screen...
    851  1363		       ae 1d 70 	      ldx	soundMode
    852  1366		       bd 4a 33 	      lda	modeNameOffsets,x
    853  1369		       aa		      tax
    854  136a		       a0 00		      ldy	#0
    855  136c				   drawModeLoop
    856  136c		       bd ca 32 	      lda	modeNamesPolyphony,x
    857  136f		       c9 40		      cmp	#64
    858  1371		       30 02		      bmi	showSpaceZ
    859  1373		       e9 40		      sbc	#64
    860  1375				   showSpaceZ
    861  1375		       99 2d 04 	      sta	1024+MODETEXT,y
    862  1378		       e8		      inx
    863  1379		       c8		      iny
    864  137a		       c0 05		      cpy	#5
    865  137c		       d0 ee		      bne	drawModeLoop
    866  137e							; - - - - -
    867  137e		       e8		      inx		; Get polyphony value at end of name string...
    868  137f		       e8		      inx
    869  1380		       bd ca 32 	      lda	modeNamesPolyphony,x
    870  1383		       8d 84 70 	      sta	polyphony
    871  1386
    872  1386		       a9 08		      lda	#8
    873  1388		       8d 80 70 	      sta	bufferSize
    874  138b
    875  138b
    876  138b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    877  138b							;sta 1024+161 ;DEBUG
    878  138b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    879  138b
    880  138b
    881  138b							; set up pointer to portamento speed array
    882  138b							; (which is the tuning array)
    883  138b							;lda portSpd
    884  138b							;clc
    885  138b							;adc #4
    886  138b
    887  138b							; New version of code above...
    888  138b		       ad 1d 70 	      lda	soundMode
    889  138e		       29 0f		      and	#$0F	; Get portamento speed
    890  1390		       a8		      tay
    891  1391		       b9 54 13 	      lda	portSpeedTable,y
    892  1394
    893  1394							;clc
    894  1394							;asl ; X2
    895  1394							;adc #5
    896  1394
    897  1394		       a8		      tay
    898  1395							;	ldy #5 ; portSpd DEBUG
    899  1395		       b9 c0 33 	      lda	tuneArrPtrLL,y
    900  1398		       85 35		      sta	portPtrL
    901  139a		       b9 ca 33 	      lda	tuneArrPtrLH,y
    902  139d		       85 36		      sta	portPtrL+1
    903  139f		       b9 d4 33 	      lda	tuneArrPtrHL,y
    904  13a2		       85 47		      sta	portPtrH
    905  13a4		       b9 de 33 	      lda	tuneArrPtrHH,y
    906  13a7		       85 48		      sta	portPtrH+1
    907  13a9		       60		      rts
    908  13aa
    909  13aa
    910  13aa							;----------------------------------------
    911  13aa							; subroutine to set up patch
    912  13aa							; (patch # stored in Y)
    913  13aa							;----------------------------------------
    914  13aa				   setPatch
    915  13aa		       8c 47 70 	      sty	patchSetY
    916  13ad
    917  13ad		       b9 38 28 	      lda	patchVol,y
    918  13b0		       8d 1c 70 	      sta	volume
    919  13b3
    920  13b3		       b9 fc 27 	      lda	patchPaddle,y
    921  13b6		       20 3c 11 	      jsr	setPaddles
    922  13b9
    923  13b9							;.....................
    924  13b9		       20 75 0a 	      jsr	midiPanic
    925  13bc							;.....................
    926  13bc
    927  13bc							; Reset modulation values
    928  13bc		       a9 7f		      lda	#127
    929  13be		       8d 9c 70 	      sta	filterModValue
    930  13c1		       8d 9e 70 	      sta	pwModValue
    931  13c4
    932  13c4		       ac 47 70 	      ldy	patchSetY
    933  13c7		       b9 1a 28 	      lda	newPatchFiltCut,y
    934  13ca		       8d 9d 70 	      sta	filterSetValue
    935  13cd							;jsr setFilter
    936  13cd
    937  13cd							;lda patchFilt,y
    938  13cd							;sta SID1+SV1PWL
    939  13cd
    940  13cd
    941  13cd		       ac 47 70 	      ldy	patchSetY
    942  13d0		       b9 0b 27 	      lda	patchSoundMode,y
    943  13d3		       8d 1d 70 	      sta	soundMode
    944  13d6		       20 5a 13 	      jsr	setMode
    945  13d9
    946  13d9		       ac 47 70 	      ldy	patchSetY
    947  13dc		       b9 56 28 	      lda	patchPWL,y
    948  13df		       8d 02 d4 	      sta	SID1+SV1PWL
    949  13e2		       8d 09 d4 	      sta	SID1+SV2PWL
    950  13e5		       8d 10 d4 	      sta	SID1+SV3PWL
    951  13e8		       8d 22 d4 	      sta	SID2+SV1PWL
    952  13eb		       8d 29 d4 	      sta	SID2+SV2PWL
    953  13ee		       8d 30 d4 	      sta	SID2+SV3PWL
    954  13f1		       8d 02 71 	      sta	sidData+SV1PWL
    955  13f4		       8d 09 71 	      sta	sidData+SV2PWL
    956  13f7		       8d 10 71 	      sta	sidData+SV3PWL
    957  13fa
    958  13fa		       ac 47 70 	      ldy	patchSetY
    959  13fd		       b9 74 28 	      lda	patchPWH,y
    960  1400		       8d 03 d4 	      sta	SID1+SV1PWH
    961  1403		       8d 0a d4 	      sta	SID1+SV2PWH
    962  1406		       8d 11 d4 	      sta	SID1+SV3PWH
    963  1409		       8d 23 d4 	      sta	SID2+SV1PWH
    964  140c		       8d 2a d4 	      sta	SID2+SV2PWH
    965  140f		       8d 31 d4 	      sta	SID2+SV3PWH
    966  1412		       8d 03 71 	      sta	sidData+SV1PWH
    967  1415		       8d 0a 71 	      sta	sidData+SV2PWH
    968  1418		       8d 11 71 	      sta	sidData+SV3PWH
    969  141b
    970  141b		       ac 47 70 	      ldy	patchSetY
    971  141e		       b9 92 28 	      lda	patchWave1,y
    972  1421		       8d 30 70 	      sta	WaveType
    973  1424		       b9 b0 28 	      lda	patchWave2,y
    974  1427		       8d 37 70 	      sta	WaveType2
    975  142a		       b9 ce 28 	      lda	patchWave3,y
    976  142d		       8d 3e 70 	      sta	WaveType3
    977  1430
    978  1430		       ac 47 70 	      ldy	patchSetY
    979  1433		       b9 48 27 	      lda	patchLFO,y
    980  1436		       29 0f		      and	#$0F
    981  1438		       8c 0c 70 	      sty	temp
    982  143b		       20 73 11 	      jsr	setLFORate
    983  143e		       ac 0c 70 	      ldy	temp
    984  1441		       b9 48 27 	      lda	patchLFO,y
    985  1444		       29 f0		      and	#$F0
    986  1446		       4a		      lsr
    987  1447		       4a		      lsr
    988  1448		       4a		      lsr
    989  1449		       4a		      lsr
    990  144a							;lda #2
    991  144a		       20 5d 11 	      jsr	setLFODepth
    992  144d
    993  144d		       ac 0c 70 	      ldy	temp
    994  1450		       b9 84 27 	      lda	patchAD,y
    995  1453							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
    996  1453							;lda #$F0
    997  1453		       20 50 12 	      jsr	setAttack
    998  1456		       ac 47 70 	      ldy	patchSetY
    999  1459
   1000  1459		       ac 0c 70 	      ldy	temp
   1001  145c		       b9 a2 27 	      lda	patchSR1,y
   1002  145f		       20 a3 11 	      jsr	setRelease
   1003  1462		       ac 0c 70 	      ldy	temp
   1004  1465		       b9 c0 27 	      lda	patchSR2,y
   1005  1468		       20 8f 11 	      jsr	setReleaseOSC2
   1006  146b		       b9 de 27 	      lda	patchSR3,y
   1007  146e		       20 99 11 	      jsr	setReleaseOSC3
   1008  1471
   1009  1471		       ac 47 70 	      ldy	patchSetY
   1010  1474
   1011  1474		       b9 ec 28 	      lda	patchFilt,y
   1012  1477		       ae 5c 70 	      ldx	filterDisable
   1013  147a		       f0 02		      beq	skipFilterDisable
   1014  147c		       29 f0		      and	#$F0
   1015  147e				   skipFilterDisable
   1016  147e		       8d 17 d4 	      sta	SID1+SFILTC
   1017  1481		       8d 37 d4 	      sta	SID2+SFILTC
   1018  1484		       8d 17 71 	      sta	sidData+SFILTC
   1019  1487		       29 01		      and	#$01
   1020  1489		       f0 07		      beq	skipFilterOnText
   1021  148b		       a0 4c		      ldy	#FILTERTEXT2
   1022  148d		       a2 04		      ldx	#4
   1023  148f		       20 94 0c 	      jsr	updateText
   1024  1492				   skipFilterOnText
   1025  1492		       ac 47 70 	      ldy	patchSetY
   1026  1495
   1027  1495		       b9 0a 29 	      lda	patchVolMode,y
   1028  1498		       29 f0		      and	#$F0
   1029  149a		       0d 1c 70 	      ora	volume
   1030  149d		       8d 24 70 	      sta	volModeRAM
   1031  14a0		       20 86 12 	      jsr	setVolume
   1032  14a3		       ac 47 70 	      ldy	patchSetY
   1033  14a6
   1034  14a6		       b9 66 27 	      lda	patchOctave,y
   1035  14a9		       20 d6 12 	      jsr	setOctave
   1036  14ac		       ac 47 70 	      ldy	patchSetY
   1037  14af
   1038  14af		       b9 2a 27 	      lda	patchFX,y
   1039  14b2		       8d 86 70 	      sta	fxType
   1040  14b5		       20 32 13 	      jsr	setFX
   1041  14b8
   1042  14b8		       20 bc 14 	      jsr	showPatchName
   1043  14bb
   1044  14bb		       60		      rts
   1045  14bc							;------------------------ end of setpatch
   1046  14bc
   1047  14bc				   showPatchName
   1048  14bc		       ad 70 70 	      lda	helpMode
   1049  14bf		       f0 01		      beq	doShowPatchName
   1050  14c1		       60		      rts
   1051  14c2				   doShowPatchName
   1052  14c2		       ad 47 70 	      lda	patchSetY
   1053  14c5		       29 f0		      and	#%11110000
   1054  14c7		       d0 1f		      bne	patchNameSecondBank
   1055  14c9							;tay
   1056  14c9		       ac 47 70 	      ldy	patchSetY
   1057  14cc		       c8		      iny
   1058  14cd		       98		      tya
   1059  14ce		       0a		      asl
   1060  14cf		       0a		      asl
   1061  14d0		       0a		      asl
   1062  14d1		       0a		      asl
   1063  14d2		       a8		      tay
   1064  14d3		       88		      dey
   1065  14d4		       a2 0f		      ldx	#15
   1066  14d6				   patchText
   1067  14d6		       b9 0b 25 	      lda	patchName,y
   1068  14d9		       c9 40		      cmp	#64
   1069  14db		       30 03		      bmi	pshowSpace
   1070  14dd		       38		      sec
   1071  14de		       e9 40		      sbc	#64
   1072  14e0				   pshowSpace
   1073  14e0		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1074  14e3		       88		      dey
   1075  14e4		       ca		      dex
   1076  14e5		       10 ef		      bpl	patchText
   1077  14e7		       60		      rts
   1078  14e8
   1079  14e8				   patchNameSecondBank
   1080  14e8							;tay
   1081  14e8		       ac 47 70 	      ldy	patchSetY
   1082  14eb		       c8		      iny
   1083  14ec		       98		      tya
   1084  14ed		       0a		      asl
   1085  14ee		       0a		      asl
   1086  14ef		       0a		      asl
   1087  14f0		       0a		      asl
   1088  14f1		       a8		      tay
   1089  14f2		       88		      dey
   1090  14f3		       a2 0f		      ldx	#15
   1091  14f5				   patchText2
   1092  14f5		       b9 0b 26 	      lda	patchName2,y
   1093  14f8		       c9 40		      cmp	#64
   1094  14fa		       30 03		      bmi	pshowSpace2
   1095  14fc		       38		      sec
   1096  14fd		       e9 40		      sbc	#64
   1097  14ff				   pshowSpace2
   1098  14ff		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1099  1502		       88		      dey
   1100  1503		       ca		      dex
   1101  1504		       10 ef		      bpl	patchText2
   1102  1506		       60		      rts
   1103  1507
   1104  1507
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sound.asm LEVEL 2 PASS 2
      0  1507					      include	"cynth_sound.asm"
      1  1507				   processSoundDriver
      2  1507							; determine whether to use portamento player
      3  1507							; or regular player...
      4  1507		       ad 1d 70 	      lda	soundMode
      5  150a		       f0 28		      beq	polyMode
      6  150c		       29 20		      and	#MONO_MASK
      7  150e		       f0 03		      beq	nextSoundModeCheck1
      8  1510		       4c 54 15 	      jmp	playMono
      9  1513				   nextSoundModeCheck1
     10  1513		       ad 1d 70 	      lda	soundMode
     11  1516		       29 10		      and	#PORT_MASK
     12  1518		       f0 03		      beq	nextSoundModeCheck2
     13  151a		       4c c3 19 	      jmp	playPort
     14  151d				   nextSoundModeCheck2
     15  151d		       ad 1d 70 	      lda	soundMode
     16  1520		       29 40		      and	#ARP_MASK
     17  1522		       f0 03		      beq	nextSoundModeCheck3
     18  1524		       4c 14 16 	      jmp	playArp
     19  1527				   nextSoundModeCheck3
     20  1527		       ad 1d 70 	      lda	soundMode
     21  152a		       29 08		      and	#CHAN6_MASK
     22  152c		       f0 03		      beq	nextSoundModeCheck4
     23  152e		       4c 93 16 	      jmp	play6Chan
     24  1531				   nextSoundModeCheck4
     25  1531		       4c af 15 	      jmp	playFifths	; Otherwise, it's a 5ths mode
     26  1534							;lda soundMode
     27  1534							;cmp #MODE_5THS
     28  1534							;bne endSoundMode
     29  1534							;jmp playFifths
     30  1534							;endSoundMode:
     31  1534							;brk ; Shouldn't ever reach this point in code
     32  1534
     33  1534
     34  1534							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     35  1534							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
     36  1534							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     37  1534				   polyMode
     38  1534		       a2 02		      ldx	#2
     39  1536				   polyCopyLoop
     40  1536		       bd a0 70 	      lda	noteNumArray,x
     41  1539		       9d b0 70 	      sta	playNoteArray,x
     42  153c		       ca		      dex
     43  153d		       10 f7		      bpl	polyCopyLoop
     44  153f
     45  153f		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
     46  1542		       8d b3 70 	      sta	playNoteArray+3
     47  1545		       ad a1 70 	      lda	noteNumArray+1
     48  1548		       8d b4 70 	      sta	playNoteArray+4
     49  154b		       ad a2 70 	      lda	noteNumArray+2
     50  154e		       8d b5 70 	      sta	playNoteArray+5
     51  1551
     52  1551		       4c b9 18 	      jmp	sixVoicePlayer
     53  1554
     54  1554							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     55  1554							; MONO-STACK SOUND DRIVER
     56  1554							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     57  1554				   playMono
     58  1554		       ad a0 70 	      lda	noteNumArray
     59  1557				   playMonoWithA
     60  1557		       8d 0c 70 	      sta	temp
     61  155a		       8d b0 70 	      sta	playNoteArray+0
     62  155d		       c9 ff		      cmp	#255
     63  155f		       f0 29		      beq	monoMute
     64  1561		       ae 1d 70 	      ldx	soundMode
     65  1564							;dex
     66  1564							;beq noRaiseOctave
     67  1564		       e0 21		      cpx	#MODE_MONO2
     68  1566		       f0 07		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
     69  1568		       e0 32		      cpx	#MODE_MONOPORT2
     70  156a		       f0 03		      beq	noRaiseOctave
     71  156c							;-------------------------------------
     72  156c		       18		      clc
     73  156d		       69 0c		      adc	#12
     74  156f				   noRaiseOctave
     75  156f		       8d b1 70 	      sta	playNoteArray+1
     76  1572							;lda noteNumArray
     77  1572		       ad 0c 70 	      lda	temp
     78  1575		       ae 1d 70 	      ldx	soundMode
     79  1578		       e0 21		      cpx	#MODE_MONO2
     80  157a		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
     81  157c		       38		      sec
     82  157d		       e9 0c		      sbc	#12
     83  157f		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
     84  1581		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
     85  1584							;-------------------------------------
     86  1584				   noDropOctave
     87  1584		       8d b2 70 	      sta	playNoteArray+2
     88  1587		       4c 90 15 	      jmp	doubleToStereo
     89  158a				   monoMute
     90  158a		       8d b1 70 	      sta	playNoteArray+1
     91  158d		       8d b2 70 	      sta	playNoteArray+2
     92  1590
     93  1590				   doubleToStereo
     94  1590		       ad b0 70 	      lda	playNoteArray+0
     95  1593		       8d b3 70 	      sta	playNoteArray+3
     96  1596		       ad b1 70 	      lda	playNoteArray+1
     97  1599		       8d b4 70 	      sta	playNoteArray+4
     98  159c		       ad b2 70 	      lda	playNoteArray+2
     99  159f		       8d b5 70 	      sta	playNoteArray+5
    100  15a2
    101  15a2							;;- NEW! ------------------------------;;
    102  15a2		       ad 1d 70 	      lda	soundMode
    103  15a5		       29 10		      and	#PORT_MASK
    104  15a7		       f0 03		      beq	continueToSixVoice7
    105  15a9		       4c ce 19 	      jmp	portPlayer	; SKIP TO PLAYER
    106  15ac							;jmp playPort ; ORIGINAL
    107  15ac							;;-------------------------------------;;
    108  15ac
    109  15ac				   continueToSixVoice7
    110  15ac		       4c b9 18 	      jmp	sixVoicePlayer
    111  15af
    112  15af							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    113  15af							; 5THS SOUND DRIVER (DEFAULT)
    114  15af							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    115  15af				   playFifths
    116  15af							;jmp polyMode ; DEBUG!
    117  15af		       20 1e 21 	      jsr	doSort
    118  15b2		       a2 02		      ldx	#2
    119  15b4				   fifthsCopyLoop
    120  15b4		       bd a0 70 	      lda	noteNumArray,x
    121  15b7		       9d b0 70 	      sta	playNoteArray,x
    122  15ba		       ca		      dex
    123  15bb		       10 f7		      bpl	fifthsCopyLoop
    124  15bd							; Add 5th
    125  15bd		       ad b0 70 	      lda	playNoteArray
    126  15c0		       c9 ff		      cmp	#255
    127  15c2		       f0 26		      beq	end5ths
    128  15c4		       ad b1 70 	      lda	playNoteArray+1
    129  15c7		       c9 ff		      cmp	#255
    130  15c9		       d0 0c		      bne	checkThird
    131  15cb							; Found a note and an empty slot, put 5th in second slot
    132  15cb		       ad b0 70 	      lda	playNoteArray
    133  15ce		       18		      clc
    134  15cf		       69 07		      adc	#7
    135  15d1		       8d b1 70 	      sta	playNoteArray+1
    136  15d4		       4c ea 15 	      jmp	end5ths
    137  15d7
    138  15d7				   checkThird
    139  15d7		       ad b2 70 	      lda	playNoteArray+2
    140  15da		       c9 ff		      cmp	#255
    141  15dc		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
    142  15de							; Third slot is free, so put 5th is 3rd slot
    143  15de		       ad b1 70 	      lda	playNoteArray+1
    144  15e1		       18		      clc
    145  15e2		       69 07		      adc	#7
    146  15e4		       8d b2 70 	      sta	playNoteArray+2
    147  15e7		       4c ea 15 	      jmp	end5ths
    148  15ea
    149  15ea				   end5ths
    150  15ea		       ad b0 70 	      lda	playNoteArray+0
    151  15ed		       8d b3 70 	      sta	playNoteArray+3
    152  15f0		       ad b1 70 	      lda	playNoteArray+1
    153  15f3		       8d b4 70 	      sta	playNoteArray+4
    154  15f6		       ad b2 70 	      lda	playNoteArray+2
    155  15f9		       8d b5 70 	      sta	playNoteArray+5
    156  15fc
    157  15fc		       ad 1d 70 	      lda	soundMode
    158  15ff		       c9 02		      cmp	#MODE_5PORT
    159  1601		       f0 03		      beq	playPort5th
    160  1603		       4c b9 18 	      jmp	sixVoicePlayer
    161  1606				   playPort5th
    162  1606		       4c ce 19 	      jmp	portPlayer
    163  1609
    164  1609
    165  1609
    166  1609
    167  1609				   arpSpeedTable
    168  1609		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
    169  1614
    170  1614							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    171  1614							; ARP STEREO SOUND DRIVER
    172  1614							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    173  1614				   playArp
    174  1614
    175  1614							; Figure out arp speed setting...
    176  1614		       ad 1d 70 	      lda	soundMode
    177  1617		       29 0f		      and	#$0F
    178  1619		       aa		      tax
    179  161a		       bd 09 16 	      lda	arpSpeedTable,x
    180  161d		       8d 0c 70 	      sta	temp
    181  1620
    182  1620		       ae 1d 70 	      ldx	soundMode
    183  1623		       e0 43		      cpx	#MODE_ARP4
    184  1625		       f0 35		      beq	playArpDown
    185  1627		       e0 44		      cpx	#MODE_ARP5
    186  1629		       f0 31		      beq	playArpDown
    187  162b
    188  162b							;***********
    189  162b							; ARP UP
    190  162b							;***********
    191  162b							; Increment arpOffset pointer...
    192  162b		       ad 03 70 	      lda	Frame
    193  162e		       2d 0c 70 	      and	temp	; Arp speed
    194  1631		       d0 03		      bne	skipArpAdvance
    195  1633		       ee 85 70 	      inc	arpOffset
    196  1636				   skipArpAdvance
    197  1636
    198  1636							; Sort note buffer
    199  1636		       20 1e 21 	      jsr	doSort
    200  1639
    201  1639							; Count the number of notes...
    202  1639		       a2 00		      ldx	#0
    203  163b		       a9 ff		      lda	#255
    204  163d				   noteCount
    205  163d		       dd a0 70 	      cmp	noteNumArray,x
    206  1640		       f0 06		      beq	quitNoteCount
    207  1642		       e8		      inx
    208  1643		       ec 80 70 	      cpx	bufferSize
    209  1646		       d0 f5		      bne	noteCount
    210  1648				   quitNoteCount
    211  1648							; X now contains the note count
    212  1648
    213  1648							; Make sure arpOffset isn't past end...
    214  1648		       ca		      dex
    215  1649		       ec 85 70 	      cpx	arpOffset
    216  164c		       10 05		      bpl	noArpOffsetReset
    217  164e		       a9 00		      lda	#0	; Reset to zero
    218  1650		       8d 85 70 	      sta	arpOffset
    219  1653				   noArpOffsetReset
    220  1653
    221  1653							; Play single arp note...
    222  1653		       ac 85 70 	      ldy	arpOffset
    223  1656		       b9 a0 70 	      lda	noteNumArray,y
    224  1659
    225  1659		       4c 57 15 	      jmp	playMonoWithA
    226  165c
    227  165c							;lda soundMode
    228  165c							;and #PORT_MASK
    229  165c							;beq nextSoundModeCheck2
    230  165c							;jmp playPort
    231  165c
    232  165c
    233  165c							;***********
    234  165c							; ARP DOWN
    235  165c							;***********
    236  165c				   playArpDown
    237  165c							; Decrement arpOffset pointer...
    238  165c		       ad 03 70 	      lda	Frame
    239  165f		       2d 0c 70 	      and	temp	; Arp speed
    240  1662		       d0 03		      bne	skipArpAdvance2
    241  1664		       ce 85 70 	      dec	arpOffset
    242  1667				   skipArpAdvance2
    243  1667
    244  1667							; Sort note buffer
    245  1667		       20 1e 21 	      jsr	doSort
    246  166a
    247  166a							; Count the number of notes...
    248  166a		       a2 00		      ldx	#0
    249  166c		       a9 ff		      lda	#255
    250  166e				   noteCount2
    251  166e		       dd a0 70 	      cmp	noteNumArray,x
    252  1671		       f0 06		      beq	quitNoteCount2
    253  1673		       e8		      inx
    254  1674		       ec 80 70 	      cpx	bufferSize
    255  1677		       30 f5		      bmi	noteCount2
    256  1679				   quitNoteCount2
    257  1679							; X now contains the note count
    258  1679		       8e 0c 70 	      stx	temp
    259  167c
    260  167c							; Make sure arpOffset isn't at zero...
    261  167c		       ad 85 70 	      lda	arpOffset
    262  167f		       10 09		      bpl	noArpOffsetReset2
    263  1681		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
    264  1684		       f0 01		      beq	skipTempDecrement
    265  1686		       ca		      dex
    266  1687				   skipTempDecrement
    267  1687		       8e 85 70 	      stx	arpOffset
    268  168a				   noArpOffsetReset2
    269  168a
    270  168a							; Play single arp note...
    271  168a		       ac 85 70 	      ldy	arpOffset
    272  168d		       b9 a0 70 	      lda	noteNumArray,y
    273  1690
    274  1690		       4c 57 15 	      jmp	playMonoWithA
    275  1693
    276  1693
    277  1693							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    278  1693							; 6-CHANNEL MONO SOUND DRIVER
    279  1693							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    280  1693				   play6Chan
    281  1693		       ad a0 70 	      lda	noteNumArray+0
    282  1696		       8d b0 70 	      sta	playNoteArray+0
    283  1699		       ad a1 70 	      lda	noteNumArray+1
    284  169c		       8d b4 70 	      sta	playNoteArray+4
    285  169f		       ad a2 70 	      lda	noteNumArray+2
    286  16a2		       8d b2 70 	      sta	playNoteArray+2
    287  16a5
    288  16a5		       ad a3 70 	      lda	noteNumArray+3
    289  16a8		       8d b3 70 	      sta	playNoteArray+3
    290  16ab		       ad a4 70 	      lda	noteNumArray+4
    291  16ae		       8d b1 70 	      sta	playNoteArray+1
    292  16b1		       ad a5 70 	      lda	noteNumArray+5
    293  16b4		       8d b5 70 	      sta	playNoteArray+5
    294  16b7
    295  16b7		       4c b9 18 	      jmp	sixVoicePlayer
    296  16ba
    297  16ba
    298  16ba				   retuneNoteShiftTable
    299  16ba		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
    300  16d3		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
    301  16ec		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
    302  1705		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
    303  171d		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    304  1723		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    305  173c		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    306  1755
    307  1755							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    308  1755							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    309  1755							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
    310  1755							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
    311  1755		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
    312  176e		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
    313  1787		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
    314  17a0		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
    315  17b9
    316  17b9				   retuneTable
    317  17b9		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    318  17d2		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    319  17eb		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    320  1804		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    321  181d		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    322  1823		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    323  183c		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    324  1855		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    325  186e		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    326  1887		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    327  18a0		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    328  18b9							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    329  18b9
    330  18b9							;************************************************
    331  18b9							; 6-VOICE SOUND DRIVER
    332  18b9							;************************************************
    333  18b9				   sixVoicePlayer
    334  18b9
    335  18b9							;inc 1024 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    336  18b9
    337  18b9							; Calculate master tuning...
    338  18b9		       ad f3 70 	      lda	systemTuning
    339  18bc		       18		      clc
    340  18bd		       6d f0 70 	      adc	midiTuning
    341  18c0		       8d f4 70 	      sta	masterTuning
    342  18c3		       a8		      tay
    343  18c4
    344  18c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    345  18c4							; DEBUG - SHOW TUNING DATA
    346  18c4				  -	      IF	DEBUG_DISPLAY=1
    347  18c4				  -	      tya
    348  18c4				  -	      sta	temp
    349  18c4				  -	      ldy	#20
    350  18c4				  -	      ldx	#20
    351  18c4				  -	      jsr	displayHex
    352  18c4				  -	      lda	temp
    353  18c4				  -	      ldy	temp
    354  18c4					      ENDIF
    355  18c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  18c4
    357  18c4		       b9 b9 17 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
    358  18c7		       18		      clc
    359  18c8		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
    360  18ca
    361  18ca							;inc 1025 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    362  18ca
    363  18ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  18ca							; DEBUG - SHOW TUNING DATA
    365  18ca				  -	      IF	DEBUG_DISPLAY=1
    366  18ca				  -	      sta	temp
    367  18ca				  -	      ldy	#21
    368  18ca				  -	      ldx	#20
    369  18ca				  -	      jsr	displayHex
    370  18ca				  -	      lda	temp
    371  18ca				  -	      ldy	temp
    372  18ca					      ENDIF
    373  18ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    374  18ca
    375  18ca		       a8		      tay
    376  18cb		       b9 c0 33 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
    377  18ce		       85 22		      sta	tunePtrL
    378  18d0		       b9 ca 33 	      lda	tuneArrPtrLH,y
    379  18d3		       85 23		      sta	tunePtrL+1
    380  18d5		       b9 d4 33 	      lda	tuneArrPtrHL,y
    381  18d8		       85 24		      sta	tunePtrH
    382  18da		       b9 de 33 	      lda	tuneArrPtrHH,y
    383  18dd		       85 25		      sta	tunePtrH+1
    384  18df
    385  18df							;inc 1026 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    386  18df
    387  18df							; Look up note shift from master tuning...
    388  18df		       ac f4 70 	      ldy	masterTuning
    389  18e2		       b9 ba 16 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
    390  18e5		       8d f6 70 	      sta	noteShift
    391  18e8							; - - - - - - - - - - - - -
    392  18e8		       a2 05		      ldx	#5
    393  18ea				   shiftNoteLoop
    394  18ea		       bd b0 70 	      lda	playNoteArray,x
    395  18ed		       c9 ff		      cmp	#255
    396  18ef		       f0 07		      beq	skipShiftNote
    397  18f1		       18		      clc
    398  18f2		       6d f6 70 	      adc	noteShift
    399  18f5		       9d b0 70 	      sta	playNoteArray,x
    400  18f8				   skipShiftNote
    401  18f8		       ca		      dex
    402  18f9		       10 ef		      bpl	shiftNoteLoop
    403  18fb
    404  18fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  18fb							; DEBUG - SHOW TUNING DATA
    406  18fb				  -	      IF	DEBUG_DISPLAY=1
    407  18fb				  -	      sta	temp
    408  18fb				  -	      ldy	#22
    409  18fb				  -	      ldx	#20
    410  18fb				  -	      jsr	displayHex
    411  18fb				  -	      lda	temp
    412  18fb				  -	      ldy	temp
    413  18fb					      ENDIF
    414  18fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    415  18fb
    416  18fb							; For each voice on SID #1...
    417  18fb		       a2 02		      ldx	#2
    418  18fd				   NsetRegsSidA
    419  18fd		       8e 0c 70 	      stx	temp	; save current voice number
    420  1900		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
    421  1903		       bd 43 29 	      lda	voiceOffset,x	;
    422  1906		       aa		      tax
    423  1907		       c0 ff		      cpy	#255
    424  1909		       d0 04		      bne	NsoundOnSidA
    425  190b		       a9 00		      lda	#0
    426  190d		       f0 3f		      beq	NsoundOffSidA
    427  190f				   NsoundOnSidA
    428  190f
    429  190f							;inc 1027 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    430  190f
    431  190f							; load note and deal
    432  190f							; with tuning ------;
    433  190f		       ad 61 70 	      lda	NTSCmode	;
    434  1912		       f0 14		      beq	palPlaySidA	;
    435  1914				   ntscPlaySidA 		;
    436  1914		       18		      clc		;
    437  1915		       b9 2c 34 	      lda	NSoundLArr,y	;
    438  1918		       71 22		      adc	(tunePtrL),y	;
    439  191a		       8d 43 70 	      sta	pitchTmpL	;
    440  191d		       b9 74 34 	      lda	NSoundHArr,y	;
    441  1920		       71 24		      adc	(tunePtrH),y	;
    442  1922		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    443  1925		       4c 39 19 	      jmp	skipPalPlaySidA	;
    444  1928							;- - - - - - - - -;
    445  1928				   palPlaySidA		;
    446  1928		       18		      clc		;
    447  1929		       b9 bc 34 	      lda	PSoundLArr,y	;
    448  192c		       71 22		      adc	(tunePtrL),y	;
    449  192e		       8d 43 70 	      sta	pitchTmpL	;
    450  1931		       b9 0f 35 	      lda	PSoundHArr,y	;
    451  1934		       71 24		      adc	(tunePtrH),y	;
    452  1936		       8d 44 70 	      sta	pitchTmpH	;
    453  1939				   skipPalPlaySidA		;;;;;
    454  1939
    455  1939							;inc 1024+40 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    456  1939							;lda shiftL1
    457  1939							;sta 1024+120
    458  1939							;lda shiftH1
    459  1939							;sta 1025+120
    460  1939
    461  1939							; play SID #1
    462  1939		       18		      clc
    463  193a		       ad 43 70 	      lda	pitchTmpL
    464  193d		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
    465  1940		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
    466  1943		       ad 44 70 	      lda	pitchTmpH
    467  1946		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
    468  1949		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
    469  194c
    470  194c		       a9 01		      lda	#1
    471  194e							; Set voice gates on or off
    472  194e				   NsoundOffSidA
    473  194e		       1d 30 70 	      ora	WaveType,x	; changed to Y
    474  1951		       9d 04 d4 	      sta	SID1+SV1WAVE,x	; SID 1 ONLY  changed to Y
    475  1954							;sta SID2+SV1WAVE,y ; changed to Y (why was this line disabled?)
    476  1954		       9d 04 71 	      sta	sidData+SV1WAVE,x	;BUG BUG BUG BUG BUG BUG  changed to Y
    477  1957		       ae 0c 70 	      ldx	temp
    478  195a		       ca		      dex
    479  195b		       30 03		      bmi	quitPlayLoop
    480  195d		       4c fd 18 	      jmp	NsetRegsSidA
    481  1960				   quitPlayLoop
    482  1960
    483  1960							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    484  1960							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    485  1960							; For each voice on SID #2...
    486  1960		       a2 02		      ldx	#2
    487  1962				   NsetRegsSidB
    488  1962		       8e 0c 70 	      stx	temp
    489  1965							;lda playNoteArray+3,x
    490  1965
    491  1965		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
    492  1968		       bd 43 29 	      lda	voiceOffset,x
    493  196b
    494  196b		       aa		      tax
    495  196c		       c0 ff		      cpy	#255
    496  196e		       d0 04		      bne	NsoundOnSidB
    497  1970		       a9 00		      lda	#0
    498  1972		       f0 3f		      beq	NsoundOffSidB
    499  1974				   NsoundOnSidB
    500  1974
    501  1974							; load note and deal
    502  1974							; with tuning ------;
    503  1974		       ad 61 70 	      lda	NTSCmode	;
    504  1977		       f0 14		      beq	palPlaySidB	;
    505  1979				   ntscPlaySidB 		;
    506  1979		       18		      clc		;
    507  197a		       b9 2c 34 	      lda	NSoundLArr,y	;
    508  197d		       71 22		      adc	(tunePtrL),y	;
    509  197f		       8d 43 70 	      sta	pitchTmpL	;
    510  1982		       b9 74 34 	      lda	NSoundHArr,y	;
    511  1985		       71 24		      adc	(tunePtrH),y	;
    512  1987		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    513  198a		       4c 9e 19 	      jmp	skipPalPlaySidB	;
    514  198d				   palPlaySidB		;
    515  198d		       18		      clc		;
    516  198e		       b9 bc 34 	      lda	PSoundLArr,y	;
    517  1991		       71 22		      adc	(tunePtrL),y	;
    518  1993		       8d 43 70 	      sta	pitchTmpL	;
    519  1996		       b9 0f 35 	      lda	PSoundHArr,y	;
    520  1999		       71 24		      adc	(tunePtrH),y	;
    521  199b		       8d 44 70 	      sta	pitchTmpH	;
    522  199e				   skipPalPlaySidB		;;;;;
    523  199e
    524  199e							; play SID #2
    525  199e		       18		      clc
    526  199f		       ad 43 70 	      lda	pitchTmpL
    527  19a2		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
    528  19a5		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
    529  19a8		       ad 44 70 	      lda	pitchTmpH
    530  19ab		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
    531  19ae		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
    532  19b1
    533  19b1		       a9 01		      lda	#1
    534  19b3							; Set voice gates on or off
    535  19b3				   NsoundOffSidB
    536  19b3		       1d 30 70 	      ora	WaveType,x	; changed to Y
    537  19b6							;sta SID1+SV1WAVE,x ; changed to Y
    538  19b6		       9d 24 d4 	      sta	SID2+SV1WAVE,x	; SID2 ONLY changed to Y
    539  19b9		       9d 04 71 	      sta	sidData+SV1WAVE,x	; changed to Y
    540  19bc		       ae 0c 70 	      ldx	temp
    541  19bf		       ca		      dex
    542  19c0		       10 a0		      bpl	NsetRegsSidB
    543  19c2
    544  19c2							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    545  19c2							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    546  19c2		       60		      rts
    547  19c3
    548  19c3
    549  19c3
    550  19c3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    551  19c3							; PORTAMENTO SOUND SETUP
    552  19c3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    553  19c3				   playPort
    554  19c3
    555  19c3		       a2 02		      ldx	#2
    556  19c5				   portCopyLoop
    557  19c5		       bd a0 70 	      lda	noteNumArray,x
    558  19c8		       9d b0 70 	      sta	playNoteArray,x
    559  19cb		       ca		      dex
    560  19cc		       10 f7		      bpl	portCopyLoop
    561  19ce
    562  19ce							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
    563  19ce							;sta playNoteArray+3
    564  19ce							;lda noteNumArray+1
    565  19ce							;sta playNoteArray+4
    566  19ce							;lda noteNumArray+2
    567  19ce							;sta playNoteArray+5
    568  19ce
    569  19ce							;jmp sixVoicePlayer
    570  19ce
    571  19ce							;jmp portPlayer
    572  19ce
    573  19ce
    574  19ce
    575  19ce							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    576  19ce							; PORTAMENTO 3-VOICE SOUND DRIVER
    577  19ce							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    578  19ce				   portPlayer
    579  19ce							; set up pointer to portamento speed array
    580  19ce							; (which is the tuning array)
    581  19ce		       a2 02		      ldx	#2
    582  19d0				   portLoop
    583  19d0		       bc b0 70 	      ldy	playNoteArray,x
    584  19d3							;ldy KeyA,x
    585  19d3		       c0 ff		      cpy	#255
    586  19d5		       d0 03		      bne	noPlayNote
    587  19d7		       4c ea 19 	      jmp	playNote
    588  19da				   noPlayNote
    589  19da		       ad 03 70 	      lda	Frame
    590  19dd		       29 01		      and	#1
    591  19df		       f0 03		      beq	noPlayNote2
    592  19e1		       4c ea 19 	      jmp	playNote
    593  19e4				   noPlayNote2
    594  19e4
    595  19e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  19e4							; DEBUG - SHOW DATA
    597  19e4				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    598  19e4				  -	      lda	pitchHA,x	;
    599  19e4				  -	      stx	tempX
    600  19e4				  -	      sty	tempY
    601  19e4				  -	      sta	tempA
    602  19e4				  -			;- - - - -
    603  19e4				  -			;sta temp
    604  19e4				  -	      ldx	#20
    605  19e4				  -	      ldy	#6
    606  19e4				  -	      jsr	displayHex
    607  19e4				  -			;lda temp
    608  19e4				  -			;ldy temp
    609  19e4				  -			;- - - - -
    610  19e4				  -	      ldx	tempX
    611  19e4				  -	      ldy	tempY
    612  19e4				  -	      lda	tempA
    613  19e4					      ENDIF
    614  19e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    615  19e4
    616  19e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    617  19e4							; DEBUG - SHOW DATA
    618  19e4				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    619  19e4				  -	      lda	NSoundHArr,y	;
    620  19e4				  -	      stx	tempX
    621  19e4				  -	      sty	tempY
    622  19e4				  -	      sta	tempA
    623  19e4				  -			;- - - - -
    624  19e4				  -			;sta temp
    625  19e4				  -	      ldx	#20
    626  19e4				  -	      ldy	#7
    627  19e4				  -	      jsr	displayHex
    628  19e4				  -			;lda temp
    629  19e4				  -			;ldy temp
    630  19e4				  -			;- - - - -
    631  19e4				  -	      ldx	tempX
    632  19e4				  -	      ldy	tempY
    633  19e4				  -	      lda	tempA
    634  19e4					      ENDIF
    635  19e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    636  19e4
    637  19e4
    638  19e4		       20 42 1a 	      jsr	updatePortPosition
    639  19e7		       20 42 1a 	      jsr	updatePortPosition
    640  19ea
    641  19ea
    642  19ea				   playNote
    643  19ea
    644  19ea							;inc 1024+80 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    645  19ea
    646  19ea							; deal with tuning
    647  19ea		       18		      clc
    648  19eb		       bd 16 70 	      lda	pitchLA,x
    649  19ee		       71 22		      adc	(tunePtrL),y
    650  19f0		       8d 43 70 	      sta	pitchTmpL
    651  19f3		       bd 19 70 	      lda	pitchHA,x
    652  19f6		       71 24		      adc	(tunePtrH),y
    653  19f8		       8d 44 70 	      sta	pitchTmpH
    654  19fb
    655  19fb		       98		      tya		; Move the current key to ACC
    656  19fc		       bc 43 29 	      ldy	voiceOffset,x
    657  19ff		       c9 ff		      cmp	#255	; Check for note off
    658  1a01		       d0 04		      bne	soundOn
    659  1a03		       a9 00		      lda	#0
    660  1a05		       f0 28		      beq	soundOff
    661  1a07				   soundOn
    662  1a07
    663  1a07							;inc 1025+80 ; DEBUG !!!!!!!!!!!!!!!!!!!!
    664  1a07
    665  1a07							;lda shiftL1
    666  1a07							;sta 1024+120
    667  1a07							;lda shiftH1
    668  1a07							;sta 1025+120
    669  1a07
    670  1a07							; play SID #1
    671  1a07		       18		      clc
    672  1a08		       ad 43 70 	      lda	pitchTmpL
    673  1a0b		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
    674  1a0e		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
    675  1a11		       ad 44 70 	      lda	pitchTmpH
    676  1a14		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
    677  1a17		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
    678  1a1a
    679  1a1a							; play SID #2
    680  1a1a		       18		      clc
    681  1a1b		       ad 43 70 	      lda	pitchTmpL
    682  1a1e		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
    683  1a21		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
    684  1a24		       ad 44 70 	      lda	pitchTmpH
    685  1a27		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
    686  1a2a		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
    687  1a2d
    688  1a2d				   afterDStep
    689  1a2d
    690  1a2d		       a9 01		      lda	#1
    691  1a2f							; Set voice gates on or off
    692  1a2f				   soundOff
    693  1a2f							;ldy voiceOffset,x ; added this line for copying, but implemented above...
    694  1a2f		       19 30 70 	      ora	WaveType,y
    695  1a32		       99 04 d4 	      sta	SID1+SV1WAVE,y
    696  1a35		       99 24 d4 	      sta	SID2+SV1WAVE,y
    697  1a38		       99 04 71 	      sta	sidData+SV1WAVE,y	; changed to Y
    698  1a3b
    699  1a3b		       ca		      dex
    700  1a3c		       30 03		      bmi	quitPort
    701  1a3e		       4c d0 19 	      jmp	portLoop
    702  1a41				   quitPort
    703  1a41				   skipPort
    704  1a41		       60		      rts
    705  1a42							;--------------------------------------------------------------------
    706  1a42							;end of portamento play loop
    707  1a42							;--------------------------------------------------------------------
    708  1a42
    709  1a42
    710  1a42				   updatePortPosition
    711  1a42							;check portamn direction;
    712  1a42		       ad 61 70 	      lda	NTSCmode	;
    713  1a45		       f0 0c		      beq	palPortH	;
    714  1a47				   ntscPortH		;
    715  1a47		       bd 19 70 	      lda	pitchHA,x	;
    716  1a4a		       d9 74 34 	      cmp	NSoundHArr,y	;
    717  1a4d		       f0 10		      beq	portCheckL	;
    718  1a4f		       30 2a		      bmi	portUp	; PAL/NTSC split
    719  1a51		       10 3e		      bpl	portDown	;
    720  1a53							;bpl portUp				; PAL/NTSC split
    721  1a53							;bmi portDown			;
    722  1a53				   palPortH		;
    723  1a53		       bd 19 70 	      lda	pitchHA,x	;
    724  1a56		       d9 0f 35 	      cmp	PSoundHArr,y	;
    725  1a59		       f0 04		      beq	portCheckL	;
    726  1a5b		       30 1e		      bmi	portUp	;
    727  1a5d		       10 32		      bpl	portDown	;;;;;
    728  1a5f							;bpl portUp				;
    729  1a5f							;bmi portDown		;;;;;
    730  1a5f
    731  1a5f				   portCheckL
    732  1a5f
    733  1a5f							;check portamn lowbyte--;
    734  1a5f		       ad 61 70 	      lda	NTSCmode	;
    735  1a62		       f0 0d		      beq	palPortL	;
    736  1a64				   ntscPortL		;
    737  1a64		       bd 16 70 	      lda	pitchLA,x	;
    738  1a67		       d9 2c 34 	      cmp	NSoundLArr,y	;
    739  1a6a		       f0 69		      beq	endPortUpdate
    740  1a6c							;beq playNote ; note on	;
    741  1a6c							;the stop so play	;
    742  1a6c		       b0 23		      bcs	portDown	; PAL/NTSC split
    743  1a6e							;bcs portUp			; PAL/NTSC split
    744  1a6e		       4c 7b 1a 	      jmp	skipPalPortL	;
    745  1a71				   palPortL		;
    746  1a71		       bd 16 70 	      lda	pitchLA,x	;
    747  1a74		       d9 bc 34 	      cmp	PSoundLArr,y	;
    748  1a77		       f0 5c		      beq	endPortUpdate
    749  1a79							;beq playNote ; note on	;
    750  1a79							;the stop so play	;
    751  1a79		       b0 16		      bcs	portDown	;
    752  1a7b							;bcs portUp				;
    753  1a7b				   skipPalPortL 		;;;;;
    754  1a7b
    755  1a7b
    756  1a7b				   portUp
    757  1a7b		       bd 16 70 	      lda	pitchLA,x
    758  1a7e		       18		      clc
    759  1a7f		       71 35		      adc	(portPtrL),y
    760  1a81		       9d 16 70 	      sta	pitchLA,x
    761  1a84		       bd 19 70 	      lda	pitchHA,x
    762  1a87		       71 47		      adc	(portPtrH),y
    763  1a89		       9d 19 70 	      sta	pitchHA,x
    764  1a8c							;inc 1025 ; DEBUG!!
    765  1a8c		       a9 00		      lda	#0	; indicate port direction
    766  1a8e		       4c a4 1a 	      jmp	oscCheck
    767  1a91				   portDown
    768  1a91		       bd 16 70 	      lda	pitchLA,x
    769  1a94		       38		      sec
    770  1a95		       f1 35		      sbc	(portPtrL),y
    771  1a97		       9d 16 70 	      sta	pitchLA,x
    772  1a9a		       bd 19 70 	      lda	pitchHA,x
    773  1a9d		       f1 47		      sbc	(portPtrH),y
    774  1a9f		       9d 19 70 	      sta	pitchHA,x
    775  1aa2							;inc 1024 ; DEBUG!!
    776  1aa2		       a9 01		      lda	#1	; indicate port direction
    777  1aa4
    778  1aa4							; check for pitch oscillation
    779  1aa4							; (which means it's at the correct note)
    780  1aa4							; it's oscillating if: the port direction
    781  1aa4							; has changed and the note hasn't.
    782  1aa4				   oscCheck
    783  1aa4		       dd 54 70 	      cmp	portLastDir,x
    784  1aa7		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
    785  1aaa		       f0 29		      beq	skipOsc
    786  1aac		       98		      tya
    787  1aad		       dd 51 70 	      cmp	portLastNote,x
    788  1ab0		       9d 51 70 	      sta	portLastNote,x	; save it...
    789  1ab3		       d0 20		      bne	skipOsc
    790  1ab5
    791  1ab5							; it's oscilating at;
    792  1ab5							; the note, so lock ;
    793  1ab5							; it onto the actual;
    794  1ab5							; note				;
    795  1ab5		       ad 61 70 	      lda	NTSCmode	;
    796  1ab8		       f0 0f		      beq	palLock	;
    797  1aba				   ntscLock		;
    798  1aba		       b9 2c 34 	      lda	NSoundLArr,y	;
    799  1abd		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
    800  1ac0		       b9 74 34 	      lda	NSoundHArr,y	;
    801  1ac3		       9d 19 70 	      sta	pitchHA,x	;
    802  1ac6		       4c d5 1a 	      jmp	skipPalLock	;
    803  1ac9				   palLock		;
    804  1ac9		       b9 bc 34 	      lda	PSoundLArr,y	;
    805  1acc		       9d 16 70 	      sta	pitchLA,x	;
    806  1acf		       b9 0f 35 	      lda	PSoundHArr,y	;
    807  1ad2		       9d 19 70 	      sta	pitchHA,x	;
    808  1ad5				   skipPalLock		;;;;;
    809  1ad5
    810  1ad5				   skipOsc
    811  1ad5				   endPortUpdate
    812  1ad5		       60		      rts
    813  1ad6
------- FILE cynthcart2.0.1.asm
------- FILE cynth_keyboard.asm LEVEL 2 PASS 2
      0  1ad6					      include	"cynth_keyboard.asm"
      1  1ad6							;------------------------------------------
      2  1ad6							; Read the keyboard
      3  1ad6							;------------------------------------------
      4  1ad6				   readKeyboard
      5  1ad6							; Keyboard read setup
      6  1ad6		       a9 7f		      lda	#127
      7  1ad8		       8d 0d dc 	      sta	56333
      8  1adb
      9  1adb							;------------------------------------------
     10  1adb							; determine which keyset to use
     11  1adb							; (raw/shift/commodorekey/runstop)
     12  1adb							;------------------------------------------
     13  1adb
     14  1adb							; default is raw key functions (no modified keys)
     15  1adb		       a9 13		      lda	#<rawKeyFunctions	;-
     16  1add		       85 c2		      sta	keyPtrL	;
     17  1adf		       a9 22		      lda	#>rawKeyFunctions	;
     18  1ae1		       85 c3		      sta	keyPtrH	;-
     19  1ae3
     20  1ae3							; Check for Shift/C=
     21  1ae3		       a9 bf		      lda	#~64	; (Right Shift)
     22  1ae5		       8d 00 dc 	      sta	56320
     23  1ae8		       ad 01 dc 	      lda	56321
     24  1aeb		       29 10		      and	#16
     25  1aed		       d0 08		      bne	notAltKeys	;-
     26  1aef		       a9 87		      lda	#<shiftKeyFunctions	;
     27  1af1		       85 c2		      sta	keyPtrL	;
     28  1af3		       a9 23		      lda	#>shiftKeyFunctions	;-
     29  1af5		       85 c3		      sta	keyPtrH
     30  1af7				   notAltKeys
     31  1af7		       a9 fd		      lda	#~2	; (Left Shift)
     32  1af9		       8d 00 dc 	      sta	56320
     33  1afc		       ad 01 dc 	      lda	56321
     34  1aff		       29 80		      and	#128
     35  1b01		       d0 0b		      bne	notAltKeys2	;-
     36  1b03		       a9 87		      lda	#<shiftKeyFunctions	;
     37  1b05		       85 c2		      sta	keyPtrL	;
     38  1b07		       a9 23		      lda	#>shiftKeyFunctions	;-
     39  1b09		       85 c3		      sta	keyPtrH
     40  1b0b		       4c 10 1c 	      jmp	doKeyCheck
     41  1b0e				   notAltKeys2
     42  1b0e		       a9 7f		      lda	#~128	; (C= key)
     43  1b10		       8d 00 dc 	      sta	56320
     44  1b13		       ad 01 dc 	      lda	56321
     45  1b16		       29 20		      and	#32
     46  1b18		       d0 08		      bne	notAltKeys3
     47  1b1a		       a9 03		      lda	#<commKeyFunctions	;-
     48  1b1c		       85 c2		      sta	keyPtrL	;
     49  1b1e		       a9 24		      lda	#>commKeyFunctions	;
     50  1b20		       85 c3		      sta	keyPtrH	;-
     51  1b22				   notAltKeys3
     52  1b22		       a9 7f		      lda	#~128	; (Run Stop)
     53  1b24		       8d 00 dc 	      sta	56320
     54  1b27		       ad 01 dc 	      lda	56321
     55  1b2a		       29 80		      and	#128
     56  1b2c		       d0 08		      bne	notAltKeys4
     57  1b2e		       a9 7f		      lda	#<runstopKeyFunctions	;-
     58  1b30		       85 c2		      sta	keyPtrL	;
     59  1b32		       a9 24		      lda	#>runstopKeyFunctions	;
     60  1b34		       85 c3		      sta	keyPtrH	;-
     61  1b36				   notAltKeys4
     62  1b36		       a9 7f		      lda	#~128	; (CTRL key)
     63  1b38		       8d 00 dc 	      sta	56320
     64  1b3b		       ad 01 dc 	      lda	56321
     65  1b3e		       29 04		      and	#4	; CTRL
     66  1b40							;and #2 ; BACK ARROW
     67  1b40		       d0 08		      bne	notAltKeys5
     68  1b42		       a9 0b		      lda	#<CTRLKeyFunctions	;-
     69  1b44		       85 c2		      sta	keyPtrL	;
     70  1b46		       a9 23		      lda	#>CTRLKeyFunctions	;
     71  1b48		       85 c3		      sta	keyPtrH	;-
     72  1b4a				   notAltKeys5
     73  1b4a
     74  1b4a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75  1b4a				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
     76  1b4a				  -	      lda	#0
     77  1b4a				  -	      sta	keyTimer	; DEBUG!  Disable key timer
     78  1b4a					      ENDIF
     79  1b4a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  1b4a
     81  1b4a							; handle keytimer
     82  1b4a							; (to avoid accidental keypresses on shifted keys)
     83  1b4a		       ad 58 70 	      lda	keyTimer
     84  1b4d		       f0 06		      beq	readKeys
     85  1b4f		       ce 58 70 	      dec	keyTimer
     86  1b52		       4c 55 1b 	      jmp	startCheck
     87  1b55				   readKeys
     88  1b55
     89  1b55							;********************************
     90  1b55							; Check for Notes Being Pressed
     91  1b55							;********************************
     92  1b55				   startCheck
     93  1b55		       a9 00		      lda	#0
     94  1b57		       8d 9b 70 	      sta	keyCount
     95  1b5a
     96  1b5a							; Save last notes and clear note buffer
     97  1b5a		       ae 80 70 	      ldx	bufferSize
     98  1b5d							;dex
     99  1b5d		       e8		      inx
    100  1b5e		       e8		      inx
    101  1b5f				   clearKeys
    102  1b5f		       bd d0 70 	      lda	kbBuffer,x
    103  1b62				  -	      IF	DEBUG_DISPLAY=1
    104  1b62				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
    105  1b62					      ENDIF
    106  1b62		       9d e0 70 	      sta	lastKbBuffer,x
    107  1b65		       a9 ff		      lda	#255
    108  1b67		       9d d0 70 	      sta	kbBuffer,x
    109  1b6a		       ca		      dex
    110  1b6b		       10 f2		      bpl	clearKeys
    111  1b6d
    112  1b6d							;lda #255
    113  1b6d							;sta KeyA
    114  1b6d							;sta KeyB
    115  1b6d							;sta KeyC
    116  1b6d
    117  1b6d		       ae 80 70 	      ldx	bufferSize
    118  1b70							;dex
    119  1b70		       e8		      inx
    120  1b71		       e8		      inx
    121  1b72		       a0 00		      ldy	#0
    122  1b74							; check for note keys being pressed
    123  1b74				   checkLoop
    124  1b74		       b9 a3 21 	      lda	col,y
    125  1b77		       f0 1c		      beq	quitCheck
    126  1b79		       8d 00 dc 	      sta	56320
    127  1b7c		       ad 01 dc 	      lda	56321
    128  1b7f		       39 bc 21 	      and	row,y
    129  1b82		       d0 0e		      bne	notPressed
    130  1b84		       98		      tya
    131  1b85		       18		      clc
    132  1b86		       6d 22 70 	      adc	keyOffset
    133  1b89							;sta KeyA,x
    134  1b89		       9d d0 70 	      sta	kbBuffer,x
    135  1b8c		       ca		      dex
    136  1b8d		       ee 9b 70 	      inc	keyCount
    137  1b90		       30 03		      bmi	quitCheck
    138  1b92				   notPressed
    139  1b92		       c8		      iny
    140  1b93		       d0 df		      bne	checkLoop
    141  1b95
    142  1b95				   quitCheck
    143  1b95							;-- -- -- -- -- -- -- -- -- -- -- -- --
    144  1b95							; Generate note on/offs from keyboard data
    145  1b95							;-- -- -- -- -- -- -- -- -- -- -- -- --
    146  1b95							; FIND NOTE ONS...
    147  1b95		       ae 80 70 	      ldx	bufferSize
    148  1b98							;dex
    149  1b98		       e8		      inx
    150  1b99		       e8		      inx
    151  1b9a				   noteOnCheck
    152  1b9a		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
    153  1b9d		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    154  1ba0							;dey
    155  1ba0		       c8		      iny
    156  1ba1		       c8		      iny
    157  1ba2				   innerNoteOnCheck
    158  1ba2		       d9 e0 70 	      cmp	lastKbBuffer,y
    159  1ba5		       f0 12		      beq	checkNextNote
    160  1ba7		       88		      dey
    161  1ba8		       10 f8		      bpl	innerNoteOnCheck
    162  1baa							;Found new note-on!
    163  1baa							;inc 53280
    164  1baa		       8d 81 70 	      sta	noteTempA
    165  1bad		       8e 82 70 	      stx	noteTempB
    166  1bb0		       20 98 1e 	      jsr	doNoteOn
    167  1bb3		       ad 81 70 	      lda	noteTempA
    168  1bb6		       ae 82 70 	      ldx	noteTempB
    169  1bb9							; TODO: call note on function
    170  1bb9				   checkNextNote
    171  1bb9		       ca		      dex
    172  1bba		       10 de		      bpl	noteOnCheck
    173  1bbc
    174  1bbc							; FIND NOTE OFF...
    175  1bbc		       ae 80 70 	      ldx	bufferSize
    176  1bbf							;dex
    177  1bbf		       e8		      inx
    178  1bc0		       e8		      inx
    179  1bc1				   noteOnCheck2
    180  1bc1		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
    181  1bc4		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    182  1bc7							;dey
    183  1bc7		       c8		      iny
    184  1bc8		       c8		      iny
    185  1bc9				   innerNoteOnCheck2
    186  1bc9		       d9 d0 70 	      cmp	kbBuffer,y
    187  1bcc		       f0 12		      beq	checkNextNote2
    188  1bce		       88		      dey
    189  1bcf		       10 f8		      bpl	innerNoteOnCheck2
    190  1bd1							;Found new note-on!
    191  1bd1							;inc 53280
    192  1bd1		       8d 81 70 	      sta	noteTempA
    193  1bd4		       8e 82 70 	      stx	noteTempB
    194  1bd7		       20 c6 1e 	      jsr	doNoteOff
    195  1bda		       ad 81 70 	      lda	noteTempA
    196  1bdd		       ae 82 70 	      ldx	noteTempB
    197  1be0							; TODO: call note on function
    198  1be0				   checkNextNote2
    199  1be0		       ca		      dex
    200  1be1		       10 de		      bpl	noteOnCheck2
    201  1be3							;-- -- -- -- -- -- -- -- -- -- -- -- --
    202  1be3							; End of note on/off generation
    203  1be3							;-- -- -- -- -- -- -- -- -- -- -- -- --
    204  1be3
    205  1be3							; Skip key command check if 3 or more piano keys
    206  1be3							; are held to avoid quirks with C64 keyboard
    207  1be3							; matrix hardware.
    208  1be3		       ae 9b 70 	      ldx	keyCount
    209  1be6		       f0 0d		      beq	skipMinimalKeyboard
    210  1be8							; default is raw key functions (no modified keys)
    211  1be8		       a9 8f		      lda	#<minimalKeyFunctions	;-
    212  1bea		       85 c2		      sta	keyPtrL	;
    213  1bec		       a9 22		      lda	#>minimalKeyFunctions	;
    214  1bee		       85 c3		      sta	keyPtrH	;-
    215  1bf0							; also disable keytimer...
    216  1bf0		       a9 00		      lda	#0
    217  1bf2		       8d 58 70 	      sta	keyTimer
    218  1bf5				   skipMinimalKeyboard
    219  1bf5
    220  1bf5							; Check key timer...
    221  1bf5		       ad 58 70 	      lda	keyTimer
    222  1bf8		       f0 01		      beq	contReadKeys
    223  1bfa		       60		      rts
    224  1bfb				   contReadKeys
    225  1bfb		       8e 66 70 	      stx	lastOsc
    226  1bfe
    227  1bfe							; Check for space bar (pitch bender)...
    228  1bfe		       a9 7f		      lda	#~$80
    229  1c00		       8d 00 dc 	      sta	56320
    230  1c03		       ad 01 dc 	      lda	56321
    231  1c06		       29 10		      and	#$10
    232  1c08		       d0 06		      bne	noSpace
    233  1c0a		       20 20 10 	      jsr	bendBender
    234  1c0d		       4c 60 1c 	      jmp	skipKeyCheck
    235  1c10				   noSpace
    236  1c10
    237  1c10
    238  1c10				   doKeyCheck
    239  1c10							;********************************
    240  1c10							; Generic command key check
    241  1c10							;********************************
    242  1c10
    243  1c10		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
    244  1c12				   keyChkLoop
    245  1c12		       bd d5 21 	      lda	commandKeys,x
    246  1c15		       8d 00 dc 	      sta	56320
    247  1c18		       ad 01 dc 	      lda	56321
    248  1c1b		       3d d6 21 	      and	commandKeys+1,x
    249  1c1e		       d0 3c		      bne	keyNotDown
    250  1c20
    251  1c20							; key down!
    252  1c20							;-----------
    253  1c20		       8a		      txa		;multiply x by 2
    254  1c21		       0a		      asl		;  to get the offset
    255  1c22		       a8		      tay		;  into the key functions array
    256  1c23
    257  1c23							; get address of function to call
    258  1c23		       b1 c2		      lda	(keyPtrL),y
    259  1c25		       8d 62 70 	      sta	temp16L
    260  1c28		       c8		      iny
    261  1c29		       b1 c2		      lda	(keyPtrL),y
    262  1c2b		       8d 63 70 	      sta	temp16H
    263  1c2e		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
    264  1c30							;  no function assigned to this key so quit
    265  1c30
    266  1c30							; put return address onto stack to simulate JSR with a JMP()
    267  1c30		       a9 1c		      lda	#>returnAddress
    268  1c32		       48		      pha
    269  1c33		       a9 4a		      lda	#<returnAddress
    270  1c35		       48		      pha
    271  1c36
    272  1c36							; save the value of X
    273  1c36		       8e 64 70 	      stx	saveX
    274  1c39
    275  1c39		       c8		      iny
    276  1c3a		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
    277  1c3c		       8d 65 70 	      sta	keyTemp
    278  1c3f		       c8		      iny
    279  1c40		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
    280  1c42		       a8		      tay
    281  1c43		       ad 65 70 	      lda	keyTemp
    282  1c46
    283  1c46							; indirect jump to function, which acts as a JSR since
    284  1c46							;   we pushed the return address onto the stack
    285  1c46		       6c 62 70 	      jmp	(temp16L)
    286  1c49
    287  1c49		       ea		      nop
    288  1c4a				   returnAddress
    289  1c4a		       ea		      nop
    290  1c4b
    291  1c4b		       ae 64 70 	      ldx	saveX	; restore X
    292  1c4e
    293  1c4e							; only set the keytimer when a raw key is used
    294  1c4e		       a5 c2		      lda	keyPtrL
    295  1c50		       c9 13		      cmp	#<rawKeyFunctions
    296  1c52		       f0 08		      beq	keyNotDown
    297  1c54
    298  1c54		       a9 28		      lda	#KEYTIME
    299  1c56		       8d 58 70 	      sta	keyTimer
    300  1c59							;-----------
    301  1c59		       4c 60 1c 	      jmp	skipKeyCheck	; quit keycheck after a key is found
    302  1c5c
    303  1c5c				   keyNotDown
    304  1c5c		       ca		      dex
    305  1c5d		       ca		      dex
    306  1c5e		       10 b2		      bpl	keyChkLoop
    307  1c60
    308  1c60				   skipKeyCheck
    309  1c60
    310  1c60							; done
    311  1c60		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_midirecv.asm LEVEL 2 PASS 2
      0  1c61					      include	"cynth_midirecv.asm"
      1  1c61							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      2  1c61							; Read MIDI
      3  1c61							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      4  1c61							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
      5  1c61					      IF	ENABLE_MIDI_COMMANDS=1
      6  1c61				   processMIDI
      7  1c61							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  1c61							; Debug - show main note buffer
      9  1c61				  -	      IF	DEBUG_DISPLAY=1
     10  1c61				  -	      lda	noteNumArray+0
     11  1c61				  -	      sta	1744+125
     12  1c61				  -	      lda	noteNumArray+1
     13  1c61				  -	      sta	1744+126
     14  1c61				  -	      lda	noteNumArray+2
     15  1c61				  -	      sta	1744+127
     16  1c61				  -	      lda	noteNumArray+3
     17  1c61				  -	      sta	1744+128
     18  1c61				  -
     19  1c61				  -	      lda	noteNumArray+4
     20  1c61				  -	      sta	1744+129
     21  1c61				  -	      lda	noteNumArray+5
     22  1c61				  -	      sta	1744+130
     23  1c61				  -	      lda	noteNumArray+6
     24  1c61				  -	      sta	1744+131
     25  1c61				  -	      lda	noteNumArray+7
     26  1c61				  -	      sta	1744+132
     27  1c61					      ENDIF
     28  1c61							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  1c61
     30  1c61							; get next MIDI byte
     31  1c61				   check
     32  1c61					      IF	ENABLE_MIDI_COMMANDS=1
     33  1c61		       ad 50 71 	      lda	midiEnabled
     34  1c64		       f0 03		      beq	skipMidiRead
     35  1c66		       20 f8 3a 	      jsr	midiRead	; Midi byte will be in A and Y
     36  1c69				   skipMidiRead
     37  1c69					      ENDIF
     38  1c69		       d0 03		      bne	continueReading
     39  1c6b		       4c e7 1e 	      jmp	endMIDI
     40  1c6e				   continueReading
     41  1c6e
     42  1c6e
     43  1c6e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  1c6e							; DEBUG - SHOW MIDI DATA
     45  1c6e				  -	      IF	DEBUG_DISPLAY=1
     46  1c6e				  -	      inc	1824+81
     47  1c6e				  -	      sta	temp
     48  1c6e				  -	      ldx	#34
     49  1c6e				  -	      ldy	debugOffset
     50  1c6e				  -	      iny
     51  1c6e				  -	      iny
     52  1c6e				  -	      iny
     53  1c6e				  -	      iny
     54  1c6e				  -	      iny
     55  1c6e				  -	      iny
     56  1c6e				  -	      jsr	displayHex
     57  1c6e				  -	      ldy	debugOffset
     58  1c6e				  -	      iny
     59  1c6e				  -	      tya
     60  1c6e				  -	      and	#$0F
     61  1c6e				  -	      sta	debugOffset
     62  1c6e				  -	      adc	#5
     63  1c6e				  -	      tay
     64  1c6e				  -	      lda	temp
     65  1c6e				  -	      ldy	temp
     66  1c6e					      ENDIF
     67  1c6e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  1c6e
     69  1c6e							; If bit 7 isn't set, then it's a running mode byte...
     70  1c6e		       10 68		      bpl	runningModeByte
     71  1c70		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
     72  1c73		       a8		      tay
     73  1c74		       29 f0		      and	#$F0
     74  1c76		       c9 f0		      cmp	#$F0
     75  1c78		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
     76  1c7a							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     77  1c7a
     78  1c7a							;tya
     79  1c7a
     80  1c7a							; If bit 7 isn't set, then it's a running mode byte...
     81  1c7a							;bpl runningModeByte
     82  1c7a
     83  1c7a
     84  1c7a							;tay
     85  1c7a							;and #$F0
     86  1c7a							;cmp #$F0
     87  1c7a							;beq processSysex ;Skip saving status if it's sysex
     88  1c7a							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     89  1c7a							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
     90  1c7a					      IF	ENABLE_MIDI_COMMANDS=1
     91  1c7a		       20 ff 3a 	      jsr	midiReadWait	; Midi byte will be in A and Y
     92  1c7d					      ENDIF
     93  1c7d		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
     94  1c80		       ad 7d 70 	      lda	savedMidiStatus
     95  1c83		       20 f0 1c 	      jsr	processMidiMessage	; handle the rest of the message...
     96  1c86		       4c 61 1c 	      jmp	check	; End of loop - - -
     97  1c89
     98  1c89				   processSysex
     99  1c89		       98		      tya		; Get systex byte
    100  1c8a		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    101  1c8c		       d0 0a		      bne	checkF1
    102  1c8e				   sysexReadingLoop
    103  1c8e		       20 ff 3a 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    104  1c91		       c9 f7		      cmp	#$F7
    105  1c93		       d0 f9		      bne	sysexReadingLoop
    106  1c95		       4c 61 1c 	      jmp	check
    107  1c98							; - - - - - -
    108  1c98				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    109  1c98		       c9 f1		      cmp	#$F1
    110  1c9a		       d0 06		      bne	checkF2
    111  1c9c		       20 ff 3a 	      jsr	midiReadWait
    112  1c9f		       4c 61 1c 	      jmp	check
    113  1ca2							; - - - - - -
    114  1ca2				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    115  1ca2		       c9 f2		      cmp	#$F2
    116  1ca4		       d0 09		      bne	checkF3
    117  1ca6					      IF	ENABLE_MIDI_COMMANDS=1
    118  1ca6		       20 ff 3a 	      jsr	midiReadWait
    119  1ca9		       20 ff 3a 	      jsr	midiReadWait
    120  1cac					      ENDIF
    121  1cac		       4c 61 1c 	      jmp	check
    122  1caf							; - - - - - -
    123  1caf				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    124  1caf		       c9 f3		      cmp	#$F3
    125  1cb1		       d0 09		      bne	checkF8
    126  1cb3		       20 ff 3a 	      jsr	midiReadWait
    127  1cb6		       4c 61 1c 	      jmp	check
    128  1cb9							; - - - - - -
    129  1cb9							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    130  1cb9		       4c 61 1c 	      jmp	check
    131  1cbc
    132  1cbc
    133  1cbc				   checkF8
    134  1cbc		       c9 f8		      cmp	#$F8
    135  1cbe		       d0 03		      bne	checkFA
    136  1cc0							; NO EXTRA BYTES TO READ
    137  1cc0		       4c 61 1c 	      jmp	check
    138  1cc3							; - - - - - -
    139  1cc3				   checkFA
    140  1cc3		       c9 fa		      cmp	#$FA
    141  1cc5		       d0 03		      bne	checkFC
    142  1cc7							; NO EXTRA BYTES TO READ
    143  1cc7		       4c 61 1c 	      jmp	check
    144  1cca							; - - - - - -
    145  1cca				   checkFC
    146  1cca		       c9 fc		      cmp	#$FC
    147  1ccc		       d0 03		      bne	checkFF
    148  1cce							; NO EXTRA BYTES TO READ
    149  1cce		       4c 61 1c 	      jmp	check
    150  1cd1							; - - - - - -
    151  1cd1				   checkFF
    152  1cd1		       c9 ff		      cmp	#$FF
    153  1cd3		       d0 00		      bne	endSysex
    154  1cd5							;---- END SYSTEM/CLOCK ----
    155  1cd5				   endSysex
    156  1cd5		       4c 61 1c 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    157  1cd8
    158  1cd8
    159  1cd8				   runningModeByte
    160  1cd8		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    161  1cdb		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    162  1cde		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    163  1ce0		       c9 f0		      cmp	#$F0
    164  1ce2		       d0 03		      bne	normalRunningMode
    165  1ce4							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    166  1ce4							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    167  1ce4		       4c 61 1c 	      jmp	check
    168  1ce7							;-----------------------
    169  1ce7							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    170  1ce7							;jsr midiReadWait ; Now need to get a new "status byte"
    171  1ce7							;jmp runningModeByte
    172  1ce7
    173  1ce7				   normalRunningMode
    174  1ce7		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    175  1cea		       20 f0 1c 	      jsr	processMidiMessage
    176  1ced		       4c 61 1c 	      jmp	check
    177  1cf0
    178  1cf0				   processMidiMessage
    179  1cf0		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    180  1cf1
    181  1cf1							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    182  1cf1		       ad f7 70 	      lda	midiMode
    183  1cf4		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    184  1cf6		       98		      tya
    185  1cf7		       29 0f		      and	#$0F
    186  1cf9		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    187  1cfc		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    188  1cfe
    189  1cfe							;---------------------------------------------
    190  1cfe							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    191  1cfe							;---------------------------------------------
    192  1cfe		       98		      tya
    193  1cff		       09 40		      ora	#%01000000
    194  1d01		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    195  1d03		       98		      tya
    196  1d04		       09 20		      ora	#%00100000
    197  1d06		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    198  1d08
    199  1d08				   twoParameters
    200  1d08		       20 ff 3a 	      jsr	midiReadWait
    201  1d0b				   oneParameter
    202  1d0b							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    203  1d0b		       60		      rts
    204  1d0c							;jmp check
    205  1d0c
    206  1d0c
    207  1d0c				   endChannelCheck
    208  1d0c							; Status byte should be in A
    209  1d0c							; Ignoring channel for now
    210  1d0c							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    211  1d0c		       98		      tya
    212  1d0d
    213  1d0d		       29 f0		      and	#$F0
    214  1d0f		       c9 80		      cmp	#$80	; Note off
    215  1d11		       d0 03		      bne	notNoteOff
    216  1d13		       4c b4 1e 	      jmp	noteOff
    217  1d16				   notNoteOff
    218  1d16		       c9 90		      cmp	#$90	; Note on
    219  1d18		       d0 03		      bne	notNoteOn
    220  1d1a		       4c 7e 1e 	      jmp	noteOn
    221  1d1d				   notNoteOn
    222  1d1d		       c9 e0		      cmp	#$E0	; Pitch bend
    223  1d1f		       f0 3a		      beq	pitchBend
    224  1d21		       c9 b0		      cmp	#$B0	; Control change
    225  1d23		       d0 03		      bne	notControlChange
    226  1d25		       4c 7b 1d 	      jmp	controlChange
    227  1d28				   notControlChange
    228  1d28		       c9 d0		      cmp	#$D0	; Channel pressure
    229  1d2a		       f0 2b		      beq	channelPressure
    230  1d2c		       c9 a0		      cmp	#$A0	; Key pressure
    231  1d2e		       f0 0f		      beq	keyPressure
    232  1d30		       c9 c0		      cmp	#$C0	; Patch change
    233  1d32		       f0 12		      beq	patchChange
    234  1d34							;cmp #$F0 ; Sysex
    235  1d34							;beq sysex
    236  1d34		       8d e4 07 	      sta	2020
    237  1d37		       a9 02		      lda	#2
    238  1d39		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    239  1d3c		       4c e7 1e 	      jmp	endMIDI
    240  1d3f
    241  1d3f
    242  1d3f				   keyPressure
    243  1d3f				  -	      IF	DEBUG_DISPLAY=1
    244  1d3f				  -	      inc	1824+86
    245  1d3f					      ENDIF
    246  1d3f		       ad 7e 70 	      lda	firstDataByte
    247  1d42					      IF	ENABLE_MIDI_COMMANDS=1
    248  1d42		       20 ff 3a 	      jsr	midiReadWait
    249  1d45					      ENDIF
    250  1d45		       60		      rts
    251  1d46
    252  1d46
    253  1d46
    254  1d46							;REL_SHORT equ $E0
    255  1d46							;REL_MED	equ $E9
    256  1d46							;REL_LONG equ $EE
    257  1d46
    258  1d46							;ATK_SHORT equ $00
    259  1d46							;ATK_MED	equ $90
    260  1d46							;ATK_LONG equ $E0
    261  1d46
    262  1d46				   patchChange
    263  1d46				  -	      IF	DEBUG_DISPLAY=1
    264  1d46				  -	      inc	1824+88
    265  1d46					      ENDIF
    266  1d46		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    267  1d49		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    268  1d4b		       a0 1d		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    269  1d4d				   skipPatchDefault1
    270  1d4d		       c0 1e		      cpy	#MAX_PATCH_NUMBER+1
    271  1d4f		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    272  1d51		       a0 00		      ldy	#0	; Saw Bass (because sending patch change zero doesn't work)
    273  1d53				   skipPatchDefault2
    274  1d53		       20 aa 13 	      jsr	setPatch
    275  1d56		       60		      rts
    276  1d57
    277  1d57				   channelPressure
    278  1d57				  -	      IF	DEBUG_DISPLAY=1
    279  1d57				  -	      inc	1824+89
    280  1d57					      ENDIF
    281  1d57		       ad 7e 70 	      lda	firstDataByte
    282  1d5a		       60		      rts
    283  1d5b
    284  1d5b				   pitchBend
    285  1d5b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    286  1d5b							; DEBUG - SHOW MIDI DATA
    287  1d5b				  -	      IF	DEBUG_DISPLAY=1
    288  1d5b				  -			;sta temp
    289  1d5b				  -	      ldx	#25
    290  1d5b				  -	      ldy	#22
    291  1d5b				  -	      jsr	displayHex
    292  1d5b				  -	      lda	temp
    293  1d5b				  -	      ldy	temp
    294  1d5b				  -	      inc	1824+90
    295  1d5b					      ENDIF
    296  1d5b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  1d5b
    298  1d5b		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    299  1d5e		       4a		      lsr
    300  1d5f		       4a		      lsr
    301  1d60		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    302  1d63		       38		      sec
    303  1d64		       e9 50		      sbc	#$50	; Center on zero
    304  1d66		       30 09		      bmi	negPitch	; If negative...
    305  1d68		       c9 46		      cmp	#70	; Max value
    306  1d6a		       30 0b		      bmi	setTuningValue
    307  1d6c		       a9 46		      lda	#70	; Over max, so set to max value (50)
    308  1d6e		       4c 77 1d 	      jmp	setTuningValue
    309  1d71
    310  1d71		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
    311  1d71				   negPitch
    312  1d71		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
    313  1d73		       10 02		      bpl	setTuningValue
    314  1d75		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
    315  1d77
    316  1d77				   setTuningValue
    317  1d77		       8d f0 70 	      sta	midiTuning
    318  1d7a
    319  1d7a
    320  1d7a							;	lda firstDataByte
    321  1d7a
    322  1d7a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  1d7a							; DEBUG - SHOW MIDI DATA
    324  1d7a				  -	      IF	DEBUG_DISPLAY=1
    325  1d7a				  -	      sta	temp
    326  1d7a				  -	      ldx	#25
    327  1d7a				  -	      ldy	#23
    328  1d7a				  -	      jsr	displayHex
    329  1d7a				  -	      lda	temp
    330  1d7a				  -	      ldy	temp
    331  1d7a					      ENDIF
    332  1d7a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    333  1d7a
    334  1d7a		       60		      rts
    335  1d7b
    336  1d7b
    337  1d7b				   controlChange
    338  1d7b				  -	      IF	DEBUG_DISPLAY=1
    339  1d7b				  -	      inc	1824+87
    340  1d7b					      ENDIF
    341  1d7b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  1d7b							; DEBUG - SHOW MIDI DATA
    343  1d7b				  -	      IF	DEBUG_DISPLAY=1
    344  1d7b				  -	      sta	temp
    345  1d7b				  -	      lda	firstDataByte
    346  1d7b				  -	      ldy	#21
    347  1d7b				  -	      ldx	#17
    348  1d7b				  -	      jsr	displayHex
    349  1d7b				  -	      lda	temp
    350  1d7b				  -	      ldy	temp
    351  1d7b					      ENDIF
    352  1d7b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  1d7b
    354  1d7b					      IF	ENABLE_MIDI_COMMANDS=1
    355  1d7b		       20 ff 3a 	      jsr	midiReadWait	; Read controller value
    356  1d7e					      ENDIF
    357  1d7e		       a8		      tay
    358  1d7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  1d7f							; DEBUG - SHOW MIDI DATA
    360  1d7f				  -	      IF	DEBUG_DISPLAY=1
    361  1d7f				  -	      sta	temp
    362  1d7f				  -			;lda firstDataByte
    363  1d7f				  -	      ldy	#22
    364  1d7f				  -	      ldx	#17
    365  1d7f				  -	      jsr	displayHex
    366  1d7f				  -	      lda	temp
    367  1d7f				  -	      ldy	temp
    368  1d7f					      ENDIF
    369  1d7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  1d7f		       ad 7e 70 	      lda	firstDataByte	; Get controller number
    371  1d82				  -	      IF	OFFSET_CONTROLLERS=1
    372  1d82				  -	      sec
    373  1d82				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
    374  1d82					      ENDIF
    375  1d82							;and #$0F ; Repeat every 16 controllers
    376  1d82		       29 ef		      and	#%11101111	; Repeat every 16 controllers
    377  1d84		       d0 0a		      bne	notResonance
    378  1d86							;---- Resonance----
    379  1d86		       98		      tya
    380  1d87		       29 f0		      and	#$F0
    381  1d89		       8d 97 70 	      sta	resonance
    382  1d8c		       20 af 10 	      jsr	setResonance
    383  1d8f		       60		      rts
    384  1d90				   notResonance
    385  1d90		       c9 01		      cmp	#1
    386  1d92		       d0 11		      bne	notModWheel
    387  1d94							;----Mod wheel (filter)----
    388  1d94		       98		      tya
    389  1d95		       0a		      asl
    390  1d96		       a8		      tay
    391  1d97		       8d 9d 70 	      sta	filterSetValue
    392  1d9a		       ad 29 70 	      lda	paddle
    393  1d9d		       f0 05		      beq	skipTurnOffPaddle
    394  1d9f		       a9 00		      lda	#0	; turn paddle off
    395  1da1		       20 3c 11 	      jsr	setPaddles
    396  1da4				   skipTurnOffPaddle
    397  1da4
    398  1da4							;jsr ksetFilter
    399  1da4		       60		      rts
    400  1da5				   notModWheel
    401  1da5		       c9 02		      cmp	#2
    402  1da7		       d0 0e		      bne	notMode
    403  1da9							;---- Sound Mode----
    404  1da9		       98		      tya
    405  1daa		       4a		      lsr
    406  1dab		       4a		      lsr
    407  1dac		       4a		      lsr
    408  1dad		       29 0f		      and	#$0F
    409  1daf		       aa		      tax
    410  1db0		       bd fb 24 	      lda	modeList,x
    411  1db3		       20 57 13 	      jsr	ksetMode
    412  1db6		       60		      rts
    413  1db7				   notMode
    414  1db7		       c9 03		      cmp	#3
    415  1db9		       d0 0b		      bne	notFX
    416  1dbb							;---- FX----
    417  1dbb		       98		      tya
    418  1dbc		       4a		      lsr
    419  1dbd		       4a		      lsr
    420  1dbe		       4a		      lsr
    421  1dbf		       4a		      lsr
    422  1dc0		       29 07		      and	#$07
    423  1dc2		       20 2f 13 	      jsr	ksetFX
    424  1dc5		       60		      rts
    425  1dc6				   notFX
    426  1dc6		       c9 04		      cmp	#4
    427  1dc8		       d0 08		      bne	notAttack
    428  1dca							;--- Attack----
    429  1dca		       98		      tya
    430  1dcb		       0a		      asl
    431  1dcc		       29 f0		      and	#$F0
    432  1dce		       20 50 12 	      jsr	setAttack
    433  1dd1		       60		      rts
    434  1dd2				   notAttack
    435  1dd2		       c9 05		      cmp	#5
    436  1dd4		       d0 0c		      bne	notRelease
    437  1dd6							;---- Release----
    438  1dd6		       98		      tya
    439  1dd7		       4a		      lsr
    440  1dd8		       4a		      lsr
    441  1dd9		       4a		      lsr
    442  1dda		       29 0f		      and	#$0F
    443  1ddc		       09 f0		      ora	#$F0
    444  1dde		       20 a3 11 	      jsr	setRelease
    445  1de1		       60		      rts
    446  1de2				   notRelease
    447  1de2		       c9 06		      cmp	#6
    448  1de4		       d0 2d		      bne	notPW
    449  1de6							;--- Pulse Width----
    450  1de6		       98		      tya
    451  1de7		       0a		      asl
    452  1de8		       09 10		      ora	#%10000
    453  1dea		       20 69 10 	      jsr	setPulseWidth
    454  1ded		       ee 00 04 	      inc	1024
    455  1df0		       ad 86 70 	      lda	fxType	; if pulse modulation is on...
    456  1df3		       c9 07		      cmp	#MOD_PW2
    457  1df5		       f0 04		      beq	fxReset
    458  1df7		       c9 06		      cmp	#MOD_PW_LFO
    459  1df9		       d0 0b		      bne	noFXReset
    460  1dfb				   fxReset
    461  1dfb		       ee 01 04 	      inc	1025
    462  1dfe		       a9 00		      lda	#0
    463  1e00		       8d 86 70 	      sta	fxType
    464  1e03		       20 32 13 	      jsr	setFX	; Turn off pulse modulation modes
    465  1e06				   noFXReset
    466  1e06		       ad 7a 70 	      lda	paddle2	; if paddle2 pulse width control is on...
    467  1e09		       c9 01		      cmp	#1
    468  1e0b		       d0 05		      bne	noPaddle2Reset	;
    469  1e0d		       a9 00		      lda	#0
    470  1e0f							;sta paddle2 ; Turn off paddle 2 pulse control
    471  1e0f		       20 47 10 	      jsr	ksetPad2
    472  1e12				   noPaddle2Reset
    473  1e12		       60		      rts
    474  1e13				   notPW
    475  1e13		       c9 07		      cmp	#7
    476  1e15		       d0 08		      bne	notVolume
    477  1e17							; ----Volume----
    478  1e17		       98		      tya
    479  1e18		       4a		      lsr
    480  1e19		       4a		      lsr
    481  1e1a		       4a		      lsr
    482  1e1b		       20 83 12 	      jsr	ksetVolume
    483  1e1e		       60		      rts
    484  1e1f				   notVolume
    485  1e1f		       c9 08		      cmp	#8
    486  1e21		       d0 0b		      bne	notTremolo
    487  1e23							;---- Tremolo level----
    488  1e23		       98		      tya
    489  1e24		       4a		      lsr
    490  1e25		       4a		      lsr
    491  1e26		       4a		      lsr
    492  1e27		       4a		      lsr
    493  1e28		       29 03		      and	#$03
    494  1e2a		       20 5d 11 	      jsr	setLFODepth
    495  1e2d		       60		      rts
    496  1e2e				   notTremolo
    497  1e2e		       c9 09		      cmp	#9
    498  1e30		       d0 0b		      bne	notTremRate
    499  1e32							;---- Tremolo level----
    500  1e32		       98		      tya
    501  1e33		       4a		      lsr
    502  1e34		       4a		      lsr
    503  1e35		       4a		      lsr
    504  1e36		       4a		      lsr
    505  1e37		       29 03		      and	#$03
    506  1e39		       20 73 11 	      jsr	setLFORate
    507  1e3c		       60		      rts
    508  1e3d				   notTremRate
    509  1e3d		       c9 0d		      cmp	#13
    510  1e3f		       d0 14		      bne	notWaveform
    511  1e41							;--- Waveform (all voices)---
    512  1e41		       98		      tya
    513  1e42		       4a		      lsr
    514  1e43		       4a		      lsr
    515  1e44		       4a		      lsr
    516  1e45		       29 03		      and	#$03
    517  1e47		       aa		      tax
    518  1e48		       bd 7a 1e 	      lda	waveForms,x
    519  1e4b		       8d 37 70 	      sta	WaveType2
    520  1e4e		       8d 3e 70 	      sta	WaveType3
    521  1e51		       8d 30 70 	      sta	WaveType
    522  1e54		       60		      rts
    523  1e55				   notWaveform
    524  1e55		       c9 0e		      cmp	#14
    525  1e57		       d0 0e		      bne	notWaveform2
    526  1e59							;--- Waveform (voice 2 only)----
    527  1e59		       98		      tya
    528  1e5a		       4a		      lsr
    529  1e5b		       4a		      lsr
    530  1e5c		       4a		      lsr
    531  1e5d		       29 03		      and	#$03
    532  1e5f		       aa		      tax
    533  1e60		       bd 7a 1e 	      lda	waveForms,x
    534  1e63		       8d 37 70 	      sta	WaveType2
    535  1e66		       60		      rts
    536  1e67				   notWaveform2
    537  1e67		       c9 0f		      cmp	#15
    538  1e69		       d0 0e		      bne	notWaveform3
    539  1e6b							;---- Waveform (voice 3 only)----
    540  1e6b		       98		      tya
    541  1e6c		       4a		      lsr
    542  1e6d		       4a		      lsr
    543  1e6e		       4a		      lsr
    544  1e6f		       29 03		      and	#$03
    545  1e71		       aa		      tax
    546  1e72		       bd 7a 1e 	      lda	waveForms,x
    547  1e75		       8d 3e 70 	      sta	WaveType3
    548  1e78		       60		      rts
    549  1e79				   notWaveform3
    550  1e79		       60		      rts
    551  1e7a
    552  1e7a				   waveForms
    553  1e7a		       10 20 40 80	      byte.b	$10,$20,$40,$80
    554  1e7e							;-  -	-  -  -  -  -  -
    555  1e7e
    556  1e7e							;IF ENABLE_MIDI_COMMANDS=1
    557  1e7e					      ENDIF
    558  1e7e
    559  1e7e
    560  1e7e
    561  1e7e							; note is in Y
    562  1e7e				   noteOn
    563  1e7e
    564  1e7e		       8d 0c 70 	      sta	temp
    565  1e81					      IF	ENABLE_MIDI_COMMANDS=1
    566  1e81		       20 ff 3a 	      jsr	midiReadWait	; Read velocity byte
    567  1e84					      ENDIF
    568  1e84		       8d 7f 70 	      sta	tempVelocity
    569  1e87		       d0 09		      bne	almostNoteOn
    570  1e89							; Zero-velocity, so it's really a note-off...
    571  1e89							;inc 53280
    572  1e89		       ad 7e 70 	      lda	firstDataByte
    573  1e8c		       38		      sec
    574  1e8d		       e9 0c		      sbc	#12	; Down one octave
    575  1e8f		       4c c6 1e 	      jmp	doNoteOff
    576  1e92				   almostNoteOn
    577  1e92							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    578  1e92							; DEBUG - SHOW MIDI DATA
    579  1e92				  -	      IF	DEBUG_DISPLAY=1
    580  1e92				  -	      sta	temp
    581  1e92				  -	      lda	noteOnCount
    582  1e92				  -	      and	#1
    583  1e92				  -	      asl
    584  1e92				  -	      asl
    585  1e92				  -	      asl
    586  1e92				  -	      ora	#$F4
    587  1e92				  -	      sta	hexDispColor
    588  1e92				  -	      lda	noteOnCount
    589  1e92				  -	      and	#%1111
    590  1e92				  -	      asl
    591  1e92				  -	      tax
    592  1e92				  -			;lda temp
    593  1e92				  -	      lda	savedMidiStatus
    594  1e92				  -	      ldy	#6
    595  1e92				  -	      jsr	displayHex
    596  1e92				  -	      lda	temp
    597  1e92				  -	      ldy	temp
    598  1e92				  -	      inc	1824+83	; DEBUG INDICATOR
    599  1e92					      ENDIF
    600  1e92							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    601  1e92		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
    602  1e95		       38		      sec
    603  1e96		       e9 0c		      sbc	#12	; Down one octave
    604  1e98				   doNoteOn
    605  1e98							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    606  1e98							; DEBUG - SHOW MIDI DATA
    607  1e98				  -	      IF	DEBUG_DISPLAY=1
    608  1e98				  -	      sta	temp
    609  1e98				  -	      lda	noteOnCount
    610  1e98				  -	      and	#%1111
    611  1e98				  -	      asl
    612  1e98				  -	      tax
    613  1e98				  -	      lda	temp
    614  1e98				  -	      ldy	#7
    615  1e98				  -	      jsr	displayHex
    616  1e98				  -	      lda	temp
    617  1e98				  -	      ldy	temp
    618  1e98					      ENDIF
    619  1e98							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    620  1e98
    621  1e98							; Find empty note slot...
    622  1e98		       ae 80 70 	      ldx	bufferSize	;3
    623  1e9b		       a8		      tay
    624  1e9c							;ldx #3 ; DEBUG!
    625  1e9c		       ca		      dex
    626  1e9d				   noteOnLoop
    627  1e9d		       bd a0 70 	      lda	noteNumArray,x
    628  1ea0		       c9 ff		      cmp	#255
    629  1ea2		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
    630  1ea4		       ca		      dex
    631  1ea5		       10 f6		      bpl	noteOnLoop
    632  1ea7		       a2 00		      ldx	#0
    633  1ea9				   quitNoteOnLoop
    634  1ea9
    635  1ea9		       98		      tya
    636  1eaa		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
    637  1ead
    638  1ead							;jsr midiReadWait ; Read velocity byte
    639  1ead		       ad 7f 70 	      lda	tempVelocity
    640  1eb0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    641  1eb0							; DEBUG - SHOW MIDI DATA
    642  1eb0				  -	      IF	DEBUG_DISPLAY=1
    643  1eb0				  -	      sta	temp
    644  1eb0				  -	      lda	noteOnCount
    645  1eb0				  -	      and	#%1111
    646  1eb0				  -	      asl
    647  1eb0				  -	      tax
    648  1eb0				  -	      lda	temp
    649  1eb0				  -	      ldy	#8
    650  1eb0				  -	      jsr	displayHex
    651  1eb0				  -	      lda	temp
    652  1eb0				  -	      ldy	temp
    653  1eb0					      ENDIF
    654  1eb0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    655  1eb0							;/----------------------
    656  1eb0		       ee 8c 70 	      inc	noteOnCount
    657  1eb3		       60		      rts
    658  1eb4
    659  1eb4				   noteOff
    660  1eb4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  1eb4							; DEBUG - SHOW MIDI DATA
    662  1eb4				  -	      IF	DEBUG_DISPLAY=1
    663  1eb4				  -	      sta	temp
    664  1eb4				  -	      lda	noteOffCount
    665  1eb4				  -	      and	#1
    666  1eb4				  -			;eor #1
    667  1eb4				  -	      asl
    668  1eb4				  -	      asl
    669  1eb4				  -	      asl
    670  1eb4				  -	      ora	#$F4
    671  1eb4				  -	      sta	hexDispColor
    672  1eb4				  -	      lda	noteOffCount
    673  1eb4				  -	      and	#%1111
    674  1eb4				  -	      asl
    675  1eb4				  -	      tax
    676  1eb4				  -	      lda	temp
    677  1eb4				  -	      ldy	#10
    678  1eb4				  -	      jsr	displayHex
    679  1eb4				  -	      lda	temp
    680  1eb4				  -	      ldy	temp
    681  1eb4					      ENDIF
    682  1eb4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    683  1eb4
    684  1eb4							;jmp endMIDI
    685  1eb4
    686  1eb4		       8d 0c 70 	      sta	temp
    687  1eb7					      IF	ENABLE_MIDI_COMMANDS=1
    688  1eb7		       20 ff 3a 	      jsr	midiReadWait	; Read velocity byte
    689  1eba					      ENDIF
    690  1eba		       8d 7f 70 	      sta	tempVelocity
    691  1ebd		       ad 0c 70 	      lda	temp
    692  1ec0
    693  1ec0		       ad 7e 70 	      lda	firstDataByte
    694  1ec3		       38		      sec
    695  1ec4		       e9 0c		      sbc	#12	; Down one octave
    696  1ec6							;jsr midiReadWait ; Note number
    697  1ec6
    698  1ec6				   doNoteOff
    699  1ec6							; Find matching note number to turn note off...
    700  1ec6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    701  1ec6							; DEBUG - SHOW MIDI DATA
    702  1ec6				  -	      IF	DEBUG_DISPLAY=1
    703  1ec6				  -	      sta	temp
    704  1ec6				  -	      lda	noteOffCount
    705  1ec6				  -	      and	#%1111
    706  1ec6				  -	      asl
    707  1ec6				  -	      tax
    708  1ec6				  -	      lda	temp
    709  1ec6				  -	      ldy	#11
    710  1ec6				  -	      jsr	displayHex
    711  1ec6				  -	      lda	temp
    712  1ec6				  -	      ldy	temp
    713  1ec6					      ENDIF
    714  1ec6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    715  1ec6
    716  1ec6		       ae 80 70 	      ldx	bufferSize	;3
    717  1ec9		       8d 0c 70 	      sta	temp
    718  1ecc							;ldx #3 ; DEBUG!
    719  1ecc		       ca		      dex
    720  1ecd				   killNoteLoop
    721  1ecd		       bd a0 70 	      lda	noteNumArray,x
    722  1ed0		       cd 0c 70 	      cmp	temp	; Note match?
    723  1ed3		       f0 06		      beq	foundNote	; Then go turn off note
    724  1ed5		       ca		      dex		; next slot
    725  1ed6		       10 f5		      bpl	killNoteLoop	; loop through all slots
    726  1ed8							;Not found, so ignore
    727  1ed8		       4c e0 1e 	      jmp	endNoteOff
    728  1edb
    729  1edb				   foundNote
    730  1edb		       a9 ff		      lda	#255
    731  1edd		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
    732  1ee0
    733  1ee0				   endNoteOff
    734  1ee0		       ad 7f 70 	      lda	tempVelocity
    735  1ee3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    736  1ee3							; DEBUG - SHOW MIDI DATA
    737  1ee3				  -	      IF	DEBUG_DISPLAY=1
    738  1ee3				  -	      sta	temp
    739  1ee3				  -	      lda	noteOffCount
    740  1ee3				  -	      and	#%1111
    741  1ee3				  -	      asl
    742  1ee3				  -	      tax
    743  1ee3				  -	      lda	temp
    744  1ee3				  -	      ldy	#12
    745  1ee3				  -	      jsr	displayHex
    746  1ee3				  -	      lda	temp
    747  1ee3				  -	      ldy	temp
    748  1ee3					      ENDIF
    749  1ee3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    750  1ee3							;/----------------------
    751  1ee3		       ee 8b 70 	      inc	noteOffCount
    752  1ee6		       60		      rts
    753  1ee7
    754  1ee7
    755  1ee7				   endMIDI
    756  1ee7							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    757  1ee7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  1ee7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    759  1ee7							; FILL EMPTY PLAYABLE NOTES WITH ANY
    760  1ee7							; NON-PLAYING NOTES IN THE BUFFER
    761  1ee7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    762  1ee7							;jsr doSort
    763  1ee7
    764  1ee7		       ae 84 70 	      ldx	polyphony
    765  1eea		       ca		      dex
    766  1eeb							;ldx #2 ; DEBUG
    767  1eeb				   noteScan
    768  1eeb		       bd a0 70 	      lda	noteNumArray,x
    769  1eee		       c9 ff		      cmp	#255	; Is note off?
    770  1ef0		       f0 06		      beq	searchCopyNote
    771  1ef2				   contNoteScan
    772  1ef2		       ca		      dex
    773  1ef3		       10 f6		      bpl	noteScan	; Loop...
    774  1ef5		       4c 14 1f 	      jmp	quitNoteScan	; Done, jump to end
    775  1ef8
    776  1ef8				   searchCopyNote
    777  1ef8							;ldy bufferSize
    778  1ef8							;dey
    779  1ef8							;ldy #3
    780  1ef8		       ac 84 70 	      ldy	polyphony
    781  1efb				   copyNoteLoop
    782  1efb		       b9 a0 70 	      lda	noteNumArray,y
    783  1efe		       c9 ff		      cmp	#255
    784  1f00		       d0 07		      bne	replaceNote
    785  1f02		       c8		      iny
    786  1f03		       c0 08		      cpy	#NOTE_BUF_SIZE
    787  1f05		       f0 eb		      beq	contNoteScan
    788  1f07		       d0 f2		      bne	copyNoteLoop
    789  1f09
    790  1f09				   replaceNote
    791  1f09		       9d a0 70 	      sta	noteNumArray,x
    792  1f0c		       a9 ff		      lda	#255
    793  1f0e		       99 a0 70 	      sta	noteNumArray,y
    794  1f11		       4c f2 1e 	      jmp	contNoteScan
    795  1f14
    796  1f14				   quitNoteScan
    797  1f14		       60		      rts
    798  1f15							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    799  1f15
    800  1f15
    801  1f15
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sidedit.asm LEVEL 2 PASS 2
      0  1f15					      include	"cynth_sidedit.asm"
      1  1f15		       00 04	   HEX_DISP_OFFSET equ	4
      2  1f15
      3  1f15
      4  1f15							;---------------------------------
      5  1f15							; Wait until no hex key is down
      6  1f15							; (doesn't check all keys, only hex keys!)
      7  1f15				   waitForKeyRelease
      8  1f15		       20 e5 20 	      jsr	readHexKey
      9  1f18		       c9 ff		      cmp	#255
     10  1f1a		       d0 f9		      bne	waitForKeyRelease
     11  1f1c		       a2 ff		      ldx	#255	; Always 255
     12  1f1e		       a0 60		      ldy	#96	; Delay amount
     13  1f20				   delay		; Delay a short time to avoid catching key bounce...
     14  1f20		       ca		      dex
     15  1f21		       d0 fd		      bne	delay
     16  1f23		       88		      dey
     17  1f24		       d0 fa		      bne	delay
     18  1f26		       60		      rts
     19  1f27
     20  1f27
     21  1f27							;===============================================
     22  1f27							; Allow the user to hex edit the SID registers
     23  1f27							; directly.
     24  1f27				   SIDEdit
     25  1f27
     26  1f27							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
     27  1f27		       ae 9d 70 	      ldx	filterSetValue
     28  1f2a		       8e 54 70 	      stx	sidEditSaveTemp5
     29  1f2d
     30  1f2d		       8d 60 70 	      sta	hexKeyMode
     31  1f30
     32  1f30							;jsr beep
     33  1f30							;jsr beep
     34  1f30							;jsr beep
     35  1f30
     36  1f30		       20 b4 0c 	      jsr	clrScr
     37  1f33		       20 f5 0b 	      jsr	displayInit
     38  1f36
     39  1f36							; X = low data address
     40  1f36							; Y = high data address
     41  1f36		       a2 2a		      ldx	#>hexEditHelp	;low/MSB
     42  1f38		       a0 66		      ldy	#<hexEditHelp	;high/LSB
     43  1f3a		       20 0b 0d 	      jsr	displayPage
     44  1f3d
     45  1f3d		       20 6a 20 	      jsr	showSidValues
     46  1f40
     47  1f40
     48  1f40							;enable keyboard interrupt
     49  1f40							;	lda #129
     50  1f40							;	sta 56333
     51  1f40							; wait for all keys to be released first
     52  1f40							;waitForNoKey:
     53  1f40							;	lda 197
     54  1f40							;	cmp #64
     55  1f40							;	bne waitForNoKey
     56  1f40
     57  1f40
     58  1f40							; clear top line
     59  1f40		       a2 09		      ldx	#9
     60  1f42		       a9 20		      lda	#32
     61  1f44				   hexClearA
     62  1f44		       9d 00 04 	      sta	1024,x
     63  1f47		       ca		      dex
     64  1f48		       10 fa		      bpl	hexClearA
     65  1f4a
     66  1f4a							; display "sid edit" text
     67  1f4a		       a2 5c		      ldx	#92
     68  1f4c		       a0 00		      ldy	#0
     69  1f4e		       20 94 0c 	      jsr	updateText
     70  1f51
     71  1f51							;jsr waitForKeyRelease
     72  1f51
     73  1f51							; get/display the first hex digit of the address to edit
     74  1f51		       a9 24		      lda	#36
     75  1f53		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     76  1f56		       20 da 20 	      jsr	getHexKey
     77  1f59		       c9 10		      cmp	#16	; cancelled
     78  1f5b		       d0 03		      bne	notCancelled
     79  1f5d		       4c 52 20 	      jmp	waitKeyRelease
     80  1f60				   notCancelled
     81  1f60		       aa		      tax
     82  1f61		       0a		      asl
     83  1f62		       0a		      asl
     84  1f63		       0a		      asl
     85  1f64		       0a		      asl
     86  1f65		       8d 5a 70 	      sta	SIDeditAddr
     87  1f68		       bd ec 33 	      lda	hexDisplay,x
     88  1f6b		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     89  1f6e
     90  1f6e							;sta 1024
     91  1f6e							;jsr waitForKeyRelease
     92  1f6e							;sta 1024
     93  1f6e
     94  1f6e							; get/display the second hex digit of the address to edit
     95  1f6e		       a9 24		      lda	#36
     96  1f70		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
     97  1f73		       20 da 20 	      jsr	getHexKey
     98  1f76		       c9 10		      cmp	#16	; cancelled
     99  1f78		       d0 03		      bne	notCancelled2
    100  1f7a		       4c 52 20 	      jmp	waitKeyRelease
    101  1f7d				   notCancelled2
    102  1f7d		       aa		      tax
    103  1f7e		       0d 5a 70 	      ora	SIDeditAddr
    104  1f81		       8d 5a 70 	      sta	SIDeditAddr
    105  1f84		       bd ec 33 	      lda	hexDisplay,x
    106  1f87		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
    107  1f8a
    108  1f8a							; display a '>' between
    109  1f8a		       a9 3e		      lda	#62
    110  1f8c		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
    111  1f8f
    112  1f8f							; get/display the first hex digit of the value to write
    113  1f8f		       a9 24		      lda	#36
    114  1f91		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    115  1f94		       20 da 20 	      jsr	getHexKey
    116  1f97		       c9 10		      cmp	#16	; cancelled
    117  1f99		       d0 03		      bne	notCancelled3
    118  1f9b		       4c 52 20 	      jmp	waitKeyRelease
    119  1f9e				   notCancelled3
    120  1f9e		       aa		      tax
    121  1f9f		       0a		      asl
    122  1fa0		       0a		      asl
    123  1fa1		       0a		      asl
    124  1fa2		       0a		      asl
    125  1fa3		       8d 5b 70 	      sta	SIDeditValue
    126  1fa6		       bd ec 33 	      lda	hexDisplay,x
    127  1fa9		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    128  1fac
    129  1fac							; get/display the second hex digit of the value to write
    130  1fac		       a9 24		      lda	#36
    131  1fae		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    132  1fb1		       20 da 20 	      jsr	getHexKey
    133  1fb4		       c9 10		      cmp	#16	; cancelled
    134  1fb6		       d0 03		      bne	notCancelled4
    135  1fb8		       4c 52 20 	      jmp	waitKeyRelease
    136  1fbb				   notCancelled4
    137  1fbb		       aa		      tax
    138  1fbc		       0d 5b 70 	      ora	SIDeditValue
    139  1fbf		       8d 5b 70 	      sta	SIDeditValue
    140  1fc2		       bd ec 33 	      lda	hexDisplay,x
    141  1fc5		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    142  1fc8
    143  1fc8							; if <=$20 then write to all 3 SID oscillator regs
    144  1fc8		       ae 5a 70 	      ldx	SIDeditAddr
    145  1fcb		       e0 20		      cpx	#$20
    146  1fcd		       30 2e		      bmi	normalWrite
    147  1fcf							;--------------
    148  1fcf		       ad 5b 70 	      lda	SIDeditValue
    149  1fd2		       9d e0 d3 	      sta	SID1-32,x
    150  1fd5		       9d 00 d4 	      sta	SID2-32,x
    151  1fd8		       9d e0 70 	      sta	sidData-32,x
    152  1fdb		       9d e7 d3 	      sta	SID1-32+#$7,x
    153  1fde		       9d 07 d4 	      sta	SID2-32+#$7,x
    154  1fe1		       9d e7 70 	      sta	sidData-32+#$7,x
    155  1fe4		       9d ee d3 	      sta	SID1-32+#$E,x
    156  1fe7		       9d 0e d4 	      sta	SID2-32+#$E,x
    157  1fea		       9d ee 70 	      sta	sidData-32+#$E,x
    158  1fed		       e0 24		      cpx	#SV1WAVE+32
    159  1fef		       d0 09		      bne	no3Wave
    160  1ff1		       8d 30 70 	      sta	WaveType
    161  1ff4		       8d 37 70 	      sta	WaveType2
    162  1ff7		       8d 3e 70 	      sta	WaveType3
    163  1ffa				   no3Wave
    164  1ffa		       4c 38 20 	      jmp	skipNormalWrite
    165  1ffd							;...............
    166  1ffd				   normalWrite
    167  1ffd							; write the value to both sids
    168  1ffd		       ae 5a 70 	      ldx	SIDeditAddr
    169  2000		       ad 5b 70 	      lda	SIDeditValue
    170  2003		       9d 00 d4 	      sta	SID1,x
    171  2006		       9d 20 d4 	      sta	SID2,x
    172  2009		       9d 00 71 	      sta	sidData,x
    173  200c
    174  200c		       e0 04		      cpx	#SV1WAVE
    175  200e		       d0 03		      bne	noWave1
    176  2010		       8d 30 70 	      sta	WaveType
    177  2013				   noWave1
    178  2013
    179  2013		       e0 0b		      cpx	#SV2WAVE
    180  2015		       d0 03		      bne	noWave2
    181  2017		       8d 37 70 	      sta	WaveType2
    182  201a				   noWave2
    183  201a
    184  201a		       e0 12		      cpx	#SV3WAVE
    185  201c		       d0 03		      bne	noWave3
    186  201e		       8d 3e 70 	      sta	WaveType3
    187  2021				   noWave3
    188  2021
    189  2021		       e0 16		      cpx	#SFILTH
    190  2023		       d0 03		      bne	noFiltSave
    191  2025		       8d 57 70 	      sta	filter
    192  2028				   noFiltSave
    193  2028
    194  2028							; turn off paddles if filter was adjusted
    195  2028		       e0 15		      cpx	#SFILTL
    196  202a		       f0 04		      beq	paddleOffhex
    197  202c		       e0 16		      cpx	#SFILTH
    198  202e		       d0 08		      bne	noPaddleOff
    199  2030				   paddleOffhex
    200  2030		       a9 00		      lda	#0
    201  2032		       8d 29 70 	      sta	paddle	; turn off paddle controller first
    202  2035		       20 56 11 	      jsr	showPaddle
    203  2038				   noPaddleOff
    204  2038
    205  2038				   skipNormalWrite
    206  2038		       ae 5a 70 	      ldx	SIDeditAddr
    207  203b		       ad 5b 70 	      lda	SIDeditValue
    208  203e
    209  203e							; check for a volume/mode change...
    210  203e							; if changed, write it to related variables too
    211  203e		       e0 18		      cpx	#SVOLMODE
    212  2040		       d0 10		      bne	noVolumeSetting
    213  2042		       8d 0c 70 	      sta	temp
    214  2045		       29 f0		      and	#$F0
    215  2047		       8d 24 70 	      sta	volModeRAM
    216  204a		       ad 0c 70 	      lda	temp
    217  204d		       29 0f		      and	#$0F
    218  204f		       8d 1c 70 	      sta	volume
    219  2052				   noVolumeSetting
    220  2052							;	lda volModeRAM
    221  2052							;	and #$F0
    222  2052							;	ora volume
    223  2052
    224  2052							; wait for key to be released before returning
    225  2052				   waitKeyRelease
    226  2052		       a5 c5		      lda	197
    227  2054		       c9 40		      cmp	#64
    228  2056		       d0 fa		      bne	waitKeyRelease
    229  2058
    230  2058							; reset volume (messed up from clicks)
    231  2058		       20 86 12 	      jsr	setVolume
    232  205b
    233  205b		       a9 00		      lda	#0
    234  205d							;sta helpMode
    235  205d		       20 2a 11 	      jsr	setHelpMode
    236  2060		       20 f5 0b 	      jsr	displayInit
    237  2063							; X = low data address
    238  2063							; Y = high data address
    239  2063							;	ldx #>hexEditHelp ;low/MSB
    240  2063							;	ldy #<hexEditHelp ;high/LSB
    241  2063							;	jsr displayPage
    242  2063							;	jsr showSidValues
    243  2063
    244  2063							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
    245  2063		       ad 54 70 	      lda	sidEditSaveTemp5
    246  2066		       8d 9d 70 	      sta	filterSetValue
    247  2069
    248  2069
    249  2069		       60		      rts		; EXIT HEX EDIT MODE
    250  206a							; -------------------------------------------------- /
    251  206a
    252  206a
    253  206a
    254  206a							;************************************
    255  206a				   showSidValues
    256  206a		       a0 02		      ldy	#2
    257  206c				   sidDispLoop1
    258  206c		       8c 73 70 	      sty	sidTemp1
    259  206f		       b9 00 71 	      lda	sidData,y
    260  2072		       8d 74 70 	      sta	sidTemp2
    261  2075		       98		      tya
    262  2076		       0a		      asl
    263  2077		       18		      clc
    264  2078		       69 04		      adc	#4
    265  207a		       a8		      tay
    266  207b		       ad 74 70 	      lda	sidTemp2
    267  207e		       a2 06		      ldx	#6
    268  2080		       20 c8 0c 	      jsr	displayHex
    269  2083		       ac 73 70 	      ldy	sidTemp1
    270  2086							;---------------
    271  2086		       b9 07 71 	      lda	sidData+7,y
    272  2089		       8d 74 70 	      sta	sidTemp2
    273  208c		       98		      tya
    274  208d		       0a		      asl
    275  208e		       18		      clc
    276  208f		       69 04		      adc	#4
    277  2091		       a8		      tay
    278  2092		       ad 74 70 	      lda	sidTemp2
    279  2095		       a2 0a		      ldx	#10
    280  2097		       20 c8 0c 	      jsr	displayHex
    281  209a		       ac 73 70 	      ldy	sidTemp1
    282  209d							;---------------
    283  209d		       b9 0e 71 	      lda	sidData+14,y
    284  20a0		       8d 74 70 	      sta	sidTemp2
    285  20a3		       98		      tya
    286  20a4		       0a		      asl
    287  20a5		       18		      clc
    288  20a6		       69 04		      adc	#4
    289  20a8		       a8		      tay
    290  20a9		       ad 74 70 	      lda	sidTemp2
    291  20ac		       a2 0e		      ldx	#14
    292  20ae		       20 c8 0c 	      jsr	displayHex
    293  20b1		       ac 73 70 	      ldy	sidTemp1
    294  20b4
    295  20b4		       c8		      iny
    296  20b5		       c0 07		      cpy	#7
    297  20b7		       d0 b3		      bne	sidDispLoop1
    298  20b9							;---------------
    299  20b9							;---------------
    300  20b9		       a0 15		      ldy	#$15
    301  20bb				   sidDispLoop2
    302  20bb		       8c 73 70 	      sty	sidTemp1
    303  20be		       b9 00 71 	      lda	sidData,y
    304  20c1		       8d 74 70 	      sta	sidTemp2
    305  20c4		       98		      tya
    306  20c5		       38		      sec
    307  20c6		       e9 02		      sbc	#2
    308  20c8		       a8		      tay
    309  20c9		       ad 74 70 	      lda	sidTemp2
    310  20cc		       a2 05		      ldx	#5
    311  20ce		       20 c8 0c 	      jsr	displayHex
    312  20d1		       ac 73 70 	      ldy	sidTemp1
    313  20d4
    314  20d4		       c8		      iny
    315  20d5		       c0 19		      cpy	#$19
    316  20d7		       d0 e2		      bne	sidDispLoop2
    317  20d9							;---------------
    318  20d9		       60		      rts
    319  20da
    320  20da
    321  20da
    322  20da							;=======================================================================
    323  20da							; waits for user to press a key (0-F) and returns
    324  20da							; the value in A
    325  20da				   getHexKey
    326  20da		       20 15 1f 	      jsr	waitForKeyRelease
    327  20dd				   getHexLoop
    328  20dd							;inc 1024
    329  20dd		       20 e5 20 	      jsr	readHexKey
    330  20e0		       c9 ff		      cmp	#255	; No key pressed
    331  20e2		       f0 f9		      beq	getHexLoop
    332  20e4							;inc 1025
    333  20e4		       60		      rts
    334  20e5
    335  20e5
    336  20e5
    337  20e5							;=======================================================================
    338  20e5							; Returns the currently pressed hex key, or #255 if none
    339  20e5							; is currently pressed
    340  20e5				   readHexKey
    341  20e5
    342  20e5		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
    343  20e8		       f0 1a		      beq	normalHexKey
    344  20ea
    345  20ea							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    346  20ea							; Use piano keys to enter hex numbers
    347  20ea				   pianoHexKey
    348  20ea		       a0 00		      ldy	#0
    349  20ec				   checkLoop2
    350  20ec		       b9 5b 21 	      lda	hexColPiano,y
    351  20ef		       f0 10		      beq	quitCheck2
    352  20f1		       8d 00 dc 	      sta	56320
    353  20f4		       ad 01 dc 	      lda	56321
    354  20f7		       39 7f 21 	      and	hexRowPiano,y
    355  20fa		       d0 02		      bne	notPressed2
    356  20fc		       98		      tya
    357  20fd							;sta 1027
    358  20fd		       60		      rts
    359  20fe							;jmp quitCheck2
    360  20fe				   notPressed2
    361  20fe		       c8		      iny
    362  20ff		       d0 eb		      bne	checkLoop2
    363  2101				   quitCheck2
    364  2101		       a9 ff		      lda	#255	; no key pressed
    365  2103		       60		      rts
    366  2104							;jmp pianoHexKey
    367  2104							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  2104
    369  2104							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  2104							; Use normal keys (0-9,A-F) to enter hex numbers
    371  2104				   normalHexKey
    372  2104		       a0 00		      ldy	#0
    373  2106				   checkLoop3
    374  2106		       b9 6d 21 	      lda	hexCol,y
    375  2109		       f0 10		      beq	quitCheck3
    376  210b		       8d 00 dc 	      sta	56320
    377  210e		       ad 01 dc 	      lda	56321
    378  2111		       39 91 21 	      and	hexRow,y
    379  2114		       d0 02		      bne	notPressed3
    380  2116		       98		      tya
    381  2117							;sta 1027
    382  2117		       60		      rts
    383  2118							;jmp quitCheck3
    384  2118				   notPressed3
    385  2118		       c8		      iny
    386  2119		       d0 eb		      bne	checkLoop3
    387  211b				   quitCheck3
    388  211b		       a9 ff		      lda	#255	; no key pressed
    389  211d		       60		      rts
    390  211e
    391  211e							;beep:
    392  211e							;ldx #3
    393  211e							;beepLoop:
    394  211e							;	lda volModeRAM
    395  211e							;	ora #$0F
    396  211e							;	sta SID1+SVOLMODE
    397  211e							;	sta SID2+SVOLMODE
    398  211e							;	sta sidData+SVOLMODE
    399  211e							;	jsr clickDelay
    400  211e							;	lda volModeRAM
    401  211e							;	and #$F0
    402  211e							;	sta SID1+SVOLMODE
    403  211e							;	sta SID2+SVOLMODE
    404  211e							;	sta sidData+SVOLMODE
    405  211e							;	dex
    406  211e							;	bne beepLoop
    407  211e							;	rts
    408  211e
    409  211e
    410  211e							; ------------------------------------
    411  211e							; delay for click (for beep) -- uses Y
    412  211e							;clickDelay:
    413  211e							;ldy #$10
    414  211e							;sty temp
    415  211e							;mainDelayLoop:
    416  211e							;	ldy #0
    417  211e							;innerDelayLoop:
    418  211e							;	dey
    419  211e							;	bne innerDelayLoop
    420  211e							;	dec temp
    421  211e							;	bne mainDelayLoop
    422  211e							;	rts
    423  211e
------- FILE cynthcart2.0.1.asm
   1047  211e
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  211e					      include	"cynth_subroutines.asm"	; Extra subroutines - currently just note sorting routine
      1  211e							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  211e							;
      3  211e							; input:
      4  211e							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  211e							;			 should point to the byte just before the first byte to be sorted
      6  211e							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  211e							;nval	 - number of values,  1<= nval <= 255
      8  211e							;			 value will be destroyed (set to zero)
      9  211e							;
     10  211e
     11  211e
     12  211e							;*=$6000			;code anywhere in ram or rom
     13  211e
     14  211e							;=====================================================================
     15  211e							; CUSTOM SORT FOR NOTE ARRAY
     16  211e				   doSort
     17  211e		       a9 08		      lda	#8
     18  2120		       8d 22 01 	      sta	nval
     19  2123				   sort
     20  2123		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  2126		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  2129		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  212c		       4c 3a 21 	      jmp	l2
     24  212f				   l1
     25  212f		       88		      dey
     26  2130		       f0 11		      beq	l3
     27  2132		       b9 9f 70 	      lda	noteNumArray-1,y
     28  2135		       cd 26 01 	      cmp	work2
     29  2138		       90 f5		      bcc	l1
     30  213a				   l2
     31  213a		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  213d		       8d 26 01 	      sta	work2	;potentially largest value
     33  2140		       4c 2f 21 	      jmp	l1
     34  2143				   l3
     35  2143		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  2146		       ad 26 01 	      lda	work2	;the largest value
     37  2149		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  214c		       ac 25 01 	      ldy	work1	;index of free space
     39  214f		       ad 27 01 	      lda	work3	;the over-written value
     40  2152		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  2155		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  2158		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  215a		       60		      rts
     44  215b							;=====================================================================
     45  215b
     46  215b
     47  215b
     48  215b
     49  215b							;=====================================================================
     50  215b							; ORIGINAL VERSION
     51  215b							;originalSort:
     52  215b							;ldy nval			 ;start of subroutine sort
     53  215b							;;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  215b							;sta work3			;save value. will be over-written by largest number
     55  215b							;jmp l2
     56  215b							;l1:
     57  215b							;dey
     58  215b							;beq l3
     59  215b							;;lda (zpadd),y
     60  215b							;cmp work2
     61  215b							;bcc l1
     62  215b							;l2:
     63  215b							;sty work1			;index of potentially largest value
     64  215b							;sta work2			;potentially largest value
     65  215b							;jmp l1
     66  215b							;l3:
     67  215b							;ldy nval				;where the largest value shall be put
     68  215b							;lda work2			;the largest value
     69  215b							;;sta (zpadd),y		;put largest value in place
     70  215b							;ldy work1			;index of free space
     71  215b							;lda work3			;the over-written value
     72  215b							;;sta (zpadd),y		;put the over-written value in the free space
     73  215b							;dec nval				;end of the shorter sequence still left
     74  215b							;bne sort				;start working with the shorter sequence
     75  215b							;rts
     76  215b							;=====================================================================
     77  215b
     78  215b
------- FILE cynthcart2.0.1.asm
   1049  215b
------- FILE cynth_keycommands.asm LEVEL 2 PASS 2
      0  215b					      include	"cynth_keycommands.asm"	; key matrix tables and key command tables
      1  215b
      2  215b							;------------------------------------------
      3  215b							; Keyboard Reading Data
      4  215b							;------------------------------------------
      5  215b
      6  215b				   hexColPiano
      7  215b		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB, $FB,$F7,$EF,$EF, $DF,$BF, $F7,$F7, $EF,$EF,$DF,$DF, $7F,0	; PIANO KEYBOARD
      8  216d				   hexCol
      9  216d		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04, $7F,0
     10  217f							; 0   1   2   3     4	 5   6	 7     8   9	A   B	    C	D   E	F    SPACEBAR (cancel)
     11  217f				   hexRowPiano
     12  217f		       08 08 01 01*	      byte.b	$08,$08,$01,$01, $08,$01,$01,$08, $08,$01,$02,$40, $02,$40,$02,$40, $02,0	; PIANO KEYBOARD ($10 = space) ($02 = backarrow)
     13  2191				   hexRow
     14  2191		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, $02,0
     15  21a3							; 0   1   2   3     4	 5   6	 7     8   9   A   B	 C   D	 E   F	   SPACEBAR (cancel)
     16  21a3
     17  21a3							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     18  21a3							; Column activation data
     19  21a3				   col			;	   x	     x		      x 	  x    A    x	 B
     20  21a3		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     21  21af		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     22  21bc							;    C    x	D    x	    E	 F    x 	  x	    x
     23  21bc
     24  21bc							; Row testing data
     25  21bc				   row			;	   x	     x		      x 	  x    A    x	 B
     26  21bc		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     27  21c8		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     28  21d5							;    C    x	D    x	    E	 F    x 	  x	    x
     29  21d5							;-----------------------------------------------
     30  21d5							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     31  21d5							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     32  21d5							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     33  21d5							;-----------------------------------------------
     34  21d5							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     35  21d5							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     36  21d5							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     37  21d5							;-----------------------------------------------
     38  21d5
     39  21d5				   commandKeys		; row, column
     40  21d5		       7f 10		      byte.b	~$80, $10	;spc 28
     41  21d7		       fd 04		      byte.b	~$02, $04	;A   0
     42  21d9		       fd 20		      byte.b	~$02, $20	;S   1
     43  21db		       fb 04		      byte.b	~$04, $04	;D   2
     44  21dd		       fb 20		      byte.b	~$04, $20	;F   3
     45  21df		       f7 04		      byte.b	~$08, $04	;G   4
     46  21e1		       f7 20		      byte.b	~$08, $20	;H   5
     47  21e3		       ef 04		      byte.b	~$10, $04	;J   6
     48  21e5		       ef 20		      byte.b	~$10, $20	;K   7
     49  21e7		       df 04		      byte.b	~$20, $04	;L   8
     50  21e9		       df 20		      byte.b	~$20, $20	;:   9
     51  21eb		       bf 04		      byte.b	~$40, $04	;;   10
     52  21ed		       bf 20		      byte.b	~$40, $20	;=   11
     53  21ef		       fd 10		      byte.b	~$02, $10	;Z   12
     54  21f1		       fb 80		      byte.b	~$04, $80	;X   13
     55  21f3		       fb 10		      byte.b	~$04, $10	;C   14
     56  21f5		       f7 80		      byte.b	~$08, $80	;V   15
     57  21f7		       f7 10		      byte.b	~$08, $10	;B   16
     58  21f9		       ef 80		      byte.b	~$10, $80	;N   17
     59  21fb		       ef 10		      byte.b	~$10, $10	;M   18
     60  21fd		       df 80		      byte.b	~$20, $80	;,   19
     61  21ff		       df 10		      byte.b	~$20, $10	;.   20
     62  2201		       bf 80		      byte.b	~$40, $80	;/   21
     63  2203		       fe 80		      byte.b	~$01, $80	;u/d 22
     64  2205		       fe 04		      byte.b	~$01, $04	;l/r 23
     65  2207		       fe 10		      byte.b	~$01, $10	;F1  24
     66  2209		       fe 20		      byte.b	~$01, $20	;F3  25
     67  220b		       fe 40		      byte.b	~$01, $40	;F5  26
     68  220d		       fe 08		      byte.b	~$01, $08	;F7  27
     69  220f		       fe 02		      byte.b	~$01, $02	;ret 29
     70  2211		       7f 02		      byte.b	~$80, $02	;Larr 30
     71  2213							;byte ~$80, $04		;Larr 30
     72  2213
     73  2213				   rawKeyFunctions
     74  2213							;    functionPointer, inputData:Y,A
     75  2213		       20 10 00 00	      word.w	bendBender, $0000	;space
     76  2217		       aa 13 00 0a	      word.w	setPatch, $0A00	;A
     77  221b		       aa 13 00 0b	      word.w	setPatch, $0B00	;S
     78  221f		       aa 13 00 0c	      word.w	setPatch, $0C00	;D
     79  2223		       aa 13 00 0d	      word.w	setPatch, $0D00	;F
     80  2227		       aa 13 00 0e	      word.w	setPatch, $0E00	;G
     81  222b		       aa 13 00 0f	      word.w	setPatch, $0F00	;H
     82  222f		       aa 13 00 10	      word.w	setPatch, $1000	;J
     83  2233		       aa 13 00 11	      word.w	setPatch, $1100	;K
     84  2237		       aa 13 00 12	      word.w	setPatch, $1200	;L
     85  223b		       aa 13 00 13	      word.w	setPatch, $1300	;:
     86  223f		       aa 13 00 15	      word.w	setPatch, $1500	;;
     87  2243		       aa 13 00 14	      word.w	setPatch, $1400	;=
     88  2247		       aa 13 00 00	      word.w	setPatch, $0000	;Z
     89  224b		       aa 13 00 01	      word.w	setPatch, $0100	;X
     90  224f		       aa 13 00 02	      word.w	setPatch, $0200	;C
     91  2253		       aa 13 00 03	      word.w	setPatch, $0300	;V
     92  2257		       aa 13 00 04	      word.w	setPatch, $0400	;B
     93  225b		       aa 13 00 05	      word.w	setPatch, $0500	;N
     94  225f		       aa 13 00 06	      word.w	setPatch, $0600	;M
     95  2263		       aa 13 00 07	      word.w	setPatch, $0700	;,
     96  2267		       aa 13 00 08	      word.w	setPatch, $0800	;.
     97  226b		       aa 13 00 09	      word.w	setPatch, $0900	;/
     98  226f		       57 13 00 00	      word.w	ksetMode, $0000	;up/down
     99  2273		       57 13 01 00	      word.w	ksetMode, $0001	;left/right
    100  2277		       d6 12 03 00	      word.w	setOctave, 3	;F1
    101  227b		       d6 12 02 00	      word.w	setOctave, 2	;F3
    102  227f		       d6 12 01 00	      word.w	setOctave, 1	;F5
    103  2283		       d6 12 00 00	      word.w	setOctave, 0	;F7
    104  2287		       b8 0f 00 00	      word.w	khelp,0	;return
    105  228b		       4a 0f 00 00	      word.w	kloadPatch,0	;Larrow
    106  228f
    107  228f				   minimalKeyFunctions
    108  228f							;    functionPointer, inputData:Y,A
    109  228f		       20 10 00 00	      word.w	bendBender, $0000	;space
    110  2293		       00 00 00 00	      word.w	0, 0	;A
    111  2297		       00 00 00 00	      word.w	0, 0	;S
    112  229b		       00 00 00 00	      word.w	0, 0	;D
    113  229f		       00 00 00 00	      word.w	0, 0	;F
    114  22a3		       00 00 00 00	      word.w	0, 0	;G
    115  22a7		       00 00 00 00	      word.w	0, 0	;H
    116  22ab		       00 00 00 00	      word.w	0, 0	;J
    117  22af		       00 00 00 00	      word.w	0, 0	;K
    118  22b3		       00 00 00 00	      word.w	0, 0	;L
    119  22b7		       00 00 00 00	      word.w	0, 0	;:
    120  22bb		       00 00 00 00	      word.w	0, 0	;;
    121  22bf		       00 00 00 00	      word.w	0, 0	;=
    122  22c3		       00 00 00 00	      word.w	0, 0	;Z
    123  22c7		       00 00 00 00	      word.w	0, 0	;X
    124  22cb		       00 00 00 00	      word.w	0, 0	;C
    125  22cf		       00 00 00 00	      word.w	0, 0	;V
    126  22d3		       00 00 00 00	      word.w	0, 0	;B
    127  22d7		       00 00 00 00	      word.w	0, 0	;N
    128  22db		       00 00 00 00	      word.w	0, 0	;M
    129  22df		       00 00 00 00	      word.w	0, 0	;,
    130  22e3		       00 00 00 00	      word.w	0, 0	;.
    131  22e7		       00 00 00 00	      word.w	0, 0	;/
    132  22eb		       00 00 00 00	      word.w	0, 0	;up/down
    133  22ef		       00 00 00 00	      word.w	0, 0	;left/right
    134  22f3		       d6 12 03 00	      word.w	setOctave, 3	;F1
    135  22f7		       d6 12 02 00	      word.w	setOctave, 2	;F3
    136  22fb		       d6 12 01 00	      word.w	setOctave, 1	;F5
    137  22ff		       d6 12 00 00	      word.w	setOctave, 0	;F7
    138  2303		       00 00 00 00	      word.w	0,0	;return
    139  2307		       00 00 00 00	      word.w	0,0	;Larrow
    140  230b
    141  230b				   CTRLKeyFunctions
    142  230b							;    functionPointer, inputData:Y,A
    143  230b		       00 00 00 00	      word.w	0, $0000	;space
    144  230f		       a3 11 e0 00	      word.w	setRelease, REL_SHORT	;A
    145  2313		       a3 11 e9 00	      word.w	setRelease, REL_MED	;S
    146  2317		       a3 11 ee 00	      word.w	setRelease, REL_LONG	;D
    147  231b		       57 13 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    148  231f		       57 13 01 00	      word.w	ksetMode, MODE_5THS	;G
    149  2323		       57 13 02 00	      word.w	ksetMode, MODE_5PORT	;H
    150  2327		       57 13 20 00	      word.w	ksetMode, MODE_MONO1	;J
    151  232b		       57 13 40 00	      word.w	ksetMode, MODE_ARP1	;K
    152  232f		       57 13 41 00	      word.w	ksetMode, MODE_ARP2	;L
    153  2333		       57 13 42 00	      word.w	ksetMode, MODE_ARP3	;:
    154  2337		       57 13 43 00	      word.w	ksetMode, MODE_ARP4	;;
    155  233b		       57 13 44 00	      word.w	ksetMode, MODE_ARP5	;=
    156  233f		       2f 13 00 00	      word.w	ksetFX, $0000	;Z
    157  2343		       2f 13 01 00	      word.w	ksetFX, $0001	;X
    158  2347		       2f 13 02 00	      word.w	ksetFX, $0002	;C
    159  234b		       2f 13 03 00	      word.w	ksetFX, $0003	;V
    160  234f		       2f 13 04 00	      word.w	ksetFX, $0004	;B
    161  2353		       2f 13 05 00	      word.w	ksetFX, $0005	;N
    162  2357		       2f 13 06 00	      word.w	ksetFX, $0006	;M
    163  235b		       2f 13 07 00	      word.w	ksetFX, $0007	;,
    164  235f		       2f 13 08 00	      word.w	ksetFX, $0008	;.
    165  2363							;word ksetFX,	$0009	;/
    166  2363		       57 13 21 00	      word.w	ksetMode, MODE_MONO2	;/
    167  2367		       57 13 31 00	      word.w	ksetMode, MODE_MONOPORT1	;up/down
    168  236b		       57 13 32 00	      word.w	ksetMode, MODE_MONOPORT2	;left/right
    169  236f		       83 12 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    170  2373		       83 12 0b 00	      word.w	ksetVolume, VOLMED	;F3
    171  2377		       83 12 07 00	      word.w	ksetVolume, VOLLOW	;F5
    172  237b		       83 12 00 00	      word.w	ksetVolume, VOLOFF	;F7
    173  237f		       57 13 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    174  2383		       00 00 00 00	      word.w	0,0	;Larrow
    175  2387
    176  2387				   shiftKeyFunctions
    177  2387							;    functionPointer, inputData:Y,A
    178  2387		       00 00 00 00	      word.w	0, $0000	;space
    179  238b		       50 12 00 00	      word.w	setAttack,ATK_SHORT	;A
    180  238f		       50 12 90 00	      word.w	setAttack,ATK_MED	;S
    181  2393		       50 12 e0 00	      word.w	setAttack,ATK_LONG	;D
    182  2397		       2e 11 08 01	      word.w	setVideoMode,$0108	;F
    183  239b		       2e 11 03 02	      word.w	setVideoMode,$0203	;G
    184  239f		       2e 11 15 03	      word.w	setVideoMode,$0315	;H
    185  23a3		       39 10 02 00	      word.w	setVIC, 2	;J
    186  23a7		       39 10 01 00	      word.w	setVIC, 1	;K
    187  23ab		       39 10 00 00	      word.w	setVIC, 0	;L
    188  23af		       fe 10 01 00	      word.w	setFullScreenMode, $0001	;:
    189  23b3		       fe 10 00 00	      word.w	setFullScreenMode, $0000	;;
    190  23b7		       00 00 00 00	      word.w	0, $0000	;=
    191  23bb		       73 11 00 00	      word.w	setLFORate,0	;Z
    192  23bf		       73 11 01 00	      word.w	setLFORate,1	;X
    193  23c3		       73 11 02 00	      word.w	setLFORate,2	;C
    194  23c7		       73 11 03 00	      word.w	setLFORate,3	;V
    195  23cb		       5d 11 00 00	      word.w	setLFODepth,0	;B
    196  23cf		       5d 11 01 00	      word.w	setLFODepth,1	;N
    197  23d3		       5d 11 02 00	      word.w	setLFODepth,2	;M
    198  23d7		       5d 11 03 00	      word.w	setLFODepth,3	;,
    199  23db		       00 00 00 00	      word.w	0, $0000	;.
    200  23df		       00 00 00 00	      word.w	0, $0000	;/
    201  23e3		       3d 10 00 00	      word.w	ksetPaddles, 0	;up/down
    202  23e7		       3d 10 01 00	      word.w	ksetPaddles, 1	;left/right
    203  23eb		       57 13 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    204  23ef		       57 13 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    205  23f3		       57 13 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    206  23f7		       57 13 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    207  23fb		       0b 10 00 00	      word.w	kclearModulation,0	;return
    208  23ff		       00 00 00 00	      word.w	0,0	;Larrow
    209  2403
    210  2403				   commKeyFunctions
    211  2403							;    functionPointer, inputData:Y,A
    212  2403		       00 00 00 00	      word.w	0, $0000	;space
    213  2407		       5c 10 00 00	      word.w	ksetFilter, $0000	;A
    214  240b		       5c 10 20 00	      word.w	ksetFilter, $0020	;S
    215  240f		       5c 10 40 00	      word.w	ksetFilter, $0040	;D
    216  2413		       5c 10 60 00	      word.w	ksetFilter, $0060	;F
    217  2417		       5c 10 80 00	      word.w	ksetFilter, $0080	;G
    218  241b		       5c 10 a0 00	      word.w	ksetFilter, $00A0	;H
    219  241f		       5c 10 c0 00	      word.w	ksetFilter, $00C0	;J
    220  2423		       5c 10 e0 00	      word.w	ksetFilter, $00E0	;K
    221  2427		       00 00 00 00	      word.w	0, $0000	;L
    222  242b		       00 00 00 00	      word.w	0, $0000	;:
    223  242f		       00 00 00 00	      word.w	0, $0000	;;
    224  2433		       00 00 00 00	      word.w	0, $0000	;=
    225  2437		       ac 10 00 00	      word.w	kfiltOnOff,$0000	;Z
    226  243b		       ac 10 00 01	      word.w	kfiltOnOff,$0100	;X
    227  243f		       ac 10 00 02	      word.w	kfiltOnOff,$0200	;C
    228  2443		       47 10 00 00	      word.w	ksetPad2, $0000	;V
    229  2447		       47 10 01 00	      word.w	ksetPad2, $0001	;B
    230  244b		       47 10 03 00	      word.w	ksetPad2, $0003	;N
    231  244f		       47 10 04 00	      word.w	ksetPad2, $0004	;M
    232  2453		       04 12 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    233  2457		       04 12 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    234  245b		       04 12 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    235  245f		       00 00 00 00	      word.w	0, $0000	;up/down
    236  2463		       00 00 00 00	      word.w	0, $0000	;left/right
    237  2467		       1a 10 01 00	      word.w	ksetPalNtsc,$0001	;F1
    238  246b		       1a 10 00 00	      word.w	ksetPalNtsc,$0000	;F3
    239  246f							;word 0, $0000			;F1
    240  246f							;word 0, $0000			;F3
    241  246f		       00 00 00 00	      word.w	0, $0000	;F5
    242  2473		       00 00 00 00	      word.w	0, $0000	;F7
    243  2477		       00 00 00 00	      word.w	0,0	;return
    244  247b		       00 00 00 00	      word.w	0,0	;Larrow
    245  247f
    246  247f
    247  247f
    248  247f				   runstopKeyFunctions
    249  247f							;    functionPointer, inputData:Y,A
    250  247f		       00 00 00 00	      word.w	0, $0000	;space
    251  2483		       e8 10 00 00	      word.w	ksetTune,$0000	;A
    252  2487		       e8 10 00 01	      word.w	ksetTune,$0100	;S
    253  248b		       e8 10 00 02	      word.w	ksetTune,$0200	;D
    254  248f		       e8 10 00 03	      word.w	ksetTune,$0300	;F
    255  2493		       e8 10 00 04	      word.w	ksetTune,$0400	;G
    256  2497		       e8 10 00 05	      word.w	ksetTune,$0500	;H
    257  249b		       e8 10 00 06	      word.w	ksetTune,$0600	;J
    258  249f		       e8 10 00 07	      word.w	ksetTune,$0700	;K
    259  24a3		       e8 10 00 08	      word.w	ksetTune,$0800	;L
    260  24a7		       e8 10 00 09	      word.w	ksetTune,$0900	;:
    261  24ab		       00 00 00 00	      word.w	0, $0000	;;
    262  24af							;word ksetTune,$0A00	;;
    263  24af		       00 00 00 00	      word.w	0, $0000	;=
    264  24b3		       aa 13 00 16	      word.w	setPatch, $1600	;Z
    265  24b7		       aa 13 00 17	      word.w	setPatch, $1700	;X
    266  24bb		       aa 13 00 18	      word.w	setPatch, $1800	;C
    267  24bf		       aa 13 00 19	      word.w	setPatch, $1900	;V
    268  24c3		       aa 13 00 1a	      word.w	setPatch, $1A00	;B
    269  24c7		       aa 13 00 1b	      word.w	setPatch, $1B00	;N
    270  24cb		       aa 13 00 1c	      word.w	setPatch, $1C00	;M
    271  24cf		       aa 13 00 1d	      word.w	setPatch, $1D00	;,
    272  24d3		       00 00 00 00	      word.w	0, $0000	;.
    273  24d7		       00 00 00 00	      word.w	0, $0000	;/
    274  24db							;word ksetBlackBG, $0000	;.
    275  24db							;word ksetBlueBG, $0000  ;/
    276  24db		       00 00 00 00	      word.w	0, $0000	;up/down
    277  24df		       00 00 00 00	      word.w	0, $0000	;left/right
    278  24e3		       27 1f 00 00	      word.w	SIDEdit,$0000	;F1
    279  24e7		       f5 0e 00 00	      word.w	ksavePatch,0	;F3
    280  24eb		       00 00 00 00	      word.w	0,0	;F5
    281  24ef		       27 1f ff ff	      word.w	SIDEdit,$FFFF	;F7
    282  24f3		       00 00 00 00	      word.w	0,0	;return
    283  24f7		       00 00 00 00	      word.w	0,0	;Larrow
    284  24fb
    285  24fb				   modeList
    286  24fb		       00		      byte.b	MODE_NORMAL
    287  24fc		       01		      byte.b	MODE_5THS
    288  24fd		       02		      byte.b	MODE_5PORT
    289  24fe		       10		      byte.b	MODE_PORT1
    290  24ff		       11		      byte.b	MODE_PORT2
    291  2500		       12		      byte.b	MODE_PORT3
    292  2501		       20		      byte.b	MODE_MONO1
    293  2502		       21		      byte.b	MODE_MONO2
    294  2503		       31		      byte.b	MODE_MONOPORT1	; new
    295  2504		       32		      byte.b	MODE_MONOPORT2	; new
    296  2505		       40		      byte.b	MODE_ARP1
    297  2506		       41		      byte.b	MODE_ARP2
    298  2507		       42		      byte.b	MODE_ARP3
    299  2508		       43		      byte.b	MODE_ARP4
    300  2509		       44		      byte.b	MODE_ARP5
    301  250a		       08		      byte.b	MODE_6CHAN	;16
    302  250b							;byte MODE_MONOPORT1
    303  250b							;byte MODE_MONOPORT2 ;16
------- FILE cynthcart2.0.1.asm
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  250b					      include	"cynth_data.asm"	; Screen text, data tables, note tuning tables, etc.
      1  250b
      2  250b
      3  250b		       00 1d	   MAX_PATCH_NUMBER equ	29
      4  250b
      5  250b
      6  250b				   patchName
      7  250b		       53 41 57 54*	      byte.b	"SAWTOOTH BASS   "	;0
      8  251b		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
      9  252b		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
     10  253b		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
     11  254b		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
     12  255b		       50 55 4c 53*	      byte.b	"PULSE HIGH PORT "	;5
     13  256b		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
     14  257b		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
     15  258b		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
     16  259b		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
     17  25ab		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
     18  25bb		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
     19  25cb		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
     20  25db		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
     21  25eb		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
     22  25fb		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
     23  260b
     24  260b				   patchName2
     25  260b		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
     26  261b		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
     27  262b		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
     28  263b		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
     29  264b		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
     30  265b		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
     31  266b		       4c 41 53 45*	      byte.b	"LASER BASS	  "	;22
     32  267b		       54 52 4f 4d*	      byte.b	"TROMBONE BLAST  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
     33  268b		       4e 4f 49 53*	      byte.b	"NOISY SQUARE ARP"	;24
     34  269b		       54 52 49 41*	      byte.b	"TRIANGLE SYNC   "	;25
     35  26ab		       4d 4f 4e 4f*	      byte.b	"MONO SYNC ECHO  "	;26
     36  26bb		       43 4c 45 41*	      byte.b	"CLEAN SAWTOOTH  "	;27 ; To ADD: TRI+SAW 30 30 30    TRI-RINGMOD 14 14 14    TRI+PULSE-RINGMOD 54 54 54
     37  26cb		       43 4c 45 41*	      byte.b	"CLEAN TRIANGLE  "	;28
     38  26db		       43 4c 45 41*	      byte.b	"CLEAN SQUARE	  "	;29
     39  26eb		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;30
     40  26fb		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;31
     41  270b
     42  270b
     43  270b							;SAVED_PATCH_MESSAGE equ 29
     44  270b							;CUSTOM_PATCH_NUMBER equ 30
     45  270b		       00 1e	   SAVED_PATCH_MESSAGE equ	MAX_PATCH_NUMBER+1
     46  270b		       00 1f	   CUSTOM_PATCH_NUMBER equ	MAX_PATCH_NUMBER+2
     47  270b
     48  270b
     49  270b				   patchSoundMode
     50  270b		       00		      byte.b	MODE_NORMAL	;0
     51  270c		       00		      byte.b	MODE_NORMAL	;1
     52  270d		       02		      byte.b	MODE_5PORT	;2
     53  270e		       11		      byte.b	MODE_PORT2	;3
     54  270f		       01		      byte.b	MODE_5THS	;4
     55  2710		       11		      byte.b	MODE_PORT2	;5
     56  2711		       00		      byte.b	MODE_NORMAL	;6
     57  2712		       20		      byte.b	MODE_MONO1	;7
     58  2713		       10		      byte.b	MODE_PORT1	;8
     59  2714		       00		      byte.b	MODE_NORMAL	;9
     60  2715		       00		      byte.b	MODE_NORMAL	;10 <--- start of new 1.5.0 patches
     61  2716		       40		      byte.b	MODE_ARP1	;11
     62  2717		       41		      byte.b	MODE_ARP2	;12
     63  2718		       42		      byte.b	MODE_ARP3	;13
     64  2719		       20		      byte.b	MODE_MONO1	;14
     65  271a		       21		      byte.b	MODE_MONO2	;15
     66  271b		       00		      byte.b	MODE_NORMAL	;16
     67  271c		       20		      byte.b	MODE_MONO1	;17
     68  271d		       00		      byte.b	MODE_NORMAL	;18
     69  271e		       12		      byte.b	MODE_PORT3	;19
     70  271f		       08		      byte.b	MODE_6CHAN	;20
     71  2720		       44		      byte.b	MODE_ARP5	;21
     72  2721		       31		      byte.b	MODE_MONOPORT1	;22 <---- start of 2.0 patches
     73  2722		       32		      byte.b	MODE_MONOPORT2	;23
     74  2723		       40		      byte.b	MODE_ARP1	;24
     75  2724		       32		      byte.b	MODE_MONOPORT2	;25
     76  2725		       32		      byte.b	MODE_MONOPORT2	;26
     77  2726		       00		      byte.b	MODE_NORMAL	;27
     78  2727		       00		      byte.b	MODE_NORMAL	;28
     79  2728		       00		      byte.b	MODE_NORMAL	;29
     80  2729		       00		      byte.b	MODE_NORMAL	;30
     81  272a
     82  272a
     83  272a							;     0     1	   2	 3     4     5	   6	 7     8     9
     84  272a				   patchFX
     85  272a		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
     86  2734		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
     87  273e		       00 03 01 03*	      byte.b	0, 3, 1, 3, 3, 0, 3, 0, 0, 0
     88  2748				   patchLFO		; (TREMOLO)
     89  2748		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $00, $01, $02, $13, $00
     90  2752		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
     91  275c		       10 12 13 00*	      byte.b	$10, $12, $13, $00, $00, $13, $13, $00, $00, $00
     92  2766				   patchOctave
     93  2766		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
     94  2770		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
     95  277a		       01 03 00 03*	      byte.b	1, 3, 0, 3, 3, 1, 1, 1, 3, 1
     96  2784				   patchAD
     97  2784		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
     98  278e		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
     99  2798		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    100  27a2				   patchSR1
    101  27a2		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    102  27ac		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    103  27b6		       f0 f5 f5 86*	      byte.b	$F0, $F5, $F5, $86, $F6, $F2, $F8, $F2, $F2, $F0
    104  27c0				   patchSR2
    105  27c0		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    106  27ca		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    107  27d4		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $54, $F2, $F8, $F2, $F2, $F0
    108  27de				   patchSR3
    109  27de		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    110  27e8		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    111  27f2		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $F6, $F2, $F8, $F2, $F2, $F0
    112  27fc				   patchPaddle
    113  27fc		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    114  2806		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    115  2810		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    116  281a				   newPatchFiltCut
    117  281a		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    118  2824		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    119  282e		       c0 f0 c0 b0*	      byte.b	$c0, $F0, $c0, $b0, $A0, $50, $50, $c0, $c0, $80
    120  2838				   patchVol
    121  2838		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $9, $7, $F, $C, $c, 0
    122  2842		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $F, $8
    123  284c		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $F, $F, $C, $F, $F, $c
    124  2856				   patchPWL
    125  2856		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    126  2860		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    127  286a		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    128  2874				   patchPWH
    129  2874		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    130  287e		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    131  2888		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    132  2892
    133  2892				   patchWave1
    134  2892		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    135  289c		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    136  28a6		       20 20 14 80*	      byte.b	$20, $20, $14, $80, $40, $12, $14, $20, $10, $40
    137  28b0				   patchWave2
    138  28b0		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    139  28ba		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    140  28c4		       20 20 14 20*	      byte.b	$20, $20, $14, $20, $80, $12, $14, $20, $10, $40
    141  28ce				   patchWave3
    142  28ce		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    143  28d8		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    144  28e2		       20 20 14 10*	      byte.b	$20, $20, $14, $10, $10, $12, $14, $20, $10, $40
    145  28ec
    146  28ec				   patchFilt
    147  28ec		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    148  28f6		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    149  2900		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $EF, $0F, $0F, $EF
    150  290a				   patchVolMode
    151  290a		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    152  2914		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    153  291e		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $10, $10, $20, $10, $10, $10
    154  2928
    155  2928				   octaveTable
    156  2928		       00 0c 18 24*	      byte.b	0,12,24,36,48
    157  292d
    158  292d
    159  292d				   pwLFO
    160  292d		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    161  2931		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    162  2935		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    163  2939		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    164  293d
    165  293d				   patOffset
    166  293d		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    167  2943
    168  2943				   voiceOffset
    169  2943		       00 07 0e 	      byte.b	$0,$7,$E
    170  2946
    171  2946
    172  2946
    173  2946							;---------------------------- displayPage
    174  2946
    175  2946							; This chart references each line
    176  2946							; on the standard character based screen.
    177  2946							; = value x 40 + 0x400
    178  2946				   lineOffsetL
    179  2946		       00		      byte.b	$00
    180  2947		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    181  294d		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    182  2953		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    183  2959		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    184  295f		       e8		      byte.b	$E8
    185  2960				   lineOffsetM
    186  2960		       04		      byte.b	$04
    187  2961		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    188  2967		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    189  296d		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    190  2973		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    191  2979		       07		      byte.b	$07
    192  297a
    193  297a				   debugOverlay
    194  297a		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    195  2985		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    196  2991		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    197  29bc		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    198  29e7							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    199  29e7							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    200  29e7							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    201  29e7							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    202  29e7		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    203  29f5		       ff		      byte.b	255
    204  29f6
    205  29f6				   midiModeNames
    206  29f6		       20 20 20 20*	      byte.b	"	  "	;0
    207  29fe		       53 45 51 55*	      byte.b	"SEQUENTL"	;1
    208  2a06		       50 41 53 53*	      byte.b	"PASSPORT"	;2
    209  2a0e		       20 20 20 44*	      byte.b	"   DATEL"	;3
    210  2a16		       4e 41 4d 45*	      byte.b	"NAMESOFT"	;4
    211  2a1e
    212  2a1e				   fxNames
    213  2a1e		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    214  2a26		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    215  2a2e		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    216  2a36		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    217  2a3e		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    218  2a46		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    219  2a4e		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    220  2a56		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    221  2a5e		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    222  2a66
    223  2a66				   hexEditHelp
    224  2a66		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    225  2a91		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    226  2abd		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    227  2ace		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    228  2afa		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    229  2b0b		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    230  2b37		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    231  2b48		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    232  2b74		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    233  2b85		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    234  2bb1		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    235  2bc2		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    236  2bed		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",$8B,"  PRESS",0
    237  2c18		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",$8B,"	'_' TO",0
    238  2c46		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",$8B,"	CANCEL",0
    239  2c74		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",$8B,"	",0
    240  2c9c		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    241  2cc1		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    242  2cec		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    243  2d17		       ff		      byte.b	255
    244  2d18
    245  2d18				   helpMessage
    246  2d18							;byte "RETURN FOR COMMANDS	     ",0
    247  2d18							;byte "RETURN FOR HELP 	     ",0
    248  2d18		       52 45 54 55*	      byte.b	"RETURN=HELP		       ",0
    249  2d36				   normalHelp
    250  2d36		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81,"KEY COMMANDS",$82,"-",$8B,"  RETURN TO EXIT012345",0
    251  2d6a		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    252  2d95		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS ROWS",$8F," ARE ",$81,"PIANO KEYS  ",0
    253  2dc4		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV ROWS",$8F," SELECT",$81," SOUND PRESETS ",0
    254  2df3		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS-ON/OFF",0
    255  2e20		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83," _",$8F,"=LOAD-CUSTOM-SOUND",0
    256  2e4e		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    257  2e79		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    258  2e88		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND-MODE",0
    259  2eb2		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNM",$8F,"=MOD-MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    260  2ee0		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    261  2f0a		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    262  2f1a		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A," JKL",$8F,"=VID-ON/OFF"
    263  2f49		       00		      byte.b	0
    264  2f4a		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    265  2f79		       00		      byte.b	0
    266  2f7a		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    267  2f98		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR-MODULATION",0
    268  2fc6		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    269  2ff0		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    270  3008		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF  ",$8E,",./",$8F,"=OMNI/CH1/CH5"
    271  3034		       00		      byte.b	0
    272  3035		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    273  305e		       00		      byte.b	0
    274  305f		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    275  3089		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    276  309c		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ./",$8F,"=PAL/NTSC"
    277  30c0		       00		      byte.b	0
    278  30c1		       17 87 5a 58*	      byte.b	23,$87,"ZXCVBNM",$8F,"=",$81,"MORE",$8F,"-",$81,"PRESETS  ",$87,"F1",$8F,"=SID-EDIT-C64KEYS"
    279  30f2		       00		      byte.b	0
    280  30f3		       18 87 46 33*	      byte.b	24,$87,"F3",$8F,"=SAVE-CUSTOM-SOUND  ",$87,"F7",$8F,"=SID-EDIT-PIANO "
    281  3120		       00		      byte.b	0
    282  3121		       ff		      byte.b	255
    283  3122
    284  3122				   mainColorText
    285  3122		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    286  3151		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83," ------",$8D,"-------",$8F,"----- ",$8D,"FILTR",$8C,"=",$81,"X	",0
    287  3184		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    288  31ba		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    289  31f0		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"MOD",$8C,"=",$81,"XXXXX ",$8F," VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    290  3226		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    291  3251
    292  3251							; OLD LAYOUT
    293  3251							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    294  3251							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    295  3251							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    296  3251							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    297  3251							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    298  3251							;byte 255
    299  3251
    300  3251		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    301  3251		       00 02	   CYNTHCART_COLOR equ	2
    302  3251
    303  3251
    304  3251		       00 2d	   MODETEXT   equ	40*1+5
    305  3251		       00 57	   TUNINGTEXT equ	40*2+7
    306  3251		       00 7f	   OCTAVETEXT equ	40*3+7
    307  3251		       00 a7	   VOLTEXT    equ	40*4+7
    308  3251
    309  3251		       00 62	   ATKTEXT    equ	40*2+18
    310  3251		       00 8a	   RELTEXT    equ	40*3+18
    311  3251		       00 12	   PATCHTEXT  equ	40*0+18
    312  3251
    313  3251		       00 94	   LFORATETEXT equ	40*3+28
    314  3251		       00 6c	   LFODEPTHTEXT equ	40*2+28
    315  3251		       00 bc	   VIDEOTEXT  equ	40*4+28
    316  3251
    317  3251		       00 af	   FXTEXT     equ	40*4+15
    318  3251
    319  3251		       00 4c	   FILTERTEXT2 equ	40*1+36
    320  3251		       00 75	   FILTERTEXT equ	40*2+37
    321  3251		       00 9c	   PADDLETEXT equ	40*3+36
    322  3251		       00 c4	   PAD2TEXT   equ	40*4+36
    323  3251
    324  3251		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    325  3251
    326  3251
    327  3251		       ff		      byte.b	255
    328  3252
    329  3252
    330  3252
    331  3252				   textData		; can contain 64 four byte texts
    332  3252		       4f 46 46 20	      byte.b	"OFF "	;0
    333  3256		       4f 4e 20 20	      byte.b	"ON  "	;4
    334  325a		       53 4c 4f 57	      byte.b	"SLOW"	;8
    335  325e		       4d 45 44 20	      byte.b	"MED "	;12
    336  3262		       46 41 53 54	      byte.b	"FAST"	;16
    337  3266		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    338  326a		       2d 33 30 20	      byte.b	"-30 "	;24
    339  326e		       2d 32 30 20	      byte.b	"-20 "	;28
    340  3272		       2d 31 30 20	      byte.b	"-10 "	;32
    341  3276		       30 20 20 20	      byte.b	"0   "	;36
    342  327a		       2b 31 30 20	      byte.b	"+10 "	;40
    343  327e		       2b 32 30 20	      byte.b	"+20 "	;44
    344  3282		       2b 33 30 20	      byte.b	"+30 "	;48
    345  3286		       2b 34 30 20	      byte.b	"+40 "	;52
    346  328a		       2b 35 30 20	      byte.b	"+50 "	;56
    347  328e		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    348  3292		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    349  3296		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    350  329a		       46 49 4c 54	      byte.b	"FILT"	;72
    351  329e		       56 4f 4c 20	      byte.b	"VOL "	;76
    352  32a2		       4c 4f 57 20	      byte.b	"LOW "	;80
    353  32a6		       4d 45 44 20	      byte.b	"MED "	;84
    354  32aa		       48 49 47 48	      byte.b	"HIGH"	;88
    355  32ae		       53 49 44 3a	      byte.b	"SID:"	;92
    356  32b2		       44 49 53 20	      byte.b	"DIS "	;96
    357  32b6		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    358  32ba		       50 55 4c 53	      byte.b	"PULS"	;104
    359  32be		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    360  32c2		       4c 46 4f 20	      byte.b	"LFO "	;112
    361  32c6		       42 45 4e 44	      byte.b	"BEND"	;116
    362  32ca
    363  32ca
    364  32ca				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    365  32ca		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00 0
    366  32d2		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08 1
    367  32da		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10 2
    368  32e2		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18 3
    369  32ea		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20 4
    370  32f2		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28 5
    371  32fa		       4d 4f 4e 50*	      byte.b	"MONP1  ",1	;$30 6
    372  3302		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38 7
    373  330a		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40 8
    374  3312		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48 9
    375  331a		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50 10
    376  3322		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58 11
    377  332a		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60 12
    378  3332		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68 13
    379  333a		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70 14
    380  3342		       4d 4f 4e 50*	      byte.b	"MONP2  ",1	;$78 15
    381  334a
    382  334a				   modeNameOffsets
    383  334a							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    384  334a		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    385  335a		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    386  336a		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    387  337a		       30 30 78 78*	      byte.b	$30,$30,$78,$78, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    388  338a		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    389  339a
    390  339a
    391  339a							; VERSION NUMBER
    392  339a				   bottomText
    393  339a		       20 50 41 4c*	      byte.b	" PAL V2.0.1",0
    394  33a6		       4e 54 53 43*	      byte.b	"NTSC V2.0.1",0
    395  33b2
    396  33b2				  -	      IF	BETA_RELEASE=1
    397  33b2				  -betaInfo
    398  33b2				  -	      byte	"V2.0 BETA RC4",0	;13 bytes of text
    399  33b2					      ELSE
    400  33b2				   betaInfo
    401  33b2		       20 20 20 20*	      byte.b	"	       ",0	;13 bytes of text
    402  33c0					      ENDIF
    403  33c0
    404  33c0							; contant pointers into the textData array
    405  33c0		       00 00	   ON	      equ	0
    406  33c0		       00 04	   OFF	      equ	4
    407  33c0		       00 08	   SLOW       equ	8
    408  33c0		       00 0c	   MED	      equ	12
    409  33c0		       00 10	   FAST       equ	16
    410  33c0		       00 14	   TUNING     equ	20
    411  33c0		       00 3c	   POLY       equ	60
    412  33c0		       00 40	   MONO       equ	64
    413  33c0		       00 44	   FREQ       equ	68
    414  33c0		       00 48	   FILT       equ	72
    415  33c0		       00 4c	   VOL	      equ	76
    416  33c0		       00 50	   VLOW       equ	80
    417  33c0		       00 54	   VMED       equ	84
    418  33c0		       00 58	   VHIGH      equ	88
    419  33c0		       00 60	   DISABLED   equ	96
    420  33c0		       00 64	   PAD2VALTEXT equ	100
    421  33c0
    422  33c0
    423  33c0
    424  33c0
    425  33c0				   tuneArrPtrLL
    426  33c0		       62 f2 82 ca*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    427  33ca				   tuneArrPtrLH
    428  33ca		       35 35 36 36*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    429  33d4				   tuneArrPtrHL
    430  33d4		       aa 3a 1e 12*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    431  33de				   tuneArrPtrHH
    432  33de		       35 36 37 37*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    433  33e8
    434  33e8				   LFODepthArray
    435  33e8		       00 02 05 0f	      byte.b	0,2,5,15
    436  33ec
    437  33ec
    438  33ec
    439  33ec
    440  33ec				   hexDisplay
    441  33ec		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    442  33fc
    443  33fc							;keyData ; numbers 0-9 and letters a-f
    444  33fc							;	byte 35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    445  33fc
    446  33fc							; key set for piano keyboard: black keys + middle A-F on the white keys
    447  33fc							;	byte 51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    448  33fc
    449  33fc							; array of LFO values
    450  33fc				   LFOArrL
    451  33fc		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    452  340c				   LFOArrH
    453  340c		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    454  341c				   LFOdisp
    455  341c		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    456  342c
    457  342c							; NTSC Note Table
    458  342c				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    459  342c		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    460  3438		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    461  3444		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    462  3450		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    463  345c		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    464  3468		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    465  3474							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    466  3474				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    467  3474		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    468  3480		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    469  348c		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    470  3498		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    471  34a4		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    472  34b0		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    473  34bc
    474  34bc							; PAL Note Table
    475  34bc				   PSoundLArr
    476  34bc		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    477  34c8		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    478  34d4		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    479  34e0		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    480  34ec		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    481  34f8		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    482  3504		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    483  350f
    484  350f				   PSoundHArr
    485  350f		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    486  351b		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    487  3527		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    488  3533		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    489  353f		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    490  354b		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    491  3557		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart2.0.1.asm
   1052  3562
   1053  3562							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  3562					      include	"cynth_tuning.asm"
      1  3562
      2  3562				   tuningL0
      3  3562		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  356e		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  357a		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  3586		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  3592		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  359e		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  35aa				   tuningH0
     10  35aa		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  35b6		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  35c2		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  35ce		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  35da		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  35e6		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  35f2
     17  35f2				   tuningL1
     18  35f2		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  35fe		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  360a		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  3616		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  3622		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  362e		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  363a				   tuningH1
     25  363a		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  3646		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  3652		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  365e		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  366a		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  3676		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  3682
     32  3682				   tuningL2
     33  3682		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  368e		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  369a		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  36a6		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  36b2		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  36be		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  36ca							;tuningH2
     40  36ca							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  36ca							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  36ca							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  36ca							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  36ca							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  36ca							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  36ca
     47  36ca				   tuningL3
     48  36ca		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  36d6		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  36e2		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  36ee		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  36fa		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  3706		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  3712				   tuningH3
     55  3712		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  371e				   tuningH2
     57  371e		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  372a		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  3736		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  3742		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  374e		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  375a		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  3766
     64  3766				   tuningL4
     65  3766				   tuningH4
     66  3766				   tuningH5
     67  3766		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  3772				   tuningH6
     69  3772		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  377e		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  378a		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  3796		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  37a2		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  37ae		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  37ba							;tuningH4
     76  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  37ba							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  37ba
     83  37ba				   tuningL5
     84  37ba		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  37c6		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  37d2		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  37de		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  37ea		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  37f6		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  3802
     91  3802							;tuningH5
     92  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  3802							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  3802
     99  3802				   tuningL6
    100  3802		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  380e		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  381a		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  3826		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  3832		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  383e		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  384a							;tuningH6
    107  384a							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  384a							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  384a							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  384a							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  384a							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  384a							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  384a
    114  384a				   tuningL7
    115  384a		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  3856		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  3862		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  386e		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  387a		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  3886		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  3892				   tuningH7
    122  3892		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  389e		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  38aa		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  38b6		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  38c2		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  38ce		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  38da
    129  38da				   tuningL8
    130  38da		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  38e6		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  38f2		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  38fe		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  390a		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  3916		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  3922				   tuningH8
    137  3922		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  392e		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  393a		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  3946		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  3952		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  395e		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  396a
    144  396a				   tuningL9
    145  396a		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  3976		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  3982		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  398e		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  399a		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  39a6		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  39b2				   tuningH9
    152  39b2		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  39be		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  39ca		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  39d6		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  39e2		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  39ee		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart2.0.1.asm
   1055  39fa
   1056  39fa							; Frank's MIDI interface code
   1057  39fa				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   1058  39fa				  -	      include	"cynth_midi_dummy.asm"
   1059  39fa					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  39fa					      include	"cynth_midi.asm"
      1  39fa							; public MIDI interface routines:
      2  39fa							; midiDetect
      3  39fa							; midiInit
      4  39fa							; midiRead
      5  39fa							; midiWrite
      6  39fa
      7  39fa							; interface type for midiDetect and midiInit:
      8  39fa							; 0: no MIDI interface was detected
      9  39fa							; 1: Sequential Circuits Inc.
     10  39fa							; 2: Passport & Syntech
     11  39fa							; 3: DATEL/Siel/JMS
     12  39fa							; 4: Namesoft
     13  39fa
     14  39fa							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  39fa		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  39fa
     17  39fa
     18  39fa					      processor	6502
     19  39fa
     20  39fa		       00 01	   TRUE       equ	1
     21  39fa		       00 00	   FALSE      equ	0
     22  39fa
     23  39fa		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     24  39fa		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     25  39fa
     26  39fa		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     27  39fa		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     28  39fa
     29  39fa							;loopCount equ 1104
     30  39fa							;irqCountTotal equ 1105
     31  39fa							;irqCountMidi equ 1106
     32  39fa							;irqCountTDREmpty equ 1107
     33  39fa							;saveY equ 1140
     34  39fa							;firstPass equ 1141
     35  39fa		       04 50	   statusSample1 equ	1104
     36  39fa		       04 51	   statusSample2 equ	1105
     37  39fa
     38  39fa		       00 00	   TEST_KEYBOARD equ	FALSE
     39  39fa		       00 00	   INCLUDE_DETECT_IRQ equ	FALSE
     40  39fa
     41  39fa							;=========================================================================
     42  39fa							; MIDI DETECT
     43  39fa							; =========================================================================
     44  39fa
     45  39fa							; detect MIDI interface, return type in accu
     46  39fa				   midiDetect		; TODO
     47  39fa							;lda #0
     48  39fa							;sta irqCountTotal
     49  39fa							;sta irqCountMidi
     50  39fa							;sta loopCount
     51  39fa
     52  39fa
     53  39fa
     54  39fa							; old code to manually set interface type
     55  39fa		       a9 03		      lda	#3	; DATEL (DEFAULT, THIS ONE SHOULD BE SELECTED UNLESS DEBUGGING)
     56  39fc							;lda #2 ; PASSPORT
     57  39fc							;lda #4 ; NAMESOFT (NOT SUPPORTED YET!)
     58  39fc							;lda #0 ; MIDI OFF
     59  39fc					      IF	DEVICE_CONFIG=KERBEROS
     60  39fc		       60		      rts		; <--DETECT FUNCTION DISABLED
     61  39fd					      ENDIF
     62  39fd
     63  39fd		       85 6e		      sta	midiInterfaceType
     64  39ff				   testingLoop
     65  39ff							; save interface type from ACC
     66  39ff		       a5 6e		      lda	midiInterfaceType
     67  3a01		       aa		      tax
     68  3a02		       ca		      dex
     69  3a03
     70  3a03		       78		      sei		; disable IRQ interrupts
     71  3a04							;cli ; enable IRQ interrupts
     72  3a04
     73  3a04							; init addresses
     74  3a04		       bd 55 3b 	      lda	midiControlOfs,x
     75  3a07		       85 64		      sta	midiControl
     76  3a09		       bd 59 3b 	      lda	midiStatusOfs,x
     77  3a0c		       85 66		      sta	midiStatus
     78  3a0e		       bd 5d 3b 	      lda	midiTxOfs,x
     79  3a11		       85 68		      sta	midiTx
     80  3a13		       bd 61 3b 	      lda	midiRxOfs,x
     81  3a16		       85 6a		      sta	midiRx
     82  3a18		       a9 de		      lda	#$de
     83  3a1a		       85 65		      sta	midiControl+1
     84  3a1c		       85 67		      sta	midiStatus+1
     85  3a1e		       85 69		      sta	midiTx+1
     86  3a20		       85 6b		      sta	midiRx+1
     87  3a22
     88  3a22							; send reset code to MIDI adapter
     89  3a22		       20 ec 3a 	      jsr	midiReset
     90  3a25
     91  3a25							; small delay
     92  3a25		       a2 00		      ldx	#0
     93  3a27				   detectDelay1
     94  3a27		       ca		      dex
     95  3a28		       d0 fd		      bne	detectDelay1
     96  3a2a
     97  3a2a							; read midi status
     98  3a2a		       b1 66		      lda	(midiStatus),y
     99  3a2c		       11 66		      ora	(midiStatus),y
    100  3a2e		       11 66		      ora	(midiStatus),y
    101  3a30		       8d a0 04 	      sta	1024+160	; DEBUG
    102  3a33		       8d 50 04 	      sta	statusSample1
    103  3a36
    104  3a36							; enable IRQ/NMI
    105  3a36							;lda #3 ; MIDI reset (DEBUG)
    106  3a36		       a9 b4		      lda	#$B4	; $Bx turns on transmit interrupt as well as receive interrupt
    107  3a38							;lda #$34 ; transmit interrupt only
    108  3a38							;lda #$94 ; receive interrupt only (default)
    109  3a38		       1d 65 3b 	      ora	midiCr0Cr1,x
    110  3a3b		       91 64		      sta	(midiControl),y
    111  3a3d
    112  3a3d							; small delay
    113  3a3d		       a2 00		      ldx	#0
    114  3a3f				   detectDelay2
    115  3a3f		       ca		      dex
    116  3a40		       d0 fd		      bne	detectDelay2
    117  3a42
    118  3a42							; read midi status
    119  3a42		       a0 00		      ldy	#0
    120  3a44		       b1 66		      lda	(midiStatus),y
    121  3a46		       11 66		      ora	(midiStatus),y
    122  3a48		       11 66		      ora	(midiStatus),y
    123  3a4a		       8d a1 04 	      sta	1024+160+1	; DEBUG
    124  3a4d		       8d 51 04 	      sta	statusSample2
    125  3a50
    126  3a50				   lock 		; DEBUG!!!!!!!!!!!!!!!!!!!!
    127  3a50							;inc 1065
    128  3a50							;jmp lock ; DEBUG!!!!!!!!!!!!!!!!!!!!
    129  3a50
    130  3a50							; set the interface to DATEL or NO_MIDI based on results
    131  3a50		       ad 50 04 	      lda	statusSample1
    132  3a53		       d0 08		      bne	midiNotDetected
    133  3a55		       ad 51 04 	      lda	statusSample2
    134  3a58		       f0 03		      beq	midiNotDetected
    135  3a5a							;lda midiInterfaceType ; use current interface
    136  3a5a							;cli
    137  3a5a							;rts ; quit
    138  3a5a		       4c 6b 3a 	      jmp	quitDetect
    139  3a5d				   midiNotDetected
    140  3a5d		       a6 6e		      ldx	midiInterfaceType
    141  3a5f		       ca		      dex
    142  3a60		       86 6e		      stx	midiInterfaceType
    143  3a62							;cpx #1
    144  3a62		       f0 03		      beq	noMidi	; loop again to try next interface
    145  3a64		       4c ff 39 	      jmp	testingLoop
    146  3a67				   noMidi
    147  3a67		       a9 00		      lda	#0	; last interface, so no MIDI
    148  3a69		       85 6e		      sta	midiInterfaceType
    149  3a6b							;cli
    150  3a6b							;rts ; quit
    151  3a6b
    152  3a6b				   quitDetect
    153  3a6b		       20 ec 3a 	      jsr	midiReset
    154  3a6e		       a5 6e		      lda	midiInterfaceType
    155  3a70		       58		      cli
    156  3a71		       60		      rts
    157  3a72
    158  3a72							;;------------------------------------====================================
    159  3a72
    160  3a72
    161  3a72							; =========================================================================
    162  3a72							; MIDI INIT
    163  3a72							; =========================================================================
    164  3a72
    165  3a72							; init MIDI interface, type in accu from midiDetect
    166  3a72				   midiInit
    167  3a72							;rts ; <-- MIDI DISABLED (DEBUG!!)
    168  3a72
    169  3a72
    170  3a72		       78		      sei		; disable IRQ interrupts
    171  3a73
    172  3a73		       85 6e		      sta	midiInterfaceType
    173  3a75		       aa		      tax
    174  3a76		       ca		      dex
    175  3a77
    176  3a77		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
    177  3a79		       8d 02 dc 	      sta	DDRA
    178  3a7c
    179  3a7c		       a9 00		      lda	#0	; CIA#1 port B = inputs
    180  3a7e		       8d 03 dc 	      sta	DDRB
    181  3a81
    182  3a81							; clear memory variables
    183  3a81		       a9 00		      lda	#0
    184  3a83		       85 71		      sta	keyPressed
    185  3a85		       85 6f		      sta	keyTestIndex
    186  3a87		       85 70		      sta	keyPressedIntern
    187  3a89
    188  3a89							; init addresses
    189  3a89		       bd 55 3b 	      lda	midiControlOfs,x
    190  3a8c		       85 64		      sta	midiControl
    191  3a8e		       bd 59 3b 	      lda	midiStatusOfs,x
    192  3a91		       85 66		      sta	midiStatus
    193  3a93		       bd 5d 3b 	      lda	midiTxOfs,x
    194  3a96		       85 68		      sta	midiTx
    195  3a98		       bd 61 3b 	      lda	midiRxOfs,x
    196  3a9b		       85 6a		      sta	midiRx
    197  3a9d		       a9 de		      lda	#$de
    198  3a9f		       85 65		      sta	midiControl+1
    199  3aa1		       85 67		      sta	midiStatus+1
    200  3aa3		       85 69		      sta	midiTx+1
    201  3aa5		       85 6b		      sta	midiRx+1
    202  3aa7
    203  3aa7							; send reset code to MIDI adapter
    204  3aa7		       20 ec 3a 	      jsr	midiReset
    205  3aaa
    206  3aaa							; clear ringbuffer
    207  3aaa		       a9 00		      lda	#0
    208  3aac		       85 6c		      sta	midiRingbufferReadIndex
    209  3aae		       85 6d		      sta	midiRingbufferWriteIndex
    210  3ab0
    211  3ab0							; if the adapter uses NMI interrupts instead of IRQ
    212  3ab0		       bd 69 3b 	      lda	midiIrqType,x
    213  3ab3		       d0 0a		      bne	midiSetIrq
    214  3ab5
    215  3ab5							; set NMI routine
    216  3ab5		       a9 15		      lda	#<midiNmi
    217  3ab7		       8d 18 03 	      sta	$0318
    218  3aba		       a9 3b		      lda	#>midiNmi
    219  3abc		       8d 19 03 	      sta	$0319
    220  3abf
    221  3abf							; set IRQ routine
    222  3abf				   midiSetIrq
    223  3abf							;---------------------------
    224  3abf		       a9 2b		      lda	#<midiIrq
    225  3ac1		       8d 14 03 	      sta	$0314
    226  3ac4		       a9 3b		      lda	#>midiIrq
    227  3ac6		       8d 15 03 	      sta	$0315
    228  3ac9							;---------------------------
    229  3ac9
    230  3ac9							; enable IRQ/NMI
    231  3ac9		       a9 94		      lda	#$94
    232  3acb		       1d 65 3b 	      ora	midiCr0Cr1,x
    233  3ace		       91 64		      sta	(midiControl),y
    234  3ad0
    235  3ad0		       58		      cli
    236  3ad1		       60		      rts
    237  3ad2
    238  3ad2							; =========================================================================
    239  3ad2
    240  3ad2				   midiRelease
    241  3ad2		       78		      sei
    242  3ad3		       20 ec 3a 	      jsr	midiReset
    243  3ad6		       a9 31		      lda	#$31
    244  3ad8		       8d 14 03 	      sta	$0314
    245  3adb		       a9 ea		      lda	#$ea
    246  3add		       8d 15 03 	      sta	$0315
    247  3ae0		       a9 47		      lda	#$47
    248  3ae2		       8d 18 03 	      sta	$0318
    249  3ae5		       a9 fe		      lda	#$fe
    250  3ae7		       8d 19 03 	      sta	$0319
    251  3aea		       58		      cli
    252  3aeb		       60		      rts
    253  3aec
    254  3aec							; MC68B50 master reset and IRQ off
    255  3aec				   midiReset
    256  3aec		       a0 00		      ldy	#0
    257  3aee		       a9 03		      lda	#3
    258  3af0		       91 64		      sta	(midiControl),y
    259  3af2		       60		      rts
    260  3af3
    261  3af3				   midiCanRead
    262  3af3		       a6 6c		      ldx	midiRingbufferReadIndex
    263  3af5		       e4 6d		      cpx	midiRingbufferWriteIndex
    264  3af7		       60		      rts
    265  3af8
    266  3af8							; read MIDI byte from ringbuffer
    267  3af8				   midiRead
    268  3af8		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    269  3afa		       e4 6d		      cpx	midiRingbufferWriteIndex
    270  3afc		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    271  3afe							;beq midiRead
    272  3afe		       60		      rts		; No new data, so return
    273  3aff
    274  3aff							; wait for MIDI byte and read it from ringbuffer
    275  3aff				   midiReadWait
    276  3aff		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    277  3b01		       e4 6d		      cpx	midiRingbufferWriteIndex
    278  3b03		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    279  3b05		       4c ff 3a 	      jmp	midiReadWait
    280  3b08							;rts ; No new data, so return
    281  3b08
    282  3b08
    283  3b08				   processMidi
    284  3b08							; read next character from ringbuffer
    285  3b08		       bd 00 7f 	      lda	midiRingbuffer,x
    286  3b0b		       a8		      tay		; save next byte into y
    287  3b0c		       e8		      inx		; increment buffer pointer...
    288  3b0d		       8a		      txa
    289  3b0e							;and #31 ; wrap around at end
    290  3b0e		       29 ff		      and	#BUFFER_SIZE_MASK
    291  3b10		       85 6c		      sta	midiRingbufferReadIndex	; save it
    292  3b12		       98		      tya		; the byte read from the buffer ends up in both y and a
    293  3b13
    294  3b13							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    295  3b13							; DEBUG - SHOW MIDI DATA
    296  3b13				  -	      IF	DEBUG_SHOW_MIDI=1
    297  3b13				  -			;IF DEBUG_DISPLAY=1
    298  3b13				  -	      sta	temp
    299  3b13				  -	      bpl	notStatusByte
    300  3b13				  -	      lda	#$E
    301  3b13				  -	      sta	hexDispColor
    302  3b13				  -	      jmp	endColor
    303  3b13				  -notStatusByte
    304  3b13				  -	      lda	#$F
    305  3b13				  -	      sta	hexDispColor
    306  3b13				  -endColor
    307  3b13				  -	      lda	debugOffset
    308  3b13				  -	      and	#$F0
    309  3b13				  -	      lsr
    310  3b13				  -	      lsr
    311  3b13				  -	      lsr
    312  3b13				  -	      tax
    313  3b13				  -			;ldx #34
    314  3b13				  -	      lda	debugOffset
    315  3b13				  -	      and	#$0F
    316  3b13				  -	      tay
    317  3b13				  -	      iny
    318  3b13				  -	      iny
    319  3b13				  -	      iny
    320  3b13				  -	      iny
    321  3b13				  -	      iny
    322  3b13				  -	      iny
    323  3b13				  -	      lda	temp
    324  3b13				  -	      jsr	displayHex
    325  3b13				  -	      inc	debugOffset
    326  3b13				  -			;ldy debugOffset
    327  3b13				  -			;iny
    328  3b13				  -			;tya
    329  3b13				  -			;and #$0F
    330  3b13				  -			;sta debugOffset
    331  3b13				  -			;adc #5
    332  3b13				  -			;tay
    333  3b13				  -	      lda	temp
    334  3b13				  -	      ldy	temp
    335  3b13					      ENDIF
    336  3b13							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    337  3b13
    338  3b13		       60		      rts
    339  3b14
    340  3b14							; write MIDI byte and wait for write complete
    341  3b14		       60	   midiWrite  rts		; TODO
    342  3b15
    343  3b15							; NMI handler
    344  3b15		       48	   midiNmi    pha
    345  3b16		       8a		      txa
    346  3b17		       48		      pha
    347  3b18		       98		      tya
    348  3b19		       48		      pha
    349  3b1a
    350  3b1a							; test if it was a NMI from the MIDI interface
    351  3b1a		       a0 00		      ldy	#0
    352  3b1c		       b1 66		      lda	(midiStatus),y
    353  3b1e		       29 01		      and	#1
    354  3b20		       f0 03		      beq	midiNmiEnd
    355  3b22		       20 47 3b 	      jsr	midiStore
    356  3b25		       68	   midiNmiEnd pla
    357  3b26		       a8		      tay
    358  3b27		       68		      pla
    359  3b28		       aa		      tax
    360  3b29		       68		      pla
    361  3b2a		       40		      rti
    362  3b2b
    363  3b2b							; IRQ handler
    364  3b2b				   midiIrq
    365  3b2b		       a6 6e		      ldx	midiInterfaceType
    366  3b2d		       ca		      dex
    367  3b2e		       bd 69 3b 	      lda	midiIrqType,x
    368  3b31		       f0 0e		      beq	midiIrqKey
    369  3b33
    370  3b33							; test if it was an IRQ from the MIDI interface
    371  3b33		       a0 00		      ldy	#0
    372  3b35		       b1 66		      lda	(midiStatus),y
    373  3b37		       29 01		      and	#1
    374  3b39		       f0 06		      beq	midiIrqKey
    375  3b3b		       20 47 3b 	      jsr	midiStore
    376  3b3e		       4c 25 3b 	      jmp	midiNmiEnd
    377  3b41
    378  3b41							; keyboard test
    379  3b41				   midiIrqKey
    380  3b41				  -	      IF	TEST_KEYBOARD=1
    381  3b41				  -	      jsr	keyboardTest
    382  3b41					      ENDIF
    383  3b41		       ad 0d dc 	      lda	$dc0d
    384  3b44		       4c 25 3b 	      jmp	midiNmiEnd
    385  3b47
    386  3b47							; get MIDI byte and store in ringbuffer
    387  3b47				   midiStore
    388  3b47		       b1 6a		      lda	(midiRx),y
    389  3b49		       a6 6d		      ldx	midiRingbufferWriteIndex
    390  3b4b		       9d 00 7f 	      sta	midiRingbuffer,x
    391  3b4e		       e8		      inx
    392  3b4f		       8a		      txa
    393  3b50							;and #31
    394  3b50		       29 ff		      and	#BUFFER_SIZE_MASK
    395  3b52		       85 6d		      sta	midiRingbufferWriteIndex
    396  3b54		       60		      rts
    397  3b55
    398  3b55							; MC68B50 control register (relative to $de00)
    399  3b55		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    400  3b59
    401  3b59							; MC68B50 status register
    402  3b59		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    403  3b5d
    404  3b5d							; MC68B50 TX register
    405  3b5d		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    406  3b61
    407  3b61							; MC68B50 RX register offset
    408  3b61		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    409  3b65
    410  3b65							; counter divide bits CR0 and CR1 for the MC68B50
    411  3b65				   midiCr0Cr1
    412  3b65		       01 01 02 01	      .byte.b	1, 1, 2, 1
    413  3b69
    414  3b69							; 1=IRQ, 0=NMI
    415  3b69				   midiIrqType
    416  3b69		       01 01 01 00	      .byte.b	1, 1, 1, 0
    417  3b6d
    418  3b6d				  -	      IF	TEST_KEYBOARD=1
    419  3b6d				  -			; keyboard test
    420  3b6d				  -keyboardTest
    421  3b6d				  -	      ldx	keyTestIndex
    422  3b6d				  -	      lda	keys,x	; load colum
    423  3b6d				  -	      sta	PRA
    424  3b6d				  -	      inx
    425  3b6d				  -	      lda	PRB
    426  3b6d				  -	      and	keys,x	; mask row
    427  3b6d				  -	      inx
    428  3b6d				  -	      cmp	#0
    429  3b6d				  -	      bne	kbt2
    430  3b6d				  -	      lda	keys,x
    431  3b6d				  -	      cmp	#$80
    432  3b6d				  -	      bne	jump1
    433  3b6d				  -	      inc	shiftPressed
    434  3b6d				  -	      bne	kbt2
    435  3b6d				  -jump1
    436  3b6d				  -	      sta	keyPressedIntern
    437  3b6d				  -kbt2
    438  3b6d				  -	      inx
    439  3b6d				  -	      cpx	#18
    440  3b6d				  -	      bne	kbt3
    441  3b6d				  -	      ldx	keyPressedIntern
    442  3b6d				  -	      beq	jump2
    443  3b6d				  -	      lda	shiftPressed
    444  3b6d				  -	      beq	jump2
    445  3b6d				  -	      inx
    446  3b6d				  -jump2
    447  3b6d				  -	      stx	keyPressed
    448  3b6d				  -	      bne	jump3
    449  3b6d				  -	      lda	shiftPressed
    450  3b6d				  -	      beq	jump3
    451  3b6d				  -	      lda	#$40
    452  3b6d				  -	      sta	keyPressed
    453  3b6d				  -jump3
    454  3b6d				  -	      ldx	#0
    455  3b6d				  -	      stx	shiftPressed
    456  3b6d				  -	      stx	keyPressedIntern
    457  3b6d				  -kbt3
    458  3b6d				  -	      stx	keyTestIndex
    459  3b6d				  -	      rts
    460  3b6d				  -
    461  3b6d				  -keys
    462  3b6d				  -	      .byte	%11111110, %00010000, 1	; F1
    463  3b6d				  -	      .byte	%11111110, %00100000, 3	; F3
    464  3b6d				  -	      .byte	%11111110, %01000000, 5	; F5
    465  3b6d				  -	      .byte	%11111110, %00001000, 7	; F7
    466  3b6d				  -	      .byte	%10111111, %00010000, $80	; right shift
    467  3b6d				  -	      .byte	%10111101, %10000000, $80	; left shift
    468  3b6d					      ENDIF
------- FILE cynthcart2.0.1.asm
   1061  3b6d					      ENDIF
   1062  3b6d
   1063  3b6d
   1064  3b6d				  -	      IF	MODE=KERNEL_OBSOLETE
   1065  3b6d				  -	      org	$bfff
   1066  3b6d				  -	      byte	0
   1067  3b6d					      ENDIF

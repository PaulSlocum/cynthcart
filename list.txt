------- FILE cynthcart152.asm LEVEL 1 PASS 2
      1  3ae4 ????						; Commodore 64 Synthcart
      2  3ae4 ????						; by Paul Slocum
      3  3ae4 ????						;------------------------
      4  3ae4 ????						; TEXT EDITOR TAB=3
      5  3ae4 ????						;------------------------
      6  3ae4 ????						;
      7  3ae4 ????						;
      8  3ae4 ????						; TASKS FOR 1.5.2
      9  3ae4 ????						; - add some of Gert's mixed waveform sounds
     10  3ae4 ????						; - 'O' key specifically may be out of tune
     11  3ae4 ????						; - consider adding per-patch filter on/off/disabled setting
     12  3ae4 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     13  3ae4 ????						;
     14  3ae4 ????						;
     15  3ae4 ????						; MAYBE LATER:
     16  3ae4 ????						;================================= END OF THIS VERSION...
     17  3ae4 ????						;
     18  3ae4 ????						; - - - - - - - - - - - - - -
     19  3ae4 ????						; Change Log:
     20  3ae4 ????						; - - - - - - - - - - - - - -
     21  3ae4 ????						; 1.5.1
     22  3ae4 ????						; + fixed clock and sysex bytes causing crashes/stuck notes (0xF0-0xFF)
     23  3ae4 ????						; + fixed bad pitch bend startup value
     24  3ae4 ????						; + added non-omni modes for channel 1 and 5
     25  3ae4 ????						;
     26  3ae4 ????						; - - - - - - - - - - - - - -
     27  3ae4 ????						; Change Log:
     28  3ae4 ????						; - - - - - - - - - - - - - -
     29  3ae4 ????						; 1.5.0
     30  3ae4 ????						; + added MIDI support for Kerberos cartridge
     31  3ae4 ????						; + moved SID location for MIDI version to $D420 to avoid conflict with MIDI interface
     32  3ae4 ????						; + arpeggiator
     33  3ae4 ????						; + new FX modes
     34  3ae4 ????						; + additional presets
     35  3ae4 ????						; + refactored much of project source
     36  3ae4 ????						; + new smarter note buffering system
     37  3ae4 ????						; + reworked patch parameter display
     38  3ae4 ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     39  3ae4 ????						; + optimized the tuning shift tables for space by overlapping tables
     40  3ae4 ????						; + made LFO and all pitch modulations use proper tuning/scaling
     41  3ae4 ????						; + fixed some errors in the tuning shift tables
     42  3ae4 ????						; + improved clarity of help screen text
     43  3ae4 ????						; + added "RETURN FOR CONTROLS" message at bottom
     44  3ae4 ????						;MAYBE....
     45  3ae4 ????						;--------------------------
     46  3ae4 ????						; - - - - - - - - - - - - - -
     47  3ae4 ????						; 1.2.4
     48  3ae4 ????						; + designated paddle 1 and 2 in help screen
     49  3ae4 ????						; - - - - - - - - - - - - - -
     50  3ae4 ????						; 1.2.3
     51  3ae4 ????						; + disable key-commands when 3 piano keys are held
     52  3ae4 ????						;		to avoid quirks with keyboard matrix
     53  3ae4 ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     54  3ae4 ????						; + reinstated shift-lock holding notes
     55  3ae4 ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     56  3ae4 ????						; + add another octave to tuning charts for 5ths in top octave
     57  3ae4 ????						; + auto-paddle on
     58  3ae4 ????						; + set up custom test for space bar
     59  3ae4 ????						; + disable settings changes w/ space bar
     60  3ae4 ????						; + corrected "sine" to "tringl" in patch names
     61  3ae4 ????						; + restored startup patch to "saw bass"
     62  3ae4 ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     63  3ae4 ????						;	+ add key command to switch controls and turn off
     64  3ae4 ????						;	+ add display of paddle status
     65  3ae4 ????						;	+ add code to run things from the second paddle
     66  3ae4 ????						; - - - - - - - - - - - - - -
     67  3ae4 ????						; 1.2.2
     68  3ae4 ????						; + keyboard driver rewrite
     69  3ae4 ????						; + moved tuning from piano to ASDF...
     70  3ae4 ????						; + moved filter On/Off to ZXC
     71  3ae4 ????						; + keys swap portamento and octave
     72  3ae4 ????						; + move video mode to SHFT+FGH and require shift for VIC mode
     73  3ae4 ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
     74  3ae4 ????						; + separate functions for "show everything" and "variable init"
     75  3ae4 ????						; + video mode with no text (shift+:/;)
     76  3ae4 ????						; + SID register $20-$26 edits all 3 oscillators at once
     77  3ae4 ????						; + write help display routine
     78  3ae4 ????						; + add help screen
     79  3ae4 ????						; + reverse octave keys
     80  3ae4 ????						; + add help for SID edit mode
     81  3ae4 ????						; + redo hex editor piano KB layout
     82  3ae4 ????						; + save SID edits
     83  3ae4 ????						; + added "COPYING TO RAM" text when RAM copy is on
     84  3ae4 ????						; - - - - - - - - - - - - - -
     85  3ae4 ????						; 1.2.1
     86  3ae4 ????						; + pitch fix for PAL
     87  3ae4 ????						; + autodetection for PAL/NTSC
     88  3ae4 ????						; - - - - - - - - - - - - - -
     89  3ae4 ????						; 1.2.0
     90  3ae4 ????						; + filter adjustment for SID Symphony
     91  3ae4 ????						; - - - - - - - - - - - - - -
     92  3ae4 ????						; 1.1 RELEASE
     93  3ae4 ????						; + added SID HEX editor
     94  3ae4 ????						; + changed tuning keys to avoid accidentally changing the tuning
     95  3ae4 ????						; + added ability to turn the SID filter on and off
     96  3ae4 ????						; - - - - - - - - - - - - - -
     97  3ae4 ????						; 1.0 RELEASE
     98  3ae4 ????						; + first official release
     99  3ae4 ????						;-----------------------------------------------------
    100  3ae4 ????
    101  3ae4 ????
    102  3ae4 ????						;-----------------------------------------------------
    103  3ae4 ????						; FUTURE TODO LIST:
    104  3ae4 ????						; - - - - - - - - - - - - - - -
    105  3ae4 ????						; - midi trigger to turn off/on omni
    106  3ae4 ????						; - - - - - - - - - - - - - - -
    107  3ae4 ????						; - make rising mod not drop
    108  3ae4 ????						; - wire up pwModValue from functions
    109  3ae4 ????						; - wire up pwSetValue from midi and paddle
    110  3ae4 ????						; - create filter and PW setter that runs every frame
    111  3ae4 ????						; - - - - - - - - - - - - - - -
    112  3ae4 ????						; - have mono-stack check to make sure notes aren't too low or too high
    113  3ae4 ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    114  3ae4 ????						; - create system that cycles which spots are favored for new empty or replacement notes
    115  3ae4 ????						; - - - - - - - - - - - - - - -
    116  3ae4 ????						; - auto-detect secondary SID
    117  3ae4 ????						; - automatic setup for Kerberos MIDI
    118  3ae4 ????						; - - - - - - - - - - - - - - -
    119  3ae4 ????						; - fix note off bug with drum machine?
    120  3ae4 ????						; - - - - - - - - - - - - - - -
    121  3ae4 ????						; -- show held modifier keys
    122  3ae4 ????						; - link SID memory to a controller block
    123  3ae4 ????						; - make fifths buttons preserve the portamento setting
    124  3ae4 ????						; - - - - - - - - - - - - - - -
    125  3ae4 ????						; - new intervals other than 5ths
    126  3ae4 ????						; - better mute/noise reduction
    127  3ae4 ????						; - alternate set of keybindings for use without the keyboard overlay
    128  3ae4 ????						; - - - - - - - - - - - - - - -
    129  3ae4 ????						; - auto-detect second SID at multiple locations, avoid conflict with MIDI interface
    130  3ae4 ????						; - - - - - - - - - - - - - - -
    131  3ae4 ????						; - more patches
    132  3ae4 ????						; - paddle 2 auto-on
    133  3ae4 ????						; - make smarter key->oscillator assignment to fix long release
    134  3ae4 ????						; - LFO during release
    135  3ae4 ????						; - LFO -> Pulse Width and Volume and Filter
    136  3ae4 ????						; - mono-stack mode
    137  3ae4 ????						; - 6 voice polyphony with 2 SIDS
    138  3ae4 ????						;--------------------------
    139  3ae4 ????						; - add echo long/med/short
    140  3ae4 ????						; - more extreme variations in video mode
    141  3ae4 ????						; - noise reduction
    142  3ae4 ????						; - Envelope -> Filter Cutoff
    143  3ae4 ????						; - filter type
    144  3ae4 ????						; - ring modulation
    145  3ae4 ????						; - sync
    146  3ae4 ????						; - Whammy speed control
    147  3ae4 ????						;--------------------------
    148  3ae4 ????						; - filter Q
    149  3ae4 ????						; - save patches to disk
    150  3ae4 ????						;--------------------------
    151  3ae4 ????						;--------------------------
    152  3ae4 ????
    153  3ae4 ????
    154  3ae4 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    155  3ae4 ????						;# MEMORY MAP
    156  3ae4 ????						;#
    157  3ae4 ????						;# $0800-$3800 Program and data
    158  3ae4 ????						;# $7000-$7200 Variables and buffers (512 bytes)
    159  3ae4 ????						;# $7F00-$7FFF MIDI ring buffer
    160  3ae4 ????						;#
    161  3ae4 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    162  3ae4 ????
    163  3ae4 ????
    164  3ae4 ????
    165  3ae4 ????
    166  3ae4 ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    167  3ae4 ????				      processor	6502
    168  3ae4 ????
    169  3ae4 ????						; Image run mode:
    170  3ae4 ????	       00 00	   CART       equ	0	; run at $8000 off cartridge ROM
    171  3ae4 ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word
    172  3ae4 ????	       00 02	   RAM_OBSOLETE equ	2	; run at $1000, needs to be copied or decompressed into $1000 (This mode is no longer supported)
    173  3ae4 ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (This mode is no longer supported)
    174  3ae4 ????
    175  3ae4 ????						;**********************************************************
    176  3ae4 ????						;**********************************************************
    177  3ae4 ????						; PROGRAM CONFIGURATION SWITCHES
    178  3ae4 ????						;**********************************************************
    179  3ae4 ????						;**********************************************************
    180  3ae4 ????	       00 01	   MODE       equ	DISK	; DISK, CART, KERNEL_OBSOLETE, or RAM (obsolete),
    181  3ae4 ????
    182  3ae4 ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running
    183  3ae4 ????
    184  3ae4 ????	       d4 20	   SID2       equ	$D420
    185  3ae4 ????						;SID2 equ $DE00
    186  3ae4 ????
    187  3ae4 ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    188  3ae4 ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    189  3ae4 ????
    190  3ae4 ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    191  3ae4 ????
    192  3ae4 ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    193  3ae4 ????	       00 00	   DEBUG_DISPLAY equ	0
    194  3ae4 ????	       00 00	   OFFSET_CONTROLLERS equ	0
    195  3ae4 ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    196  3ae4 ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    197  3ae4 ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    198  3ae4 ????
    199  3ae4 ????
    200  3ae4 ????						;**********************************************************
    201  3ae4 ????						;**********************************************************
    202  3ae4 ????						;**********************************************************
    203  3ae4 ????
    204  3ae4 ????						; *********************************************
    205  3ae4 ????						; START OF PROGRAM IN MEMORY
    206  3ae4 ????						; *********************************************
    207  3ae4 ????
    208  3ae4 ????						;==================================================
    209  3ae4 ????						; load from disk as PRG with auto-run
    210  3ae4 ????				      IF	MODE=DISK
    211  3ae4 ????	       07 ff	   BASEADDR   equ	2047	; 2047 = $7FF
    212  07ff					      org	BASEADDR	; the beginning of the BASIC program area
    213  07ff
    214  07ff							; disk load location
    215  07ff		       01 08		      byte.b	$01,$08
    216  0801							; BASIC program to call the cynthcart machine code...
    217  0801							; 10 SYS 2061
    218  0801		       0b 08 0a 00*	      byte.b	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    219  080d							; next effective address after this is 2061 / $80D
    220  080d					      ENDIF
    221  080d
    222  080d							;==================================================
    223  080d							; straight cart ROM (No longer supported)
    224  080d				  -	      IF	MODE=CART
    225  080d				  -BASEADDR   equ	$8000
    226  080d				  -	      org	BASEADDR
    227  080d				  -	      word	Startup
    228  080d				  -	      word	Startup
    229  080d				  -			; 5 byte cartridge startup code
    230  080d				  -	      byte	$C3, $C2, $CD, $38, $30
    231  080d					      ENDIF
    232  080d
    233  080d							;==================================================
    234  080d							; load from RAM, requires wrapper to load into RAM
    235  080d				  -	      IF	MODE=RAM_OBSOLETE
    236  080d				  -BASEADDR   equ	$1000
    237  080d				  -	      org	BASEADDR
    238  080d					      ENDIF
    239  080d
    240  080d							;==================================================
    241  080d							; to replace BASIC ROM (No longer supported)
    242  080d				  -	      IF	MODE=KERNEL_OBSOLETE
    243  080d				  -BASEADDR   equ	$8000
    244  080d				  -	      org	BASEADDR
    245  080d				  -	      word	$E394	; RESET
    246  080d				  -	      word	$E37B	; Warm Start
    247  080d					      ENDIF
    248  080d
    249  080d							;---------------------------------------
    250  080d							; variables and constants here
    251  080d							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  080d					      include	cynth_vars.asm
      1  080d							; *********************************************
      2  080d							; Constants
      3  080d							; *********************************************
      4  080d
      5  080d							;KEYTIME equ 128
      6  080d							;KEYTIME equ 64
      7  080d		       00 28	   KEYTIME    equ	40
      8  080d
      9  080d		       00 e0	   REL_SHORT  equ	$E0
     10  080d		       00 e9	   REL_MED    equ	$E9
     11  080d		       00 ee	   REL_LONG   equ	$EE
     12  080d
     13  080d		       00 00	   ATK_SHORT  equ	$00
     14  080d		       00 90	   ATK_MED    equ	$90
     15  080d		       00 e0	   ATK_LONG   equ	$E0
     16  080d
     17  080d
     18  080d		       00 00	   VOLOFF     equ	$00
     19  080d		       00 07	   VOLLOW     equ	$07
     20  080d		       00 0b	   VOLMED     equ	$0B
     21  080d		       00 0f	   VOLHIGH    equ	$0F
     22  080d
     23  080d		       00 c5	   CURRENTKEY equ	197
     24  080d
     25  080d		       d0 20	   BACK_COLOR equ	53280
     26  080d		       d0 21	   BORD_COLOR equ	53281
     27  080d
     28  080d		       d4 00	   SID1       equ	$D400
     29  080d
     30  080d
     31  080d							;SID2 equ $DEE0
     32  080d
     33  080d		       00 04	   SID2OFFSET equ	4
     34  080d
     35  080d		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  080d
     37  080d		       00 00	   SV1FL      equ	$00
     38  080d		       00 01	   SV1FH      equ	$01
     39  080d		       00 02	   SV1PWL     equ	$02
     40  080d		       00 03	   SV1PWH     equ	$03
     41  080d		       00 04	   SV1WAVE    equ	$04
     42  080d		       00 05	   SV1AD      equ	$05
     43  080d		       00 06	   SV1SR      equ	$06
     44  080d
     45  080d		       00 07	   SV2FL      equ	$07
     46  080d		       00 08	   SV2FH      equ	$08
     47  080d		       00 09	   SV2PWL     equ	$09
     48  080d		       00 0a	   SV2PWH     equ	$0A
     49  080d		       00 0b	   SV2WAVE    equ	$0B
     50  080d		       00 0c	   SV2AD      equ	$0C
     51  080d		       00 0d	   SV2SR      equ	$0D
     52  080d
     53  080d		       00 0e	   SV3FL      equ	$0E
     54  080d		       00 0f	   SV3FH      equ	$0F
     55  080d		       00 10	   SV3PWL     equ	$10
     56  080d		       00 11	   SV3PWH     equ	$11
     57  080d		       00 12	   SV3WAVE    equ	$12
     58  080d		       00 13	   SV3AD      equ	$13
     59  080d		       00 14	   SV3SR      equ	$14
     60  080d
     61  080d		       00 15	   SFILTL     equ	$15
     62  080d		       00 16	   SFILTH     equ	$16
     63  080d		       00 17	   SFILTC     equ	$17
     64  080d		       00 18	   SVOLMODE   equ	$18
     65  080d
     66  080d		       00 19	   SPAD1      equ	$19
     67  080d		       00 1a	   SPAD2      equ	$1A
     68  080d
     69  080d		       00 1b	   SRAND      equ	$1B
     70  080d
     71  080d		       dc 00	   PortA      equ	$dc00
     72  080d		       dc 02	   Ciddra     equ	$dc02
     73  080d
     74  080d
     75  080d							; *********************************************
     76  080d							; RAM Variables
     77  080d							; *********************************************
     78  080d
     79  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  080d							; ZERO PAGE
     81  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  080d
     83  080d							; FROM SORTING ROUTINE
     84  080d		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  080d		       01 22	   nval       =	$122	;set by calling program
     86  080d		       01 25	   work1      =	$125	;3 bytes used as working area
     87  080d		       01 26	   work2      =	$126
     88  080d		       01 27	   work3      =	$127
     89  080d
     90  080d							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  080d							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  080d							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  080d							;WORK2  = $34
     94  080d							;WORK3  = $35
     95  080d
     96  080d							; CYNTHCART
     97  080d		       00 22	   tunePtrL   equ	34	;2 bytes
     98  080d		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  080d		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  080d		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  080d
    102  080d		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  080d		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  080d
    105  080d		       00 2f	   helpReadPointerL equ	47
    106  080d		       00 30	   helpReadPointerM equ	48
    107  080d		       00 31	   helpWritePointerL equ	49
    108  080d		       00 32	   helpWritePointerM equ	50
    109  080d		       00 33	   helpColorPointerL equ	51
    110  080d		       00 34	   helpColorPointerM equ	52
    111  080d
    112  080d		       00 35	   portPtrL   equ	53	;2 bytes
    113  080d		       00 47	   portPtrH   equ	71	;2 bytes
    114  080d
    115  080d		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  080d		       00 c3	   keyPtrH    equ	195
    117  080d
    118  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  080d							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  080d							; private addresses ======
    121  080d		       00 64	   midiControl equ	$64	; $64 = 100
    122  080d		       00 66	   midiStatus =	$66	; 102
    123  080d		       00 68	   midiTx     =	$68	;104
    124  080d		       00 6a	   midiRx     =	$6a	;106
    125  080d		       00 6f	   keyTestIndex =	$6f	; 111
    126  080d		       00 70	   keyPressedIntern =	$70	; 112
    127  080d		       00 72	   shiftPressed =	$72	; 114
    128  080d							; public addresses ======
    129  080d		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  080d		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  080d		       00 6e	   midiInterfaceType =	$6e	;110
    132  080d		       00 71	   keyPressed =	$71	; 113
    133  080d							; this module ======
    134  080d		       00 59	   midiMessage equ	$59	; 95
    135  080d		       00 5a	   lastWaveform equ	$5a	; 90
    136  080d							; - - - - - - - - - - - - - -
    137  080d							; - - - - - - - - - - - - - -
    138  080d							; Non-zero page
    139  080d		       7f 00	   midiRingbuffer =	$7F00
    140  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  080d
    142  080d							;-------------------------------------
    143  080d
    144  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  080d							; NON-ZERO PAGE ($7000-$7FFF)
    146  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  080d
    148  080d		       70 00	   Trem       equ	$7000
    149  080d
    150  080d		       70 02	   FrameH     equ	$7002
    151  080d		       70 03	   Frame      equ	$7003
    152  080d
    153  080d		       70 04	   EchoPtr    equ	$7004
    154  080d		       70 05	   EchoCur    equ	$7005
    155  080d
    156  080d		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  080d
    158  080d		       70 07	   MagicVoice equ	$7007
    159  080d
    160  080d		       70 08	   LastKey    equ	$7008
    161  080d
    162  080d		       70 09	   Button     equ	$7009
    163  080d
    164  080d		       70 0a	   LFO	      equ	$700A
    165  080d
    166  080d		       70 0b	   PatchTune  equ	$700B
    167  080d
    168  080d		       70 0c	   temp       equ	$700C
    169  080d
    170  080d							;KeyA	equ $700D
    171  080d							;KeyB	equ $700E
    172  080d							;KeyC	equ $700F
    173  080d
    174  080d							;lastKeyA equ $7010
    175  080d							;lastKeyB equ $7011
    176  080d							;lastKeyC equ $7012
    177  080d
    178  080d		       70 13	   portDirA   equ	$7013
    179  080d		       70 14	   portDirB   equ	$7014
    180  080d		       70 15	   portDirC   equ	$7015
    181  080d
    182  080d		       70 16	   pitchLA    equ	$7016
    183  080d		       70 17	   pitchLB    equ	$7017
    184  080d		       70 18	   pitchLC    equ	$7018
    185  080d
    186  080d		       70 19	   pitchHA    equ	$7019
    187  080d		       70 1a	   pitchHB    equ	$701A
    188  080d		       70 1b	   pitchHC    equ	$701B
    189  080d
    190  080d		       70 1c	   volume     equ	$701C
    191  080d
    192  080d							; soundModes
    193  080d							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  080d		       00 00	   MODE_NORMAL equ	$00
    195  080d		       00 08	   MODE_6CHAN equ	$08
    196  080d		       00 10	   MODE_PORT1 equ	$10
    197  080d		       00 11	   MODE_PORT2 equ	$11
    198  080d		       00 12	   MODE_PORT3 equ	$12
    199  080d		       00 20	   MODE_MONO1 equ	$20
    200  080d		       00 21	   MODE_MONO2 equ	$21
    201  080d							;MODE_MONO3	equ $22
    202  080d		       00 40	   MODE_ARP1  equ	$40
    203  080d		       00 41	   MODE_ARP2  equ	$41
    204  080d		       00 42	   MODE_ARP3  equ	$42
    205  080d		       00 43	   MODE_ARP4  equ	$43
    206  080d		       00 44	   MODE_ARP5  equ	$44
    207  080d		       00 01	   MODE_5THS  equ	$01
    208  080d		       00 02	   MODE_5PORT equ	$02
    209  080d							;- - - - - - - - - - -
    210  080d
    211  080d		       00 10	   PORT_MASK  equ	$10
    212  080d		       00 20	   MONO_MASK  equ	$20
    213  080d		       00 40	   ARP_MASK   equ	$40
    214  080d		       00 08	   CHAN6_MASK equ	$08
    215  080d
    216  080d
    217  080d		       70 1d	   soundMode  equ	$701D
    218  080d		       70 1e	   arpSpeed   equ	$701E
    219  080d
    220  080d		       70 1f	   dispOn     equ	$701F
    221  080d
    222  080d		       70 20	   VICMode    equ	$7020
    223  080d
    224  080d		       70 21	   patPtr     equ	$7021
    225  080d
    226  080d		       70 22	   keyOffset  equ	$7022
    227  080d
    228  080d		       70 24	   volModeRAM equ	$7024
    229  080d
    230  080d		       70 25	   shiftL1    equ	$7025
    231  080d		       70 26	   shiftH1    equ	$7026
    232  080d		       70 27	   shiftL2    equ	$7027
    233  080d		       70 28	   shiftH2    equ	$7028
    234  080d
    235  080d							;$7025 - $7028 free
    236  080d
    237  080d		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    238  080d
    239  080d		       70 30	   WaveType   equ	$7030
    240  080d		       70 37	   WaveType2  equ	$7037
    241  080d		       70 3e	   WaveType3  equ	$703E
    242  080d
    243  080d		       70 3f	   LFObend    equ	$703F
    244  080d		       70 40	   bender     equ	$7040
    245  080d
    246  080d		       70 43	   pitchTmpL  equ	$7043
    247  080d		       70 44	   pitchTmpH  equ	$7044
    248  080d
    249  080d		       70 45	   videoMode  equ	$7045
    250  080d
    251  080d		       70 46	   textTemp   equ	$7046
    252  080d
    253  080d		       70 47	   patchSetY  equ	$7047
    254  080d
    255  080d		       70 48	   LFORate    equ	$7048
    256  080d		       70 49	   LFODepth   equ	$7049
    257  080d
    258  080d		       70 50	   videoModeNum equ	$7050
    259  080d
    260  080d		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    261  080d		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    262  080d
    263  080d		       70 57	   filter     equ	$7057
    264  080d
    265  080d		       70 58	   keyTimer   equ	$7058
    266  080d
    267  080d		       70 59	   bendSpd    equ	$7059
    268  080d
    269  080d		       70 5a	   SIDeditAddr equ	$705A
    270  080d		       70 5b	   SIDeditValue equ	$705B
    271  080d
    272  080d		       70 5c	   filterDisable equ	$705C
    273  080d
    274  080d		       70 5d	   lastKey    equ	$705D
    275  080d
    276  080d		       70 60	   hexKeyMode equ	$7060
    277  080d
    278  080d		       70 61	   NTSCmode   equ	$7061
    279  080d
    280  080d		       70 62	   temp16L    equ	$7062
    281  080d		       70 63	   temp16H    equ	$7063
    282  080d
    283  080d		       70 64	   saveX      equ	$7064
    284  080d
    285  080d							;EchoBuffer	equ 1184 ; 256 bytes
    286  080d
    287  080d		       70 65	   keyTemp    equ	$7065
    288  080d
    289  080d		       70 66	   lastOsc    equ	$7066
    290  080d
    291  080d		       70 67	   fullScreenMode equ	$7067
    292  080d
    293  080d		       70 68	   videoText  equ	$7068
    294  080d
    295  080d		       70 69	   attack     equ	$7069
    296  080d		       70 6a	   release    equ	$706A
    297  080d		       70 6b	   octave     equ	$706B
    298  080d		       70 6c	   filterStatus equ	$706C
    299  080d
    300  080d		       70 6d	   helpColor  equ	$706D
    301  080d		       70 6e	   helpYIn    equ	$706E
    302  080d		       70 6f	   helpYOut   equ	$706F
    303  080d
    304  080d		       70 70	   helpMode   equ	$7070
    305  080d
    306  080d		       70 71	   tuneSetting equ	$7071
    307  080d
    308  080d		       70 72	   hexDispTemp equ	$7072
    309  080d
    310  080d		       70 73	   sidTemp1   equ	$7073
    311  080d		       70 74	   sidTemp2   equ	$7074
    312  080d
    313  080d		       70 75	   customPatchSaved equ	$7075
    314  080d
    315  080d		       70 76	   paddleTop  equ	$7076
    316  080d		       70 77	   paddleBottom equ	$7077
    317  080d
    318  080d		       70 78	   paddleX    equ	$7078
    319  080d		       70 79	   paddleY    equ	$7079
    320  080d
    321  080d		       70 7a	   paddle2    equ	$707A
    322  080d		       70 7b	   lastPad2   equ	$707B
    323  080d
    324  080d		       70 7c	   debugOffset equ	$707C
    325  080d		       70 7d	   savedMidiStatus equ	$707D
    326  080d		       70 7e	   firstDataByte equ	$707E
    327  080d		       70 7f	   tempVelocity equ	$707F
    328  080d		       70 80	   bufferSize equ	$7080
    329  080d		       70 81	   noteTempA  equ	$7081
    330  080d		       70 82	   noteTempB  equ	$7082
    331  080d
    332  080d		       70 83	   benderAutoreset equ	$7083
    333  080d		       70 84	   polyphony  equ	$7084
    334  080d
    335  080d		       70 85	   arpOffset  equ	$7085
    336  080d
    337  080d		       70 86	   fxType     equ	$7086
    338  080d		       70 87	   modValue1  equ	$7087
    339  080d		       70 89	   modDirection equ	$7089
    340  080d		       70 8a	   modCounter equ	$708A
    341  080d		       70 8b	   modLFOMinValue equ	$708B
    342  080d		       70 8a	   modLFOMaxValue equ	$708A
    343  080d
    344  080d		       00 00	   MOD_NONE   equ	0
    345  080d		       00 01	   MOD_FILT_LFO equ	1
    346  080d		       00 02	   MOD_FILT_ENV equ	2
    347  080d		       00 03	   MOD_FILT3  equ	3
    348  080d		       00 04	   MOD_FILT4  equ	4
    349  080d		       00 05	   MOD_FILT5  equ	5
    350  080d		       00 06	   MOD_PW_LFO equ	6
    351  080d		       00 07	   MOD_PW2    equ	7
    352  080d
    353  080d		       70 8b	   noteOffCount equ	$708B
    354  080d		       70 8c	   noteOnCount equ	$708C
    355  080d
    356  080d		       70 8d	   hexDispColor equ	$708D
    357  080d
    358  080d		       70 8e	   midiBendValue equ	$708E
    359  080d
    360  080d		       70 8f	   temp2      equ	$708F
    361  080d
    362  080d
    363  080d		       70 97	   resonance  equ	$7097
    364  080d
    365  080d		       70 98	   resetValue equ	$7098
    366  080d
    367  080d		       70 99	   lastNoteCount equ	$7099
    368  080d		       70 9a	   lastNote   equ	$709A
    369  080d
    370  080d		       70 9b	   keyCount   equ	$709B
    371  080d
    372  080d		       70 9c	   filterModValue equ	$709C
    373  080d		       70 9d	   filterSetValue equ	$709D
    374  080d		       70 9e	   pwModValue equ	$709E
    375  080d		       70 9f	   pwSetValue equ	$709F
    376  080d
    377  080d		       70 f0	   midiTuning equ	$70F0
    378  080d		       70 f1	   benderTuning equ	$70F1
    379  080d		       70 f2	   lfoTuning  equ	$70F2
    380  080d		       70 f3	   systemTuning equ	$70F3
    381  080d		       70 f4	   masterTuning equ	$70F4
    382  080d		       70 f5	   finalTuning equ	$70F5
    383  080d		       70 f6	   noteShift  equ	$70F6
    384  080d
    385  080d		       70 f7	   midiMode   equ	$70F7
    386  080d
    387  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    388  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    389  080d							; BUFFERS
    390  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    392  080d
    393  080d		       00 08	   NOTE_BUF_SIZE equ	8
    394  080d		       70 a0	   noteNumArray equ	$70A0
    395  080d		       70 b0	   playNoteArray equ	$70B0
    396  080d
    397  080d							;noteVelArray equ $70C0
    398  080d
    399  080d		       70 d0	   kbBuffer   equ	$70D0
    400  080d		       70 e0	   lastKbBuffer equ	$70E0
    401  080d
    402  080d		       70 e1	   tempA      equ	$70E1
    403  080d		       70 e2	   tempX      equ	$70E2
    404  080d		       70 e3	   tempY      equ	$70E3
    405  080d
    406  080d
    407  080d							;-----------------------------------------------
    408  080d
    409  080d							; SID editor custom preset data...
    410  080d		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    411  080d
    412  080d		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    413  080d		       71 41	   savePaddle equ	$7141
    414  080d		       71 42	   saveOctave equ	$7142
    415  080d		       71 43	   saveSoundMode equ	$7143
    416  080d		       71 43	   saveFXType equ	$7143
    417  080d		       71 44	   saveArpSpeed equ	$7144
    418  080d		       71 46	   saveLFODepth equ	$7146
    419  080d		       71 47	   saveLFORate equ	$7147
    420  080d		       71 48	   saveVolume equ	$7148
    421  080d		       71 49	   saveVolMode equ	$7149
    422  080d		       71 4a	   saveFilter equ	$714A
    423  080d
    424  080d
    425  080d
    426  080d
------- FILE cynthcart152.asm
    253  080d
    254  080d							; *********************************************
    255  080d							; Start of program
    256  080d							; *********************************************
    257  080d				   Startup
    258  080d
    259  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    260  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    261  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    262  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    263  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    264  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    265  080d							; switch to lowercase mode
    266  080d		       a9 17		      lda	#23
    267  080f		       8d 18 d0 	      sta	$d018
    268  0812
    269  0812							; clear screen and show info
    270  0812		       a2 00		      ldx	#0
    271  0814		       8e 20 d0 	      stx	$d020
    272  0817		       8e 21 d0 	      stx	$d021
    273  081a				   loop1		; clear screen...
    274  081a		       a9 20		      lda	#32
    275  081c		       9d 00 04 	      sta	$0400,x
    276  081f		       9d fa 04 	      sta	$0400+250,x
    277  0822		       9d f4 05 	      sta	$0400+500,x
    278  0825		       9d ee 06 	      sta	$0400+750,x
    279  0828		       a9 0e		      lda	#14
    280  082a		       9d 00 d8 	      sta	$d800,x
    281  082d		       9d fa d8 	      sta	$d800+250,x
    282  0830		       9d f4 d9 	      sta	$d800+500,x
    283  0833		       9d ee da 	      sta	$d800+750,x
    284  0836		       e8		      inx
    285  0837		       e0 fa		      cpx	#250
    286  0839		       d0 df		      bne	loop1
    287  083b		       a2 00		      ldx	#0
    288  083d				   loop2		; show info...
    289  083d							;lda info,x
    290  083d		       a9 01		      lda	#1
    291  083f		       9d 90 05 	      sta	$0400+10*40,x
    292  0842		       e8		      inx
    293  0843		       e0 50		      cpx	#80
    294  0845		       d0 f6		      bne	loop2
    295  0847
    296  0847							; init SID...
    297  0847		       a9 00		      lda	#0
    298  0849		       a2 00		      ldx	#0
    299  084b		       9d 00 d4    initSid    sta	$d400,x
    300  084e		       e8		      inx
    301  084f		       e0 19		      cpx	#25
    302  0851		       d0 f8		      bne	initSid
    303  0853		       a9 0f		      lda	#15
    304  0855		       8d 18 d4 	      sta	$d418
    305  0858		       a9 01		      lda	#1
    306  085a		       8d 03 d4 	      sta	$d403
    307  085d
    308  085d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    309  085d							;lock: jmp lock
    310  085d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    311  085d
    312  085d					      IF	ENABLE_MIDI_COMMANDS=1
    313  085d							; init MIDI and enable all interrupts
    314  085d		       a9 03		      lda	#3
    315  085f		       20 90 39 	      jsr	midiInit
    316  0862					      ENDIF
    317  0862
    318  0862							; Set default hex color
    319  0862		       a9 0e		      lda	#$E
    320  0864		       8d 8d 70 	      sta	hexDispColor
    321  0867
    322  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    323  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    324  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  0867							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  0867
    329  0867				   skipTest
    330  0867
    331  0867							; Copy program into RAM if running from cartridge...
    332  0867				  -	      IF	MODE=CART
    333  0867				  -	      ldx	#0
    334  0867				  -RAMTextCopy
    335  0867				  -	      lda	RAMText,x
    336  0867				  -	      beq	quitRAMTextCopy
    337  0867				  -	      cmp	#64
    338  0867				  -	      bmi	showSpaceRAM
    339  0867				  -	      sbc	#64
    340  0867				  -showSpaceRAM
    341  0867				  -	      sta	1024,x
    342  0867				  -	      inx
    343  0867				  -	      jmp	RAMTextCopy
    344  0867				  -RAMText
    345  0867				  -	      byte	"COPYING TO RAM...",0
    346  0867				  -quitRAMTextCopy
    347  0867				  -			;------------
    348  0867				  -	      ldx	#8*4
    349  0867				  -	      lda	#<copyStart
    350  0867				  -	      sta	copyPtrS
    351  0867				  -	      lda	#>copyStart
    352  0867				  -	      sta	copyPtrS+1
    353  0867				  -	      lda	#<ramStart
    354  0867				  -	      sta	copyPtrD
    355  0867				  -	      lda	#>ramStart
    356  0867				  -	      sta	copyPtrD+1
    357  0867				  -ramCopy1
    358  0867				  -	      ldy	#0
    359  0867				  -ramCopy2
    360  0867				  -	      lda	(copyPtrS),y
    361  0867				  -	      sta	(copyPtrD),y
    362  0867				  -	      dey
    363  0867				  -	      bne	ramCopy2
    364  0867				  -	      inc	copyPtrS+1
    365  0867				  -	      inc	copyPtrD+1
    366  0867				  -	      dex
    367  0867				  -	      bne	ramCopy1
    368  0867				  -	      jmp	ramStart
    369  0867				  -copyStart
    370  0867				  -	      rorg	$3000	; RAM destination
    371  0867				  -ramStart
    372  0867					      ENDIF
    373  0867
    374  0867				  -	      IF	MODE=CART
    375  0867				  -			; System Startup Stuff
    376  0867				  -			; (not needed if starting from disk)
    377  0867				  -	      sei
    378  0867				  -	      jsr	$FF84	; initialize I/O devices
    379  0867				  -	      jsr	$FF87	; initalise memory pointers
    380  0867				  -	      jsr	$FF8A	; restore I/O vectors
    381  0867				  -	      jsr	$FF81	; initalise screen and keyboard
    382  0867				  -	      cli
    383  0867					      ENDIF
    384  0867
    385  0867				  -	      IF	MODE=KERNEL_OBSOLETE
    386  0867				  -	      org	$A483
    387  0867					      ENDIF
    388  0867
    389  0867		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    390  086a		       29 ef		      AND	#$EF	; badlines
    391  086c		       8d 11 d0 	      STA	$D011
    392  086f
    393  086f							; Disable RESTORE key
    394  086f		       a9 c1		      lda	#193
    395  0871		       8d 18 03 	      sta	792
    396  0874
    397  0874		       a9 00		      lda	#0
    398  0876		       8d 20 d0 	      sta	BACK_COLOR
    399  0879		       8d 21 d0 	      sta	BORD_COLOR
    400  087c
    401  087c							;*****************************
    402  087c							; Detect PAL/NTSC
    403  087c							;*****************************
    404  087c							;palntsc:
    405  087c		       78		      sei		; disable interrupts
    406  087d				   wait
    407  087d		       ad 12 d0 	      lda	$d012
    408  0880		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    409  0882				   wait1
    410  0882		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    411  0885		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    412  0887				   wait2
    413  0887		       a0 00		      ldy	#$00
    414  0889				   synch1
    415  0889		       ad 12 d0 	      lda	$d012
    416  088c		       c9 37		      cmp	#$37	; top PAL rasterline
    417  088e		       d0 f9		      bne	synch1
    418  0890		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    419  0893				   synch2
    420  0893		       cd 12 d0 	      cmp	$d012
    421  0896		       f0 fb		      beq	synch2
    422  0898		       ad 12 d0 	      lda	$d012
    423  089b		       58		      cli		; enable interrupts
    424  089c
    425  089c		       8d 61 70 	      sta	NTSCmode
    426  089f
    427  089f
    428  089f
    429  089f
    430  089f							;****************************************************
    431  089f							; init screen and variables
    432  089f							;****************************************************
    433  089f
    434  089f		       a9 00		      lda	#0
    435  08a1		       8d 97 70 	      sta	resonance
    436  08a4		       8d 8c 70 	      sta	noteOnCount
    437  08a7		       8d 8b 70 	      sta	noteOffCount
    438  08aa		       20 bc 18 	      jsr	setFullScreenMode
    439  08ad		       20 b9 1f 	      jsr	variableInit
    440  08b0		       20 30 1f 	      jsr	displayInit
    441  08b3
    442  08b3							; Clear note buffer...
    443  08b3		       a2 08		      ldx	#8
    444  08b5		       a9 ff		      lda	#255
    445  08b7				   clearBufferLoop
    446  08b7		       ca		      dex
    447  08b8		       9d a0 70 	      sta	noteNumArray,x
    448  08bb							;sta noteAgeArray,x
    449  08bb							;sta noteVelArray,x
    450  08bb		       d0 fa		      bne	clearBufferLoop
    451  08bd
    452  08bd
    453  08bd				  -	      IF	DEBUG_DISPLAY=1
    454  08bd				  -	      ldx	#>debugOverlay	;low/MSB
    455  08bd				  -	      ldy	#<debugOverlay	;high/LSB
    456  08bd				  -	      jsr	displayPage
    457  08bd					      ENDIF
    458  08bd
    459  08bd		       a9 00		      lda	#0
    460  08bf		       a0 00		      ldy	#0
    461  08c1		       20 71 1b 	      jsr	setPatch
    462  08c4
    463  08c4		       a9 00		      lda	#0
    464  08c6		       8d f0 70 	      sta	midiTuning
    465  08c9
    466  08c9		       a9 ff		      lda	#$FF
    467  08cb		       20 fb 19 	      jsr	setMidiMode
    468  08ce							;sta midiMode
    469  08ce
    470  08ce							;===========================================
    471  08ce							;===========================================
    472  08ce							;===========================================
    473  08ce							; Main Loop
    474  08ce							;===========================================
    475  08ce							;===========================================
    476  08ce							;===========================================
    477  08ce				   Loop
    478  08ce							; Increment frame counter
    479  08ce		       ee 03 70 	      inc	Frame
    480  08d1		       ad 03 70 	      lda	Frame
    481  08d4		       29 3f		      and	#%00111111
    482  08d6		       d0 03		      bne	SkipHFrame
    483  08d8		       ee 02 70 	      inc	FrameH
    484  08db				   SkipHFrame
    485  08db
    486  08db
    487  08db		       20 19 09 	      jsr	processLFO
    488  08de		       20 59 12 	      jsr	processFX
    489  08e1
    490  08e1					      IF	ENABLE_MIDI_COMMANDS=1
    491  08e1		       20 d8 09 	      jsr	processMIDI
    492  08e4					      ENDIF
    493  08e4
    494  08e4		       20 7f 15 	      jsr	readKeyboard
    495  08e7		       20 58 0c 	      jsr	processBender
    496  08ea		       20 95 0c 	      jsr	processSoundDriver
    497  08ed		       20 eb 13 	      jsr	processPaddles
    498  08f0		       20 b2 14 	      jsr	processVideoMode
    499  08f3		       20 f9 08 	      jsr	updateFilterAndPW
    500  08f6		       4c ce 08 	      jmp	Loop
    501  08f9							;-------- BOTTOM OF MAIN LOOP ---------------------------
    502  08f9
    503  08f9				   updateFilterAndPW
    504  08f9		       ad 9c 70 	      lda	filterModValue
    505  08fc		       38		      sec
    506  08fd		       e9 7f		      sbc	#127
    507  08ff		       30 0a		      bmi	negativeFilterMod
    508  0901							; Positive
    509  0901		       6d 9d 70 	      adc	filterSetValue
    510  0904		       90 0f		      bcc	doSetFilter
    511  0906		       a9 ff		      lda	#255
    512  0908		       4c 15 09 	      jmp	doSetFilter
    513  090b
    514  090b				   negativeFilterMod
    515  090b							; Negative
    516  090b		       6d 9d 70 	      adc	filterSetValue
    517  090e		       b0 05		      bcs	doSetFilter
    518  0910		       a9 00		      lda	#0
    519  0912		       4c 15 09 	      jmp	doSetFilter
    520  0915
    521  0915							;and #$F0
    522  0915				   doSetFilter
    523  0915		       20 d8 1a 	      jsr	setFilter
    524  0918							; TODO: add PW setting
    525  0918		       60		      rts
    526  0919
    527  0919
    528  0919							;-------------------------------
    529  0919							; LFO
    530  0919							;-------------------------------
    531  0919				   processLFO
    532  0919							; Set current LFO modulation
    533  0919							; into (pitch) shift variables
    534  0919
    535  0919							;---------------------------
    536  0919							; get pitch bend from paddle2
    537  0919		       ad 7a 70 	      lda	paddle2
    538  091c		       c9 04		      cmp	#4
    539  091e		       d0 06		      bne	noPadBend
    540  0920		       ad 79 70 	      lda	paddleY
    541  0923		       8d 40 70 	      sta	bender
    542  0926				   noPadBend
    543  0926
    544  0926							;----------------------------
    545  0926							; get depth from paddle2
    546  0926		       ad 7a 70 	      lda	paddle2
    547  0929		       c9 03		      cmp	#3
    548  092b		       d0 0a		      bne	noPadLFO
    549  092d		       ad 79 70 	      lda	paddleY
    550  0930		       4a		      lsr
    551  0931		       4a		      lsr
    552  0932		       4a		      lsr
    553  0933		       a8		      tay
    554  0934		       4c 3d 09 	      jmp	skipFixedLFODepth
    555  0937							;---------------------
    556  0937							; calculate LFO depth
    557  0937							; increases per octave
    558  0937				   noPadLFO
    559  0937		       ae 49 70 	      ldx	LFODepth
    560  093a		       bc 5b 33 	      ldy	LFODepthArray,x
    561  093d				   skipFixedLFODepth
    562  093d		       ad 22 70 	      lda	keyOffset	; current octave offset
    563  0940		       c9 0c		      cmp	#12
    564  0942		       30 08		      bmi	endDepth
    565  0944		       c8		      iny
    566  0945		       c9 24		      cmp	#36
    567  0947		       d0 03		      bne	endDepth
    568  0949		       98		      tya
    569  094a		       0a		      asl
    570  094b		       a8		      tay
    571  094c				   endDepth		; y now contains the depth value
    572  094c
    573  094c
    574  094c							; figure out LFO position
    575  094c		       ad 02 70 	      lda	FrameH
    576  094f		       ae 48 70 	      ldx	LFORate
    577  0952		       f0 0e		      beq	LFOSkip
    578  0954		       ad 03 70 	      lda	Frame
    579  0957		       ca		      dex
    580  0958		       ca		      dex
    581  0959		       ca		      dex
    582  095a		       f0 06		      beq	LFOSkip
    583  095c		       4a		      lsr
    584  095d		       e8		      inx
    585  095e		       f0 02		      beq	LFOSkip
    586  0960		       4a		      lsr
    587  0961		       4a		      lsr
    588  0962				   LFOSkip
    589  0962		       4a		      lsr
    590  0963
    591  0963		       29 0f		      and	#$0F
    592  0965		       aa		      tax
    593  0966		       bd 9f 33 	      lda	LFOArrH,x
    594  0969		       8d 26 70 	      sta	shiftH1
    595  096c		       d0 10		      bne	negativeLFO
    596  096e
    597  096e		       18		      clc
    598  096f		       bd 8f 33 	      lda	LFOArrL,x
    599  0972				   depthLoop
    600  0972		       7d 8f 33 	      adc	LFOArrL,x
    601  0975		       88		      dey
    602  0976		       d0 fa		      bne	depthLoop
    603  0978		       8d 25 70 	      sta	shiftL1
    604  097b		       4c 93 09 	      jmp	endLFO
    605  097e
    606  097e				   negativeLFO
    607  097e		       bd 8f 33 	      lda	LFOArrL,x
    608  0981				   depthLoopN
    609  0981		       7d 8f 33 	      adc	LFOArrL,x
    610  0984		       88		      dey
    611  0985		       d0 fa		      bne	depthLoopN
    612  0987		       8d 0c 70 	      sta	temp
    613  098a		       a9 ff		      lda	#255
    614  098c		       38		      sec
    615  098d		       ed 0c 70 	      sbc	temp
    616  0990		       8d 25 70 	      sta	shiftL1
    617  0993				   endLFO
    618  0993
    619  0993							; if depth=0 then cancel LFO
    620  0993		       ad 7a 70 	      lda	paddle2
    621  0996		       c9 03		      cmp	#3
    622  0998		       f0 0d		      beq	doLFO
    623  099a		       ad 49 70 	      lda	LFODepth
    624  099d		       d0 08		      bne	doLFO
    625  099f		       a9 00		      lda	#0
    626  09a1		       8d 25 70 	      sta	shiftL1
    627  09a4		       8d 26 70 	      sta	shiftH1
    628  09a7				   doLFO
    629  09a7
    630  09a7		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    631  09aa		       d0 05		      bne	showLFO
    632  09ac		       ad 67 70 	      lda	fullScreenMode
    633  09af		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    634  09b1							;--------
    635  09b1							; Show it
    636  09b1				   showLFO
    637  09b1		       bd af 33 	      lda	LFOdisp,x
    638  09b4		       aa		      tax
    639  09b5		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    640  09b7							;adc #10
    641  09b7
    642  09b7							;lda #160
    643  09b7							;sta 1063,x
    644  09b7		       9d ff d7 	      sta	55296-1,x
    645  09ba
    646  09ba							;clear the previous one
    647  09ba							;lda #32
    648  09ba		       a9 02		      lda	#CYNTHCART_COLOR
    649  09bc							;sta 1064,x
    650  09bc		       9d 00 d8 	      sta	55296+0,x
    651  09bf		       e0 01		      cpx	#1
    652  09c1		       f0 03		      beq	dontErase
    653  09c3							;sta 1062,x
    654  09c3		       9d fe d7 	      sta	55296-2,x
    655  09c6				   dontErase
    656  09c6
    657  09c6							; set up shift for second SID
    658  09c6							; chip, pitch a tad higher for
    659  09c6							; awesome chorus effect
    660  09c6		       18		      clc
    661  09c7		       ad 25 70 	      lda	shiftL1
    662  09ca		       69 04		      adc	#SID2OFFSET
    663  09cc		       8d 27 70 	      sta	shiftL2
    664  09cf		       ad 26 70 	      lda	shiftH1
    665  09d2		       69 00		      adc	#0
    666  09d4		       8d 28 70 	      sta	shiftH2
    667  09d7
    668  09d7							; LFO->filter
    669  09d7							;	lda shiftL1
    670  09d7							;	clc
    671  09d7							;	adc #128
    672  09d7							;	sta SID1+SFILTH
    673  09d7							;	sta SID2+SFILTH
    674  09d7
    675  09d7				   skipLFO
    676  09d7		       60		      rts
    677  09d8
    678  09d8							; Echo stuff
    679  09d8							;	inc EchoCur
    680  09d8							;	inc EchoPtr
    681  09d8							; Save note in echo buffer
    682  09d8							;	ldx EchoCur
    683  09d8							;	sta EchoBuffer,x
    684  09d8
    685  09d8							;---------------------
    686  09d8							; Read keyboard
    687  09d8							;jsr readKeyboard
    688  09d8							;---------------------
    689  09d8
    690  09d8							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    691  09d8							; Read MIDI
    692  09d8							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    693  09d8							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    694  09d8					      IF	ENABLE_MIDI_COMMANDS=1
    695  09d8				   processMIDI
    696  09d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    697  09d8							; Debug - show main note buffer
    698  09d8				  -	      IF	DEBUG_DISPLAY=1
    699  09d8				  -	      lda	noteNumArray+0
    700  09d8				  -	      sta	1744+125
    701  09d8				  -	      lda	noteNumArray+1
    702  09d8				  -	      sta	1744+126
    703  09d8				  -	      lda	noteNumArray+2
    704  09d8				  -	      sta	1744+127
    705  09d8				  -	      lda	noteNumArray+3
    706  09d8				  -	      sta	1744+128
    707  09d8				  -
    708  09d8				  -	      lda	noteNumArray+4
    709  09d8				  -	      sta	1744+129
    710  09d8				  -	      lda	noteNumArray+5
    711  09d8				  -	      sta	1744+130
    712  09d8				  -	      lda	noteNumArray+6
    713  09d8				  -	      sta	1744+131
    714  09d8				  -	      lda	noteNumArray+7
    715  09d8				  -	      sta	1744+132
    716  09d8					      ENDIF
    717  09d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    718  09d8
    719  09d8							; get next MIDI byte
    720  09d8				   check
    721  09d8					      IF	ENABLE_MIDI_COMMANDS=1
    722  09d8		       20 16 3a 	      jsr	midiRead	; Midi byte will be in A and Y
    723  09db					      ENDIF
    724  09db		       d0 03		      bne	continueReading
    725  09dd		       4c 2a 0c 	      jmp	endMIDI
    726  09e0				   continueReading
    727  09e0
    728  09e0
    729  09e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    730  09e0							; DEBUG - SHOW MIDI DATA
    731  09e0				  -	      IF	DEBUG_DISPLAY=1
    732  09e0				  -	      inc	1824+81
    733  09e0				  -	      sta	temp
    734  09e0				  -	      ldx	#34
    735  09e0				  -	      ldy	debugOffset
    736  09e0				  -	      iny
    737  09e0				  -	      iny
    738  09e0				  -	      iny
    739  09e0				  -	      iny
    740  09e0				  -	      iny
    741  09e0				  -	      iny
    742  09e0				  -	      jsr	displayHex
    743  09e0				  -	      ldy	debugOffset
    744  09e0				  -	      iny
    745  09e0				  -	      tya
    746  09e0				  -	      and	#$0F
    747  09e0				  -	      sta	debugOffset
    748  09e0				  -	      adc	#5
    749  09e0				  -	      tay
    750  09e0				  -	      lda	temp
    751  09e0				  -	      ldy	temp
    752  09e0					      ENDIF
    753  09e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    754  09e0
    755  09e0							; If bit 7 isn't set, then it's a running mode byte...
    756  09e0		       10 68		      bpl	runningModeByte
    757  09e2		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
    758  09e5		       a8		      tay
    759  09e6		       29 f0		      and	#$F0
    760  09e8		       c9 f0		      cmp	#$F0
    761  09ea		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
    762  09ec							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    763  09ec
    764  09ec							;tya
    765  09ec
    766  09ec							; If bit 7 isn't set, then it's a running mode byte...
    767  09ec							;bpl runningModeByte
    768  09ec
    769  09ec
    770  09ec							;tay
    771  09ec							;and #$F0
    772  09ec							;cmp #$F0
    773  09ec							;beq processSysex ;Skip saving status if it's sysex
    774  09ec							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
    775  09ec							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
    776  09ec					      IF	ENABLE_MIDI_COMMANDS=1
    777  09ec		       20 1d 3a 	      jsr	midiReadWait	; Midi byte will be in A and Y
    778  09ef					      ENDIF
    779  09ef		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
    780  09f2		       ad 7d 70 	      lda	savedMidiStatus
    781  09f5		       20 62 0a 	      jsr	processMidiMessage	; handle the rest of the message...
    782  09f8		       4c d8 09 	      jmp	check	; End of loop - - -
    783  09fb
    784  09fb				   processSysex
    785  09fb		       98		      tya		; Get systex byte
    786  09fc		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    787  09fe		       d0 0a		      bne	checkF1
    788  0a00				   sysexReadingLoop
    789  0a00		       20 1d 3a 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    790  0a03		       c9 f7		      cmp	#$F7
    791  0a05		       d0 f9		      bne	sysexReadingLoop
    792  0a07		       4c d8 09 	      jmp	check
    793  0a0a							; - - - - - -
    794  0a0a				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    795  0a0a		       c9 f1		      cmp	#$F1
    796  0a0c		       d0 06		      bne	checkF2
    797  0a0e		       20 1d 3a 	      jsr	midiReadWait
    798  0a11		       4c d8 09 	      jmp	check
    799  0a14							; - - - - - -
    800  0a14				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    801  0a14		       c9 f2		      cmp	#$F2
    802  0a16		       d0 09		      bne	checkF3
    803  0a18					      IF	ENABLE_MIDI_COMMANDS=1
    804  0a18		       20 1d 3a 	      jsr	midiReadWait
    805  0a1b		       20 1d 3a 	      jsr	midiReadWait
    806  0a1e					      ENDIF
    807  0a1e		       4c d8 09 	      jmp	check
    808  0a21							; - - - - - -
    809  0a21				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    810  0a21		       c9 f3		      cmp	#$F3
    811  0a23		       d0 09		      bne	checkF8
    812  0a25		       20 1d 3a 	      jsr	midiReadWait
    813  0a28		       4c d8 09 	      jmp	check
    814  0a2b							; - - - - - -
    815  0a2b							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    816  0a2b		       4c d8 09 	      jmp	check
    817  0a2e
    818  0a2e
    819  0a2e				   checkF8
    820  0a2e		       c9 f8		      cmp	#$F8
    821  0a30		       d0 03		      bne	checkFA
    822  0a32							; NO EXTRA BYTES TO READ
    823  0a32		       4c d8 09 	      jmp	check
    824  0a35							; - - - - - -
    825  0a35				   checkFA
    826  0a35		       c9 fa		      cmp	#$FA
    827  0a37		       d0 03		      bne	checkFC
    828  0a39							; NO EXTRA BYTES TO READ
    829  0a39		       4c d8 09 	      jmp	check
    830  0a3c							; - - - - - -
    831  0a3c				   checkFC
    832  0a3c		       c9 fc		      cmp	#$FC
    833  0a3e		       d0 03		      bne	checkFF
    834  0a40							; NO EXTRA BYTES TO READ
    835  0a40		       4c d8 09 	      jmp	check
    836  0a43							; - - - - - -
    837  0a43				   checkFF
    838  0a43		       c9 ff		      cmp	#$FF
    839  0a45		       d0 00		      bne	endSysex
    840  0a47							;---- END SYSTEM/CLOCK ----
    841  0a47				   endSysex
    842  0a47		       4c d8 09 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    843  0a4a
    844  0a4a
    845  0a4a				   runningModeByte
    846  0a4a		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    847  0a4d		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    848  0a50		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    849  0a52		       c9 f0		      cmp	#$F0
    850  0a54		       d0 03		      bne	normalRunningMode
    851  0a56							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    852  0a56							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    853  0a56		       4c d8 09 	      jmp	check
    854  0a59							;-----------------------
    855  0a59							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    856  0a59							;jsr midiReadWait ; Now need to get a new "status byte"
    857  0a59							;jmp runningModeByte
    858  0a59
    859  0a59				   normalRunningMode
    860  0a59		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    861  0a5c		       20 62 0a 	      jsr	processMidiMessage
    862  0a5f		       4c d8 09 	      jmp	check
    863  0a62
    864  0a62				   processMidiMessage
    865  0a62		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    866  0a63
    867  0a63							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    868  0a63		       ad f7 70 	      lda	midiMode
    869  0a66		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    870  0a68		       98		      tya
    871  0a69		       29 0f		      and	#$0F
    872  0a6b		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    873  0a6e		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    874  0a70
    875  0a70							;---------------------------------------------
    876  0a70							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    877  0a70							;---------------------------------------------
    878  0a70		       98		      tya
    879  0a71		       09 40		      ora	#%01000000
    880  0a73		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    881  0a75		       98		      tya
    882  0a76		       09 20		      ora	#%00100000
    883  0a78		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    884  0a7a
    885  0a7a				   twoParameters
    886  0a7a		       20 1d 3a 	      jsr	midiReadWait
    887  0a7d				   oneParameter
    888  0a7d							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    889  0a7d		       60		      rts
    890  0a7e							;jmp check
    891  0a7e
    892  0a7e
    893  0a7e				   endChannelCheck
    894  0a7e							; Status byte should be in A
    895  0a7e							; Ignoring channel for now
    896  0a7e							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    897  0a7e		       98		      tya
    898  0a7f
    899  0a7f
    900  0a7f		       29 f0		      and	#$F0
    901  0a81		       c9 80		      cmp	#$80	; Note off
    902  0a83		       d0 03		      bne	notNoteOff
    903  0a85		       4c f7 0b 	      jmp	noteOff
    904  0a88				   notNoteOff
    905  0a88		       c9 90		      cmp	#$90	; Note on
    906  0a8a		       d0 03		      bne	notNoteOn
    907  0a8c		       4c c1 0b 	      jmp	noteOn
    908  0a8f				   notNoteOn
    909  0a8f		       c9 e0		      cmp	#$E0	; Pitch bend
    910  0a91		       f0 3a		      beq	pitchBend
    911  0a93		       c9 b0		      cmp	#$B0	; Control change
    912  0a95		       d0 03		      bne	notControlChange
    913  0a97		       4c ed 0a 	      jmp	controlChange
    914  0a9a				   notControlChange
    915  0a9a		       c9 d0		      cmp	#$D0	; Channel pressure
    916  0a9c		       f0 2b		      beq	channelPressure
    917  0a9e		       c9 a0		      cmp	#$A0	; Key pressure
    918  0aa0		       f0 0f		      beq	keyPressure
    919  0aa2		       c9 c0		      cmp	#$C0	; Patch change
    920  0aa4		       f0 12		      beq	patchChange
    921  0aa6							;cmp #$F0 ; Sysex
    922  0aa6							;beq sysex
    923  0aa6		       8d e4 07 	      sta	2020
    924  0aa9		       a9 02		      lda	#2
    925  0aab		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    926  0aae		       4c 2a 0c 	      jmp	endMIDI
    927  0ab1
    928  0ab1
    929  0ab1				   keyPressure
    930  0ab1				  -	      IF	DEBUG_DISPLAY=1
    931  0ab1				  -	      inc	1824+86
    932  0ab1					      ENDIF
    933  0ab1		       ad 7e 70 	      lda	firstDataByte
    934  0ab4					      IF	ENABLE_MIDI_COMMANDS=1
    935  0ab4		       20 1d 3a 	      jsr	midiReadWait
    936  0ab7					      ENDIF
    937  0ab7		       60		      rts
    938  0ab8
    939  0ab8
    940  0ab8
    941  0ab8							;REL_SHORT equ $E0
    942  0ab8							;REL_MED	equ $E9
    943  0ab8							;REL_LONG equ $EE
    944  0ab8
    945  0ab8							;ATK_SHORT equ $00
    946  0ab8							;ATK_MED	equ $90
    947  0ab8							;ATK_LONG equ $E0
    948  0ab8
    949  0ab8				   patchChange
    950  0ab8				  -	      IF	DEBUG_DISPLAY=1
    951  0ab8				  -	      inc	1824+88
    952  0ab8					      ENDIF
    953  0ab8		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    954  0abb		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    955  0abd		       a0 1c		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    956  0abf				   skipPatchDefault1
    957  0abf		       c0 1c		      cpy	#MAX_PATCH_NUMBER
    958  0ac1		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    959  0ac3		       a0 1c		      ldy	#MAX_PATCH_NUMBER
    960  0ac5				   skipPatchDefault2
    961  0ac5		       20 71 1b 	      jsr	setPatch
    962  0ac8		       60		      rts
    963  0ac9
    964  0ac9				   channelPressure
    965  0ac9				  -	      IF	DEBUG_DISPLAY=1
    966  0ac9				  -	      inc	1824+89
    967  0ac9					      ENDIF
    968  0ac9		       ad 7e 70 	      lda	firstDataByte
    969  0acc		       60		      rts
    970  0acd
    971  0acd				   pitchBend
    972  0acd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    973  0acd							; DEBUG - SHOW MIDI DATA
    974  0acd				  -	      IF	DEBUG_DISPLAY=1
    975  0acd				  -			;sta temp
    976  0acd				  -	      ldx	#25
    977  0acd				  -	      ldy	#22
    978  0acd				  -	      jsr	displayHex
    979  0acd				  -	      lda	temp
    980  0acd				  -	      ldy	temp
    981  0acd				  -	      inc	1824+90
    982  0acd					      ENDIF
    983  0acd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    984  0acd
    985  0acd		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    986  0ad0		       4a		      lsr
    987  0ad1		       4a		      lsr
    988  0ad2		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    989  0ad5		       38		      sec
    990  0ad6		       e9 50		      sbc	#$50	; Center on zero
    991  0ad8		       30 09		      bmi	negPitch	; If negative...
    992  0ada		       c9 46		      cmp	#70	; Max value
    993  0adc		       30 0b		      bmi	setTuningValue
    994  0ade		       a9 46		      lda	#70	; Over max, so set to max value (50)
    995  0ae0		       4c e9 0a 	      jmp	setTuningValue
    996  0ae3
    997  0ae3		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
    998  0ae3				   negPitch
    999  0ae3		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
   1000  0ae5		       10 02		      bpl	setTuningValue
   1001  0ae7		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
   1002  0ae9
   1003  0ae9				   setTuningValue
   1004  0ae9		       8d f0 70 	      sta	midiTuning
   1005  0aec
   1006  0aec
   1007  0aec							;	lda firstDataByte
   1008  0aec
   1009  0aec							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1010  0aec							; DEBUG - SHOW MIDI DATA
   1011  0aec				  -	      IF	DEBUG_DISPLAY=1
   1012  0aec				  -	      sta	temp
   1013  0aec				  -	      ldx	#25
   1014  0aec				  -	      ldy	#23
   1015  0aec				  -	      jsr	displayHex
   1016  0aec				  -	      lda	temp
   1017  0aec				  -	      ldy	temp
   1018  0aec					      ENDIF
   1019  0aec							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1020  0aec
   1021  0aec		       60		      rts
   1022  0aed
   1023  0aed
   1024  0aed				   controlChange
   1025  0aed				  -	      IF	DEBUG_DISPLAY=1
   1026  0aed				  -	      inc	1824+87
   1027  0aed					      ENDIF
   1028  0aed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1029  0aed							; DEBUG - SHOW MIDI DATA
   1030  0aed				  -	      IF	DEBUG_DISPLAY=1
   1031  0aed				  -	      sta	temp
   1032  0aed				  -	      lda	firstDataByte
   1033  0aed				  -	      ldy	#21
   1034  0aed				  -	      ldx	#17
   1035  0aed				  -	      jsr	displayHex
   1036  0aed				  -	      lda	temp
   1037  0aed				  -	      ldy	temp
   1038  0aed					      ENDIF
   1039  0aed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1040  0aed
   1041  0aed					      IF	ENABLE_MIDI_COMMANDS=1
   1042  0aed		       20 1d 3a 	      jsr	midiReadWait	; Read controller value
   1043  0af0					      ENDIF
   1044  0af0		       a8		      tay
   1045  0af1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1046  0af1							; DEBUG - SHOW MIDI DATA
   1047  0af1				  -	      IF	DEBUG_DISPLAY=1
   1048  0af1				  -	      sta	temp
   1049  0af1				  -			;lda firstDataByte
   1050  0af1				  -	      ldy	#22
   1051  0af1				  -	      ldx	#17
   1052  0af1				  -	      jsr	displayHex
   1053  0af1				  -	      lda	temp
   1054  0af1				  -	      ldy	temp
   1055  0af1					      ENDIF
   1056  0af1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1057  0af1		       ad 7e 70 	      lda	firstDataByte	; Get controller number
   1058  0af4				  -	      IF	OFFSET_CONTROLLERS=1
   1059  0af4				  -	      sec
   1060  0af4				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
   1061  0af4					      ENDIF
   1062  0af4							;and #$0F ; Repeat every 16 controllers
   1063  0af4		       29 ef		      and	#%11101111	; Repeat every 16 controllers
   1064  0af6		       d0 0a		      bne	notResonance
   1065  0af8							; Resonance
   1066  0af8		       98		      tya
   1067  0af9		       29 f0		      and	#$F0
   1068  0afb		       8d 97 70 	      sta	resonance
   1069  0afe		       20 6d 18 	      jsr	setResonance
   1070  0b01		       60		      rts
   1071  0b02				   notResonance
   1072  0b02		       c9 01		      cmp	#1
   1073  0b04		       d0 07		      bne	notModWheel
   1074  0b06							;Mod wheel
   1075  0b06		       98		      tya
   1076  0b07		       0a		      asl
   1077  0b08		       a8		      tay
   1078  0b09		       8d 9d 70 	      sta	filterSetValue
   1079  0b0c							;jsr ksetFilter
   1080  0b0c		       60		      rts
   1081  0b0d				   notModWheel
   1082  0b0d		       c9 02		      cmp	#2
   1083  0b0f		       d0 0e		      bne	notMode
   1084  0b11							; Sound Mode
   1085  0b11		       98		      tya
   1086  0b12		       4a		      lsr
   1087  0b13		       4a		      lsr
   1088  0b14		       4a		      lsr
   1089  0b15		       29 0f		      and	#$0F
   1090  0b17		       aa		      tax
   1091  0b18		       bd fa 26 	      lda	modeList,x
   1092  0b1b		       20 1e 1b 	      jsr	ksetMode
   1093  0b1e		       60		      rts
   1094  0b1f				   notMode
   1095  0b1f		       c9 03		      cmp	#3
   1096  0b21		       d0 0b		      bne	notFX
   1097  0b23							; FX
   1098  0b23		       98		      tya
   1099  0b24		       4a		      lsr
   1100  0b25		       4a		      lsr
   1101  0b26		       4a		      lsr
   1102  0b27		       4a		      lsr
   1103  0b28		       29 07		      and	#$07
   1104  0b2a		       20 f6 1a 	      jsr	ksetFX
   1105  0b2d		       60		      rts
   1106  0b2e				   notFX
   1107  0b2e		       c9 04		      cmp	#4
   1108  0b30		       d0 08		      bne	notAttack
   1109  0b32							; Attack
   1110  0b32		       98		      tya
   1111  0b33		       0a		      asl
   1112  0b34		       29 f0		      and	#$F0
   1113  0b36		       20 39 1a 	      jsr	setAttack
   1114  0b39		       60		      rts
   1115  0b3a				   notAttack
   1116  0b3a		       c9 05		      cmp	#5
   1117  0b3c		       d0 0c		      bne	notRelease
   1118  0b3e							; Release
   1119  0b3e		       98		      tya
   1120  0b3f		       4a		      lsr
   1121  0b40		       4a		      lsr
   1122  0b41		       4a		      lsr
   1123  0b42		       29 0f		      and	#$0F
   1124  0b44		       09 f0		      ora	#$F0
   1125  0b46		       20 9a 19 	      jsr	setRelease
   1126  0b49		       60		      rts
   1127  0b4a				   notRelease
   1128  0b4a		       c9 06		      cmp	#6
   1129  0b4c		       d0 08		      bne	notPW
   1130  0b4e							; Pulse Width
   1131  0b4e		       98		      tya
   1132  0b4f		       0a		      asl
   1133  0b50		       09 10		      ora	#%10000
   1134  0b52		       20 92 14 	      jsr	setPulseWidth
   1135  0b55		       60		      rts
   1136  0b56				   notPW
   1137  0b56		       c9 07		      cmp	#7
   1138  0b58		       d0 08		      bne	notVolume
   1139  0b5a							; Volume
   1140  0b5a		       98		      tya
   1141  0b5b		       4a		      lsr
   1142  0b5c		       4a		      lsr
   1143  0b5d		       4a		      lsr
   1144  0b5e		       20 6c 1a 	      jsr	ksetVolume
   1145  0b61		       60		      rts
   1146  0b62				   notVolume
   1147  0b62		       c9 08		      cmp	#8
   1148  0b64		       d0 0b		      bne	notTremolo
   1149  0b66							; Tremolo level
   1150  0b66		       98		      tya
   1151  0b67		       4a		      lsr
   1152  0b68		       4a		      lsr
   1153  0b69		       4a		      lsr
   1154  0b6a		       4a		      lsr
   1155  0b6b		       29 03		      and	#$03
   1156  0b6d		       20 68 19 	      jsr	setLFODepth
   1157  0b70		       60		      rts
   1158  0b71				   notTremolo
   1159  0b71		       c9 09		      cmp	#9
   1160  0b73		       d0 0b		      bne	notTremRate
   1161  0b75							; Tremolo level
   1162  0b75		       98		      tya
   1163  0b76		       4a		      lsr
   1164  0b77		       4a		      lsr
   1165  0b78		       4a		      lsr
   1166  0b79		       4a		      lsr
   1167  0b7a		       29 03		      and	#$03
   1168  0b7c		       20 7e 19 	      jsr	setLFORate
   1169  0b7f		       60		      rts
   1170  0b80				   notTremRate
   1171  0b80		       c9 0d		      cmp	#13
   1172  0b82		       d0 14		      bne	notWaveform
   1173  0b84							; Waveform (all voices)
   1174  0b84		       98		      tya
   1175  0b85		       4a		      lsr
   1176  0b86		       4a		      lsr
   1177  0b87		       4a		      lsr
   1178  0b88		       29 03		      and	#$03
   1179  0b8a		       aa		      tax
   1180  0b8b		       bd bd 0b 	      lda	waveForms,x
   1181  0b8e		       8d 37 70 	      sta	WaveType2
   1182  0b91		       8d 3e 70 	      sta	WaveType3
   1183  0b94		       8d 30 70 	      sta	WaveType
   1184  0b97		       60		      rts
   1185  0b98				   notWaveform
   1186  0b98		       c9 0e		      cmp	#14
   1187  0b9a		       d0 0e		      bne	notWaveform2
   1188  0b9c							; Waveform (voice 2 only)
   1189  0b9c		       98		      tya
   1190  0b9d		       4a		      lsr
   1191  0b9e		       4a		      lsr
   1192  0b9f		       4a		      lsr
   1193  0ba0		       29 03		      and	#$03
   1194  0ba2		       aa		      tax
   1195  0ba3		       bd bd 0b 	      lda	waveForms,x
   1196  0ba6		       8d 37 70 	      sta	WaveType2
   1197  0ba9		       60		      rts
   1198  0baa				   notWaveform2
   1199  0baa		       c9 0f		      cmp	#15
   1200  0bac		       d0 0e		      bne	notWaveform3
   1201  0bae							; Waveform (voice 3 only)
   1202  0bae		       98		      tya
   1203  0baf		       4a		      lsr
   1204  0bb0		       4a		      lsr
   1205  0bb1		       4a		      lsr
   1206  0bb2		       29 03		      and	#$03
   1207  0bb4		       aa		      tax
   1208  0bb5		       bd bd 0b 	      lda	waveForms,x
   1209  0bb8		       8d 3e 70 	      sta	WaveType3
   1210  0bbb		       60		      rts
   1211  0bbc				   notWaveform3
   1212  0bbc		       60		      rts
   1213  0bbd
   1214  0bbd				   waveForms
   1215  0bbd		       10 20 40 80	      byte.b	$10,$20,$40,$80
   1216  0bc1							;-  -	-  -  -  -  -  -
   1217  0bc1
   1218  0bc1							;IF ENABLE_MIDI_COMMANDS=1
   1219  0bc1					      ENDIF
   1220  0bc1
   1221  0bc1							; note is in Y
   1222  0bc1				   noteOn
   1223  0bc1
   1224  0bc1		       8d 0c 70 	      sta	temp
   1225  0bc4					      IF	ENABLE_MIDI_COMMANDS=1
   1226  0bc4		       20 1d 3a 	      jsr	midiReadWait	; Read velocity byte
   1227  0bc7					      ENDIF
   1228  0bc7		       8d 7f 70 	      sta	tempVelocity
   1229  0bca		       d0 09		      bne	almostNoteOn
   1230  0bcc							; Zero-velocity, so it's really a note-off...
   1231  0bcc							;inc 53280
   1232  0bcc		       ad 7e 70 	      lda	firstDataByte
   1233  0bcf		       38		      sec
   1234  0bd0		       e9 0c		      sbc	#12	; Down one octave
   1235  0bd2		       4c 09 0c 	      jmp	doNoteOff
   1236  0bd5				   almostNoteOn
   1237  0bd5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1238  0bd5							; DEBUG - SHOW MIDI DATA
   1239  0bd5				  -	      IF	DEBUG_DISPLAY=1
   1240  0bd5				  -	      sta	temp
   1241  0bd5				  -	      lda	noteOnCount
   1242  0bd5				  -	      and	#1
   1243  0bd5				  -	      asl
   1244  0bd5				  -	      asl
   1245  0bd5				  -	      asl
   1246  0bd5				  -	      ora	#$F4
   1247  0bd5				  -	      sta	hexDispColor
   1248  0bd5				  -	      lda	noteOnCount
   1249  0bd5				  -	      and	#%1111
   1250  0bd5				  -	      asl
   1251  0bd5				  -	      tax
   1252  0bd5				  -			;lda temp
   1253  0bd5				  -	      lda	savedMidiStatus
   1254  0bd5				  -	      ldy	#6
   1255  0bd5				  -	      jsr	displayHex
   1256  0bd5				  -	      lda	temp
   1257  0bd5				  -	      ldy	temp
   1258  0bd5				  -	      inc	1824+83	; DEBUG INDICATOR
   1259  0bd5					      ENDIF
   1260  0bd5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1261  0bd5		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
   1262  0bd8		       38		      sec
   1263  0bd9		       e9 0c		      sbc	#12	; Down one octave
   1264  0bdb				   doNoteOn
   1265  0bdb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1266  0bdb							; DEBUG - SHOW MIDI DATA
   1267  0bdb				  -	      IF	DEBUG_DISPLAY=1
   1268  0bdb				  -	      sta	temp
   1269  0bdb				  -	      lda	noteOnCount
   1270  0bdb				  -	      and	#%1111
   1271  0bdb				  -	      asl
   1272  0bdb				  -	      tax
   1273  0bdb				  -	      lda	temp
   1274  0bdb				  -	      ldy	#7
   1275  0bdb				  -	      jsr	displayHex
   1276  0bdb				  -	      lda	temp
   1277  0bdb				  -	      ldy	temp
   1278  0bdb					      ENDIF
   1279  0bdb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1280  0bdb
   1281  0bdb							; Find empty note slot...
   1282  0bdb		       ae 80 70 	      ldx	bufferSize	;3
   1283  0bde		       a8		      tay
   1284  0bdf							;ldx #3 ; DEBUG!
   1285  0bdf		       ca		      dex
   1286  0be0				   noteOnLoop
   1287  0be0		       bd a0 70 	      lda	noteNumArray,x
   1288  0be3		       c9 ff		      cmp	#255
   1289  0be5		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
   1290  0be7		       ca		      dex
   1291  0be8		       10 f6		      bpl	noteOnLoop
   1292  0bea		       a2 00		      ldx	#0
   1293  0bec				   quitNoteOnLoop
   1294  0bec
   1295  0bec		       98		      tya
   1296  0bed		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
   1297  0bf0
   1298  0bf0							;jsr midiReadWait ; Read velocity byte
   1299  0bf0		       ad 7f 70 	      lda	tempVelocity
   1300  0bf3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1301  0bf3							; DEBUG - SHOW MIDI DATA
   1302  0bf3				  -	      IF	DEBUG_DISPLAY=1
   1303  0bf3				  -	      sta	temp
   1304  0bf3				  -	      lda	noteOnCount
   1305  0bf3				  -	      and	#%1111
   1306  0bf3				  -	      asl
   1307  0bf3				  -	      tax
   1308  0bf3				  -	      lda	temp
   1309  0bf3				  -	      ldy	#8
   1310  0bf3				  -	      jsr	displayHex
   1311  0bf3				  -	      lda	temp
   1312  0bf3				  -	      ldy	temp
   1313  0bf3					      ENDIF
   1314  0bf3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1315  0bf3							;/----------------------
   1316  0bf3		       ee 8c 70 	      inc	noteOnCount
   1317  0bf6		       60		      rts
   1318  0bf7
   1319  0bf7				   noteOff
   1320  0bf7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1321  0bf7							; DEBUG - SHOW MIDI DATA
   1322  0bf7				  -	      IF	DEBUG_DISPLAY=1
   1323  0bf7				  -	      sta	temp
   1324  0bf7				  -	      lda	noteOffCount
   1325  0bf7				  -	      and	#1
   1326  0bf7				  -			;eor #1
   1327  0bf7				  -	      asl
   1328  0bf7				  -	      asl
   1329  0bf7				  -	      asl
   1330  0bf7				  -	      ora	#$F4
   1331  0bf7				  -	      sta	hexDispColor
   1332  0bf7				  -	      lda	noteOffCount
   1333  0bf7				  -	      and	#%1111
   1334  0bf7				  -	      asl
   1335  0bf7				  -	      tax
   1336  0bf7				  -	      lda	temp
   1337  0bf7				  -	      ldy	#10
   1338  0bf7				  -	      jsr	displayHex
   1339  0bf7				  -	      lda	temp
   1340  0bf7				  -	      ldy	temp
   1341  0bf7					      ENDIF
   1342  0bf7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1343  0bf7
   1344  0bf7							;jmp endMIDI
   1345  0bf7
   1346  0bf7		       8d 0c 70 	      sta	temp
   1347  0bfa					      IF	ENABLE_MIDI_COMMANDS=1
   1348  0bfa		       20 1d 3a 	      jsr	midiReadWait	; Read velocity byte
   1349  0bfd					      ENDIF
   1350  0bfd		       8d 7f 70 	      sta	tempVelocity
   1351  0c00		       ad 0c 70 	      lda	temp
   1352  0c03
   1353  0c03		       ad 7e 70 	      lda	firstDataByte
   1354  0c06		       38		      sec
   1355  0c07		       e9 0c		      sbc	#12	; Down one octave
   1356  0c09							;jsr midiReadWait ; Note number
   1357  0c09
   1358  0c09				   doNoteOff
   1359  0c09							; Find matching note number to turn note off...
   1360  0c09							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1361  0c09							; DEBUG - SHOW MIDI DATA
   1362  0c09				  -	      IF	DEBUG_DISPLAY=1
   1363  0c09				  -	      sta	temp
   1364  0c09				  -	      lda	noteOffCount
   1365  0c09				  -	      and	#%1111
   1366  0c09				  -	      asl
   1367  0c09				  -	      tax
   1368  0c09				  -	      lda	temp
   1369  0c09				  -	      ldy	#11
   1370  0c09				  -	      jsr	displayHex
   1371  0c09				  -	      lda	temp
   1372  0c09				  -	      ldy	temp
   1373  0c09					      ENDIF
   1374  0c09							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1375  0c09
   1376  0c09		       ae 80 70 	      ldx	bufferSize	;3
   1377  0c0c		       8d 0c 70 	      sta	temp
   1378  0c0f							;ldx #3 ; DEBUG!
   1379  0c0f		       ca		      dex
   1380  0c10				   killNoteLoop
   1381  0c10		       bd a0 70 	      lda	noteNumArray,x
   1382  0c13		       cd 0c 70 	      cmp	temp	; Note match?
   1383  0c16		       f0 06		      beq	foundNote	; Then go turn off note
   1384  0c18		       ca		      dex		; next slot
   1385  0c19		       10 f5		      bpl	killNoteLoop	; loop through all slots
   1386  0c1b							;Not found, so ignore
   1387  0c1b		       4c 23 0c 	      jmp	endNoteOff
   1388  0c1e
   1389  0c1e				   foundNote
   1390  0c1e		       a9 ff		      lda	#255
   1391  0c20		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
   1392  0c23
   1393  0c23				   endNoteOff
   1394  0c23		       ad 7f 70 	      lda	tempVelocity
   1395  0c26							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1396  0c26							; DEBUG - SHOW MIDI DATA
   1397  0c26				  -	      IF	DEBUG_DISPLAY=1
   1398  0c26				  -	      sta	temp
   1399  0c26				  -	      lda	noteOffCount
   1400  0c26				  -	      and	#%1111
   1401  0c26				  -	      asl
   1402  0c26				  -	      tax
   1403  0c26				  -	      lda	temp
   1404  0c26				  -	      ldy	#12
   1405  0c26				  -	      jsr	displayHex
   1406  0c26				  -	      lda	temp
   1407  0c26				  -	      ldy	temp
   1408  0c26					      ENDIF
   1409  0c26							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1410  0c26							;/----------------------
   1411  0c26		       ee 8b 70 	      inc	noteOffCount
   1412  0c29		       60		      rts
   1413  0c2a
   1414  0c2a
   1415  0c2a				   endMIDI
   1416  0c2a							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
   1417  0c2a							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1418  0c2a							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1419  0c2a							; FILL EMPTY PLAYABLE NOTES WITH ANY
   1420  0c2a							; NON-PLAYING NOTES IN THE BUFFER
   1421  0c2a							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1422  0c2a							;jsr doSort
   1423  0c2a
   1424  0c2a		       ae 84 70 	      ldx	polyphony
   1425  0c2d		       ca		      dex
   1426  0c2e							;ldx #2 ; DEBUG
   1427  0c2e				   noteScan
   1428  0c2e		       bd a0 70 	      lda	noteNumArray,x
   1429  0c31		       c9 ff		      cmp	#255	; Is note off?
   1430  0c33		       f0 06		      beq	searchCopyNote
   1431  0c35				   contNoteScan
   1432  0c35		       ca		      dex
   1433  0c36		       10 f6		      bpl	noteScan	; Loop...
   1434  0c38		       4c 57 0c 	      jmp	quitNoteScan	; Done, jump to end
   1435  0c3b
   1436  0c3b				   searchCopyNote
   1437  0c3b							;ldy bufferSize
   1438  0c3b							;dey
   1439  0c3b							;ldy #3
   1440  0c3b		       ac 84 70 	      ldy	polyphony
   1441  0c3e				   copyNoteLoop
   1442  0c3e		       b9 a0 70 	      lda	noteNumArray,y
   1443  0c41		       c9 ff		      cmp	#255
   1444  0c43		       d0 07		      bne	replaceNote
   1445  0c45		       c8		      iny
   1446  0c46		       c0 08		      cpy	#NOTE_BUF_SIZE
   1447  0c48		       f0 eb		      beq	contNoteScan
   1448  0c4a		       d0 f2		      bne	copyNoteLoop
   1449  0c4c
   1450  0c4c				   replaceNote
   1451  0c4c		       9d a0 70 	      sta	noteNumArray,x
   1452  0c4f		       a9 ff		      lda	#255
   1453  0c51		       99 a0 70 	      sta	noteNumArray,y
   1454  0c54		       4c 35 0c 	      jmp	contNoteScan
   1455  0c57
   1456  0c57				   quitNoteScan
   1457  0c57		       60		      rts
   1458  0c58							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1459  0c58
   1460  0c58
   1461  0c58
   1462  0c58							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1463  0c58							; PROCESS BENDER
   1464  0c58							;=- =- =- =- =- =- =- =- =- =- =- =- -=
   1465  0c58				   processBender
   1466  0c58							; Update space-bar pitch bend...
   1467  0c58		       ad 83 70 	      lda	benderAutoreset
   1468  0c5b		       f0 13		      beq	endBenderReset
   1469  0c5d		       ad 40 70 	      lda	bender
   1470  0c60		       d0 08		      bne	doBenderReset
   1471  0c62		       a9 00		      lda	#0
   1472  0c64		       8d 83 70 	      sta	benderAutoreset
   1473  0c67		       4c 70 0c 	      jmp	endBenderReset
   1474  0c6a				   doBenderReset
   1475  0c6a		       ce 40 70 	      dec	bender
   1476  0c6d		       ce 40 70 	      dec	bender
   1477  0c70				   endBenderReset
   1478  0c70
   1479  0c70
   1480  0c70							; Insert bender into LFO offset...
   1481  0c70		       ad 25 70 	      lda	shiftL1
   1482  0c73		       38		      sec
   1483  0c74		       ed 40 70 	      sbc	bender
   1484  0c77		       8d 25 70 	      sta	shiftL1
   1485  0c7a		       ad 26 70 	      lda	shiftH1
   1486  0c7d		       e9 00		      sbc	#0
   1487  0c7f		       8d 26 70 	      sta	shiftH1
   1488  0c82
   1489  0c82		       ad 27 70 	      lda	shiftL2
   1490  0c85		       38		      sec
   1491  0c86		       ed 40 70 	      sbc	bender
   1492  0c89		       8d 27 70 	      sta	shiftL2
   1493  0c8c		       ad 28 70 	      lda	shiftH2
   1494  0c8f		       e9 00		      sbc	#0
   1495  0c91		       8d 28 70 	      sta	shiftH2
   1496  0c94		       60		      rts
   1497  0c95
   1498  0c95							;DEBUG -- disable LFO/bender
   1499  0c95							;	lda #0
   1500  0c95							;	sta shiftL1
   1501  0c95							;	sta shiftL2
   1502  0c95							;	sta shiftH1
   1503  0c95							;	sta shiftH2
   1504  0c95
   1505  0c95							;----------------------------
   1506  0c95
   1507  0c95				   processSoundDriver
   1508  0c95							; determine whether to use portamento player
   1509  0c95							; or regular player...
   1510  0c95		       ad 1d 70 	      lda	soundMode
   1511  0c98		       f0 28		      beq	polyMode
   1512  0c9a		       29 10		      and	#PORT_MASK
   1513  0c9c		       f0 03		      beq	nextSoundModeCheck1
   1514  0c9e		       4c 43 11 	      jmp	playPort
   1515  0ca1				   nextSoundModeCheck1
   1516  0ca1		       ad 1d 70 	      lda	soundMode
   1517  0ca4		       29 20		      and	#MONO_MASK
   1518  0ca6		       f0 03		      beq	nextSoundModeCheck2
   1519  0ca8		       4c e2 0c 	      jmp	playMono
   1520  0cab				   nextSoundModeCheck2
   1521  0cab		       ad 1d 70 	      lda	soundMode
   1522  0cae		       29 40		      and	#ARP_MASK
   1523  0cb0		       f0 03		      beq	nextSoundModeCheck3
   1524  0cb2		       4c 94 0d 	      jmp	playArp
   1525  0cb5				   nextSoundModeCheck3
   1526  0cb5		       ad 1d 70 	      lda	soundMode
   1527  0cb8		       29 08		      and	#CHAN6_MASK
   1528  0cba		       f0 03		      beq	nextSoundModeCheck4
   1529  0cbc		       4c 13 0e 	      jmp	play6Chan
   1530  0cbf				   nextSoundModeCheck4
   1531  0cbf		       4c 2f 0d 	      jmp	playFifths	; Otherwise, it's a 5ths mode
   1532  0cc2							;lda soundMode
   1533  0cc2							;cmp #MODE_5THS
   1534  0cc2							;bne endSoundMode
   1535  0cc2							;jmp playFifths
   1536  0cc2							;endSoundMode:
   1537  0cc2							;brk ; Shouldn't ever reach this point in code
   1538  0cc2
   1539  0cc2
   1540  0cc2							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1541  0cc2							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
   1542  0cc2							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1543  0cc2				   polyMode
   1544  0cc2		       a2 02		      ldx	#2
   1545  0cc4				   polyCopyLoop
   1546  0cc4		       bd a0 70 	      lda	noteNumArray,x
   1547  0cc7		       9d b0 70 	      sta	playNoteArray,x
   1548  0cca		       ca		      dex
   1549  0ccb		       10 f7		      bpl	polyCopyLoop
   1550  0ccd
   1551  0ccd		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
   1552  0cd0		       8d b3 70 	      sta	playNoteArray+3
   1553  0cd3		       ad a1 70 	      lda	noteNumArray+1
   1554  0cd6		       8d b4 70 	      sta	playNoteArray+4
   1555  0cd9		       ad a2 70 	      lda	noteNumArray+2
   1556  0cdc		       8d b5 70 	      sta	playNoteArray+5
   1557  0cdf
   1558  0cdf		       4c 39 10 	      jmp	sixVoicePlayer
   1559  0ce2
   1560  0ce2							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1561  0ce2							; MONO-STACK SOUND DRIVER
   1562  0ce2							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1563  0ce2				   playMono
   1564  0ce2		       ad a0 70 	      lda	noteNumArray
   1565  0ce5				   playMonoWithA
   1566  0ce5		       8d 0c 70 	      sta	temp
   1567  0ce8		       8d b0 70 	      sta	playNoteArray+0
   1568  0ceb		       c9 ff		      cmp	#255
   1569  0ced		       f0 25		      beq	monoMute
   1570  0cef		       ae 1d 70 	      ldx	soundMode
   1571  0cf2		       e0 21		      cpx	#MODE_MONO2
   1572  0cf4		       f0 03		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
   1573  0cf6							;-------------------------------------
   1574  0cf6		       18		      clc
   1575  0cf7		       69 0c		      adc	#12
   1576  0cf9				   noRaiseOctave
   1577  0cf9		       8d b1 70 	      sta	playNoteArray+1
   1578  0cfc							;lda noteNumArray
   1579  0cfc		       ad 0c 70 	      lda	temp
   1580  0cff		       ae 1d 70 	      ldx	soundMode
   1581  0d02		       e0 21		      cpx	#MODE_MONO2
   1582  0d04		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
   1583  0d06		       38		      sec
   1584  0d07		       e9 0c		      sbc	#12
   1585  0d09		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
   1586  0d0b		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
   1587  0d0e							;-------------------------------------
   1588  0d0e				   noDropOctave
   1589  0d0e		       8d b2 70 	      sta	playNoteArray+2
   1590  0d11		       4c 1a 0d 	      jmp	doubleToStereo
   1591  0d14				   monoMute
   1592  0d14		       8d b1 70 	      sta	playNoteArray+1
   1593  0d17		       8d b2 70 	      sta	playNoteArray+2
   1594  0d1a
   1595  0d1a				   doubleToStereo
   1596  0d1a		       ad b0 70 	      lda	playNoteArray+0
   1597  0d1d		       8d b3 70 	      sta	playNoteArray+3
   1598  0d20		       ad b1 70 	      lda	playNoteArray+1
   1599  0d23		       8d b4 70 	      sta	playNoteArray+4
   1600  0d26		       ad b2 70 	      lda	playNoteArray+2
   1601  0d29		       8d b5 70 	      sta	playNoteArray+5
   1602  0d2c
   1603  0d2c		       4c 39 10 	      jmp	sixVoicePlayer
   1604  0d2f
   1605  0d2f							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1606  0d2f							; 5THS SOUND DRIVER (DEFAULT)
   1607  0d2f							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1608  0d2f				   playFifths
   1609  0d2f							;jmp polyMode ; DEBUG!
   1610  0d2f		       20 05 21 	      jsr	doSort
   1611  0d32		       a2 02		      ldx	#2
   1612  0d34				   fifthsCopyLoop
   1613  0d34		       bd a0 70 	      lda	noteNumArray,x
   1614  0d37		       9d b0 70 	      sta	playNoteArray,x
   1615  0d3a		       ca		      dex
   1616  0d3b		       10 f7		      bpl	fifthsCopyLoop
   1617  0d3d							; Add 5th
   1618  0d3d		       ad b0 70 	      lda	playNoteArray
   1619  0d40		       c9 ff		      cmp	#255
   1620  0d42		       f0 26		      beq	end5ths
   1621  0d44		       ad b1 70 	      lda	playNoteArray+1
   1622  0d47		       c9 ff		      cmp	#255
   1623  0d49		       d0 0c		      bne	checkThird
   1624  0d4b							; Found a note and an empty slot, put 5th in second slot
   1625  0d4b		       ad b0 70 	      lda	playNoteArray
   1626  0d4e		       18		      clc
   1627  0d4f		       69 07		      adc	#7
   1628  0d51		       8d b1 70 	      sta	playNoteArray+1
   1629  0d54		       4c 6a 0d 	      jmp	end5ths
   1630  0d57
   1631  0d57				   checkThird
   1632  0d57		       ad b2 70 	      lda	playNoteArray+2
   1633  0d5a		       c9 ff		      cmp	#255
   1634  0d5c		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
   1635  0d5e							; Third slot is free, so put 5th is 3rd slot
   1636  0d5e		       ad b1 70 	      lda	playNoteArray+1
   1637  0d61		       18		      clc
   1638  0d62		       69 07		      adc	#7
   1639  0d64		       8d b2 70 	      sta	playNoteArray+2
   1640  0d67		       4c 6a 0d 	      jmp	end5ths
   1641  0d6a
   1642  0d6a				   end5ths
   1643  0d6a		       ad b0 70 	      lda	playNoteArray+0
   1644  0d6d		       8d b3 70 	      sta	playNoteArray+3
   1645  0d70		       ad b1 70 	      lda	playNoteArray+1
   1646  0d73		       8d b4 70 	      sta	playNoteArray+4
   1647  0d76		       ad b2 70 	      lda	playNoteArray+2
   1648  0d79		       8d b5 70 	      sta	playNoteArray+5
   1649  0d7c
   1650  0d7c		       ad 1d 70 	      lda	soundMode
   1651  0d7f		       c9 02		      cmp	#MODE_5PORT
   1652  0d81		       f0 03		      beq	playPort5th
   1653  0d83		       4c 39 10 	      jmp	sixVoicePlayer
   1654  0d86				   playPort5th
   1655  0d86		       4c 51 11 	      jmp	portPlayer
   1656  0d89
   1657  0d89
   1658  0d89
   1659  0d89
   1660  0d89				   arpSpeedTable
   1661  0d89		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
   1662  0d94
   1663  0d94							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1664  0d94							; ARP STEREO SOUND DRIVER
   1665  0d94							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1666  0d94				   playArp
   1667  0d94
   1668  0d94							; Figure out arp speed setting...
   1669  0d94		       ad 1d 70 	      lda	soundMode
   1670  0d97		       29 0f		      and	#$0F
   1671  0d99		       aa		      tax
   1672  0d9a		       bd 89 0d 	      lda	arpSpeedTable,x
   1673  0d9d		       8d 0c 70 	      sta	temp
   1674  0da0
   1675  0da0		       ae 1d 70 	      ldx	soundMode
   1676  0da3		       e0 43		      cpx	#MODE_ARP4
   1677  0da5		       f0 35		      beq	playArpDown
   1678  0da7		       e0 44		      cpx	#MODE_ARP5
   1679  0da9		       f0 31		      beq	playArpDown
   1680  0dab
   1681  0dab							;***********
   1682  0dab							; ARP UP
   1683  0dab							;***********
   1684  0dab							; Increment arpOffset pointer...
   1685  0dab		       ad 03 70 	      lda	Frame
   1686  0dae		       2d 0c 70 	      and	temp	; Arp speed
   1687  0db1		       d0 03		      bne	skipArpAdvance
   1688  0db3		       ee 85 70 	      inc	arpOffset
   1689  0db6				   skipArpAdvance
   1690  0db6
   1691  0db6							; Sort note buffer
   1692  0db6		       20 05 21 	      jsr	doSort
   1693  0db9
   1694  0db9							; Count the number of notes...
   1695  0db9		       a2 00		      ldx	#0
   1696  0dbb		       a9 ff		      lda	#255
   1697  0dbd				   noteCount
   1698  0dbd		       dd a0 70 	      cmp	noteNumArray,x
   1699  0dc0		       f0 06		      beq	quitNoteCount
   1700  0dc2		       e8		      inx
   1701  0dc3		       ec 80 70 	      cpx	bufferSize
   1702  0dc6		       d0 f5		      bne	noteCount
   1703  0dc8				   quitNoteCount
   1704  0dc8							; X now contains the note count
   1705  0dc8
   1706  0dc8							; Make sure arpOffset isn't past end...
   1707  0dc8		       ca		      dex
   1708  0dc9		       ec 85 70 	      cpx	arpOffset
   1709  0dcc		       10 05		      bpl	noArpOffsetReset
   1710  0dce		       a9 00		      lda	#0	; Reset to zero
   1711  0dd0		       8d 85 70 	      sta	arpOffset
   1712  0dd3				   noArpOffsetReset
   1713  0dd3
   1714  0dd3							; Play single arp note...
   1715  0dd3		       ac 85 70 	      ldy	arpOffset
   1716  0dd6		       b9 a0 70 	      lda	noteNumArray,y
   1717  0dd9
   1718  0dd9		       4c e5 0c 	      jmp	playMonoWithA
   1719  0ddc
   1720  0ddc
   1721  0ddc							;***********
   1722  0ddc							; ARP DOWN
   1723  0ddc							;***********
   1724  0ddc				   playArpDown
   1725  0ddc							; Decrement arpOffset pointer...
   1726  0ddc		       ad 03 70 	      lda	Frame
   1727  0ddf		       2d 0c 70 	      and	temp	; Arp speed
   1728  0de2		       d0 03		      bne	skipArpAdvance2
   1729  0de4		       ce 85 70 	      dec	arpOffset
   1730  0de7				   skipArpAdvance2
   1731  0de7
   1732  0de7							; Sort note buffer
   1733  0de7		       20 05 21 	      jsr	doSort
   1734  0dea
   1735  0dea							; Count the number of notes...
   1736  0dea		       a2 00		      ldx	#0
   1737  0dec		       a9 ff		      lda	#255
   1738  0dee				   noteCount2
   1739  0dee		       dd a0 70 	      cmp	noteNumArray,x
   1740  0df1		       f0 06		      beq	quitNoteCount2
   1741  0df3		       e8		      inx
   1742  0df4		       ec 80 70 	      cpx	bufferSize
   1743  0df7		       30 f5		      bmi	noteCount2
   1744  0df9				   quitNoteCount2
   1745  0df9							; X now contains the note count
   1746  0df9		       8e 0c 70 	      stx	temp
   1747  0dfc
   1748  0dfc							; Make sure arpOffset isn't at zero...
   1749  0dfc		       ad 85 70 	      lda	arpOffset
   1750  0dff		       10 09		      bpl	noArpOffsetReset2
   1751  0e01		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
   1752  0e04		       f0 01		      beq	skipTempDecrement
   1753  0e06		       ca		      dex
   1754  0e07				   skipTempDecrement
   1755  0e07		       8e 85 70 	      stx	arpOffset
   1756  0e0a				   noArpOffsetReset2
   1757  0e0a
   1758  0e0a							; Play single arp note...
   1759  0e0a		       ac 85 70 	      ldy	arpOffset
   1760  0e0d		       b9 a0 70 	      lda	noteNumArray,y
   1761  0e10
   1762  0e10		       4c e5 0c 	      jmp	playMonoWithA
   1763  0e13
   1764  0e13
   1765  0e13							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1766  0e13							; 6-CHANNEL MONO SOUND DRIVER
   1767  0e13							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   1768  0e13				   play6Chan
   1769  0e13		       ad a0 70 	      lda	noteNumArray+0
   1770  0e16		       8d b0 70 	      sta	playNoteArray+0
   1771  0e19		       ad a1 70 	      lda	noteNumArray+1
   1772  0e1c		       8d b4 70 	      sta	playNoteArray+4
   1773  0e1f		       ad a2 70 	      lda	noteNumArray+2
   1774  0e22		       8d b2 70 	      sta	playNoteArray+2
   1775  0e25
   1776  0e25		       ad a3 70 	      lda	noteNumArray+3
   1777  0e28		       8d b3 70 	      sta	playNoteArray+3
   1778  0e2b		       ad a4 70 	      lda	noteNumArray+4
   1779  0e2e		       8d b1 70 	      sta	playNoteArray+1
   1780  0e31		       ad a5 70 	      lda	noteNumArray+5
   1781  0e34		       8d b5 70 	      sta	playNoteArray+5
   1782  0e37
   1783  0e37		       4c 39 10 	      jmp	sixVoicePlayer
   1784  0e3a
   1785  0e3a
   1786  0e3a				   retuneNoteShiftTable
   1787  0e3a		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
   1788  0e53		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
   1789  0e6c		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
   1790  0e85		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
   1791  0e9d		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1792  0ea3		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1793  0ebc		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1794  0ed5
   1795  0ed5							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1796  0ed5							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
   1797  0ed5							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
   1798  0ed5							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
   1799  0ed5		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
   1800  0eee		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
   1801  0f07		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
   1802  0f20		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
   1803  0f39
   1804  0f39				   retuneTable
   1805  0f39		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1806  0f52		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1807  0f6b		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1808  0f84		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1809  0f9d		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
   1810  0fa3		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1811  0fbc		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
   1812  0fd5		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1813  0fee		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1814  1007		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
   1815  1020		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1816  1039							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
   1817  1039
   1818  1039							;************************************************
   1819  1039							; 6-VOICE SOUND DRIVER
   1820  1039							;************************************************
   1821  1039				   sixVoicePlayer
   1822  1039
   1823  1039							; Calculate master tuning...
   1824  1039		       ad f3 70 	      lda	systemTuning
   1825  103c		       18		      clc
   1826  103d		       6d f0 70 	      adc	midiTuning
   1827  1040		       8d f4 70 	      sta	masterTuning
   1828  1043		       a8		      tay
   1829  1044
   1830  1044							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1831  1044							; DEBUG - SHOW TUNING DATA
   1832  1044				  -	      IF	DEBUG_DISPLAY=1
   1833  1044				  -	      tya
   1834  1044				  -	      sta	temp
   1835  1044				  -	      ldy	#20
   1836  1044				  -	      ldx	#20
   1837  1044				  -	      jsr	displayHex
   1838  1044				  -	      lda	temp
   1839  1044				  -	      ldy	temp
   1840  1044					      ENDIF
   1841  1044							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1842  1044
   1843  1044		       b9 39 0f 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
   1844  1047		       18		      clc
   1845  1048		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
   1846  104a
   1847  104a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1848  104a							; DEBUG - SHOW TUNING DATA
   1849  104a				  -	      IF	DEBUG_DISPLAY=1
   1850  104a				  -	      sta	temp
   1851  104a				  -	      ldy	#21
   1852  104a				  -	      ldx	#20
   1853  104a				  -	      jsr	displayHex
   1854  104a				  -	      lda	temp
   1855  104a				  -	      ldy	temp
   1856  104a					      ENDIF
   1857  104a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1858  104a
   1859  104a		       a8		      tay
   1860  104b		       b9 33 33 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
   1861  104e		       85 22		      sta	tunePtrL
   1862  1050		       b9 3d 33 	      lda	tuneArrPtrLH,y
   1863  1053		       85 23		      sta	tunePtrL+1
   1864  1055		       b9 47 33 	      lda	tuneArrPtrHL,y
   1865  1058		       85 24		      sta	tunePtrH
   1866  105a		       b9 51 33 	      lda	tuneArrPtrHH,y
   1867  105d		       85 25		      sta	tunePtrH+1
   1868  105f
   1869  105f							; Look up note shift from master tuning...
   1870  105f		       ac f4 70 	      ldy	masterTuning
   1871  1062		       b9 3a 0e 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
   1872  1065		       8d f6 70 	      sta	noteShift
   1873  1068							; - - - - - - - - - - - - -
   1874  1068		       a2 05		      ldx	#5
   1875  106a				   shiftNoteLoop
   1876  106a		       bd b0 70 	      lda	playNoteArray,x
   1877  106d		       c9 ff		      cmp	#255
   1878  106f		       f0 07		      beq	skipShiftNote
   1879  1071		       18		      clc
   1880  1072		       6d f6 70 	      adc	noteShift
   1881  1075		       9d b0 70 	      sta	playNoteArray,x
   1882  1078				   skipShiftNote
   1883  1078		       ca		      dex
   1884  1079		       10 ef		      bpl	shiftNoteLoop
   1885  107b
   1886  107b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1887  107b							; DEBUG - SHOW TUNING DATA
   1888  107b				  -	      IF	DEBUG_DISPLAY=1
   1889  107b				  -	      sta	temp
   1890  107b				  -	      ldy	#22
   1891  107b				  -	      ldx	#20
   1892  107b				  -	      jsr	displayHex
   1893  107b				  -	      lda	temp
   1894  107b				  -	      ldy	temp
   1895  107b					      ENDIF
   1896  107b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1897  107b
   1898  107b							; For each voice on SID #1...
   1899  107b		       a2 02		      ldx	#2
   1900  107d				   NsetRegsSidA
   1901  107d		       8e 0c 70 	      stx	temp	; save current voice number
   1902  1080		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
   1903  1083		       bd ca 28 	      lda	voiceOffset,x	;
   1904  1086		       aa		      tax
   1905  1087		       c0 ff		      cpy	#255
   1906  1089		       d0 04		      bne	NsoundOnSidA
   1907  108b		       a9 00		      lda	#0
   1908  108d		       f0 3f		      beq	NsoundOffSidA
   1909  108f				   NsoundOnSidA
   1910  108f
   1911  108f							; load note and deal
   1912  108f							; with tuning ------;
   1913  108f		       ad 61 70 	      lda	NTSCmode	;
   1914  1092		       f0 14		      beq	palPlaySidA	;
   1915  1094				   ntscPlaySidA 		;
   1916  1094		       18		      clc		;
   1917  1095		       b9 bf 33 	      lda	NSoundLArr,y	;
   1918  1098		       71 22		      adc	(tunePtrL),y	;
   1919  109a		       8d 43 70 	      sta	pitchTmpL	;
   1920  109d		       b9 07 34 	      lda	NSoundHArr,y	;
   1921  10a0		       71 24		      adc	(tunePtrH),y	;
   1922  10a2		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1923  10a5		       4c b9 10 	      jmp	skipPalPlaySidA	;
   1924  10a8							;- - - - - - - - -;
   1925  10a8				   palPlaySidA		;
   1926  10a8		       18		      clc		;
   1927  10a9		       b9 4f 34 	      lda	PSoundLArr,y	;
   1928  10ac		       71 22		      adc	(tunePtrL),y	;
   1929  10ae		       8d 43 70 	      sta	pitchTmpL	;
   1930  10b1		       b9 a2 34 	      lda	PSoundHArr,y	;
   1931  10b4		       71 24		      adc	(tunePtrH),y	;
   1932  10b6		       8d 44 70 	      sta	pitchTmpH	;
   1933  10b9				   skipPalPlaySidA		;;;;;
   1934  10b9
   1935  10b9							; play SID #1
   1936  10b9		       18		      clc
   1937  10ba		       ad 43 70 	      lda	pitchTmpL
   1938  10bd		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
   1939  10c0		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
   1940  10c3		       ad 44 70 	      lda	pitchTmpH
   1941  10c6		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
   1942  10c9		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
   1943  10cc
   1944  10cc		       a9 01		      lda	#1
   1945  10ce							; Set voice gates on or off
   1946  10ce				   NsoundOffSidA
   1947  10ce		       1d 30 70 	      ora	WaveType,x
   1948  10d1		       9d 04 d4 	      sta	SID1+SV1WAVE,x
   1949  10d4							;sta SID2+SV1WAVE,x
   1950  10d4		       9d 04 71 	      sta	sidData+SV1WAVE,x
   1951  10d7		       ae 0c 70 	      ldx	temp
   1952  10da		       ca		      dex
   1953  10db							;bpl NsetRegsSidA
   1954  10db		       30 03		      bmi	quitPlayLoop
   1955  10dd		       4c 7d 10 	      jmp	NsetRegsSidA
   1956  10e0				   quitPlayLoop
   1957  10e0
   1958  10e0							;rts ; DEBUG!!!
   1959  10e0							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1960  10e0							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   1961  10e0							; For each voice on SID #2...
   1962  10e0		       a2 02		      ldx	#2
   1963  10e2				   NsetRegsSidB
   1964  10e2		       8e 0c 70 	      stx	temp
   1965  10e5							;lda playNoteArray+3,x
   1966  10e5
   1967  10e5		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
   1968  10e8		       bd ca 28 	      lda	voiceOffset,x
   1969  10eb
   1970  10eb		       aa		      tax
   1971  10ec		       c0 ff		      cpy	#255
   1972  10ee		       d0 04		      bne	NsoundOnSidB
   1973  10f0		       a9 00		      lda	#0
   1974  10f2		       f0 3f		      beq	NsoundOffSidB
   1975  10f4				   NsoundOnSidB
   1976  10f4
   1977  10f4							; load note and deal
   1978  10f4							; with tuning ------;
   1979  10f4		       ad 61 70 	      lda	NTSCmode	;
   1980  10f7		       f0 14		      beq	palPlaySidB	;
   1981  10f9				   ntscPlaySidB 		;
   1982  10f9		       18		      clc		;
   1983  10fa		       b9 bf 33 	      lda	NSoundLArr,y	;
   1984  10fd		       71 22		      adc	(tunePtrL),y	;
   1985  10ff		       8d 43 70 	      sta	pitchTmpL	;
   1986  1102		       b9 07 34 	      lda	NSoundHArr,y	;
   1987  1105		       71 24		      adc	(tunePtrH),y	;
   1988  1107		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
   1989  110a		       4c 1e 11 	      jmp	skipPalPlaySidB	;
   1990  110d				   palPlaySidB		;
   1991  110d		       18		      clc		;
   1992  110e		       b9 4f 34 	      lda	PSoundLArr,y	;
   1993  1111		       71 22		      adc	(tunePtrL),y	;
   1994  1113		       8d 43 70 	      sta	pitchTmpL	;
   1995  1116		       b9 a2 34 	      lda	PSoundHArr,y	;
   1996  1119		       71 24		      adc	(tunePtrH),y	;
   1997  111b		       8d 44 70 	      sta	pitchTmpH	;
   1998  111e				   skipPalPlaySidB		;;;;;
   1999  111e
   2000  111e							; play SID #2
   2001  111e		       18		      clc
   2002  111f		       ad 43 70 	      lda	pitchTmpL
   2003  1122		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
   2004  1125		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
   2005  1128		       ad 44 70 	      lda	pitchTmpH
   2006  112b		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
   2007  112e		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
   2008  1131
   2009  1131		       a9 01		      lda	#1
   2010  1133							; Set voice gates on or off
   2011  1133				   NsoundOffSidB
   2012  1133		       1d 30 70 	      ora	WaveType,x
   2013  1136							;sta SID1+SV1WAVE,x
   2014  1136		       9d 24 d4 	      sta	SID2+SV1WAVE,x
   2015  1139		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2016  113c		       ae 0c 70 	      ldx	temp
   2017  113f		       ca		      dex
   2018  1140		       10 a0		      bpl	NsetRegsSidB
   2019  1142
   2020  1142							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2021  1142							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
   2022  1142		       60		      rts
   2023  1143
   2024  1143
   2025  1143
   2026  1143							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2027  1143							; PORTAMENTO SOUND SETUP
   2028  1143							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2029  1143				   playPort
   2030  1143
   2031  1143		       a2 02		      ldx	#2
   2032  1145				   portCopyLoop
   2033  1145		       bd a0 70 	      lda	noteNumArray,x
   2034  1148		       9d b0 70 	      sta	playNoteArray,x
   2035  114b		       ca		      dex
   2036  114c		       10 f7		      bpl	portCopyLoop
   2037  114e
   2038  114e							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
   2039  114e							;sta playNoteArray+3
   2040  114e							;lda noteNumArray+1
   2041  114e							;sta playNoteArray+4
   2042  114e							;lda noteNumArray+2
   2043  114e							;sta playNoteArray+5
   2044  114e
   2045  114e							;jmp sixVoicePlayer
   2046  114e
   2047  114e		       4c 51 11 	      jmp	portPlayer
   2048  1151
   2049  1151
   2050  1151
   2051  1151							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2052  1151							; PORTAMENTO 3-VOICE SOUND DRIVER
   2053  1151							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   2054  1151				   portPlayer
   2055  1151							; set up pointer to portamento speed array
   2056  1151							; (which is the tuning array)
   2057  1151		       a2 02		      ldx	#2
   2058  1153				   portLoop
   2059  1153		       bc b0 70 	      ldy	playNoteArray,x
   2060  1156							;ldy KeyA,x
   2061  1156		       c0 ff		      cpy	#255
   2062  1158		       d0 03		      bne	noPlayNote
   2063  115a		       4c 6d 11 	      jmp	playNote
   2064  115d				   noPlayNote
   2065  115d		       ad 03 70 	      lda	Frame
   2066  1160		       29 01		      and	#1
   2067  1162		       f0 03		      beq	noPlayNote2
   2068  1164		       4c 6d 11 	      jmp	playNote
   2069  1167				   noPlayNote2
   2070  1167
   2071  1167							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2072  1167							; DEBUG - SHOW DATA
   2073  1167				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2074  1167				  -	      lda	pitchHA,x	;
   2075  1167				  -	      stx	tempX
   2076  1167				  -	      sty	tempY
   2077  1167				  -	      sta	tempA
   2078  1167				  -			;- - - - -
   2079  1167				  -			;sta temp
   2080  1167				  -	      ldx	#20
   2081  1167				  -	      ldy	#6
   2082  1167				  -	      jsr	displayHex
   2083  1167				  -			;lda temp
   2084  1167				  -			;ldy temp
   2085  1167				  -			;- - - - -
   2086  1167				  -	      ldx	tempX
   2087  1167				  -	      ldy	tempY
   2088  1167				  -	      lda	tempA
   2089  1167					      ENDIF
   2090  1167							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2091  1167
   2092  1167							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2093  1167							; DEBUG - SHOW DATA
   2094  1167				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
   2095  1167				  -	      lda	NSoundHArr,y	;
   2096  1167				  -	      stx	tempX
   2097  1167				  -	      sty	tempY
   2098  1167				  -	      sta	tempA
   2099  1167				  -			;- - - - -
   2100  1167				  -			;sta temp
   2101  1167				  -	      ldx	#20
   2102  1167				  -	      ldy	#7
   2103  1167				  -	      jsr	displayHex
   2104  1167				  -			;lda temp
   2105  1167				  -			;ldy temp
   2106  1167				  -			;- - - - -
   2107  1167				  -	      ldx	tempX
   2108  1167				  -	      ldy	tempY
   2109  1167				  -	      lda	tempA
   2110  1167					      ENDIF
   2111  1167							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2112  1167
   2113  1167
   2114  1167		       20 c5 11 	      jsr	updatePortPosition
   2115  116a		       20 c5 11 	      jsr	updatePortPosition
   2116  116d
   2117  116d
   2118  116d				   playNote
   2119  116d							; deal with tuning
   2120  116d		       18		      clc
   2121  116e		       bd 16 70 	      lda	pitchLA,x
   2122  1171		       71 22		      adc	(tunePtrL),y
   2123  1173		       8d 43 70 	      sta	pitchTmpL
   2124  1176		       bd 19 70 	      lda	pitchHA,x
   2125  1179		       71 24		      adc	(tunePtrH),y
   2126  117b		       8d 44 70 	      sta	pitchTmpH
   2127  117e
   2128  117e		       98		      tya		; Move the current key to A
   2129  117f		       bc ca 28 	      ldy	voiceOffset,x
   2130  1182		       c9 ff		      cmp	#255	; Check for note off
   2131  1184		       d0 04		      bne	soundOn
   2132  1186		       a9 00		      lda	#0
   2133  1188		       f0 28		      beq	soundOff
   2134  118a				   soundOn
   2135  118a
   2136  118a							; play SID #1
   2137  118a		       18		      clc
   2138  118b		       ad 43 70 	      lda	pitchTmpL
   2139  118e		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
   2140  1191		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
   2141  1194		       ad 44 70 	      lda	pitchTmpH
   2142  1197		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
   2143  119a		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
   2144  119d
   2145  119d							; play SID #2
   2146  119d		       18		      clc
   2147  119e		       ad 43 70 	      lda	pitchTmpL
   2148  11a1		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
   2149  11a4		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
   2150  11a7		       ad 44 70 	      lda	pitchTmpH
   2151  11aa		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
   2152  11ad		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
   2153  11b0
   2154  11b0				   afterDStep
   2155  11b0
   2156  11b0		       a9 01		      lda	#1
   2157  11b2							; Set voice gates on or off
   2158  11b2				   soundOff
   2159  11b2		       19 30 70 	      ora	WaveType,y
   2160  11b5		       99 04 d4 	      sta	SID1+SV1WAVE,y
   2161  11b8		       99 24 d4 	      sta	SID2+SV1WAVE,y
   2162  11bb		       9d 04 71 	      sta	sidData+SV1WAVE,x
   2163  11be
   2164  11be		       ca		      dex
   2165  11bf		       30 03		      bmi	quitPort
   2166  11c1		       4c 53 11 	      jmp	portLoop
   2167  11c4				   quitPort
   2168  11c4				   skipPort
   2169  11c4		       60		      rts
   2170  11c5							;--------------------------------------------------------------------
   2171  11c5							;end of portamento play loop
   2172  11c5							;--------------------------------------------------------------------
   2173  11c5
   2174  11c5
   2175  11c5				   updatePortPosition
   2176  11c5							;check portamn direction;
   2177  11c5		       ad 61 70 	      lda	NTSCmode	;
   2178  11c8		       f0 0c		      beq	palPortH	;
   2179  11ca				   ntscPortH		;
   2180  11ca		       bd 19 70 	      lda	pitchHA,x	;
   2181  11cd		       d9 07 34 	      cmp	NSoundHArr,y	;
   2182  11d0		       f0 10		      beq	portCheckL	;
   2183  11d2		       30 2a		      bmi	portUp	; PAL/NTSC split
   2184  11d4		       10 3e		      bpl	portDown	;
   2185  11d6							;bpl portUp				; PAL/NTSC split
   2186  11d6							;bmi portDown			;
   2187  11d6				   palPortH		;
   2188  11d6		       bd 19 70 	      lda	pitchHA,x	;
   2189  11d9		       d9 a2 34 	      cmp	PSoundHArr,y	;
   2190  11dc		       f0 04		      beq	portCheckL	;
   2191  11de		       30 1e		      bmi	portUp	;
   2192  11e0		       10 32		      bpl	portDown	;;;;;
   2193  11e2							;bpl portUp				;
   2194  11e2							;bmi portDown		;;;;;
   2195  11e2
   2196  11e2				   portCheckL
   2197  11e2
   2198  11e2							;check portamn lowbyte--;
   2199  11e2		       ad 61 70 	      lda	NTSCmode	;
   2200  11e5		       f0 0d		      beq	palPortL	;
   2201  11e7				   ntscPortL		;
   2202  11e7		       bd 16 70 	      lda	pitchLA,x	;
   2203  11ea		       d9 bf 33 	      cmp	NSoundLArr,y	;
   2204  11ed		       f0 69		      beq	endPortUpdate
   2205  11ef							;beq playNote ; note on	;
   2206  11ef							;the stop so play	;
   2207  11ef		       b0 23		      bcs	portDown	; PAL/NTSC split
   2208  11f1							;bcs portUp			; PAL/NTSC split
   2209  11f1		       4c fe 11 	      jmp	skipPalPortL	;
   2210  11f4				   palPortL		;
   2211  11f4		       bd 16 70 	      lda	pitchLA,x	;
   2212  11f7		       d9 4f 34 	      cmp	PSoundLArr,y	;
   2213  11fa		       f0 5c		      beq	endPortUpdate
   2214  11fc							;beq playNote ; note on	;
   2215  11fc							;the stop so play	;
   2216  11fc		       b0 16		      bcs	portDown	;
   2217  11fe							;bcs portUp				;
   2218  11fe				   skipPalPortL 		;;;;;
   2219  11fe
   2220  11fe
   2221  11fe				   portUp
   2222  11fe		       bd 16 70 	      lda	pitchLA,x
   2223  1201		       18		      clc
   2224  1202		       71 35		      adc	(portPtrL),y
   2225  1204		       9d 16 70 	      sta	pitchLA,x
   2226  1207		       bd 19 70 	      lda	pitchHA,x
   2227  120a		       71 47		      adc	(portPtrH),y
   2228  120c		       9d 19 70 	      sta	pitchHA,x
   2229  120f		       a9 00		      lda	#0	; indicate port direction
   2230  1211		       4c 27 12 	      jmp	oscCheck
   2231  1214				   portDown
   2232  1214		       bd 16 70 	      lda	pitchLA,x
   2233  1217		       38		      sec
   2234  1218		       f1 35		      sbc	(portPtrL),y
   2235  121a		       9d 16 70 	      sta	pitchLA,x
   2236  121d		       bd 19 70 	      lda	pitchHA,x
   2237  1220		       f1 47		      sbc	(portPtrH),y
   2238  1222		       9d 19 70 	      sta	pitchHA,x
   2239  1225		       a9 01		      lda	#1	; indicate port direction
   2240  1227
   2241  1227							; check for pitch oscillation
   2242  1227							; (which means it's at the correct note)
   2243  1227							; it's oscillating if: the port direction
   2244  1227							; has changed and the note hasn't.
   2245  1227				   oscCheck
   2246  1227		       dd 54 70 	      cmp	portLastDir,x
   2247  122a		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
   2248  122d		       f0 29		      beq	skipOsc
   2249  122f		       98		      tya
   2250  1230		       dd 51 70 	      cmp	portLastNote,x
   2251  1233		       9d 51 70 	      sta	portLastNote,x	; save it...
   2252  1236		       d0 20		      bne	skipOsc
   2253  1238
   2254  1238							; it's oscilating at;
   2255  1238							; the note, so lock ;
   2256  1238							; it onto the actual;
   2257  1238							; note				;
   2258  1238		       ad 61 70 	      lda	NTSCmode	;
   2259  123b		       f0 0f		      beq	palLock	;
   2260  123d				   ntscLock		;
   2261  123d		       b9 bf 33 	      lda	NSoundLArr,y	;
   2262  1240		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
   2263  1243		       b9 07 34 	      lda	NSoundHArr,y	;
   2264  1246		       9d 19 70 	      sta	pitchHA,x	;
   2265  1249		       4c 58 12 	      jmp	skipPalLock	;
   2266  124c				   palLock		;
   2267  124c		       b9 4f 34 	      lda	PSoundLArr,y	;
   2268  124f		       9d 16 70 	      sta	pitchLA,x	;
   2269  1252		       b9 a2 34 	      lda	PSoundHArr,y	;
   2270  1255		       9d 19 70 	      sta	pitchHA,x	;
   2271  1258				   skipPalLock		;;;;;
   2272  1258
   2273  1258				   skipOsc
   2274  1258				   endPortUpdate
   2275  1258		       60		      rts
   2276  1259
   2277  1259
   2278  1259
   2279  1259
   2280  1259
   2281  1259							;-------------------------------------
   2282  1259							; Process FX
   2283  1259							;-------------------------------------
   2284  1259							;fxType equ $7086
   2285  1259							;modValue1 equ $7087
   2286  1259							;modDirection equ $7089
   2287  1259							;modCounter equ $708A
   2288  1259							;modMinValue equ $708B
   2289  1259							;modMaxValue equ $708A
   2290  1259							; - - - - - - - - - -
   2291  1259							;MOD_NONE equ 0
   2292  1259							;MOD_PW_LFO equ 1
   2293  1259							;MOD_FILT_LFO equ 2
   2294  1259							;MOD_FILT_OPEN equ 3
   2295  1259							;MOD_FILT_CLOSE equ 4
   2296  1259							;MOD_FILT_WOW equ 5
   2297  1259
   2298  1259				   processFX
   2299  1259		       ad 86 70 	      lda	fxType
   2300  125c		       d0 0b		      bne	doFX
   2301  125e		       a9 7f		      lda	#127	; Set default mod values...
   2302  1260		       8d 9e 70 	      sta	pwModValue
   2303  1263		       8d 9c 70 	      sta	filterModValue
   2304  1266		       4c 91 12 	      jmp	quitFX
   2305  1269							; - - - - - - - -
   2306  1269				   doFX
   2307  1269		       c9 06		      cmp	#MOD_PW_LFO
   2308  126b		       d0 03		      bne	notModPulseLFO
   2309  126d		       4c 7b 13 	      jmp	modPulseLFO	;------->
   2310  1270				   notModPulseLFO
   2311  1270		       c9 01		      cmp	#MOD_FILT_LFO
   2312  1272		       d0 03		      bne	notModFiltLFO
   2313  1274		       4c 67 13 	      jmp	modFiltLFO	;------->
   2314  1277				   notModFiltLFO
   2315  1277		       c9 02		      cmp	#MOD_FILT_ENV
   2316  1279		       d0 03		      bne	noModFiltEnv
   2317  127b		       4c 37 13 	      jmp	modFiltEnv	;------->
   2318  127e				   noModFiltEnv
   2319  127e		       c9 03		      cmp	#MOD_FILT3
   2320  1280		       f0 10		      beq	modFilt3	;------->
   2321  1282		       c9 04		      cmp	#MOD_FILT4
   2322  1284		       f0 67		      beq	modFilt4	;------->
   2323  1286		       c9 05		      cmp	#MOD_FILT5
   2324  1288		       f0 76		      beq	modFilt5	;------->
   2325  128a		       c9 07		      cmp	#MOD_PW2
   2326  128c		       d0 03		      bne	quitFX
   2327  128e		       4c 13 13 	      jmp	modPW2	;------->
   2328  1291				   quitFX
   2329  1291		       60		      rts
   2330  1292
   2331  1292
   2332  1292							;---------------------
   2333  1292				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
   2334  1292		       ad 03 70 	      lda	Frame
   2335  1295		       ad 87 70 	      lda	modValue1
   2336  1298		       29 f8		      and	#%11111000
   2337  129a		       f0 0b		      beq	noDecModValue2
   2338  129c		       ae 87 70 	      ldx	modValue1
   2339  129f		       ca		      dex
   2340  12a0		       ca		      dex
   2341  12a1		       ca		      dex
   2342  12a2		       ca		      dex
   2343  12a3		       ca		      dex
   2344  12a4		       8e 87 70 	      stx	modValue1
   2345  12a7				   noDecModValue2
   2346  12a7		       ad 87 70 	      lda	modValue1
   2347  12aa		       8d 9c 70 	      sta	filterModValue
   2348  12ad							;jsr setFilterFromA
   2349  12ad							;rts ; DEBUG!!
   2350  12ad
   2351  12ad		       a9 b4		      lda	#180
   2352  12af		       8d 98 70 	      sta	resetValue
   2353  12b2							;jmp filtEnvReset ;---- end
   2354  12b2
   2355  12b2				   filtEnvResetFast
   2356  12b2		       ad 1d 70 	      lda	soundMode
   2357  12b5		       c9 20		      cmp	#MODE_MONO1
   2358  12b7		       f0 22		      beq	handleMonoMode
   2359  12b9		       c9 21		      cmp	#MODE_MONO2
   2360  12bb		       f0 1e		      beq	handleMonoMode
   2361  12bd
   2362  12bd							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
   2363  12bd		       a2 05		      ldx	#5
   2364  12bf		       a0 00		      ldy	#0
   2365  12c1				   countNotesLoop
   2366  12c1		       bd a0 70 	      lda	noteNumArray,x
   2367  12c4		       c9 ff		      cmp	#255
   2368  12c6		       d0 01		      bne	skipCountingNote
   2369  12c8		       c8		      iny
   2370  12c9				   skipCountingNote
   2371  12c9		       ca		      dex
   2372  12ca		       10 f5		      bpl	countNotesLoop
   2373  12cc		       cc 99 70 	      cpy	lastNoteCount
   2374  12cf		       f0 09		      beq	noNewNotes
   2375  12d1		       8c 99 70 	      sty	lastNoteCount
   2376  12d4		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2377  12d7		       8d 87 70 	      sta	modValue1
   2378  12da				   noNewNotes
   2379  12da		       60		      rts
   2380  12db
   2381  12db				   handleMonoMode
   2382  12db		       ac a0 70 	      ldy	noteNumArray+0
   2383  12de		       cc 9a 70 	      cpy	lastNote
   2384  12e1		       f0 09		      beq	sameOldNote
   2385  12e3		       8c 9a 70 	      sty	lastNote
   2386  12e6		       ad 98 70 	      lda	resetValue	; Reset filter envelope
   2387  12e9		       8d 87 70 	      sta	modValue1
   2388  12ec				   sameOldNote
   2389  12ec		       60		      rts
   2390  12ed
   2391  12ed							; Reset filter env when no notes are held...
   2392  12ed							;	ldx #5
   2393  12ed							;filtEnvResetLoop2
   2394  12ed							;lda noteNumArray,x
   2395  12ed							;cmp #255
   2396  12ed							;bne quitFiltEnv2
   2397  12ed							;dex
   2398  12ed							;bpl filtEnvResetLoop2
   2399  12ed							;lda resetValue
   2400  12ed							;sta modValue1
   2401  12ed							;quitFiltEnv2:
   2402  12ed							;rts
   2403  12ed
   2404  12ed							;---------------------
   2405  12ed				   modFilt4		; Filter chopper FAST
   2406  12ed		       ad 03 70 	      lda	Frame
   2407  12f0		       29 08		      and	#%1000
   2408  12f2		       f0 06		      beq	filterClosed
   2409  12f4		       a9 e6		      lda	#230
   2410  12f6		       8d 9c 70 	      sta	filterModValue
   2411  12f9		       60		      rts
   2412  12fa							;jmp setFilterFromA
   2413  12fa				   filterClosed
   2414  12fa		       a9 00		      lda	#0
   2415  12fc		       8d 9c 70 	      sta	filterModValue
   2416  12ff		       60		      rts
   2417  1300							;jmp setFilterFromA
   2418  1300
   2419  1300
   2420  1300							;---------------------
   2421  1300				   modFilt5		; Filter chopper MEDIUM
   2422  1300		       ad 03 70 	      lda	Frame
   2423  1303		       29 02		      and	#%10
   2424  1305		       f0 06		      beq	filterClosed2
   2425  1307		       a9 96		      lda	#150
   2426  1309							;jmp setFilterFromA
   2427  1309		       8d 9c 70 	      sta	filterModValue
   2428  130c		       60		      rts
   2429  130d				   filterClosed2
   2430  130d		       a9 32		      lda	#50
   2431  130f							;jmp setFilterFromA
   2432  130f		       8d 9c 70 	      sta	filterModValue
   2433  1312		       60		      rts
   2434  1313
   2435  1313							;---------------------
   2436  1313				   modPW2		; PW Envelope
   2437  1313		       ad 03 70 	      lda	Frame
   2438  1316		       ad 87 70 	      lda	modValue1
   2439  1319							;and #%11111000
   2440  1319		       29 e0		      and	#%11100000
   2441  131b		       f0 0b		      beq	noDecModValue3
   2442  131d		       ae 87 70 	      ldx	modValue1
   2443  1320		       ca		      dex
   2444  1321		       ca		      dex
   2445  1322		       ca		      dex
   2446  1323		       ca		      dex
   2447  1324		       ca		      dex
   2448  1325		       8e 87 70 	      stx	modValue1
   2449  1328				   noDecModValue3
   2450  1328		       ad 87 70 	      lda	modValue1
   2451  132b		       20 92 14 	      jsr	setPulseWidth
   2452  132e
   2453  132e		       a9 b4		      lda	#180
   2454  1330		       8d 98 70 	      sta	resetValue
   2455  1333
   2456  1333		       4c b2 12 	      jmp	filtEnvResetFast
   2457  1336		       60		      rts
   2458  1337
   2459  1337
   2460  1337
   2461  1337
   2462  1337							;---------------------
   2463  1337				   modFiltEnv
   2464  1337		       ad 03 70 	      lda	Frame
   2465  133a		       29 01		      and	#%1
   2466  133c		       f0 01		      beq	doEnvLFO
   2467  133e		       60		      rts
   2468  133f				   doEnvLFO
   2469  133f		       ad 87 70 	      lda	modValue1
   2470  1342		       c9 ff		      cmp	#255
   2471  1344		       f0 03		      beq	noIncreaseModValue
   2472  1346		       ee 87 70 	      inc	modValue1
   2473  1349				   noIncreaseModValue
   2474  1349		       ad 87 70 	      lda	modValue1
   2475  134c		       8d 9c 70 	      sta	filterModValue
   2476  134f							;jsr setFilterFromA
   2477  134f		       a9 00		      lda	#0
   2478  1351		       8d 98 70 	      sta	resetValue
   2479  1354							; jmp filtEnvReset
   2480  1354
   2481  1354				   filtEnvReset
   2482  1354		       a2 05		      ldx	#5
   2483  1356				   filtEnvResetLoop
   2484  1356		       bd a0 70 	      lda	noteNumArray,x
   2485  1359		       c9 ff		      cmp	#255
   2486  135b		       d0 09		      bne	quitFiltEnv
   2487  135d		       ca		      dex
   2488  135e		       10 f6		      bpl	filtEnvResetLoop
   2489  1360							;lda #0
   2490  1360		       ad 98 70 	      lda	resetValue
   2491  1363		       8d 87 70 	      sta	modValue1
   2492  1366				   quitFiltEnv
   2493  1366		       60		      rts
   2494  1367
   2495  1367							;---------------------
   2496  1367				   modFiltLFO
   2497  1367		       a9 96		      lda	#150
   2498  1369		       8d 8b 70 	      sta	modLFOMinValue
   2499  136c		       a9 fe		      lda	#254
   2500  136e		       8d 8a 70 	      sta	modLFOMaxValue
   2501  1371		       20 9f 13 	      jsr	doModulationLFO
   2502  1374		       ad 87 70 	      lda	modValue1
   2503  1377		       8d 9c 70 	      sta	filterModValue
   2504  137a							;jsr setFilterFromA
   2505  137a		       60		      rts
   2506  137b
   2507  137b
   2508  137b
   2509  137b							;---------------------
   2510  137b				   modPulseLFO
   2511  137b
   2512  137b							; Reset into range if way off value...
   2513  137b		       ad 87 70 	      lda	modValue1
   2514  137e		       30 05		      bmi	noResetValue
   2515  1380		       a9 c8		      lda	#200
   2516  1382		       8d 87 70 	      sta	modValue1
   2517  1385				   noResetValue
   2518  1385
   2519  1385							;inc 1025 ; DEBUG!
   2520  1385		       a9 96		      lda	#150
   2521  1387		       8d 8b 70 	      sta	modLFOMinValue
   2522  138a		       a9 fe		      lda	#254
   2523  138c		       8d 8a 70 	      sta	modLFOMaxValue
   2524  138f		       20 9f 13 	      jsr	doModulationLFO
   2525  1392		       ae 87 70 	      ldx	modValue1
   2526  1395		       8e 79 70 	      stx	paddleY
   2527  1398
   2528  1398		       ad 87 70 	      lda	modValue1
   2529  139b		       20 92 14 	      jsr	setPulseWidth
   2530  139e		       60		      rts
   2531  139f
   2532  139f							; Process special LFO for modulation
   2533  139f							; Store modLFOMaxValue and modLFOMinValue first
   2534  139f				   doModulationLFO
   2535  139f		       ad 03 70 	      lda	Frame
   2536  13a2		       29 07		      and	#%111
   2537  13a4		       f0 01		      beq	doModLFO
   2538  13a6		       60		      rts
   2539  13a7				   doModLFO
   2540  13a7		       ad 89 70 	      lda	modDirection
   2541  13aa		       f0 12		      beq	LFODown
   2542  13ac				   LFOUp
   2543  13ac		       ae 87 70 	      ldx	modValue1
   2544  13af		       e8		      inx
   2545  13b0		       8e 87 70 	      stx	modValue1
   2546  13b3							;jsr setPWValue
   2547  13b3		       8e 79 70 	      stx	paddleY
   2548  13b6							;jsr setPulseWidth
   2549  13b6		       ae 87 70 	      ldx	modValue1
   2550  13b9
   2551  13b9		       e0 f5		      cpx	#245
   2552  13bb		       f0 0d		      beq	switchDirections
   2553  13bd		       60		      rts
   2554  13be
   2555  13be				   LFODown
   2556  13be		       ae 87 70 	      ldx	modValue1
   2557  13c1		       ca		      dex
   2558  13c2		       8e 87 70 	      stx	modValue1
   2559  13c5		       e0 96		      cpx	#150
   2560  13c7		       f0 01		      beq	switchDirections
   2561  13c9		       60		      rts
   2562  13ca
   2563  13ca				   switchDirections
   2564  13ca		       ad 89 70 	      lda	modDirection
   2565  13cd		       18		      clc
   2566  13ce		       69 01		      adc	#1
   2567  13d0		       29 01		      and	#1
   2568  13d2		       8d 89 70 	      sta	modDirection
   2569  13d5		       60		      rts
   2570  13d6
   2571  13d6
   2572  13d6							;setFilterFromA:
   2573  13d6		       8d 9d 70 	      sta	filterSetValue
   2574  13d9		       60		      rts
   2575  13da
   2576  13da							; Old version of FilterFromA...
   2577  13da		       8d 16 d4 	      sta	SID1+SFILTH
   2578  13dd		       8d 16 71 	      sta	sidData+SFILTH
   2579  13e0		       18		      clc
   2580  13e1		       69 0a		      adc	#SID_SYMPHONY_FILTER_OFFSET
   2581  13e3		       90 02		      bcc	noPaddleRoll
   2582  13e5		       a9 ff		      lda	#255
   2583  13e7				   noPaddleRoll
   2584  13e7		       8d 36 d4 	      sta	SID2+SFILTH
   2585  13ea				   noPaddleControl
   2586  13ea		       60		      rts
   2587  13eb
   2588  13eb
   2589  13eb							;-------------------------------------
   2590  13eb							; Reading paddles from Prog Ref Guide
   2591  13eb							;-------------------------------------
   2592  13eb				   processPaddles
   2593  13eb				   pdlrd0		; entry point for one pair (condition x 1st)
   2594  13eb							; -  -  -  -  -
   2595  13eb							;sei				; disable interrupts
   2596  13eb		       a9 e0		      lda	#224	; disable keyboard scan
   2597  13ed		       8d 02 dc 	      sta	56322	; disable keyboard scan
   2598  13f0							; -  -  -  -  -
   2599  13f0		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
   2600  13f3		       8d 06 70 	      sta	Buffer	; save it away
   2601  13f6		       a9 c0		      lda	#$c0
   2602  13f8		       8d 02 dc 	      sta	Ciddra	; set port a for input
   2603  13fb		       a9 80		      lda	#$80
   2604  13fd
   2605  13fd				   pdlrd1
   2606  13fd		       8d 00 dc 	      sta	PortA	; address a pair of paddles
   2607  1400		       a0 80		      ldy	#$80	; wait a while
   2608  1402				   pdlrd2
   2609  1402		       ea		      nop
   2610  1403		       88		      dey
   2611  1404		       10 fc		      bpl	pdlrd2
   2612  1406
   2613  1406		       ae 19 d4 	      ldx	SID1+25	; get x value
   2614  1409		       8e 78 70 	      stx	paddleX
   2615  140c		       ac 1a d4 	      ldy	SID1+26	; get y value
   2616  140f		       8c 79 70 	      sty	paddleY
   2617  1412
   2618  1412		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
   2619  1415		       09 50		      ora	#80	; make it the same as other pair
   2620  1417		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
   2621  141a
   2622  141a		       ad 06 70 	      lda	Buffer
   2623  141d		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
   2624  1420							; -  -  -  -  -
   2625  1420							;cli			; enable interrupts
   2626  1420		       a9 ff		      lda	#255	; enable keyboard scan
   2627  1422		       8d 02 dc 	      sta	56322	; enable keyboard scan
   2628  1425							; -  -  -  -  -
   2629  1425
   2630  1425							;-------------------------------------
   2631  1425							; Auto paddle on - turn on paddle control if it's wiggled...
   2632  1425		       ad 29 70 	      lda	paddle
   2633  1428		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
   2634  142a		       e0 a0		      cpx	#160
   2635  142c		       90 05		      bcc	noPaddleTop
   2636  142e		       a9 01		      lda	#1
   2637  1430		       8d 76 70 	      sta	paddleTop
   2638  1433				   noPaddleTop
   2639  1433		       e0 60		      cpx	#96
   2640  1435		       b0 05		      bcs	noPaddleBottom
   2641  1437		       a9 01		      lda	#1
   2642  1439		       8d 77 70 	      sta	paddleBottom
   2643  143c				   noPaddleBottom
   2644  143c							;-----------
   2645  143c		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
   2646  143f		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
   2647  1441		       ad 77 70 	      lda	paddleBottom
   2648  1444		       f0 05		      beq	noPaddleAutoOn
   2649  1446		       a9 01		      lda	#1	; turn paddle on
   2650  1448		       20 47 19 	      jsr	setPaddles
   2651  144b				   noPaddleAutoOn
   2652  144b
   2653  144b							;-------------------------------------
   2654  144b							; check to see if paddle control is on
   2655  144b		       ad 29 70 	      lda	paddle
   2656  144e		       f0 04		      beq	processPaddle2
   2657  1450
   2658  1450							; paddle1 -> filter
   2659  1450		       8a		      txa
   2660  1451		       8d 9d 70 	      sta	filterSetValue
   2661  1454							;jsr setFilterFromA
   2662  1454
   2663  1454
   2664  1454							;sta SID1+SFILTH
   2665  1454							;sta sidData+SFILTH
   2666  1454							;clc
   2667  1454							;adc #SID_SYMPHONY_FILTER_OFFSET
   2668  1454							;bcc noPaddleRoll
   2669  1454							;lda #255
   2670  1454							;noPaddleRoll:
   2671  1454							;sta SID2+SFILTH
   2672  1454							;noPaddleControl
   2673  1454
   2674  1454							;-------------------------------------
   2675  1454							; paddle 2
   2676  1454
   2677  1454							;	paddle 2 -> Pulse Width
   2678  1454				   processPaddle2
   2679  1454		       ad 7a 70 	      lda	paddle2
   2680  1457		       c9 01		      cmp	#1
   2681  1459		       d0 36		      bne	skipPW
   2682  145b		       ad 79 70 	      lda	paddleY
   2683  145e		       c9 f5		      cmp	#245	; check for top limit (= no sound)
   2684  1460		       90 05		      bcc	notPTop
   2685  1462		       a9 f5		      lda	#245	; limit to maximum
   2686  1464		       8d 79 70 	      sta	paddleY
   2687  1467				   notPTop
   2688  1467		       ad 79 70 	      lda	paddleY
   2689  146a		       20 92 14 	      jsr	setPulseWidth
   2690  146d							;-------------
   2691  146d		       ad 79 70 	      lda	paddleY
   2692  1470		       0a		      asl
   2693  1471		       0a		      asl
   2694  1472		       0a		      asl
   2695  1473		       0a		      asl
   2696  1474		       09 0f		      ora	#$0F
   2697  1476		       8d 02 d4 	      sta	SID1+SV1PWL
   2698  1479		       8d 09 d4 	      sta	SID1+SV2PWL
   2699  147c		       8d 10 d4 	      sta	SID1+SV3PWL
   2700  147f		       8d 22 d4 	      sta	SID2+SV1PWL
   2701  1482		       8d 29 d4 	      sta	SID2+SV2PWL
   2702  1485		       8d 30 d4 	      sta	SID2+SV3PWL
   2703  1488		       8d 02 71 	      sta	sidData+SV1PWL
   2704  148b		       8d 09 71 	      sta	sidData+SV2PWL
   2705  148e		       8d 10 71 	      sta	sidData+SV3PWL
   2706  1491				   skipPW
   2707  1491		       60		      rts
   2708  1492							;END paddle ------------------------------
   2709  1492
   2710  1492
   2711  1492							;------------------
   2712  1492							; Set pulse width
   2713  1492							;------------------
   2714  1492				   setPulseWidth
   2715  1492		       4a		      lsr
   2716  1493		       4a		      lsr
   2717  1494		       4a		      lsr
   2718  1495		       4a		      lsr
   2719  1496		       8d 03 d4 	      sta	SID1+SV1PWH
   2720  1499		       8d 0a d4 	      sta	SID1+SV2PWH
   2721  149c		       8d 11 d4 	      sta	SID1+SV3PWH
   2722  149f		       8d 23 d4 	      sta	SID2+SV1PWH
   2723  14a2		       8d 2a d4 	      sta	SID2+SV2PWH
   2724  14a5		       8d 31 d4 	      sta	SID2+SV3PWH
   2725  14a8		       8d 03 71 	      sta	sidData+SV1PWH
   2726  14ab		       8d 0a 71 	      sta	sidData+SV2PWH
   2727  14ae		       8d 11 71 	      sta	sidData+SV3PWH
   2728  14b1		       60		      rts
   2729  14b2
   2730  14b2
   2731  14b2				   processVideoMode
   2732  14b2							; Turn off Vic when no notes are playing
   2733  14b2		       ad 20 70 	      lda	VICMode
   2734  14b5		       f0 1e		      beq	vicOff
   2735  14b7		       c9 02		      cmp	#2
   2736  14b9		       f0 25		      beq	vicOn
   2737  14bb		       ad 1f 70 	      lda	dispOn
   2738  14be		       d0 20		      bne	vicOn
   2739  14c0		       ad a0 70 	      lda	noteNumArray+0
   2740  14c3							;lda KeyA
   2741  14c3
   2742  14c3		       c9 ff		      cmp	#255
   2743  14c5		       d0 19		      bne	vicOn
   2744  14c7		       ad a1 70 	      lda	noteNumArray+1
   2745  14ca							;lda KeyB
   2746  14ca		       c9 ff		      cmp	#255
   2747  14cc		       d0 12		      bne	vicOn
   2748  14ce		       ad a2 70 	      lda	noteNumArray+2
   2749  14d1							;lda KeyC
   2750  14d1		       c9 ff		      cmp	#255
   2751  14d3		       d0 0b		      bne	vicOn
   2752  14d5				   vicOff
   2753  14d5							; Vic off
   2754  14d5		       ad 11 d0 	      lda	$d011
   2755  14d8		       29 ef		      and	#$EF
   2756  14da		       8d 11 d0 	      sta	$D011
   2757  14dd
   2758  14dd		       4c e8 14 	      jmp	endVic
   2759  14e0				   vicOn
   2760  14e0							; Vic on
   2761  14e0		       ad 11 d0 	      lda	$d011
   2762  14e3		       09 10		      ora	#$10
   2763  14e5		       8d 11 d0 	      sta	$d011
   2764  14e8
   2765  14e8				   endVic
   2766  14e8		       a9 00		      lda	#0
   2767  14ea		       8d 1f 70 	      sta	dispOn
   2768  14ed
   2769  14ed		       ad a0 70 	      lda	noteNumArray+0
   2770  14f0							;lda KeyA
   2771  14f0		       8d 0c 70 	      sta	temp
   2772  14f3		       20 09 15 	      jsr	drawPattern
   2773  14f6		       ad a1 70 	      lda	noteNumArray+1
   2774  14f9							;lda KeyB
   2775  14f9		       8d 0c 70 	      sta	temp
   2776  14fc		       20 09 15 	      jsr	drawPattern
   2777  14ff		       ad a2 70 	      lda	noteNumArray+2
   2778  1502							;lda KeyC
   2779  1502		       8d 0c 70 	      sta	temp
   2780  1505		       20 09 15 	      jsr	drawPattern
   2781  1508
   2782  1508		       60		      rts
   2783  1509							;jmp Loop
   2784  1509							;====================================================
   2785  1509							; bottom of main loop
   2786  1509							;====================================================
   2787  1509
   2788  1509
   2789  1509							;------------------------------------------
   2790  1509							; code to draw colored character patterns
   2791  1509							;------------------------------------------
   2792  1509							;PTRNTEXTBASE equ 1224
   2793  1509		       04 00	   PTRNTEXTBASE equ	1224-40*5
   2794  1509							;PTRNCOLORBASE equ 55496
   2795  1509		       d8 00	   PTRNCOLORBASE equ	55496-40*5
   2796  1509
   2797  1509
   2798  1509				   drawPattern
   2799  1509							; don't draw video when in help mode
   2800  1509		       ad 70 70 	      lda	helpMode
   2801  150c		       f0 01		      beq	continueVideo
   2802  150e		       60		      rts
   2803  150f				   continueVideo
   2804  150f							;---------
   2805  150f							; setup
   2806  150f		       ae 21 70 	      ldx	patPtr
   2807  1512		       e8		      inx
   2808  1513		       e0 28		      cpx	#40
   2809  1515		       d0 02		      bne	noPatReset
   2810  1517		       a2 00		      ldx	#0
   2811  1519				   noPatReset
   2812  1519		       8e 21 70 	      stx	patPtr
   2813  151c							;---------
   2814  151c		       a2 05		      ldx	#5
   2815  151e							; main pattern loop
   2816  151e				   patternLoop
   2817  151e				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
   2818  151e				  -	      rts		; DEBUG! disable patterns
   2819  151e					      endif
   2820  151e
   2821  151e		       bd c4 28 	      lda	patOffset,x
   2822  1521							;	clc
   2823  1521		       6d 21 70 	      adc	patPtr
   2824  1524		       a8		      tay
   2825  1525							;	clc
   2826  1525		       ad 0c 70 	      lda	temp
   2827  1528		       c9 ff		      cmp	#255
   2828  152a		       f0 0a		      beq	skipExtraColors
   2829  152c		       ad 03 70 	      lda	Frame
   2830  152f		       2d 45 70 	      and	videoMode
   2831  1532		       18		      clc
   2832  1533		       6d 0c 70 	      adc	temp
   2833  1536				   skipExtraColors
   2834  1536		       69 be		      adc	#190
   2835  1538		       8d 8f 70 	      sta	temp2
   2836  153b		       ad 0c 70 	      lda	temp
   2837  153e		       c9 ff		      cmp	#255
   2838  1540		       d0 05		      bne	reloadValue
   2839  1542		       a9 7f		      lda	#127
   2840  1544		       4c 4a 15 	      jmp	afterReloadValue
   2841  1547				   reloadValue
   2842  1547		       ad 8f 70 	      lda	temp2
   2843  154a				   afterReloadValue
   2844  154a		       91 2b		      sta	(lowTextPtr),y
   2845  154c		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
   2846  154f		       99 90 05 	      sta	PTRNTEXTBASE+400,y
   2847  1552		       99 58 06 	      sta	PTRNTEXTBASE+600,y
   2848  1555		       c0 f8		      cpy	#248
   2849  1557		       30 03		      bmi	noTopText
   2850  1559		       99 20 07 	      sta	PTRNTEXTBASE+800,y
   2851  155c				   noTopText
   2852  155c							;sbc #13
   2853  155c		       69 0c		      adc	#12
   2854  155e		       91 2d		      sta	(lowColorPtr),y
   2855  1560		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
   2856  1563		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
   2857  1566		       99 58 da 	      sta	PTRNCOLORBASE+600,y
   2858  1569		       c0 f8		      cpy	#248
   2859  156b		       30 03		      bmi	noTopColor
   2860  156d		       99 20 db 	      sta	PTRNCOLORBASE+800,y
   2861  1570				   noTopColor
   2862  1570		       ca		      dex
   2863  1571		       10 ab		      bpl	patternLoop
   2864  1573		       60		      rts
   2865  1574							;--------------------- end of draw patterns
   2866  1574
   2867  1574
   2868  1574							; All notes off
   2869  1574				   midiPanic
   2870  1574		       a2 08		      ldx	#NOTE_BUF_SIZE
   2871  1576		       a9 ff		      lda	#255
   2872  1578				   midiPanicLoop
   2873  1578		       9d a0 70 	      sta	noteNumArray,x
   2874  157b		       ca		      dex
   2875  157c		       10 fa		      bpl	midiPanicLoop
   2876  157e		       60		      rts
   2877  157f
   2878  157f
   2879  157f							;------------------------------------------
   2880  157f							; Read the keyboard
   2881  157f							;------------------------------------------
   2882  157f				   readKeyboard
   2883  157f							; Keyboard read setup
   2884  157f		       a9 7f		      lda	#127
   2885  1581		       8d 0d dc 	      sta	56333
   2886  1584
   2887  1584							;------------------------------------------
   2888  1584							; determine which keyset to use
   2889  1584							; (raw/shift/commodorekey/runstop)
   2890  1584							;------------------------------------------
   2891  1584
   2892  1584							; default is raw key functions (no modified keys)
   2893  1584		       a9 22		      lda	#<rawKeyFunctions	;-
   2894  1586		       85 c2		      sta	keyPtrL	;
   2895  1588		       a9 22		      lda	#>rawKeyFunctions	;
   2896  158a		       85 c3		      sta	keyPtrH	;-
   2897  158c
   2898  158c							; Check for Shift/C=
   2899  158c		       a9 bf		      lda	#~64	; (Right Shift)
   2900  158e		       8d 00 dc 	      sta	56320
   2901  1591		       ad 01 dc 	      lda	56321
   2902  1594		       29 10		      and	#16
   2903  1596		       d0 08		      bne	notAltKeys	;-
   2904  1598		       a9 96		      lda	#<shiftKeyFunctions	;
   2905  159a		       85 c2		      sta	keyPtrL	;
   2906  159c		       a9 23		      lda	#>shiftKeyFunctions	;-
   2907  159e		       85 c3		      sta	keyPtrH
   2908  15a0				   notAltKeys
   2909  15a0		       a9 fd		      lda	#~2	; (Left Shift)
   2910  15a2		       8d 00 dc 	      sta	56320
   2911  15a5		       ad 01 dc 	      lda	56321
   2912  15a8		       29 80		      and	#128
   2913  15aa		       d0 0b		      bne	notAltKeys2	;-
   2914  15ac		       a9 96		      lda	#<shiftKeyFunctions	;
   2915  15ae		       85 c2		      sta	keyPtrL	;
   2916  15b0		       a9 23		      lda	#>shiftKeyFunctions	;-
   2917  15b2		       85 c3		      sta	keyPtrH
   2918  15b4		       4c b9 16 	      jmp	doKeyCheck
   2919  15b7				   notAltKeys2
   2920  15b7		       a9 7f		      lda	#~128	; (C= key)
   2921  15b9		       8d 00 dc 	      sta	56320
   2922  15bc		       ad 01 dc 	      lda	56321
   2923  15bf		       29 20		      and	#32
   2924  15c1		       d0 08		      bne	notAltKeys3
   2925  15c3		       a9 12		      lda	#<commKeyFunctions	;-
   2926  15c5		       85 c2		      sta	keyPtrL	;
   2927  15c7		       a9 24		      lda	#>commKeyFunctions	;
   2928  15c9		       85 c3		      sta	keyPtrH	;-
   2929  15cb				   notAltKeys3
   2930  15cb		       a9 7f		      lda	#~128	; (Run Stop)
   2931  15cd		       8d 00 dc 	      sta	56320
   2932  15d0		       ad 01 dc 	      lda	56321
   2933  15d3		       29 80		      and	#128
   2934  15d5		       d0 08		      bne	notAltKeys4
   2935  15d7		       a9 8e		      lda	#<runstopKeyFunctions	;-
   2936  15d9		       85 c2		      sta	keyPtrL	;
   2937  15db		       a9 24		      lda	#>runstopKeyFunctions	;
   2938  15dd		       85 c3		      sta	keyPtrH	;-
   2939  15df				   notAltKeys4
   2940  15df		       a9 7f		      lda	#~128	; (CTRL key)
   2941  15e1		       8d 00 dc 	      sta	56320
   2942  15e4		       ad 01 dc 	      lda	56321
   2943  15e7		       29 04		      and	#4	; CTRL
   2944  15e9							;and #2 ; BACK ARROW
   2945  15e9		       d0 08		      bne	notAltKeys5
   2946  15eb		       a9 1a		      lda	#<CTRLKeyFunctions	;-
   2947  15ed		       85 c2		      sta	keyPtrL	;
   2948  15ef		       a9 23		      lda	#>CTRLKeyFunctions	;
   2949  15f1		       85 c3		      sta	keyPtrH	;-
   2950  15f3				   notAltKeys5
   2951  15f3
   2952  15f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2953  15f3				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
   2954  15f3				  -	      lda	#0
   2955  15f3				  -	      sta	keyTimer	; DEBUG!  Disable key timer
   2956  15f3					      ENDIF
   2957  15f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   2958  15f3
   2959  15f3							; handle keytimer
   2960  15f3							; (to avoid accidental keypresses on shifted keys)
   2961  15f3		       ad 58 70 	      lda	keyTimer
   2962  15f6		       f0 06		      beq	readKeys
   2963  15f8		       ce 58 70 	      dec	keyTimer
   2964  15fb		       4c fe 15 	      jmp	startCheck
   2965  15fe				   readKeys
   2966  15fe
   2967  15fe							;********************************
   2968  15fe							; Check for Notes Being Pressed
   2969  15fe							;********************************
   2970  15fe				   startCheck
   2971  15fe		       a9 00		      lda	#0
   2972  1600		       8d 9b 70 	      sta	keyCount
   2973  1603
   2974  1603							; Save last notes and clear note buffer
   2975  1603		       ae 80 70 	      ldx	bufferSize
   2976  1606							;dex
   2977  1606		       e8		      inx
   2978  1607		       e8		      inx
   2979  1608				   clearKeys
   2980  1608		       bd d0 70 	      lda	kbBuffer,x
   2981  160b				  -	      IF	DEBUG_DISPLAY=1
   2982  160b				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
   2983  160b					      ENDIF
   2984  160b		       9d e0 70 	      sta	lastKbBuffer,x
   2985  160e		       a9 ff		      lda	#255
   2986  1610		       9d d0 70 	      sta	kbBuffer,x
   2987  1613		       ca		      dex
   2988  1614		       10 f2		      bpl	clearKeys
   2989  1616
   2990  1616							;lda #255
   2991  1616							;sta KeyA
   2992  1616							;sta KeyB
   2993  1616							;sta KeyC
   2994  1616
   2995  1616		       ae 80 70 	      ldx	bufferSize
   2996  1619							;dex
   2997  1619		       e8		      inx
   2998  161a		       e8		      inx
   2999  161b		       a0 00		      ldy	#0
   3000  161d							; check for note keys being pressed
   3001  161d				   checkLoop
   3002  161d		       b9 b2 21 	      lda	col,y
   3003  1620		       f0 1c		      beq	quitCheck
   3004  1622		       8d 00 dc 	      sta	56320
   3005  1625		       ad 01 dc 	      lda	56321
   3006  1628		       39 cb 21 	      and	row,y
   3007  162b		       d0 0e		      bne	notPressed
   3008  162d		       98		      tya
   3009  162e		       18		      clc
   3010  162f		       6d 22 70 	      adc	keyOffset
   3011  1632							;sta KeyA,x
   3012  1632		       9d d0 70 	      sta	kbBuffer,x
   3013  1635		       ca		      dex
   3014  1636		       ee 9b 70 	      inc	keyCount
   3015  1639		       30 03		      bmi	quitCheck
   3016  163b				   notPressed
   3017  163b		       c8		      iny
   3018  163c		       d0 df		      bne	checkLoop
   3019  163e
   3020  163e				   quitCheck
   3021  163e							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3022  163e							; Generate note on/offs from keyboard data
   3023  163e							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3024  163e							; FIND NOTE ONS...
   3025  163e		       ae 80 70 	      ldx	bufferSize
   3026  1641							;dex
   3027  1641		       e8		      inx
   3028  1642		       e8		      inx
   3029  1643				   noteOnCheck
   3030  1643		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
   3031  1646		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3032  1649							;dey
   3033  1649		       c8		      iny
   3034  164a		       c8		      iny
   3035  164b				   innerNoteOnCheck
   3036  164b		       d9 e0 70 	      cmp	lastKbBuffer,y
   3037  164e		       f0 12		      beq	checkNextNote
   3038  1650		       88		      dey
   3039  1651		       10 f8		      bpl	innerNoteOnCheck
   3040  1653							;Found new note-on!
   3041  1653							;inc 53280
   3042  1653		       8d 81 70 	      sta	noteTempA
   3043  1656		       8e 82 70 	      stx	noteTempB
   3044  1659		       20 db 0b 	      jsr	doNoteOn
   3045  165c		       ad 81 70 	      lda	noteTempA
   3046  165f		       ae 82 70 	      ldx	noteTempB
   3047  1662							; TODO: call note on function
   3048  1662				   checkNextNote
   3049  1662		       ca		      dex
   3050  1663		       10 de		      bpl	noteOnCheck
   3051  1665
   3052  1665							; FIND NOTE OFF...
   3053  1665		       ae 80 70 	      ldx	bufferSize
   3054  1668							;dex
   3055  1668		       e8		      inx
   3056  1669		       e8		      inx
   3057  166a				   noteOnCheck2
   3058  166a		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
   3059  166d		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
   3060  1670							;dey
   3061  1670		       c8		      iny
   3062  1671		       c8		      iny
   3063  1672				   innerNoteOnCheck2
   3064  1672		       d9 d0 70 	      cmp	kbBuffer,y
   3065  1675		       f0 12		      beq	checkNextNote2
   3066  1677		       88		      dey
   3067  1678		       10 f8		      bpl	innerNoteOnCheck2
   3068  167a							;Found new note-on!
   3069  167a							;inc 53280
   3070  167a		       8d 81 70 	      sta	noteTempA
   3071  167d		       8e 82 70 	      stx	noteTempB
   3072  1680		       20 09 0c 	      jsr	doNoteOff
   3073  1683		       ad 81 70 	      lda	noteTempA
   3074  1686		       ae 82 70 	      ldx	noteTempB
   3075  1689							; TODO: call note on function
   3076  1689				   checkNextNote2
   3077  1689		       ca		      dex
   3078  168a		       10 de		      bpl	noteOnCheck2
   3079  168c							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3080  168c							; End of note on/off generation
   3081  168c							;-- -- -- -- -- -- -- -- -- -- -- -- --
   3082  168c
   3083  168c							; Skip key command check if 3 or more piano keys
   3084  168c							; are held to avoid quirks with C64 keyboard
   3085  168c							; matrix hardware.
   3086  168c		       ae 9b 70 	      ldx	keyCount
   3087  168f		       f0 0d		      beq	skipMinimalKeyboard
   3088  1691							; default is raw key functions (no modified keys)
   3089  1691		       a9 9e		      lda	#<minimalKeyFunctions	;-
   3090  1693		       85 c2		      sta	keyPtrL	;
   3091  1695		       a9 22		      lda	#>minimalKeyFunctions	;
   3092  1697		       85 c3		      sta	keyPtrH	;-
   3093  1699							; also disable keytimer...
   3094  1699		       a9 00		      lda	#0
   3095  169b		       8d 58 70 	      sta	keyTimer
   3096  169e				   skipMinimalKeyboard
   3097  169e
   3098  169e							; Check key timer...
   3099  169e		       ad 58 70 	      lda	keyTimer
   3100  16a1		       f0 01		      beq	contReadKeys
   3101  16a3		       60		      rts
   3102  16a4				   contReadKeys
   3103  16a4		       8e 66 70 	      stx	lastOsc
   3104  16a7
   3105  16a7							; Check for space bar (pitch bender)...
   3106  16a7		       a9 7f		      lda	#~$80
   3107  16a9		       8d 00 dc 	      sta	56320
   3108  16ac		       ad 01 dc 	      lda	56321
   3109  16af		       29 10		      and	#$10
   3110  16b1		       d0 06		      bne	noSpace
   3111  16b3		       20 22 18 	      jsr	bendBender
   3112  16b6		       4c 09 17 	      jmp	skipKeyCheck
   3113  16b9				   noSpace
   3114  16b9
   3115  16b9
   3116  16b9				   doKeyCheck
   3117  16b9							;********************************
   3118  16b9							; Generic command key check
   3119  16b9							;********************************
   3120  16b9
   3121  16b9		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
   3122  16bb				   keyChkLoop
   3123  16bb		       bd e4 21 	      lda	commandKeys,x
   3124  16be		       8d 00 dc 	      sta	56320
   3125  16c1		       ad 01 dc 	      lda	56321
   3126  16c4		       3d e5 21 	      and	commandKeys+1,x
   3127  16c7		       d0 3c		      bne	keyNotDown
   3128  16c9
   3129  16c9							; key down!
   3130  16c9							;-----------
   3131  16c9		       8a		      txa		;multiply x by 2
   3132  16ca		       0a		      asl		;  to get the offset
   3133  16cb		       a8		      tay		;  into the key functions array
   3134  16cc
   3135  16cc							; get address of function to call
   3136  16cc		       b1 c2		      lda	(keyPtrL),y
   3137  16ce		       8d 62 70 	      sta	temp16L
   3138  16d1		       c8		      iny
   3139  16d2		       b1 c2		      lda	(keyPtrL),y
   3140  16d4		       8d 63 70 	      sta	temp16H
   3141  16d7		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
   3142  16d9							;  no function assigned to this key so quit
   3143  16d9
   3144  16d9							; put return address onto stack to simulate JSR with a JMP()
   3145  16d9		       a9 16		      lda	#>returnAddress
   3146  16db		       48		      pha
   3147  16dc		       a9 f3		      lda	#<returnAddress
   3148  16de		       48		      pha
   3149  16df
   3150  16df							; save the value of X
   3151  16df		       8e 64 70 	      stx	saveX
   3152  16e2
   3153  16e2		       c8		      iny
   3154  16e3		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
   3155  16e5		       8d 65 70 	      sta	keyTemp
   3156  16e8		       c8		      iny
   3157  16e9		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
   3158  16eb		       a8		      tay
   3159  16ec		       ad 65 70 	      lda	keyTemp
   3160  16ef
   3161  16ef							; indirect jump to function, which acts as a JSR since
   3162  16ef							;   we pushed the return address onto the stack
   3163  16ef		       6c 62 70 	      jmp	(temp16L)
   3164  16f2
   3165  16f2		       ea		      nop
   3166  16f3				   returnAddress
   3167  16f3		       ea		      nop
   3168  16f4
   3169  16f4		       ae 64 70 	      ldx	saveX	; restore X
   3170  16f7
   3171  16f7							; only set the keytimer when a raw key is used
   3172  16f7		       a5 c2		      lda	keyPtrL
   3173  16f9		       c9 22		      cmp	#<rawKeyFunctions
   3174  16fb		       f0 08		      beq	keyNotDown
   3175  16fd
   3176  16fd		       a9 28		      lda	#KEYTIME
   3177  16ff		       8d 58 70 	      sta	keyTimer
   3178  1702							;-----------
   3179  1702		       4c 09 17 	      jmp	skipKeyCheck	; quit keycheck after a key is found
   3180  1705
   3181  1705				   keyNotDown
   3182  1705		       ca		      dex
   3183  1706		       ca		      dex
   3184  1707		       10 b2		      bpl	keyChkLoop
   3185  1709
   3186  1709				   skipKeyCheck
   3187  1709
   3188  1709							; done
   3189  1709		       60		      rts
   3190  170a
   3191  170a							;-------------------------------------------
   3192  170a							; new key-based set functions
   3193  170a							;-------------------------------------------
   3194  170a
   3195  170a				   ksavePatch
   3196  170a		       a9 01		      lda	#1
   3197  170c		       8d 75 70 	      sta	customPatchSaved
   3198  170f							;-------------------
   3199  170f		       a9 1d		      lda	#SAVED_PATCH_MESSAGE
   3200  1711		       8d 47 70 	      sta	patchSetY
   3201  1714		       20 6e 1c 	      jsr	showPatchName
   3202  1717							;----------------
   3203  1717		       a2 19		      ldx	#$19
   3204  1719				   saveLoop
   3205  1719		       bd 00 71 	      lda	sidData,x
   3206  171c		       9d 20 71 	      sta	sidSaveData,x
   3207  171f		       ca		      dex
   3208  1720		       10 f7		      bpl	saveLoop
   3209  1722							;----------------
   3210  1722		       ad 29 70 	      lda	paddle
   3211  1725		       8d 41 71 	      sta	savePaddle
   3212  1728		       ad 6b 70 	      lda	octave
   3213  172b		       8d 42 71 	      sta	saveOctave
   3214  172e		       ad 1d 70 	      lda	soundMode
   3215  1731		       8d 43 71 	      sta	saveSoundMode
   3216  1734		       ad 86 70 	      lda	fxType
   3217  1737		       8d 43 71 	      sta	saveFXType
   3218  173a		       ad 1e 70 	      lda	arpSpeed
   3219  173d		       8d 44 71 	      sta	saveArpSpeed
   3220  1740		       ad 49 70 	      lda	LFODepth
   3221  1743		       8d 46 71 	      sta	saveLFODepth
   3222  1746		       ad 48 70 	      lda	LFORate
   3223  1749		       8d 47 71 	      sta	saveLFORate
   3224  174c		       ad 1c 70 	      lda	volume
   3225  174f		       8d 48 71 	      sta	saveVolume
   3226  1752		       ad 24 70 	      lda	volModeRAM
   3227  1755		       8d 49 71 	      sta	saveVolMode
   3228  1758		       ad 57 70 	      lda	filter
   3229  175b		       8d 4a 71 	      sta	saveFilter
   3230  175e							;----------------
   3231  175e		       60		      rts
   3232  175f
   3233  175f				   kloadPatch
   3234  175f							; don't load patch if none has been saved
   3235  175f		       ad 75 70 	      lda	customPatchSaved
   3236  1762		       d0 01		      bne	contLoadPatch
   3237  1764		       60		      rts
   3238  1765				   contLoadPatch
   3239  1765							; Maybe show this name with direct text instead?...
   3240  1765							;lda #SAVED_PATCH_MESSAGE
   3241  1765							;sta patchSetY
   3242  1765							;jsr showPatchName
   3243  1765							;----------------
   3244  1765		       a9 1e		      lda	#CUSTOM_PATCH_NUMBER
   3245  1767		       8d 47 70 	      sta	patchSetY
   3246  176a		       20 6e 1c 	      jsr	showPatchName
   3247  176d							;-----------------------
   3248  176d		       ad 49 71 	      lda	saveVolMode
   3249  1770		       8d 24 70 	      sta	volModeRAM
   3250  1773							;.....................
   3251  1773		       ad 48 71 	      lda	saveVolume
   3252  1776		       8d 1c 70 	      sta	volume
   3253  1779							;.....................
   3254  1779		       ad 41 71 	      lda	savePaddle
   3255  177c		       20 47 19 	      jsr	setPaddles
   3256  177f							;.....................
   3257  177f		       ad 42 71 	      lda	saveOctave
   3258  1782		       20 bf 1a 	      jsr	setOctave
   3259  1785							;.....................
   3260  1785		       ad 43 71 	      lda	saveSoundMode
   3261  1788		       8d 1d 70 	      sta	soundMode
   3262  178b							;lda saveArpSpeed
   3263  178b		       20 21 1b 	      jsr	setMode
   3264  178e							;.....................
   3265  178e		       ad 43 71 	      lda	saveFXType
   3266  1791		       8d 86 70 	      sta	fxType
   3267  1794		       20 f9 1a 	      jsr	setFX
   3268  1797							;.....................
   3269  1797		       ad 46 71 	      lda	saveLFODepth
   3270  179a		       20 68 19 	      jsr	setLFODepth
   3271  179d							;.....................
   3272  179d		       ad 47 71 	      lda	saveLFORate
   3273  17a0		       20 7e 19 	      jsr	setLFORate
   3274  17a3							;.....................
   3275  17a3		       ad 4a 71 	      lda	saveFilter
   3276  17a6		       8d 57 70 	      sta	filter
   3277  17a9							;----------------
   3278  17a9		       a2 19		      ldx	#$19
   3279  17ab				   loadLoop
   3280  17ab		       bd 20 71 	      lda	sidSaveData,x
   3281  17ae		       9d 00 d4 	      sta	SID1,x
   3282  17b1		       9d 20 d4 	      sta	SID2,x
   3283  17b4		       9d 00 71 	      sta	sidData,x
   3284  17b7		       ca		      dex
   3285  17b8		       10 f1		      bpl	loadLoop
   3286  17ba							;----------------
   3287  17ba		       ad 04 71 	      lda	sidData+SV1WAVE
   3288  17bd		       8d 30 70 	      sta	WaveType
   3289  17c0		       ad 0b 71 	      lda	sidData+SV2WAVE
   3290  17c3		       8d 37 70 	      sta	WaveType2
   3291  17c6		       ad 12 71 	      lda	sidData+SV3WAVE
   3292  17c9		       8d 3e 70 	      sta	WaveType3
   3293  17cc							;----------------
   3294  17cc		       60		      rts
   3295  17cd
   3296  17cd				   khelp
   3297  17cd		       a9 00		      lda	#0
   3298  17cf		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
   3299  17d2
   3300  17d2		       20 41 20 	      jsr	clrScr
   3301  17d5		       a9 28		      lda	#KEYTIME
   3302  17d7		       8d 58 70 	      sta	keyTimer
   3303  17da		       ad 70 70 	      lda	helpMode
   3304  17dd		       49 01		      eor	#1
   3305  17df							;sta helpMode
   3306  17df		       20 e8 18 	      jsr	setHelpMode
   3307  17e2		       20 30 1f 	      jsr	displayInit
   3308  17e5		       ad 70 70 	      lda	helpMode
   3309  17e8		       f0 07		      beq	showHelpMessage
   3310  17ea							;---------------
   3311  17ea							; Show full help page...
   3312  17ea		       a2 2c		      ldx	#>normalHelp	;low/MSB
   3313  17ec		       a0 78		      ldy	#<normalHelp	;high/LSB
   3314  17ee		       4c 98 20 	      jmp	displayPage	; <--- Draw full help page
   3315  17f1							; \/ Show help message at bottom of screen
   3316  17f1				   showHelpMessage
   3317  17f1							; Show help key...
   3318  17f1		       a2 00		      ldx	#0
   3319  17f3				   helpMessageLoop
   3320  17f3		       bd 5a 2c 	      lda	helpMessage,x
   3321  17f6		       f0 11		      beq	endHelpMsgLoop
   3322  17f8		       c9 40		      cmp	#64
   3323  17fa		       30 02		      bmi	showSpace99
   3324  17fc		       e9 40		      sbc	#64
   3325  17fe				   showSpace99
   3326  17fe		       9d c0 07 	      sta	1024+24*40,x
   3327  1801		       a9 0b		      lda	#11
   3328  1803		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
   3329  1806		       e8		      inx
   3330  1807		       d0 ea		      bne	helpMessageLoop
   3331  1809				   endHelpMsgLoop
   3332  1809
   3333  1809		       20 fe 19 	      jsr	showMidiMode
   3334  180c
   3335  180c
   3336  180c							;	jsr displayInit
   3337  180c
   3338  180c
   3339  180c
   3340  180c							;	ldx #39
   3341  180c							;	lda #32
   3342  180c							;clearLastRow:
   3343  180c							;	sta 1024+23*40,x
   3344  180c							;	dex
   3345  180c							;	bpl clearLastRow
   3346  180c		       60		      rts
   3347  180d
   3348  180d				   kclearModulation
   3349  180d		       a9 00		      lda	#0
   3350  180f		       20 f6 1a 	      jsr	ksetFX
   3351  1812		       a9 00		      lda	#0
   3352  1814		       20 68 19 	      jsr	setLFODepth
   3353  1817		       a9 00		      lda	#0
   3354  1819		       4c 7e 19 	      jmp	setLFORate
   3355  181c
   3356  181c
   3357  181c
   3358  181c				   ksetPalNtsc
   3359  181c		       8d 61 70 	      sta	NTSCmode
   3360  181f		       4c 30 1f 	      jmp	displayInit
   3361  1822
   3362  1822							; bend the bender down
   3363  1822				   bendBender
   3364  1822		       ad 40 70 	      lda	bender
   3365  1825		       c9 fc		      cmp	#252
   3366  1827		       f0 11		      beq	notBender
   3367  1829		       ee 40 70 	      inc	bender
   3368  182c		       ee 40 70 	      inc	bender
   3369  182f		       ee 40 70 	      inc	bender
   3370  1832		       ee 40 70 	      inc	bender
   3371  1835		       a9 01		      lda	#1
   3372  1837		       8d 83 70 	      sta	benderAutoreset
   3373  183a				   notBender
   3374  183a		       60		      rts
   3375  183b
   3376  183b							; set VIC video chip mode
   3377  183b				   setVIC
   3378  183b		       8d 20 70 	      sta	VICMode
   3379  183e		       60		      rts
   3380  183f
   3381  183f							; set paddle on/off
   3382  183f				   ksetPaddles
   3383  183f		       20 47 19 	      jsr	setPaddles
   3384  1842		       ad 57 70 	      lda	filter
   3385  1845		       8d 9d 70 	      sta	filterSetValue
   3386  1848							;jmp setFilter
   3387  1848
   3388  1848				   ksetPad2
   3389  1848		       8d 7a 70 	      sta	paddle2
   3390  184b		       c9 00		      cmp	#0
   3391  184d		       f0 03		      beq	skipLastPadSave
   3392  184f		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
   3393  1852				   skipLastPadSave
   3394  1852		       0a		      asl
   3395  1853		       0a		      asl
   3396  1854		       18		      clc
   3397  1855		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
   3398  1857		       aa		      tax
   3399  1858		       a0 c4		      ldy	#PAD2TEXT	; screen position
   3400  185a		       4c 10 1f 	      jmp	updateText
   3401  185d
   3402  185d				   ksetFilter
   3403  185d		       a2 00		      ldx	#0
   3404  185f		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
   3405  1862							;jsr setFilter
   3406  1862		       8d 9d 70 	      sta	filterSetValue
   3407  1865		       a9 00		      lda	#0
   3408  1867		       4c 47 19 	      jmp	setPaddles
   3409  186a
   3410  186a
   3411  186a				   kfiltOnOff
   3412  186a		       8c 6c 70 	      sty	filterStatus
   3413  186d				   setResonance
   3414  186d		       ac 6c 70 	      ldy	filterStatus
   3415  1870							;------------------
   3416  1870							;lda sidData+SFILTC
   3417  1870		       ad 97 70 	      lda	resonance
   3418  1873		       19 9a 18 	      ora	filtOrValue,y
   3419  1876		       39 9d 18 	      and	filtAndValue,y
   3420  1879		       8d 17 d4 	      sta	SID1+SFILTC
   3421  187c		       8d 17 71 	      sta	sidData+SFILTC
   3422  187f							;------------------
   3423  187f		       ad 17 71 	      lda	sidData+SFILTC
   3424  1882		       19 9a 18 	      ora	filtOrValue,y
   3425  1885		       39 9d 18 	      and	filtAndValue,y
   3426  1888		       8d 37 d4 	      sta	SID2+SFILTC
   3427  188b							;------------------
   3428  188b		       b9 a0 18 	      lda	filtDisableValue,y
   3429  188e		       8d 5c 70 	      sta	filterDisable
   3430  1891							;------------------
   3431  1891				   showFiltOnOff
   3432  1891		       b9 a3 18 	      lda	filtTextValue,y
   3433  1894		       aa		      tax
   3434  1895		       a0 4c		      ldy	#FILTERTEXT2
   3435  1897		       4c 10 1f 	      jmp	updateText
   3436  189a
   3437  189a
   3438  189a				   filtOrValue
   3439  189a		       0f 00 00 	      byte.b	$0F,0,0
   3440  189d				   filtAndValue
   3441  189d		       ff f0 f0 	      byte.b	$FF,$F0,$F0
   3442  18a0				   filtDisableValue
   3443  18a0		       00 00 01 	      byte.b	0,0,1
   3444  18a3				   filtTextValue
   3445  18a3		       04 00 60 	      byte.b	4,0,DISABLED
   3446  18a6
   3447  18a6				   ksetTune
   3448  18a6		       8c 71 70 	      sty	tuneSetting
   3449  18a9
   3450  18a9		       98		      tya
   3451  18aa		       38		      sec
   3452  18ab		       e9 04		      sbc	#4
   3453  18ad		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
   3454  18b0
   3455  18b0							;lda tuneArrPtrLL,y
   3456  18b0							;sta tunePtrL
   3457  18b0							;lda tuneArrPtrLH,y
   3458  18b0							;sta tunePtrL+1
   3459  18b0							;lda tuneArrPtrHL,y
   3460  18b0							;sta tunePtrH
   3461  18b0							;lda tuneArrPtrHH,y
   3462  18b0							;sta tunePtrH+1
   3463  18b0		       98		      tya
   3464  18b1		       0a		      asl
   3465  18b2		       0a		      asl
   3466  18b3		       18		      clc
   3467  18b4		       69 14		      adc	#TUNING
   3468  18b6		       aa		      tax
   3469  18b7		       a0 57		      ldy	#TUNINGTEXT
   3470  18b9		       4c 10 1f 	      jmp	updateText
   3471  18bc
   3472  18bc
   3473  18bc				   setFullScreenMode
   3474  18bc		       8d 67 70 	      sta	fullScreenMode
   3475  18bf		       c9 00		      cmp	#0
   3476  18c1		       f0 11		      beq	notFullScreen
   3477  18c3							;--------
   3478  18c3		       a9 00		      lda	#<(PTRNTEXTBASE)
   3479  18c5		       85 2b		      sta	lowTextPtr
   3480  18c7		       a9 04		      lda	#>(PTRNTEXTBASE)
   3481  18c9		       85 2c		      sta	lowTextPtr+1
   3482  18cb		       a9 00		      lda	#<(PTRNCOLORBASE)
   3483  18cd		       85 2d		      sta	lowColorPtr
   3484  18cf		       a9 d8		      lda	#>(PTRNCOLORBASE)
   3485  18d1		       85 2e		      sta	lowColorPtr+1
   3486  18d3		       60		      rts
   3487  18d4							;--------
   3488  18d4				   notFullScreen
   3489  18d4		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
   3490  18d6		       85 2b		      sta	lowTextPtr
   3491  18d8		       a9 04		      lda	#>(PTRNTEXTBASE+200)
   3492  18da		       85 2c		      sta	lowTextPtr+1
   3493  18dc		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
   3494  18de		       85 2d		      sta	lowColorPtr
   3495  18e0		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
   3496  18e2		       85 2e		      sta	lowColorPtr+1
   3497  18e4		       20 30 1f 	      jsr	displayInit
   3498  18e7		       60		      rts
   3499  18e8
   3500  18e8				   setHelpMode
   3501  18e8		       8d 70 70 	      sta	helpMode
   3502  18eb		       60		      rts
   3503  18ec
   3504  18ec							;--------------------------------
   3505  18ec							; Set Sync
   3506  18ec							;--------------------------------
   3507  18ec							; This function does not appear to be used anywhere
   3508  18ec							;--------------------------------
   3509  18ec				   setSync
   3510  18ec		       8d 45 70 	      sta	videoMode
   3511  18ef		       a8		      tay
   3512  18f0		       0a		      asl
   3513  18f1		       0a		      asl
   3514  18f2		       f0 1e		      beq	syncOff
   3515  18f4		       8d 0c 70 	      sta	temp
   3516  18f7		       0d 30 70 	      ora	WaveType
   3517  18fa		       8d 30 70 	      sta	WaveType
   3518  18fd		       ad 0c 70 	      lda	temp
   3519  1900		       0d 37 70 	      ora	WaveType2
   3520  1903		       8d 37 70 	      sta	WaveType2
   3521  1906		       ad 0c 70 	      lda	temp
   3522  1909		       0d 3e 70 	      ora	WaveType3
   3523  190c		       8d 3e 70 	      sta	WaveType3
   3524  190f		       4c 2f 19 	      jmp	contSync
   3525  1912				   syncOff
   3526  1912		       49 ff		      eor	#255
   3527  1914		       8d 0c 70 	      sta	temp
   3528  1917		       2d 30 70 	      and	WaveType
   3529  191a		       8d 30 70 	      sta	WaveType
   3530  191d		       ad 0c 70 	      lda	temp
   3531  1920		       2d 37 70 	      and	WaveType2
   3532  1923		       8d 37 70 	      sta	WaveType2
   3533  1926		       ad 0c 70 	      lda	temp
   3534  1929		       2d 3e 70 	      and	WaveType3
   3535  192c		       8d 3e 70 	      sta	WaveType3
   3536  192f				   contSync
   3537  192f		       98		      tya
   3538  1930		       0a		      asl
   3539  1931		       0a		      asl
   3540  1932		       aa		      tax
   3541  1933		       a0 12		      ldy	#SYNCTEXT
   3542  1935		       4c 10 1f 	      jmp	updateText
   3543  1938		       60		      rts
   3544  1939
   3545  1939							;--------------------------------
   3546  1939							; Set Video Mode
   3547  1939							;--------------------------------
   3548  1939				   setVideoMode
   3549  1939		       8d 45 70 	      sta	videoMode
   3550  193c		       8c 68 70 	      sty	videoText
   3551  193f		       98		      tya
   3552  1940		       18		      clc
   3553  1941		       69 30		      adc	#"0"
   3554  1943		       8d bc 04 	      sta	1024+VIDEOTEXT
   3555  1946		       60		      rts
   3556  1947
   3557  1947							;--------------------------------
   3558  1947							; Set Paddles
   3559  1947							;--------------------------------
   3560  1947				   setPaddles
   3561  1947		       8d 29 70 	      sta	paddle
   3562  194a		       0a		      asl
   3563  194b		       d0 0c		      bne	noFilterReset
   3564  194d		       ae 57 70 	      ldx	filter
   3565  1950		       8e 16 d4 	      stx	SID1+SFILTH
   3566  1953		       8e 36 d4 	      stx	SID2+SFILTH
   3567  1956		       8d 16 71 	      sta	sidData+SFILTH
   3568  1959				   noFilterReset
   3569  1959		       a0 00		      ldy	#0
   3570  195b		       8c 76 70 	      sty	paddleTop
   3571  195e		       8c 77 70 	      sty	paddleBottom
   3572  1961				   showPaddle
   3573  1961		       0a		      asl
   3574  1962		       aa		      tax
   3575  1963		       a0 9c		      ldy	#PADDLETEXT
   3576  1965		       4c 10 1f 	      jmp	updateText
   3577  1968
   3578  1968
   3579  1968							;--------------------------------
   3580  1968							; Set LFO Depth
   3581  1968							;--------------------------------
   3582  1968				   setLFODepth
   3583  1968		       8d 49 70 	      sta	LFODepth
   3584  196b							;showLFO:
   3585  196b		       ac 70 70 	      ldy	helpMode
   3586  196e		       f0 01		      beq	doShowLFO
   3587  1970		       60		      rts
   3588  1971				   doShowLFO
   3589  1971		       a0 6c		      ldy	#LFODEPTHTEXT
   3590  1973		       18		      clc
   3591  1974		       69 30		      adc	#"0"
   3592  1976		       99 00 04 	      sta	1024,y
   3593  1979		       a9 20		      lda	#32
   3594  197b		       a2 08		      ldx	#8
   3595  197d		       60		      rts
   3596  197e
   3597  197e
   3598  197e							;--------------------------------
   3599  197e							; Set LFO Rate
   3600  197e							;--------------------------------
   3601  197e				   setLFORate
   3602  197e		       8d 48 70 	      sta	LFORate
   3603  1981				   showLFORate
   3604  1981		       ac 70 70 	      ldy	helpMode
   3605  1984		       f0 01		      beq	doShowLFORate
   3606  1986		       60		      rts
   3607  1987				   doShowLFORate
   3608  1987		       a0 94		      ldy	#LFORATETEXT
   3609  1989		       18		      clc
   3610  198a		       69 30		      adc	#"0"
   3611  198c		       99 00 04 	      sta	1024,y
   3612  198f							;lda #32
   3613  198f		       a9 02		      lda	#CYNTHCART_COLOR
   3614  1991		       a2 08		      ldx	#8
   3615  1993				   LFOClear
   3616  1993							;sta 1064,x
   3617  1993		       9d 00 d8 	      sta	55296,x
   3618  1996		       ca		      dex
   3619  1997		       10 fa		      bpl	LFOClear
   3620  1999		       60		      rts
   3621  199a
   3622  199a							;--------------------------------
   3623  199a							; Set Release
   3624  199a							;--------------------------------
   3625  199a							; A = release value
   3626  199a				   setRelease
   3627  199a		       8d 6a 70 	      sta	release
   3628  199d		       8d 06 d4 	      sta	SID1+SV1SR
   3629  19a0		       8d 0d d4 	      sta	SID1+SV2SR
   3630  19a3		       8d 14 d4 	      sta	SID1+SV3SR
   3631  19a6		       8d 26 d4 	      sta	SID2+SV1SR
   3632  19a9		       8d 2d d4 	      sta	SID2+SV2SR
   3633  19ac		       8d 34 d4 	      sta	SID2+SV3SR
   3634  19af		       8d 06 71 	      sta	sidData+SV1SR
   3635  19b2		       8d 0d 71 	      sta	sidData+SV2SR
   3636  19b5		       8d 14 71 	      sta	sidData+SV3SR
   3637  19b8							;----------------
   3638  19b8				   showRelease
   3639  19b8		       ac 70 70 	      ldy	helpMode
   3640  19bb		       f0 01		      beq	doShowRelease
   3641  19bd		       60		      rts
   3642  19be				   doShowRelease
   3643  19be		       29 0f		      and	#$0F
   3644  19c0		       a8		      tay
   3645  19c1		       b9 eb 19 	      lda	sixteenToTen,y
   3646  19c4		       18		      clc
   3647  19c5		       69 30		      adc	#"0"
   3648  19c7		       8d 8a 04 	      sta	1024+RELTEXT
   3649  19ca		       60		      rts
   3650  19cb
   3651  19cb		       a0 8a		      ldy	#RELTEXT
   3652  19cd		       a9 e0		      lda	#REL_SHORT
   3653  19cf		       cd 6a 70 	      cmp	release
   3654  19d2		       30 05		      bmi	notRel0
   3655  19d4		       a9 30		      lda	#"0"
   3656  19d6		       4c e7 19 	      jmp	setReleaseText
   3657  19d9				   notRel0
   3658  19d9		       a9 e9		      lda	#REL_MED
   3659  19db		       cd 6a 70 	      cmp	release
   3660  19de		       30 05		      bmi	notRel1
   3661  19e0		       a9 31		      lda	#"1"
   3662  19e2		       4c e7 19 	      jmp	setReleaseText
   3663  19e5				   notRel1
   3664  19e5		       a9 32		      lda	#"2"
   3665  19e7				   setReleaseText
   3666  19e7		       99 00 04 	      sta	1024,y
   3667  19ea		       60		      rts
   3668  19eb
   3669  19eb				   sixteenToTen
   3670  19eb		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
   3671  19fb
   3672  19fb
   3673  19fb				   setMidiMode
   3674  19fb		       8d f7 70 	      sta	midiMode
   3675  19fe				   showMidiMode
   3676  19fe		       a9 2f		      lda	#47
   3677  1a00		       8d dc 07 	      sta	2012
   3678  1a03		       8d e1 07 	      sta	2017
   3679  1a06		       ae f7 70 	      ldx	midiMode
   3680  1a09		       30 19		      bmi	showOmni
   3681  1a0b							;sta 2010
   3682  1a0b				   showChannel
   3683  1a0b		       a9 20		      lda	#32
   3684  1a0d		       8d d8 07 	      sta	2008
   3685  1a10		       a9 03		      lda	#3
   3686  1a12		       8d d9 07 	      sta	2009
   3687  1a15		       a9 08		      lda	#8
   3688  1a17		       8d da 07 	      sta	2010
   3689  1a1a		       a9 31		      lda	#49
   3690  1a1c		       18		      clc
   3691  1a1d		       6d f7 70 	      adc	midiMode
   3692  1a20		       8d db 07 	      sta	2011
   3693  1a23		       60		      rts
   3694  1a24				   showOmni
   3695  1a24		       a9 0f		      lda	#15
   3696  1a26		       8d d8 07 	      sta	2008
   3697  1a29		       a9 0d		      lda	#13
   3698  1a2b		       8d d9 07 	      sta	2009
   3699  1a2e		       a9 0e		      lda	#14
   3700  1a30		       8d da 07 	      sta	2010
   3701  1a33		       a9 09		      lda	#9
   3702  1a35		       8d db 07 	      sta	2011
   3703  1a38		       60		      rts
   3704  1a39
   3705  1a39							;--------------------------------
   3706  1a39							; Set Attack
   3707  1a39							;--------------------------------
   3708  1a39							; A = Attack value
   3709  1a39				   setAttack
   3710  1a39		       8d 69 70 	      sta	attack
   3711  1a3c		       8d 0c d4 	      sta	SID1+SV2AD
   3712  1a3f		       8d 13 d4 	      sta	SID1+SV3AD
   3713  1a42		       8d 2c d4 	      sta	SID2+SV2AD
   3714  1a45		       8d 33 d4 	      sta	SID2+SV3AD
   3715  1a48		       8d 05 d4 	      sta	SID1+SV1AD
   3716  1a4b		       8d 25 d4 	      sta	SID2+SV1AD
   3717  1a4e		       8d 0c 71 	      sta	sidData+SV2AD
   3718  1a51		       8d 13 71 	      sta	sidData+SV3AD
   3719  1a54		       8d 05 71 	      sta	sidData+SV1AD
   3720  1a57							;----------------
   3721  1a57				   showAttack
   3722  1a57		       ac 70 70 	      ldy	helpMode
   3723  1a5a		       f0 01		      beq	doShowAttack
   3724  1a5c		       60		      rts
   3725  1a5d				   doShowAttack
   3726  1a5d		       4a		      lsr
   3727  1a5e		       4a		      lsr
   3728  1a5f		       4a		      lsr
   3729  1a60		       4a		      lsr
   3730  1a61		       a8		      tay
   3731  1a62		       b9 eb 19 	      lda	sixteenToTen,y
   3732  1a65		       18		      clc
   3733  1a66		       69 30		      adc	#"0"
   3734  1a68		       8d 62 04 	      sta	1024+ATKTEXT
   3735  1a6b		       60		      rts
   3736  1a6c
   3737  1a6c
   3738  1a6c							;-----------------------------------
   3739  1a6c							; Set Volume to A (for key command)
   3740  1a6c							;-----------------------------------
   3741  1a6c				   ksetVolume
   3742  1a6c		       8d 1c 70 	      sta	volume
   3743  1a6f
   3744  1a6f
   3745  1a6f							;-----------------------------------
   3746  1a6f							; Set Volume
   3747  1a6f							;-----------------------------------
   3748  1a6f				   setVolume
   3749  1a6f		       ad 24 70 	      lda	volModeRAM
   3750  1a72		       29 f0		      and	#$F0
   3751  1a74		       0d 1c 70 	      ora	volume
   3752  1a77		       8d 18 d4 	      sta	SID1+SVOLMODE
   3753  1a7a		       8d 38 d4 	      sta	SID2+SVOLMODE
   3754  1a7d		       8d 18 71 	      sta	sidData+SVOLMODE
   3755  1a80				   showVolume
   3756  1a80		       ac 70 70 	      ldy	helpMode
   3757  1a83		       f0 01		      beq	doShowVolume
   3758  1a85		       60		      rts
   3759  1a86				   doShowVolume
   3760  1a86		       29 0f		      and	#$0F
   3761  1a88		       aa		      tax
   3762  1a89		       bd eb 19 	      lda	sixteenToTen,x
   3763  1a8c		       18		      clc
   3764  1a8d		       69 30		      adc	#"0"
   3765  1a8f		       8d a7 04 	      sta	1024+VOLTEXT
   3766  1a92		       60		      rts
   3767  1a93
   3768  1a93		       aa		      tax
   3769  1a94		       bd eb 19 	      lda	sixteenToTen,x
   3770  1a97		       aa		      tax
   3771  1a98		       a0 a7		      ldy	#VOLTEXT
   3772  1a9a		       a9 07		      lda	#VOLLOW
   3773  1a9c		       20 10 1f 	      jsr	updateText
   3774  1a9f		       60		      rts
   3775  1aa0
   3776  1aa0
   3777  1aa0							; set volume text
   3778  1aa0		       a0 a7		      ldy	#VOLTEXT
   3779  1aa2		       a9 07		      lda	#VOLLOW
   3780  1aa4		       cd 1c 70 	      cmp	volume
   3781  1aa7		       30 05		      bmi	notLow
   3782  1aa9		       a2 50		      ldx	#VLOW
   3783  1aab		       4c 10 1f 	      jmp	updateText
   3784  1aae				   notLow
   3785  1aae		       a9 0b		      lda	#VOLMED
   3786  1ab0		       cd 1c 70 	      cmp	volume
   3787  1ab3		       30 05		      bmi	notMed
   3788  1ab5		       a2 54		      ldx	#VMED
   3789  1ab7		       4c 10 1f 	      jmp	updateText
   3790  1aba				   notMed
   3791  1aba		       a2 58		      ldx	#VHIGH
   3792  1abc		       4c 10 1f 	      jmp	updateText
   3793  1abf							;-------------------------------------
   3794  1abf
   3795  1abf
   3796  1abf							;-----------------------------------
   3797  1abf							; Set Octave
   3798  1abf							;-----------------------------------
   3799  1abf				   setOctave
   3800  1abf		       8d 6b 70 	      sta	octave
   3801  1ac2		       aa		      tax
   3802  1ac3		       bd af 28 	      lda	octaveTable,x
   3803  1ac6		       8d 22 70 	      sta	keyOffset
   3804  1ac9				   showOctave
   3805  1ac9		       ac 70 70 	      ldy	helpMode
   3806  1acc		       f0 01		      beq	doShowOctave
   3807  1ace		       60		      rts
   3808  1acf				   doShowOctave
   3809  1acf		       8a		      txa
   3810  1ad0		       18		      clc
   3811  1ad1		       69 30		      adc	#"0"
   3812  1ad3		       aa		      tax
   3813  1ad4		       8d 7f 04 	      sta	1024+OCTAVETEXT
   3814  1ad7		       60		      rts
   3815  1ad8
   3816  1ad8							;-----------------------------------
   3817  1ad8							; Set Filter
   3818  1ad8							;-----------------------------------
   3819  1ad8				   setFilter
   3820  1ad8		       8d 16 d4 	      sta	SID1+SFILTH
   3821  1adb		       8d 36 d4 	      sta	SID2+SFILTH
   3822  1ade		       8d 16 71 	      sta	sidData+SFILTH
   3823  1ae1
   3824  1ae1		       8d 57 70 	      sta	filter
   3825  1ae4				   showFilter
   3826  1ae4		       ac 70 70 	      ldy	helpMode
   3827  1ae7		       f0 01		      beq	doShowFilter
   3828  1ae9		       60		      rts
   3829  1aea				   doShowFilter
   3830  1aea		       4a		      lsr
   3831  1aeb		       4a		      lsr
   3832  1aec		       4a		      lsr
   3833  1aed		       4a		      lsr
   3834  1aee		       4a		      lsr
   3835  1aef		       18		      clc
   3836  1af0		       69 30		      adc	#"0"
   3837  1af2				   endFilter
   3838  1af2		       8d 75 04 	      sta	1024+FILTERTEXT
   3839  1af5		       60		      rts
   3840  1af6
   3841  1af6
   3842  1af6							;-----------------------------------
   3843  1af6							; Set FX mode with A,Y (for key command)
   3844  1af6							;-----------------------------------
   3845  1af6				   ksetFX
   3846  1af6		       8d 86 70 	      sta	fxType
   3847  1af9							;-----------------------------------
   3848  1af9							; Set FX mode
   3849  1af9							;-----------------------------------
   3850  1af9				   setFX
   3851  1af9		       ad 70 70 	      lda	helpMode
   3852  1afc		       f0 01		      beq	doShowFX
   3853  1afe		       60		      rts
   3854  1aff				   doShowFX
   3855  1aff							;lda fxType
   3856  1aff
   3857  1aff							; Draw name of new sound mode on screen...
   3858  1aff		       ad 86 70 	      lda	fxType
   3859  1b02		       0a		      asl
   3860  1b03		       0a		      asl
   3861  1b04		       0a		      asl
   3862  1b05							;lda modeNameOffsets,x
   3863  1b05							;lda fxNames,x
   3864  1b05		       aa		      tax
   3865  1b06		       a0 00		      ldy	#0
   3866  1b08				   drawModeLoopFX
   3867  1b08							;lda modeNamesPolyphony,x
   3868  1b08		       bd 7d 29 	      lda	fxNames,x
   3869  1b0b		       c9 40		      cmp	#64
   3870  1b0d		       30 02		      bmi	showSpaceZFX
   3871  1b0f		       e9 40		      sbc	#64
   3872  1b11				   showSpaceZFX
   3873  1b11		       99 ae 04 	      sta	1024+FXTEXT,y
   3874  1b14		       e8		      inx
   3875  1b15		       c8		      iny
   3876  1b16		       c0 05		      cpy	#5
   3877  1b18		       d0 ee		      bne	drawModeLoopFX
   3878  1b1a							; - - - - -
   3879  1b1a							;inx ; Get polyphony value at end of name string...
   3880  1b1a							;inx
   3881  1b1a							;lda modeNamesPolyphony,x
   3882  1b1a							;sta polyphony
   3883  1b1a
   3884  1b1a							;lda #8
   3885  1b1a							;sta bufferSize
   3886  1b1a
   3887  1b1a		       60		      rts
   3888  1b1b
   3889  1b1b
   3890  1b1b
   3891  1b1b				   portSpeedTable
   3892  1b1b		       06 07 09 	      byte.b	6,7,9
   3893  1b1e							;byte 5,7,9
   3894  1b1e
   3895  1b1e							;-----------------------------------
   3896  1b1e							; set port with A,Y (for key command)
   3897  1b1e							;-----------------------------------
   3898  1b1e				   ksetMode
   3899  1b1e							;sta portOn
   3900  1b1e		       8d 1d 70 	      sta	soundMode
   3901  1b21							;sty portSpd
   3902  1b21							; . . . . . . . . . .
   3903  1b21							;-----------------------------------
   3904  1b21							; Set sound mode
   3905  1b21							;-----------------------------------
   3906  1b21				   setMode
   3907  1b21				   showModeName
   3908  1b21		       ac 70 70 	      ldy	helpMode
   3909  1b24		       f0 01		      beq	doShowModeName
   3910  1b26		       60		      rts
   3911  1b27				   doShowModeName
   3912  1b27
   3913  1b27		       ad 1d 70 	      lda	soundMode	; This probably needs work
   3914  1b2a
   3915  1b2a							; Draw name of new sound mode on screen...
   3916  1b2a		       ae 1d 70 	      ldx	soundMode
   3917  1b2d		       bd cb 32 	      lda	modeNameOffsets,x
   3918  1b30		       aa		      tax
   3919  1b31		       a0 00		      ldy	#0
   3920  1b33				   drawModeLoop
   3921  1b33		       bd 53 32 	      lda	modeNamesPolyphony,x
   3922  1b36		       c9 40		      cmp	#64
   3923  1b38		       30 02		      bmi	showSpaceZ
   3924  1b3a		       e9 40		      sbc	#64
   3925  1b3c				   showSpaceZ
   3926  1b3c		       99 2d 04 	      sta	1024+MODETEXT,y
   3927  1b3f		       e8		      inx
   3928  1b40		       c8		      iny
   3929  1b41		       c0 05		      cpy	#5
   3930  1b43		       d0 ee		      bne	drawModeLoop
   3931  1b45							; - - - - -
   3932  1b45		       e8		      inx		; Get polyphony value at end of name string...
   3933  1b46		       e8		      inx
   3934  1b47		       bd 53 32 	      lda	modeNamesPolyphony,x
   3935  1b4a		       8d 84 70 	      sta	polyphony
   3936  1b4d
   3937  1b4d		       a9 08		      lda	#8
   3938  1b4f		       8d 80 70 	      sta	bufferSize
   3939  1b52
   3940  1b52
   3941  1b52							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3942  1b52							;sta 1024+161 ;DEBUG
   3943  1b52							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   3944  1b52
   3945  1b52
   3946  1b52							; set up pointer to portamento speed array
   3947  1b52							; (which is the tuning array)
   3948  1b52							;lda portSpd
   3949  1b52							;clc
   3950  1b52							;adc #4
   3951  1b52
   3952  1b52							; New version of code above...
   3953  1b52		       ad 1d 70 	      lda	soundMode
   3954  1b55		       29 0f		      and	#$0F	; Get portamento speed
   3955  1b57		       a8		      tay
   3956  1b58		       b9 1b 1b 	      lda	portSpeedTable,y
   3957  1b5b
   3958  1b5b							;clc
   3959  1b5b							;asl ; X2
   3960  1b5b							;adc #5
   3961  1b5b
   3962  1b5b		       a8		      tay
   3963  1b5c							;	ldy #5 ; portSpd DEBUG
   3964  1b5c		       b9 33 33 	      lda	tuneArrPtrLL,y
   3965  1b5f		       85 35		      sta	portPtrL
   3966  1b61		       b9 3d 33 	      lda	tuneArrPtrLH,y
   3967  1b64		       85 36		      sta	portPtrL+1
   3968  1b66		       b9 47 33 	      lda	tuneArrPtrHL,y
   3969  1b69		       85 47		      sta	portPtrH
   3970  1b6b		       b9 51 33 	      lda	tuneArrPtrHH,y
   3971  1b6e		       85 48		      sta	portPtrH+1
   3972  1b70		       60		      rts
   3973  1b71
   3974  1b71
   3975  1b71							;----------------------------------------
   3976  1b71							; subroutine to set up patch
   3977  1b71							; (patch # stored in Y)
   3978  1b71							;----------------------------------------
   3979  1b71				   setPatch
   3980  1b71
   3981  1b71		       8c 47 70 	      sty	patchSetY
   3982  1b74
   3983  1b74		       b9 fb 27 	      lda	patchVol,y
   3984  1b77		       8d 1c 70 	      sta	volume
   3985  1b7a
   3986  1b7a		       b9 bf 27 	      lda	patchPaddle,y
   3987  1b7d		       20 47 19 	      jsr	setPaddles
   3988  1b80
   3989  1b80							;.....................
   3990  1b80		       20 74 15 	      jsr	midiPanic
   3991  1b83							;.....................
   3992  1b83
   3993  1b83							; Reset modulation values
   3994  1b83		       a9 7f		      lda	#127
   3995  1b85		       8d 9c 70 	      sta	filterModValue
   3996  1b88		       8d 9e 70 	      sta	pwModValue
   3997  1b8b
   3998  1b8b		       ac 47 70 	      ldy	patchSetY
   3999  1b8e		       b9 dd 27 	      lda	newPatchFiltCut,y
   4000  1b91		       8d 9d 70 	      sta	filterSetValue
   4001  1b94							;jsr setFilter
   4002  1b94
   4003  1b94							;lda patchFilt,y
   4004  1b94							;sta SID1+SV1PWL
   4005  1b94
   4006  1b94
   4007  1b94		       ac 47 70 	      ldy	patchSetY
   4008  1b97		       b9 0a 27 	      lda	patchSoundMode,y
   4009  1b9a		       8d 1d 70 	      sta	soundMode
   4010  1b9d		       20 21 1b 	      jsr	setMode
   4011  1ba0
   4012  1ba0		       ac 47 70 	      ldy	patchSetY
   4013  1ba3		       b9 19 28 	      lda	patchPWL,y
   4014  1ba6		       8d 02 d4 	      sta	SID1+SV1PWL
   4015  1ba9		       8d 09 d4 	      sta	SID1+SV2PWL
   4016  1bac		       8d 10 d4 	      sta	SID1+SV3PWL
   4017  1baf		       8d 22 d4 	      sta	SID2+SV1PWL
   4018  1bb2		       8d 29 d4 	      sta	SID2+SV2PWL
   4019  1bb5		       8d 30 d4 	      sta	SID2+SV3PWL
   4020  1bb8		       8d 02 71 	      sta	sidData+SV1PWL
   4021  1bbb		       8d 09 71 	      sta	sidData+SV2PWL
   4022  1bbe		       8d 10 71 	      sta	sidData+SV3PWL
   4023  1bc1
   4024  1bc1		       ac 47 70 	      ldy	patchSetY
   4025  1bc4		       b9 37 28 	      lda	patchPWH,y
   4026  1bc7		       8d 03 d4 	      sta	SID1+SV1PWH
   4027  1bca		       8d 0a d4 	      sta	SID1+SV2PWH
   4028  1bcd		       8d 11 d4 	      sta	SID1+SV3PWH
   4029  1bd0		       8d 23 d4 	      sta	SID2+SV1PWH
   4030  1bd3		       8d 2a d4 	      sta	SID2+SV2PWH
   4031  1bd6		       8d 31 d4 	      sta	SID2+SV3PWH
   4032  1bd9		       8d 03 71 	      sta	sidData+SV1PWH
   4033  1bdc		       8d 0a 71 	      sta	sidData+SV2PWH
   4034  1bdf		       8d 11 71 	      sta	sidData+SV3PWH
   4035  1be2
   4036  1be2		       ac 47 70 	      ldy	patchSetY
   4037  1be5		       b9 55 28 	      lda	patchWave,y
   4038  1be8		       8d 37 70 	      sta	WaveType2
   4039  1beb		       8d 3e 70 	      sta	WaveType3
   4040  1bee		       8d 30 70 	      sta	WaveType
   4041  1bf1
   4042  1bf1		       ac 47 70 	      ldy	patchSetY
   4043  1bf4		       b9 47 27 	      lda	patchLFO,y
   4044  1bf7		       29 0f		      and	#$0F
   4045  1bf9		       8c 0c 70 	      sty	temp
   4046  1bfc		       20 7e 19 	      jsr	setLFORate
   4047  1bff		       ac 0c 70 	      ldy	temp
   4048  1c02		       b9 47 27 	      lda	patchLFO,y
   4049  1c05		       29 f0		      and	#$F0
   4050  1c07		       4a		      lsr
   4051  1c08		       4a		      lsr
   4052  1c09		       4a		      lsr
   4053  1c0a		       4a		      lsr
   4054  1c0b							;lda #2
   4055  1c0b		       20 68 19 	      jsr	setLFODepth
   4056  1c0e
   4057  1c0e		       ac 0c 70 	      ldy	temp
   4058  1c11		       b9 83 27 	      lda	patchAD,y
   4059  1c14							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
   4060  1c14							;lda #$F0
   4061  1c14		       20 39 1a 	      jsr	setAttack
   4062  1c17		       ac 47 70 	      ldy	patchSetY
   4063  1c1a
   4064  1c1a		       ac 0c 70 	      ldy	temp
   4065  1c1d		       b9 a1 27 	      lda	patchSR,y
   4066  1c20		       20 9a 19 	      jsr	setRelease
   4067  1c23		       ac 47 70 	      ldy	patchSetY
   4068  1c26
   4069  1c26		       b9 73 28 	      lda	patchFilt,y
   4070  1c29		       ae 5c 70 	      ldx	filterDisable
   4071  1c2c		       f0 02		      beq	skipFilterDisable
   4072  1c2e		       29 f0		      and	#$F0
   4073  1c30				   skipFilterDisable
   4074  1c30		       8d 17 d4 	      sta	SID1+SFILTC
   4075  1c33		       8d 37 d4 	      sta	SID2+SFILTC
   4076  1c36		       8d 17 71 	      sta	sidData+SFILTC
   4077  1c39		       29 01		      and	#$01
   4078  1c3b		       f0 07		      beq	skipFilterOnText
   4079  1c3d		       a0 4c		      ldy	#FILTERTEXT2
   4080  1c3f		       a2 04		      ldx	#4
   4081  1c41		       20 10 1f 	      jsr	updateText
   4082  1c44				   skipFilterOnText
   4083  1c44		       ac 47 70 	      ldy	patchSetY
   4084  1c47
   4085  1c47		       b9 91 28 	      lda	patchVolMode,y
   4086  1c4a		       29 f0		      and	#$F0
   4087  1c4c		       0d 1c 70 	      ora	volume
   4088  1c4f		       8d 24 70 	      sta	volModeRAM
   4089  1c52		       20 6f 1a 	      jsr	setVolume
   4090  1c55		       ac 47 70 	      ldy	patchSetY
   4091  1c58
   4092  1c58		       b9 65 27 	      lda	patchOctave,y
   4093  1c5b		       20 bf 1a 	      jsr	setOctave
   4094  1c5e		       ac 47 70 	      ldy	patchSetY
   4095  1c61
   4096  1c61		       b9 29 27 	      lda	patchFX,y
   4097  1c64		       8d 86 70 	      sta	fxType
   4098  1c67		       20 f9 1a 	      jsr	setFX
   4099  1c6a
   4100  1c6a		       20 6e 1c 	      jsr	showPatchName
   4101  1c6d
   4102  1c6d		       60		      rts
   4103  1c6e							;------------------------ end of setpatch
   4104  1c6e
   4105  1c6e				   showPatchName
   4106  1c6e		       ad 70 70 	      lda	helpMode
   4107  1c71		       f0 01		      beq	doShowPatchName
   4108  1c73		       60		      rts
   4109  1c74				   doShowPatchName
   4110  1c74		       ad 47 70 	      lda	patchSetY
   4111  1c77		       29 f0		      and	#%11110000
   4112  1c79		       d0 1f		      bne	patchNameSecondBank
   4113  1c7b							;tay
   4114  1c7b		       ac 47 70 	      ldy	patchSetY
   4115  1c7e		       c8		      iny
   4116  1c7f		       98		      tya
   4117  1c80		       0a		      asl
   4118  1c81		       0a		      asl
   4119  1c82		       0a		      asl
   4120  1c83		       0a		      asl
   4121  1c84		       a8		      tay
   4122  1c85		       88		      dey
   4123  1c86		       a2 0f		      ldx	#15
   4124  1c88				   patchText
   4125  1c88		       b9 0a 25 	      lda	patchName,y
   4126  1c8b		       c9 40		      cmp	#64
   4127  1c8d		       30 03		      bmi	pshowSpace
   4128  1c8f		       38		      sec
   4129  1c90		       e9 40		      sbc	#64
   4130  1c92				   pshowSpace
   4131  1c92		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4132  1c95		       88		      dey
   4133  1c96		       ca		      dex
   4134  1c97		       10 ef		      bpl	patchText
   4135  1c99		       60		      rts
   4136  1c9a
   4137  1c9a				   patchNameSecondBank
   4138  1c9a							;tay
   4139  1c9a		       ac 47 70 	      ldy	patchSetY
   4140  1c9d		       c8		      iny
   4141  1c9e		       98		      tya
   4142  1c9f		       0a		      asl
   4143  1ca0		       0a		      asl
   4144  1ca1		       0a		      asl
   4145  1ca2		       0a		      asl
   4146  1ca3		       a8		      tay
   4147  1ca4		       88		      dey
   4148  1ca5		       a2 0f		      ldx	#15
   4149  1ca7				   patchText2
   4150  1ca7		       b9 0a 26 	      lda	patchName2,y
   4151  1caa		       c9 40		      cmp	#64
   4152  1cac		       30 03		      bmi	pshowSpace2
   4153  1cae		       38		      sec
   4154  1caf		       e9 40		      sbc	#64
   4155  1cb1				   pshowSpace2
   4156  1cb1		       9d 12 04 	      sta	1024+PATCHTEXT,x
   4157  1cb4		       88		      dey
   4158  1cb5		       ca		      dex
   4159  1cb6		       10 ef		      bpl	patchText2
   4160  1cb8		       60		      rts
   4161  1cb9
   4162  1cb9
   4163  1cb9
   4164  1cb9		       00 04	   HEX_DISP_OFFSET equ	4
   4165  1cb9
   4166  1cb9
   4167  1cb9							;---------------------------------
   4168  1cb9							; Wait until no hex key is down
   4169  1cb9							; (doesn't check all keys, only hex keys!)
   4170  1cb9				   waitForKeyRelease
   4171  1cb9		       20 6a 1e 	      jsr	readHexKey
   4172  1cbc		       c9 ff		      cmp	#255
   4173  1cbe		       d0 f9		      bne	waitForKeyRelease
   4174  1cc0		       a2 ff		      ldx	#255	; Always 255
   4175  1cc2		       a0 60		      ldy	#96	; Delay amount
   4176  1cc4				   delay		; Delay a short time to avoid catching key bounce...
   4177  1cc4		       ca		      dex
   4178  1cc5		       d0 fd		      bne	delay
   4179  1cc7		       88		      dey
   4180  1cc8		       d0 fa		      bne	delay
   4181  1cca		       60		      rts
   4182  1ccb
   4183  1ccb
   4184  1ccb							;===============================================
   4185  1ccb							; Allow the user to hex edit the SID registers
   4186  1ccb							; directly.
   4187  1ccb				   SIDEdit
   4188  1ccb
   4189  1ccb		       8d 60 70 	      sta	hexKeyMode
   4190  1cce
   4191  1cce		       20 e0 1e 	      jsr	beep
   4192  1cd1		       20 e0 1e 	      jsr	beep
   4193  1cd4		       20 e0 1e 	      jsr	beep
   4194  1cd7
   4195  1cd7		       20 41 20 	      jsr	clrScr
   4196  1cda		       20 30 1f 	      jsr	displayInit
   4197  1cdd
   4198  1cdd							; X = low data address
   4199  1cdd							; Y = high data address
   4200  1cdd		       a2 29		      ldx	#>hexEditHelp	;low/MSB
   4201  1cdf		       a0 c5		      ldy	#<hexEditHelp	;high/LSB
   4202  1ce1		       20 98 20 	      jsr	displayPage
   4203  1ce4
   4204  1ce4		       20 ef 1d 	      jsr	showSidValues
   4205  1ce7
   4206  1ce7
   4207  1ce7							;enable keyboard interrupt
   4208  1ce7							;	lda #129
   4209  1ce7							;	sta 56333
   4210  1ce7							; wait for all keys to be released first
   4211  1ce7							;waitForNoKey:
   4212  1ce7							;	lda 197
   4213  1ce7							;	cmp #64
   4214  1ce7							;	bne waitForNoKey
   4215  1ce7
   4216  1ce7
   4217  1ce7							; clear top line
   4218  1ce7		       a2 09		      ldx	#9
   4219  1ce9		       a9 20		      lda	#32
   4220  1ceb				   hexClearA
   4221  1ceb		       9d 00 04 	      sta	1024,x
   4222  1cee		       ca		      dex
   4223  1cef		       10 fa		      bpl	hexClearA
   4224  1cf1
   4225  1cf1							; display "sid edit" text
   4226  1cf1		       a2 5c		      ldx	#92
   4227  1cf3		       a0 00		      ldy	#0
   4228  1cf5		       20 10 1f 	      jsr	updateText
   4229  1cf8
   4230  1cf8							;jsr waitForKeyRelease
   4231  1cf8
   4232  1cf8							; get/display the first hex digit of the address to edit
   4233  1cf8		       a9 24		      lda	#36
   4234  1cfa		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4235  1cfd		       20 5f 1e 	      jsr	getHexKey
   4236  1d00		       aa		      tax
   4237  1d01		       0a		      asl
   4238  1d02		       0a		      asl
   4239  1d03		       0a		      asl
   4240  1d04		       0a		      asl
   4241  1d05		       8d 5a 70 	      sta	SIDeditAddr
   4242  1d08		       bd 5f 33 	      lda	hexDisplay,x
   4243  1d0b		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
   4244  1d0e
   4245  1d0e							;sta 1024
   4246  1d0e							;jsr waitForKeyRelease
   4247  1d0e							;sta 1024
   4248  1d0e
   4249  1d0e							; get/display the second hex digit of the address to edit
   4250  1d0e		       a9 24		      lda	#36
   4251  1d10		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4252  1d13		       20 5f 1e 	      jsr	getHexKey
   4253  1d16		       aa		      tax
   4254  1d17		       0d 5a 70 	      ora	SIDeditAddr
   4255  1d1a		       8d 5a 70 	      sta	SIDeditAddr
   4256  1d1d		       bd 5f 33 	      lda	hexDisplay,x
   4257  1d20		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
   4258  1d23
   4259  1d23							; display a '>' between
   4260  1d23		       a9 3e		      lda	#62
   4261  1d25		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
   4262  1d28
   4263  1d28							; get/display the first hex digit of the value to write
   4264  1d28		       a9 24		      lda	#36
   4265  1d2a		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4266  1d2d		       20 5f 1e 	      jsr	getHexKey
   4267  1d30		       aa		      tax
   4268  1d31		       0a		      asl
   4269  1d32		       0a		      asl
   4270  1d33		       0a		      asl
   4271  1d34		       0a		      asl
   4272  1d35		       8d 5b 70 	      sta	SIDeditValue
   4273  1d38		       bd 5f 33 	      lda	hexDisplay,x
   4274  1d3b		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
   4275  1d3e
   4276  1d3e							; get/display the second hex digit of the value to write
   4277  1d3e		       a9 24		      lda	#36
   4278  1d40		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4279  1d43		       20 5f 1e 	      jsr	getHexKey
   4280  1d46		       aa		      tax
   4281  1d47		       0d 5b 70 	      ora	SIDeditValue
   4282  1d4a		       8d 5b 70 	      sta	SIDeditValue
   4283  1d4d		       bd 5f 33 	      lda	hexDisplay,x
   4284  1d50		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
   4285  1d53
   4286  1d53							; if <=$20 then write to all 3 SID oscillator regs
   4287  1d53		       ae 5a 70 	      ldx	SIDeditAddr
   4288  1d56		       e0 20		      cpx	#$20
   4289  1d58		       30 2e		      bmi	normalWrite
   4290  1d5a							;--------------
   4291  1d5a		       ad 5b 70 	      lda	SIDeditValue
   4292  1d5d		       9d e0 d3 	      sta	SID1-32,x
   4293  1d60		       9d 00 d4 	      sta	SID2-32,x
   4294  1d63		       9d e0 70 	      sta	sidData-32,x
   4295  1d66		       9d e7 d3 	      sta	SID1-32+#$7,x
   4296  1d69		       9d 07 d4 	      sta	SID2-32+#$7,x
   4297  1d6c		       9d e7 70 	      sta	sidData-32+#$7,x
   4298  1d6f		       9d ee d3 	      sta	SID1-32+#$E,x
   4299  1d72		       9d 0e d4 	      sta	SID2-32+#$E,x
   4300  1d75		       9d ee 70 	      sta	sidData-32+#$E,x
   4301  1d78		       e0 24		      cpx	#SV1WAVE+32
   4302  1d7a		       d0 09		      bne	no3Wave
   4303  1d7c		       8d 30 70 	      sta	WaveType
   4304  1d7f		       8d 37 70 	      sta	WaveType2
   4305  1d82		       8d 3e 70 	      sta	WaveType3
   4306  1d85				   no3Wave
   4307  1d85		       4c c3 1d 	      jmp	skipNormalWrite
   4308  1d88							;...............
   4309  1d88				   normalWrite
   4310  1d88							; write the value to both sids
   4311  1d88		       ae 5a 70 	      ldx	SIDeditAddr
   4312  1d8b		       ad 5b 70 	      lda	SIDeditValue
   4313  1d8e		       9d 00 d4 	      sta	SID1,x
   4314  1d91		       9d 20 d4 	      sta	SID2,x
   4315  1d94		       9d 00 71 	      sta	sidData,x
   4316  1d97
   4317  1d97		       e0 04		      cpx	#SV1WAVE
   4318  1d99		       d0 03		      bne	noWave1
   4319  1d9b		       8d 30 70 	      sta	WaveType
   4320  1d9e				   noWave1
   4321  1d9e
   4322  1d9e		       e0 0b		      cpx	#SV2WAVE
   4323  1da0		       d0 03		      bne	noWave2
   4324  1da2		       8d 37 70 	      sta	WaveType2
   4325  1da5				   noWave2
   4326  1da5
   4327  1da5		       e0 12		      cpx	#SV3WAVE
   4328  1da7		       d0 03		      bne	noWave3
   4329  1da9		       8d 3e 70 	      sta	WaveType3
   4330  1dac				   noWave3
   4331  1dac
   4332  1dac		       e0 16		      cpx	#SFILTH
   4333  1dae		       d0 03		      bne	noFiltSave
   4334  1db0		       8d 57 70 	      sta	filter
   4335  1db3				   noFiltSave
   4336  1db3
   4337  1db3							; turn off paddles if filter was adjusted
   4338  1db3		       e0 15		      cpx	#SFILTL
   4339  1db5		       f0 04		      beq	paddleOffhex
   4340  1db7		       e0 16		      cpx	#SFILTH
   4341  1db9		       d0 08		      bne	noPaddleOff
   4342  1dbb				   paddleOffhex
   4343  1dbb		       a9 00		      lda	#0
   4344  1dbd		       8d 29 70 	      sta	paddle	; turn off paddle controller first
   4345  1dc0		       20 61 19 	      jsr	showPaddle
   4346  1dc3				   noPaddleOff
   4347  1dc3
   4348  1dc3				   skipNormalWrite
   4349  1dc3		       ae 5a 70 	      ldx	SIDeditAddr
   4350  1dc6		       ad 5b 70 	      lda	SIDeditValue
   4351  1dc9
   4352  1dc9							; check for a volume/mode change...
   4353  1dc9							; if changed, write it to related variables too
   4354  1dc9		       e0 18		      cpx	#SVOLMODE
   4355  1dcb		       d0 10		      bne	noVolumeSetting
   4356  1dcd		       8d 0c 70 	      sta	temp
   4357  1dd0		       29 f0		      and	#$F0
   4358  1dd2		       8d 24 70 	      sta	volModeRAM
   4359  1dd5		       ad 0c 70 	      lda	temp
   4360  1dd8		       29 0f		      and	#$0F
   4361  1dda		       8d 1c 70 	      sta	volume
   4362  1ddd				   noVolumeSetting
   4363  1ddd							;	lda volModeRAM
   4364  1ddd							;	and #$F0
   4365  1ddd							;	ora volume
   4366  1ddd
   4367  1ddd							; wait for key to be released before returning
   4368  1ddd				   waitKeyRelease
   4369  1ddd		       a5 c5		      lda	197
   4370  1ddf		       c9 40		      cmp	#64
   4371  1de1		       d0 fa		      bne	waitKeyRelease
   4372  1de3
   4373  1de3							; reset volume (messed up from clicks)
   4374  1de3		       20 6f 1a 	      jsr	setVolume
   4375  1de6
   4376  1de6		       a9 00		      lda	#0
   4377  1de8							;sta helpMode
   4378  1de8		       20 e8 18 	      jsr	setHelpMode
   4379  1deb		       20 30 1f 	      jsr	displayInit
   4380  1dee							; X = low data address
   4381  1dee							; Y = high data address
   4382  1dee							;	ldx #>hexEditHelp ;low/MSB
   4383  1dee							;	ldy #<hexEditHelp ;high/LSB
   4384  1dee							;	jsr displayPage
   4385  1dee							;	jsr showSidValues
   4386  1dee
   4387  1dee		       60		      rts
   4388  1def
   4389  1def
   4390  1def
   4391  1def							;************************************
   4392  1def				   showSidValues
   4393  1def		       a0 02		      ldy	#2
   4394  1df1				   sidDispLoop1
   4395  1df1		       8c 73 70 	      sty	sidTemp1
   4396  1df4		       b9 00 71 	      lda	sidData,y
   4397  1df7		       8d 74 70 	      sta	sidTemp2
   4398  1dfa		       98		      tya
   4399  1dfb		       0a		      asl
   4400  1dfc		       18		      clc
   4401  1dfd		       69 04		      adc	#4
   4402  1dff		       a8		      tay
   4403  1e00		       ad 74 70 	      lda	sidTemp2
   4404  1e03		       a2 06		      ldx	#6
   4405  1e05		       20 55 20 	      jsr	displayHex
   4406  1e08		       ac 73 70 	      ldy	sidTemp1
   4407  1e0b							;---------------
   4408  1e0b		       b9 07 71 	      lda	sidData+7,y
   4409  1e0e		       8d 74 70 	      sta	sidTemp2
   4410  1e11		       98		      tya
   4411  1e12		       0a		      asl
   4412  1e13		       18		      clc
   4413  1e14		       69 04		      adc	#4
   4414  1e16		       a8		      tay
   4415  1e17		       ad 74 70 	      lda	sidTemp2
   4416  1e1a		       a2 0a		      ldx	#10
   4417  1e1c		       20 55 20 	      jsr	displayHex
   4418  1e1f		       ac 73 70 	      ldy	sidTemp1
   4419  1e22							;---------------
   4420  1e22		       b9 0e 71 	      lda	sidData+14,y
   4421  1e25		       8d 74 70 	      sta	sidTemp2
   4422  1e28		       98		      tya
   4423  1e29		       0a		      asl
   4424  1e2a		       18		      clc
   4425  1e2b		       69 04		      adc	#4
   4426  1e2d		       a8		      tay
   4427  1e2e		       ad 74 70 	      lda	sidTemp2
   4428  1e31		       a2 0e		      ldx	#14
   4429  1e33		       20 55 20 	      jsr	displayHex
   4430  1e36		       ac 73 70 	      ldy	sidTemp1
   4431  1e39
   4432  1e39		       c8		      iny
   4433  1e3a		       c0 07		      cpy	#7
   4434  1e3c		       d0 b3		      bne	sidDispLoop1
   4435  1e3e							;---------------
   4436  1e3e							;---------------
   4437  1e3e		       a0 15		      ldy	#$15
   4438  1e40				   sidDispLoop2
   4439  1e40		       8c 73 70 	      sty	sidTemp1
   4440  1e43		       b9 00 71 	      lda	sidData,y
   4441  1e46		       8d 74 70 	      sta	sidTemp2
   4442  1e49		       98		      tya
   4443  1e4a		       38		      sec
   4444  1e4b		       e9 02		      sbc	#2
   4445  1e4d		       a8		      tay
   4446  1e4e		       ad 74 70 	      lda	sidTemp2
   4447  1e51		       a2 05		      ldx	#5
   4448  1e53		       20 55 20 	      jsr	displayHex
   4449  1e56		       ac 73 70 	      ldy	sidTemp1
   4450  1e59
   4451  1e59		       c8		      iny
   4452  1e5a		       c0 19		      cpy	#$19
   4453  1e5c		       d0 e2		      bne	sidDispLoop2
   4454  1e5e							;---------------
   4455  1e5e		       60		      rts
   4456  1e5f
   4457  1e5f
   4458  1e5f
   4459  1e5f							;=======================================================================
   4460  1e5f							; waits for user to press a key (0-F) and returns
   4461  1e5f							; the value in A
   4462  1e5f				   getHexKey
   4463  1e5f		       20 b9 1c 	      jsr	waitForKeyRelease
   4464  1e62				   getHexLoop
   4465  1e62							;inc 1024
   4466  1e62		       20 6a 1e 	      jsr	readHexKey
   4467  1e65		       c9 ff		      cmp	#255
   4468  1e67		       f0 f9		      beq	getHexLoop
   4469  1e69							;inc 1025
   4470  1e69		       60		      rts
   4471  1e6a
   4472  1e6a
   4473  1e6a
   4474  1e6a							;=======================================================================
   4475  1e6a							; Returns the currently pressed hex key, or #255 if none
   4476  1e6a							; is currently pressed
   4477  1e6a				   readHexKey
   4478  1e6a
   4479  1e6a		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4480  1e6d							;sta 1024
   4481  1e6d		       f0 1a		      beq	normalHexKey
   4482  1e6f
   4483  1e6f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4484  1e6f							; Use piano keys to enter hex numbers
   4485  1e6f				   pianoHexKey
   4486  1e6f		       a0 00		      ldy	#0
   4487  1e71				   checkLoop2
   4488  1e71		       b9 6e 21 	      lda	hexColPiano,y
   4489  1e74		       f0 10		      beq	quitCheck2
   4490  1e76		       8d 00 dc 	      sta	56320
   4491  1e79		       ad 01 dc 	      lda	56321
   4492  1e7c		       39 90 21 	      and	hexRowPiano,y
   4493  1e7f		       d0 02		      bne	notPressed2
   4494  1e81		       98		      tya
   4495  1e82							;sta 1027
   4496  1e82		       60		      rts
   4497  1e83							;jmp quitCheck2
   4498  1e83				   notPressed2
   4499  1e83		       c8		      iny
   4500  1e84		       d0 eb		      bne	checkLoop2
   4501  1e86				   quitCheck2
   4502  1e86		       a9 ff		      lda	#255	; no key pressed
   4503  1e88		       60		      rts
   4504  1e89							;jmp pianoHexKey
   4505  1e89							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4506  1e89
   4507  1e89							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4508  1e89							; Use normal keys (0-9,A-F) to enter hex numbers
   4509  1e89				   normalHexKey
   4510  1e89		       a0 00		      ldy	#0
   4511  1e8b				   checkLoop3
   4512  1e8b		       b9 7f 21 	      lda	hexCol,y
   4513  1e8e		       f0 10		      beq	quitCheck3
   4514  1e90		       8d 00 dc 	      sta	56320
   4515  1e93		       ad 01 dc 	      lda	56321
   4516  1e96		       39 a1 21 	      and	hexRow,y
   4517  1e99		       d0 02		      bne	notPressed3
   4518  1e9b		       98		      tya
   4519  1e9c							;sta 1027
   4520  1e9c		       60		      rts
   4521  1e9d							;jmp quitCheck3
   4522  1e9d				   notPressed3
   4523  1e9d		       c8		      iny
   4524  1e9e		       d0 eb		      bne	checkLoop3
   4525  1ea0				   quitCheck3
   4526  1ea0		       a9 ff		      lda	#255	; no key pressed
   4527  1ea2		       60		      rts
   4528  1ea3							;jmp normalHexKey
   4529  1ea3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4530  1ea3
   4531  1ea3
   4532  1ea3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4533  1ea3							;lda #<shiftKeyFunctions		;
   4534  1ea3							;sta keyPtrL						;
   4535  1ea3							;lda #>shiftKeyFunctions		;-
   4536  1ea3							;sta keyPtrH
   4537  1ea3							;jmp doKeyCheck
   4538  1ea3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4539  1ea3
   4540  1ea3							;sei
   4541  1ea3
   4542  1ea3							;enable keyboard interrupt
   4543  1ea3		       a9 81		      lda	#129
   4544  1ea5		       8d 0d dc 	      sta	56333
   4545  1ea8
   4546  1ea8		       8d 00 04 	      sta	1024
   4547  1eab
   4548  1eab		       a5 c5		      lda	197
   4549  1ead		       cd 5d 70 	      cmp	lastKey
   4550  1eb0		       f0 ad		      beq	getHexKey
   4551  1eb2				   restartHexKey
   4552  1eb2		       a2 00		      ldx	#0
   4553  1eb4		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
   4554  1eb7		       f0 02		      beq	noAltKeyMode
   4555  1eb9		       a2 10		      ldx	#16	; use alternate keys for piano keyboard
   4556  1ebb				   noAltKeyMode
   4557  1ebb		       a5 c5		      lda	197
   4558  1ebd				   keyCmpLoop
   4559  1ebd							;sta 1026
   4560  1ebd							;stx 1025
   4561  1ebd		       dd 6f 33 	      cmp	keyData,x
   4562  1ec0		       f0 0c		      beq	foundKey
   4563  1ec2		       e8		      inx
   4564  1ec3		       e0 10		      cpx	#16
   4565  1ec5		       f0 eb		      beq	restartHexKey
   4566  1ec7		       e0 20		      cpx	#32
   4567  1ec9		       f0 e7		      beq	restartHexKey
   4568  1ecb		       4c bd 1e 	      jmp	keyCmpLoop
   4569  1ece				   foundKey
   4570  1ece		       8d 5d 70 	      sta	lastKey
   4571  1ed1
   4572  1ed1		       20 e0 1e 	      jsr	beep
   4573  1ed4							;	jsr beep
   4574  1ed4
   4575  1ed4		       ad 60 70 	      lda	hexKeyMode
   4576  1ed7		       f0 05		      beq	noKeySubtract
   4577  1ed9		       8a		      txa
   4578  1eda		       38		      sec
   4579  1edb		       e9 10		      sbc	#16
   4580  1edd		       aa		      tax
   4581  1ede				   noKeySubtract
   4582  1ede
   4583  1ede		       8a		      txa
   4584  1edf
   4585  1edf
   4586  1edf		       60		      rts
   4587  1ee0
   4588  1ee0				   beep
   4589  1ee0							;	lda #$10
   4590  1ee0							;	sta SID1+SV1FH
   4591  1ee0		       ad 24 70 	      lda	volModeRAM
   4592  1ee3		       09 0f		      ora	#$0F
   4593  1ee5		       8d 18 d4 	      sta	SID1+SVOLMODE
   4594  1ee8		       8d 38 d4 	      sta	SID2+SVOLMODE
   4595  1eeb		       8d 18 71 	      sta	sidData+SVOLMODE
   4596  1eee							;	lda SID1+SV1WAVE
   4597  1eee							;	ora #$01
   4598  1eee							;	sta SID1+SV1WAVE
   4599  1eee		       20 00 1f 	      jsr	clickDelay
   4600  1ef1		       ad 24 70 	      lda	volModeRAM
   4601  1ef4		       29 f0		      and	#$F0
   4602  1ef6		       8d 18 d4 	      sta	SID1+SVOLMODE
   4603  1ef9		       8d 38 d4 	      sta	SID2+SVOLMODE
   4604  1efc		       8d 18 71 	      sta	sidData+SVOLMODE
   4605  1eff							;	lda SID1+SV1WAVE
   4606  1eff							;	and #$FE
   4607  1eff							;	sta SID1+SV1WAVE
   4608  1eff		       60		      rts
   4609  1f00
   4610  1f00
   4611  1f00							; ------------------------------------
   4612  1f00							; delay for click -- uses Y
   4613  1f00				   clickDelay
   4614  1f00		       a0 40		      ldy	#$40
   4615  1f02		       8c 0c 70 	      sty	temp
   4616  1f05				   mainDelayLoop
   4617  1f05		       a0 00		      ldy	#0
   4618  1f07				   innerDelayLoop
   4619  1f07		       88		      dey
   4620  1f08		       d0 fd		      bne	innerDelayLoop
   4621  1f0a		       ce 0c 70 	      dec	temp
   4622  1f0d		       d0 f6		      bne	mainDelayLoop
   4623  1f0f		       60		      rts
   4624  1f10
   4625  1f10
   4626  1f10							;------------------------------------------
   4627  1f10							; update text
   4628  1f10							;------------------------------------------
   4629  1f10							; Show text out of the textData array.
   4630  1f10							; x=textData, y=screen position
   4631  1f10				   updateText
   4632  1f10		       ad 70 70 	      lda	helpMode
   4633  1f13		       f0 01		      beq	doUpdateText
   4634  1f15		       60		      rts
   4635  1f16				   doUpdateText
   4636  1f16							;	lda helpMode
   4637  1f16							;	bne doUpdateText
   4638  1f16							;	rts
   4639  1f16							;doUpdateText:
   4640  1f16		       18		      clc
   4641  1f17		       a9 04		      lda	#4
   4642  1f19		       8d 46 70 	      sta	textTemp
   4643  1f1c				   updateTextLoop
   4644  1f1c		       bd db 31 	      lda	textData,x
   4645  1f1f		       c9 40		      cmp	#64
   4646  1f21		       30 02		      bmi	showSpaceU
   4647  1f23		       e9 40		      sbc	#64
   4648  1f25				   showSpaceU
   4649  1f25		       99 00 04 	      sta	1024,y
   4650  1f28		       e8		      inx
   4651  1f29		       c8		      iny
   4652  1f2a		       ce 46 70 	      dec	textTemp
   4653  1f2d		       d0 ed		      bne	updateTextLoop
   4654  1f2f		       60		      rts
   4655  1f30
   4656  1f30
   4657  1f30							; ***************************
   4658  1f30							; Display Setup
   4659  1f30							; ***************************
   4660  1f30				   displayInit
   4661  1f30
   4662  1f30		       a9 15		      lda	#21
   4663  1f32		       8d 18 d0 	      sta	53272	; UPPERCASE mode
   4664  1f35
   4665  1f35							; draw static text at the top of the screen
   4666  1f35		       a2 30		      ldx	#>mainColorText	;low/MSB
   4667  1f37		       a0 53		      ldy	#<mainColorText	;high/LSB
   4668  1f39		       20 98 20 	      jsr	displayPage
   4669  1f3c
   4670  1f3c							; Draw bottom text (version number+PAL/NTSC setting)
   4671  1f3c		       03 dd	   BOTTOMTEXT equ	40*24+29
   4672  1f3c
   4673  1f3c		       20 f1 17 	      jsr	showHelpMessage
   4674  1f3f
   4675  1f3f							; choose which text to show from PAL/NTSC test at startup
   4676  1f3f		       a2 00		      ldx	#0
   4677  1f41		       a0 00		      ldy	#0
   4678  1f43		       ad 61 70 	      lda	NTSCmode
   4679  1f46		       f0 02		      beq	showPAL
   4680  1f48		       a2 0c		      ldx	#12
   4681  1f4a				   showPAL
   4682  1f4a							; Show version number and NTSC/PAL designation...
   4683  1f4a				   TextLoop2
   4684  1f4a		       bd 1b 33 	      lda	bottomText,x
   4685  1f4d		       f0 12		      beq	endText2
   4686  1f4f		       c9 40		      cmp	#64
   4687  1f51		       30 02		      bmi	showSpace2
   4688  1f53		       e9 40		      sbc	#64
   4689  1f55				   showSpace2
   4690  1f55		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
   4691  1f58		       a9 0b		      lda	#11
   4692  1f5a		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
   4693  1f5d				   notBlank2
   4694  1f5d		       e8		      inx
   4695  1f5e		       c8		      iny
   4696  1f5f		       d0 e9		      bne	TextLoop2
   4697  1f61				   endText2
   4698  1f61
   4699  1f61		       20 fe 19 	      jsr	showMidiMode
   4700  1f64
   4701  1f64							;---------------------------------------------
   4702  1f64							; Display current sound parameter values
   4703  1f64
   4704  1f64							; set tuning text
   4705  1f64		       ac 71 70 	      ldy	tuneSetting
   4706  1f67		       20 a6 18 	      jsr	ksetTune
   4707  1f6a
   4708  1f6a							; Video Mode
   4709  1f6a		       ad 45 70 	      lda	videoMode
   4710  1f6d		       ac 68 70 	      ldy	videoText
   4711  1f70		       20 39 19 	      jsr	setVideoMode	;********************************
   4712  1f73
   4713  1f73		       ad 49 70 	      lda	LFODepth
   4714  1f76		       20 68 19 	      jsr	setLFODepth	;********************************
   4715  1f79		       ad 48 70 	      lda	LFORate
   4716  1f7c		       20 7e 19 	      jsr	setLFORate	;********************************
   4717  1f7f
   4718  1f7f		       ad 29 70 	      lda	paddle
   4719  1f82		       20 47 19 	      jsr	setPaddles
   4720  1f85
   4721  1f85		       ad 57 70 	      lda	filter
   4722  1f88		       8d 9d 70 	      sta	filterSetValue
   4723  1f8b							;jsr setFilter
   4724  1f8b
   4725  1f8b		       20 21 1b 	      jsr	setMode
   4726  1f8e
   4727  1f8e		       20 f9 1a 	      jsr	setFX
   4728  1f91
   4729  1f91		       ad 69 70 	      lda	attack
   4730  1f94		       20 57 1a 	      jsr	showAttack
   4731  1f97
   4732  1f97		       20 fe 19 	      jsr	showMidiMode
   4733  1f9a
   4734  1f9a		       ad 6a 70 	      lda	release
   4735  1f9d		       20 b8 19 	      jsr	showRelease
   4736  1fa0
   4737  1fa0		       ac 6c 70 	      ldy	filterStatus
   4738  1fa3		       20 91 18 	      jsr	showFiltOnOff
   4739  1fa6
   4740  1fa6		       20 6f 1a 	      jsr	setVolume
   4741  1fa9
   4742  1fa9		       ad 6b 70 	      lda	octave
   4743  1fac		       20 bf 1a 	      jsr	setOctave
   4744  1faf
   4745  1faf		       20 6e 1c 	      jsr	showPatchName
   4746  1fb2
   4747  1fb2		       ad 7a 70 	      lda	paddle2
   4748  1fb5		       20 48 18 	      jsr	ksetPad2
   4749  1fb8
   4750  1fb8		       60		      rts
   4751  1fb9							;---------------------------------------------------
   4752  1fb9
   4753  1fb9							; ***************************
   4754  1fb9							; Variable Setup
   4755  1fb9							; ***************************
   4756  1fb9				   variableInit
   4757  1fb9		       a9 00		      lda	#0
   4758  1fbb		       8d 7a 70 	      sta	paddle2
   4759  1fbe		       8d 5c 70 	      sta	filterDisable
   4760  1fc1		       8d 6c 70 	      sta	filterStatus
   4761  1fc4		       8d 58 70 	      sta	keyTimer
   4762  1fc7		       8d 40 70 	      sta	bender
   4763  1fca		       8d 70 70 	      sta	helpMode
   4764  1fcd		       8d 21 70 	      sta	patPtr
   4765  1fd0		       8d 03 70 	      sta	Frame
   4766  1fd3		       8d 02 70 	      sta	FrameH
   4767  1fd6		       8d 05 70 	      sta	EchoCur
   4768  1fd9		       8d 75 70 	      sta	customPatchSaved
   4769  1fdc		       8d 76 70 	      sta	paddleTop
   4770  1fdf		       8d 77 70 	      sta	paddleBottom
   4771  1fe2
   4772  1fe2		       a9 02		      lda	#2
   4773  1fe4		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
   4774  1fe7
   4775  1fe7		       a9 04		      lda	#4	; set normal tuning
   4776  1fe9		       8d 71 70 	      sta	tuneSetting
   4777  1fec
   4778  1fec		       a9 00		      lda	#0
   4779  1fee		       20 68 19 	      jsr	setLFODepth	;********************************
   4780  1ff1		       a9 00		      lda	#0
   4781  1ff3		       20 7e 19 	      jsr	setLFORate	;********************************
   4782  1ff6
   4783  1ff6							; set up tuning array pointers
   4784  1ff6		       a9 f9		      lda	#<tuningL4
   4785  1ff8		       85 22		      sta	tunePtrL
   4786  1ffa		       a9 36		      lda	#>tuningL4
   4787  1ffc		       85 23		      sta	tunePtrL+1
   4788  1ffe
   4789  1ffe		       a9 f9		      lda	#<tuningH4
   4790  2000		       85 24		      sta	tunePtrH
   4791  2002		       a9 36		      lda	#>tuningH4
   4792  2004		       85 25		      sta	tunePtrH+1
   4793  2006
   4794  2006		       a9 02		      lda	#2
   4795  2008		       8d 20 70 	      sta	VICMode
   4796  200b		       a9 00		      lda	#0
   4797  200d		       8d 1d 70 	      sta	soundMode
   4798  2010							;lda #40
   4799  2010							;sta portSpd
   4800  2010
   4801  2010							; Video Mode
   4802  2010		       a9 03		      lda	#3
   4803  2012		       a0 02		      ldy	#2
   4804  2014		       20 39 19 	      jsr	setVideoMode	;********************************
   4805  2017
   4806  2017							; Default full volume
   4807  2017		       a9 0f		      lda	#$0F
   4808  2019		       8d 1c 70 	      sta	volume
   4809  201c
   4810  201c							; Echo?
   4811  201c		       a9 70		      lda	#$70
   4812  201e		       8d 04 70 	      sta	EchoPtr
   4813  2021
   4814  2021		       a0 00		      ldy	#0
   4815  2023		       20 71 1b 	      jsr	setPatch	;set bass sound
   4816  2026
   4817  2026							; Set up starting portamento values
   4818  2026		       a2 0c		      ldx	#12
   4819  2028		       bd bf 33 	      lda	NSoundLArr,x
   4820  202b		       8d 16 70 	      sta	pitchLA
   4821  202e		       8d 17 70 	      sta	pitchLB
   4822  2031		       8d 18 70 	      sta	pitchLC
   4823  2034							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   4824  2034							;sta lastKeyB
   4825  2034							;sta lastKeyC
   4826  2034		       bd 07 34 	      lda	NSoundHArr,x
   4827  2037		       8d 19 70 	      sta	pitchHA
   4828  203a		       8d 1a 70 	      sta	pitchHB
   4829  203d		       8d 1b 70 	      sta	pitchHC
   4830  2040							;----------
   4831  2040		       60		      rts
   4832  2041
   4833  2041
   4834  2041							;************************************
   4835  2041							; clrScr - Clear Screen
   4836  2041							;************************************
   4837  2041				   clrScr
   4838  2041		       a2 00		      ldx	#0
   4839  2043		       a9 20		      lda	#32
   4840  2045				   clrScrLoop
   4841  2045		       9d 00 04 	      sta	$400,x
   4842  2048		       9d 00 05 	      sta	$500,x
   4843  204b		       9d 00 06 	      sta	$600,x
   4844  204e		       9d 00 07 	      sta	$700,x
   4845  2051		       ca		      dex
   4846  2052		       d0 f1		      bne	clrScrLoop
   4847  2054		       60		      rts
   4848  2055
   4849  2055
   4850  2055							;************************************
   4851  2055							; DisplayHex - draw hex value on screen
   4852  2055							;************************************
   4853  2055							; note uses helpWritePointer so can't be
   4854  2055							; used within displayPage routine
   4855  2055							; X = horizontal location
   4856  2055							; Y = vertical location
   4857  2055							; A = value
   4858  2055							; hexDispColor = color
   4859  2055				   displayHex
   4860  2055							; figure out screen location
   4861  2055							; and store in word pointer
   4862  2055		       8e 72 70 	      stx	hexDispTemp
   4863  2058		       aa		      tax		; save the hex value in X
   4864  2059		       b9 cd 28 	      lda	lineOffsetL,y
   4865  205c		       18		      clc
   4866  205d		       6d 72 70 	      adc	hexDispTemp
   4867  2060		       85 31		      sta	helpWritePointerL
   4868  2062		       85 33		      sta	helpColorPointerL
   4869  2064
   4870  2064		       b9 e7 28 	      lda	lineOffsetM,y
   4871  2067		       69 00		      adc	#0
   4872  2069		       85 32		      sta	helpWritePointerM
   4873  206b		       18		      clc
   4874  206c		       69 d4		      adc	#$D4
   4875  206e		       85 34		      sta	helpColorPointerM
   4876  2070							;--------------------
   4877  2070		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
   4878  2073		       8a		      txa
   4879  2074		       29 0f		      and	#$0F	; isolate the LS nibble
   4880  2076		       aa		      tax
   4881  2077		       bd 5f 33 	      lda	hexDisplay,x	; get character to display
   4882  207a		       a0 01		      ldy	#1
   4883  207c		       91 31		      sta	(helpWritePointerL),y
   4884  207e							;lda #$E
   4885  207e		       ad 8d 70 	      lda	hexDispColor
   4886  2081		       91 33		      sta	(helpColorPointerL),y
   4887  2083							;-------------------
   4888  2083		       ad 72 70 	      lda	hexDispTemp
   4889  2086		       4a		      lsr		; get the MS nibble
   4890  2087		       4a		      lsr
   4891  2088		       4a		      lsr
   4892  2089		       4a		      lsr
   4893  208a		       aa		      tax
   4894  208b		       bd 5f 33 	      lda	hexDisplay,x	; get character to display
   4895  208e		       a0 00		      ldy	#0
   4896  2090		       91 31		      sta	(helpWritePointerL),y
   4897  2092							;lda #$E
   4898  2092		       ad 8d 70 	      lda	hexDispColor
   4899  2095		       91 33		      sta	(helpColorPointerL),y
   4900  2097							;-------------------
   4901  2097		       60		      rts
   4902  2098
   4903  2098
   4904  2098							;************************************
   4905  2098							; DisplayPage - display an entire
   4906  2098							; page of help info with color support
   4907  2098							;************************************
   4908  2098							; X = LSB of data address
   4909  2098							; Y = MSB of data address
   4910  2098							; data format:
   4911  2098							; line_number, color, text, 0
   4912  2098							; line_number, color, text, 0
   4913  2098							; 255
   4914  2098				   displayPage
   4915  2098		       84 2f		      sty	helpReadPointerL
   4916  209a		       86 30		      stx	helpReadPointerM
   4917  209c		       a9 01		      lda	#1
   4918  209e		       8d 6d 70 	      sta	helpColor	; default to white
   4919  20a1				   helpLoop
   4920  20a1		       a0 00		      ldy	#0
   4921  20a3							; get line number and set up output pointers
   4922  20a3		       b1 2f		      lda	(helpReadPointerL),y
   4923  20a5		       c9 ff		      cmp	#255
   4924  20a7		       f0 5b		      beq	quitHelp
   4925  20a9		       aa		      tax
   4926  20aa		       bd e7 28 	      lda	lineOffsetM,x
   4927  20ad		       85 32		      sta	helpWritePointerM
   4928  20af		       18		      clc
   4929  20b0		       69 d4		      adc	#$D4
   4930  20b2		       85 34		      sta	helpColorPointerM
   4931  20b4		       bd cd 28 	      lda	lineOffsetL,x
   4932  20b7		       85 31		      sta	helpWritePointerL
   4933  20b9		       85 33		      sta	helpColorPointerL
   4934  20bb							;--------------------
   4935  20bb		       a0 01		      ldy	#1
   4936  20bd		       8c 6e 70 	      sty	helpYIn
   4937  20c0		       a0 00		      ldy	#0
   4938  20c2		       8c 6f 70 	      sty	helpYOut
   4939  20c5				   helpTextLoop
   4940  20c5							; get the first character
   4941  20c5		       ac 6e 70 	      ldy	helpYIn
   4942  20c8		       b1 2f		      lda	(helpReadPointerL),y
   4943  20ca		       f0 28		      beq	quitTextLoop
   4944  20cc		       c8		      iny
   4945  20cd		       8c 6e 70 	      sty	helpYIn
   4946  20d0							; see if it's a color command
   4947  20d0		       c9 80		      cmp	#128
   4948  20d2		       10 17		      bpl	setColor	;---
   4949  20d4		       c9 40		      cmp	#64
   4950  20d6		       30 02		      bmi	showSpaceHelp
   4951  20d8		       e9 40		      sbc	#64
   4952  20da							;lda #126
   4953  20da				   showSpaceHelp
   4954  20da							; write the color and character to the screen
   4955  20da		       ac 6f 70 	      ldy	helpYOut
   4956  20dd		       91 31		      sta	(helpWritePointerL),y
   4957  20df		       ad 6d 70 	      lda	helpColor
   4958  20e2		       91 33		      sta	(helpColorPointerL),y
   4959  20e4		       c8		      iny
   4960  20e5		       8c 6f 70 	      sty	helpYOut
   4961  20e8		       4c c5 20 	      jmp	helpTextLoop
   4962  20eb				   setColor
   4963  20eb		       38		      sec
   4964  20ec		       e9 80		      sbc	#128
   4965  20ee		       8d 6d 70 	      sta	helpColor
   4966  20f1		       4c c5 20 	      jmp	helpTextLoop
   4967  20f4							;---------------
   4968  20f4				   quitTextLoop
   4969  20f4							; update the input pointer
   4970  20f4		       c8		      iny
   4971  20f5		       98		      tya
   4972  20f6		       18		      clc
   4973  20f7		       65 2f		      adc	helpReadPointerL
   4974  20f9		       85 2f		      sta	helpReadPointerL
   4975  20fb		       a5 30		      lda	helpReadPointerM
   4976  20fd		       69 00		      adc	#0
   4977  20ff		       85 30		      sta	helpReadPointerM
   4978  2101		       4c a1 20 	      jmp	helpLoop	;/\/\/\/\/\
   4979  2104				   quitHelp
   4980  2104		       60		      rts
   4981  2105
   4982  2105							; Extra subroutines
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  2105					      include	"cynth_subroutines.asm"
      1  2105							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  2105							;
      3  2105							; input:
      4  2105							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  2105							;			 should point to the byte just before the first byte to be sorted
      6  2105							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  2105							;nval	 - number of values,  1<= nval <= 255
      8  2105							;			 value will be destroyed (set to zero)
      9  2105							;
     10  2105
     11  2105
     12  2105							;*=$6000			;code anywhere in ram or rom
     13  2105
     14  2105							;=====================================================================
     15  2105							; CUSTOM SORT FOR NOTE ARRAY
     16  2105				   doSort
     17  2105		       a9 08		      lda	#8
     18  2107		       8d 22 01 	      sta	nval
     19  210a				   sort
     20  210a		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  210d		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  2110		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  2113		       4c 21 21 	      jmp	l2
     24  2116				   l1
     25  2116		       88		      dey
     26  2117		       f0 11		      beq	l3
     27  2119		       b9 9f 70 	      lda	noteNumArray-1,y
     28  211c		       cd 26 01 	      cmp	work2
     29  211f		       90 f5		      bcc	l1
     30  2121				   l2
     31  2121		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  2124		       8d 26 01 	      sta	work2	;potentially largest value
     33  2127		       4c 16 21 	      jmp	l1
     34  212a				   l3
     35  212a		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  212d		       ad 26 01 	      lda	work2	;the largest value
     37  2130		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  2133		       ac 25 01 	      ldy	work1	;index of free space
     39  2136		       ad 27 01 	      lda	work3	;the over-written value
     40  2139		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  213c		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  213f		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  2141		       60		      rts
     44  2142							;=====================================================================
     45  2142
     46  2142
     47  2142
     48  2142
     49  2142							;=====================================================================
     50  2142							; ORIGINAL VERSION
     51  2142							;originalSort:
     52  2142		       ac 22 01 	      ldy	nval	;start of subroutine sort
     53  2145							;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  2145		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     55  2148		       4c 21 21 	      jmp	l2
     56  214b							;l1:
     57  214b		       88		      dey
     58  214c		       f0 dc		      beq	l3
     59  214e							;lda (zpadd),y
     60  214e		       cd 26 01 	      cmp	work2
     61  2151		       90 c3		      bcc	l1
     62  2153							;l2:
     63  2153		       8c 25 01 	      sty	work1	;index of potentially largest value
     64  2156		       8d 26 01 	      sta	work2	;potentially largest value
     65  2159		       4c 16 21 	      jmp	l1
     66  215c							;l3:
     67  215c		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     68  215f		       ad 26 01 	      lda	work2	;the largest value
     69  2162							;sta (zpadd),y		;put largest value in place
     70  2162		       ac 25 01 	      ldy	work1	;index of free space
     71  2165		       ad 27 01 	      lda	work3	;the over-written value
     72  2168							;sta (zpadd),y		;put the over-written value in the free space
     73  2168		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     74  216b		       d0 9d		      bne	sort	;start working with the shorter sequence
     75  216d		       60		      rts
     76  216e							;=====================================================================
     77  216e
     78  216e
------- FILE cynthcart152.asm
   4984  216e
   4985  216e							; Screen text, data tables, note tuning tables, etc.
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  216e					      include	"cynth_data.asm"
      1  216e
      2  216e							;------------------------------------------
      3  216e							; Keyboard Reading Data
      4  216e							;------------------------------------------
      5  216e
      6  216e				   hexColPiano
      7  216e		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$F7,$F7, $EF,$EF,$DF,$DF ,0	; PIANO KEYBOARD
      8  217f							;byte $7F,$FD,$FB,$FB, $F7,$EF,$EF,$DF, $BF,$BF,$F7,$F7, $EF,$EF,$DF,$DF ,0 ; PIANO KEYBOARD
      9  217f				   hexCol
     10  217f		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04,0
     11  2190							; 0   1   2   3    4	5   6	7    8	 9   A	 B    C   D   E   F
     12  2190				   hexRowPiano
     13  2190		       08 08 01 01*	      byte.b	$08,$08,$01,$01,$08, $01,$01,$08,$08, $01,$02,$40, $02,$40,$02,$40 ,0	; PIANO KEYBOARD
     14  21a1							;byte $08,$01,$01,$08, $01,$01,$08,$08, $01,$08,$02,$40, $02,$40,$02,$40 ,0 ; PIANO KEYBOARD
     15  21a1				   hexRow
     16  21a1		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, 0
     17  21b2							; 0   1   2   3    4	5   6	7    8	 9   A	 B	 C   D	 E   F
     18  21b2
     19  21b2							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     20  21b2							; Column activation data
     21  21b2				   col			;	   x	     x		      x 	  x    A    x	 B
     22  21b2		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     23  21be		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     24  21cb							;    C    x	D    x	    E	 F    x 	  x	    x
     25  21cb
     26  21cb							; Row testing data
     27  21cb				   row			;	   x	     x		      x 	  x    A    x	 B
     28  21cb		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     29  21d7		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     30  21e4							;    C    x	D    x	    E	 F    x 	  x	    x
     31  21e4							;-----------------------------------------------
     32  21e4							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     33  21e4							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     34  21e4							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     35  21e4							;-----------------------------------------------
     36  21e4							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     37  21e4							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     38  21e4							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     39  21e4							;-----------------------------------------------
     40  21e4
     41  21e4				   commandKeys		; row, column
     42  21e4		       7f 10		      byte.b	~$80, $10	;spc 28
     43  21e6		       fd 04		      byte.b	~$02, $04	;A   0
     44  21e8		       fd 20		      byte.b	~$02, $20	;S   1
     45  21ea		       fb 04		      byte.b	~$04, $04	;D   2
     46  21ec		       fb 20		      byte.b	~$04, $20	;F   3
     47  21ee		       f7 04		      byte.b	~$08, $04	;G   4
     48  21f0		       f7 20		      byte.b	~$08, $20	;H   5
     49  21f2		       ef 04		      byte.b	~$10, $04	;J   6
     50  21f4		       ef 20		      byte.b	~$10, $20	;K   7
     51  21f6		       df 04		      byte.b	~$20, $04	;L   8
     52  21f8		       df 20		      byte.b	~$20, $20	;:   9
     53  21fa		       bf 04		      byte.b	~$40, $04	;;   10
     54  21fc		       bf 20		      byte.b	~$40, $20	;=   11
     55  21fe		       fd 10		      byte.b	~$02, $10	;Z   12
     56  2200		       fb 80		      byte.b	~$04, $80	;X   13
     57  2202		       fb 10		      byte.b	~$04, $10	;C   14
     58  2204		       f7 80		      byte.b	~$08, $80	;V   15
     59  2206		       f7 10		      byte.b	~$08, $10	;B   16
     60  2208		       ef 80		      byte.b	~$10, $80	;N   17
     61  220a		       ef 10		      byte.b	~$10, $10	;M   18
     62  220c		       df 80		      byte.b	~$20, $80	;,   19
     63  220e		       df 10		      byte.b	~$20, $10	;.   20
     64  2210		       bf 80		      byte.b	~$40, $80	;/   21
     65  2212		       fe 80		      byte.b	~$01, $80	;u/d 22
     66  2214		       fe 04		      byte.b	~$01, $04	;l/r 23
     67  2216		       fe 10		      byte.b	~$01, $10	;F1  24
     68  2218		       fe 20		      byte.b	~$01, $20	;F3  25
     69  221a		       fe 40		      byte.b	~$01, $40	;F5  26
     70  221c		       fe 08		      byte.b	~$01, $08	;F7  27
     71  221e		       fe 02		      byte.b	~$01, $02	;ret 29
     72  2220		       7f 02		      byte.b	~$80, $02	;Larr 30
     73  2222							;byte ~$80, $04		;Larr 30
     74  2222
     75  2222				   rawKeyFunctions
     76  2222							;    functionPointer, inputData:Y,A
     77  2222		       22 18 00 00	      word.w	bendBender, $0000	;space
     78  2226		       71 1b 00 0a	      word.w	setPatch, $0A00	;A
     79  222a		       71 1b 00 0b	      word.w	setPatch, $0B00	;S
     80  222e		       71 1b 00 0c	      word.w	setPatch, $0C00	;D
     81  2232		       71 1b 00 0d	      word.w	setPatch, $0D00	;F
     82  2236		       71 1b 00 0e	      word.w	setPatch, $0E00	;G
     83  223a		       71 1b 00 0f	      word.w	setPatch, $0F00	;H
     84  223e		       71 1b 00 10	      word.w	setPatch, $1000	;J
     85  2242		       71 1b 00 11	      word.w	setPatch, $1100	;K
     86  2246		       71 1b 00 12	      word.w	setPatch, $1200	;L
     87  224a		       71 1b 00 13	      word.w	setPatch, $1300	;:
     88  224e		       71 1b 00 15	      word.w	setPatch, $1500	;;
     89  2252		       71 1b 00 14	      word.w	setPatch, $1400	;=
     90  2256		       71 1b 00 00	      word.w	setPatch, $0000	;Z
     91  225a		       71 1b 00 01	      word.w	setPatch, $0100	;X
     92  225e		       71 1b 00 02	      word.w	setPatch, $0200	;C
     93  2262		       71 1b 00 03	      word.w	setPatch, $0300	;V
     94  2266		       71 1b 00 04	      word.w	setPatch, $0400	;B
     95  226a		       71 1b 00 05	      word.w	setPatch, $0500	;N
     96  226e		       71 1b 00 06	      word.w	setPatch, $0600	;M
     97  2272		       71 1b 00 07	      word.w	setPatch, $0700	;,
     98  2276		       71 1b 00 08	      word.w	setPatch, $0800	;.
     99  227a		       71 1b 00 09	      word.w	setPatch, $0900	;/
    100  227e		       1e 1b 00 00	      word.w	ksetMode, $0000	;up/down
    101  2282		       1e 1b 01 00	      word.w	ksetMode, $0001	;left/right
    102  2286		       bf 1a 03 00	      word.w	setOctave, 3	;F1
    103  228a		       bf 1a 02 00	      word.w	setOctave, 2	;F3
    104  228e		       bf 1a 01 00	      word.w	setOctave, 1	;F5
    105  2292		       bf 1a 00 00	      word.w	setOctave, 0	;F7
    106  2296		       cd 17 00 00	      word.w	khelp,0	;return
    107  229a		       5f 17 00 00	      word.w	kloadPatch,0	;Larrow
    108  229e
    109  229e				   minimalKeyFunctions
    110  229e							;    functionPointer, inputData:Y,A
    111  229e		       22 18 00 00	      word.w	bendBender, $0000	;space
    112  22a2		       00 00 00 0a	      word.w	0, $0A00	;A
    113  22a6		       00 00 00 0b	      word.w	0, $0B00	;S
    114  22aa		       00 00 00 0c	      word.w	0, $0C00	;D
    115  22ae		       00 00 00 0d	      word.w	0, $0D00	;F
    116  22b2		       00 00 00 0e	      word.w	0, $0E00	;G
    117  22b6		       00 00 00 0f	      word.w	0, $0F00	;H
    118  22ba		       00 00 00 10	      word.w	0, $1000	;J
    119  22be		       00 00 00 11	      word.w	0, $1100	;K
    120  22c2		       00 00 00 12	      word.w	0, $1200	;L
    121  22c6		       00 00 00 13	      word.w	0, $1300	;:
    122  22ca		       00 00 00 14	      word.w	0, $1400	;;
    123  22ce		       00 00 00 15	      word.w	0, $1500	;=
    124  22d2		       00 00 00 00	      word.w	0, $0000	;Z
    125  22d6		       00 00 00 01	      word.w	0, $0100	;X
    126  22da		       00 00 00 02	      word.w	0, $0200	;C
    127  22de		       00 00 00 03	      word.w	0, $0300	;V
    128  22e2		       00 00 00 04	      word.w	0, $0400	;B
    129  22e6		       00 00 00 05	      word.w	0, $0500	;N
    130  22ea		       00 00 00 06	      word.w	0, $0600	;M
    131  22ee		       00 00 00 07	      word.w	0, $0700	;,
    132  22f2		       00 00 00 08	      word.w	0, $0800	;.
    133  22f6		       00 00 00 09	      word.w	0, $0900	;/
    134  22fa		       00 00 00 00	      word.w	0, $0000	;up/down
    135  22fe		       00 00 01 00	      word.w	0, $0001	;left/right
    136  2302		       bf 1a 03 00	      word.w	setOctave, 3	;F1
    137  2306		       bf 1a 02 00	      word.w	setOctave, 2	;F3
    138  230a		       bf 1a 01 00	      word.w	setOctave, 1	;F5
    139  230e		       bf 1a 00 00	      word.w	setOctave, 0	;F7
    140  2312		       00 00 00 00	      word.w	0,0	;return
    141  2316		       00 00 00 00	      word.w	0,0	;Larrow
    142  231a
    143  231a				   CTRLKeyFunctions
    144  231a							;    functionPointer, inputData:Y,A
    145  231a		       00 00 00 00	      word.w	0, $0000	;space
    146  231e		       9a 19 e0 00	      word.w	setRelease, REL_SHORT	;A
    147  2322		       9a 19 e9 00	      word.w	setRelease, REL_MED	;S
    148  2326		       9a 19 ee 00	      word.w	setRelease, REL_LONG	;D
    149  232a		       1e 1b 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    150  232e		       1e 1b 01 00	      word.w	ksetMode, MODE_5THS	;G
    151  2332		       1e 1b 02 00	      word.w	ksetMode, MODE_5PORT	;H
    152  2336		       1e 1b 20 00	      word.w	ksetMode, MODE_MONO1	;J
    153  233a		       1e 1b 40 00	      word.w	ksetMode, MODE_ARP1	;K
    154  233e		       1e 1b 41 00	      word.w	ksetMode, MODE_ARP2	;L
    155  2342		       1e 1b 42 00	      word.w	ksetMode, MODE_ARP3	;:
    156  2346		       1e 1b 43 00	      word.w	ksetMode, MODE_ARP4	;;
    157  234a		       1e 1b 44 00	      word.w	ksetMode, MODE_ARP5	;=
    158  234e		       f6 1a 00 00	      word.w	ksetFX, $0000	;Z
    159  2352		       f6 1a 01 00	      word.w	ksetFX, $0001	;X
    160  2356		       f6 1a 02 00	      word.w	ksetFX, $0002	;C
    161  235a		       f6 1a 03 00	      word.w	ksetFX, $0003	;V
    162  235e		       f6 1a 04 00	      word.w	ksetFX, $0004	;B
    163  2362		       f6 1a 05 00	      word.w	ksetFX, $0005	;N
    164  2366		       f6 1a 06 00	      word.w	ksetFX, $0006	;M
    165  236a		       f6 1a 07 00	      word.w	ksetFX, $0007	;,
    166  236e		       f6 1a 08 00	      word.w	ksetFX, $0008	;.
    167  2372							;word ksetFX,	$0009	;/
    168  2372		       00 00 00 00	      word.w	0, $0000	;/
    169  2376		       1e 1b 21 00	      word.w	ksetMode, MODE_MONO2	;up/down
    170  237a		       1e 1b 21 00	      word.w	ksetMode, MODE_MONO2	;left/right
    171  237e		       6c 1a 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    172  2382		       6c 1a 0b 00	      word.w	ksetVolume, VOLMED	;F3
    173  2386		       6c 1a 07 00	      word.w	ksetVolume, VOLLOW	;F5
    174  238a		       6c 1a 00 00	      word.w	ksetVolume, VOLOFF	;F7
    175  238e		       1e 1b 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    176  2392		       00 00 00 00	      word.w	0,0	;Larrow
    177  2396
    178  2396				   shiftKeyFunctions
    179  2396							;    functionPointer, inputData:Y,A
    180  2396		       00 00 00 00	      word.w	0, $0000	;space
    181  239a		       39 1a 00 00	      word.w	setAttack,ATK_SHORT	;A
    182  239e		       39 1a 90 00	      word.w	setAttack,ATK_MED	;S
    183  23a2		       39 1a e0 00	      word.w	setAttack,ATK_LONG	;D
    184  23a6		       39 19 08 01	      word.w	setVideoMode,$0108	;F
    185  23aa		       39 19 03 02	      word.w	setVideoMode,$0203	;G
    186  23ae		       39 19 15 03	      word.w	setVideoMode,$0315	;H
    187  23b2		       3b 18 02 00	      word.w	setVIC, 2	;J
    188  23b6		       3b 18 01 00	      word.w	setVIC, 1	;K
    189  23ba		       3b 18 00 00	      word.w	setVIC, 0	;L
    190  23be		       bc 18 01 00	      word.w	setFullScreenMode, $0001	;:
    191  23c2		       bc 18 00 00	      word.w	setFullScreenMode, $0000	;;
    192  23c6		       00 00 00 00	      word.w	0, $0000	;=
    193  23ca		       7e 19 00 00	      word.w	setLFORate,0	;Z
    194  23ce		       7e 19 01 00	      word.w	setLFORate,1	;X
    195  23d2		       7e 19 02 00	      word.w	setLFORate,2	;C
    196  23d6		       7e 19 03 00	      word.w	setLFORate,3	;V
    197  23da		       68 19 00 00	      word.w	setLFODepth,0	;B
    198  23de		       68 19 01 00	      word.w	setLFODepth,1	;N
    199  23e2		       68 19 02 00	      word.w	setLFODepth,2	;M
    200  23e6		       68 19 03 00	      word.w	setLFODepth,3	;,
    201  23ea		       00 00 00 00	      word.w	0, $0000	;.
    202  23ee		       00 00 00 00	      word.w	0, $0000	;/
    203  23f2		       3f 18 00 00	      word.w	ksetPaddles, 0	;up/down
    204  23f6		       3f 18 01 00	      word.w	ksetPaddles, 1	;left/right
    205  23fa		       1e 1b 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    206  23fe		       1e 1b 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    207  2402		       1e 1b 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    208  2406		       1e 1b 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    209  240a		       0d 18 00 00	      word.w	kclearModulation,0	;return
    210  240e		       00 00 00 00	      word.w	0,0	;Larrow
    211  2412
    212  2412				   commKeyFunctions
    213  2412							;    functionPointer, inputData:Y,A
    214  2412		       00 00 00 00	      word.w	0, $0000	;space
    215  2416		       5d 18 00 00	      word.w	ksetFilter, $0000	;A
    216  241a		       5d 18 20 00	      word.w	ksetFilter, $0020	;S
    217  241e		       5d 18 40 00	      word.w	ksetFilter, $0040	;D
    218  2422		       5d 18 60 00	      word.w	ksetFilter, $0060	;F
    219  2426		       5d 18 80 00	      word.w	ksetFilter, $0080	;G
    220  242a		       5d 18 a0 00	      word.w	ksetFilter, $00A0	;H
    221  242e		       5d 18 c0 00	      word.w	ksetFilter, $00C0	;J
    222  2432		       5d 18 e0 00	      word.w	ksetFilter, $00E0	;K
    223  2436		       00 00 00 00	      word.w	0, $0000	;L
    224  243a		       00 00 00 00	      word.w	0, $0000	;:
    225  243e		       00 00 00 00	      word.w	0, $0000	;;
    226  2442		       00 00 00 00	      word.w	0, $0000	;=
    227  2446		       6a 18 00 00	      word.w	kfiltOnOff,$0000	;Z
    228  244a		       6a 18 00 01	      word.w	kfiltOnOff,$0100	;X
    229  244e		       6a 18 00 02	      word.w	kfiltOnOff,$0200	;C
    230  2452		       48 18 00 00	      word.w	ksetPad2, $0000	;V
    231  2456		       48 18 01 00	      word.w	ksetPad2, $0001	;B
    232  245a		       48 18 03 00	      word.w	ksetPad2, $0003	;N
    233  245e		       48 18 04 00	      word.w	ksetPad2, $0004	;M
    234  2462		       fb 19 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    235  2466		       fb 19 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    236  246a		       fb 19 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    237  246e		       00 00 00 00	      word.w	0, $0000	;up/down
    238  2472		       00 00 00 00	      word.w	0, $0000	;left/right
    239  2476		       00 00 00 00	      word.w	0, $0000	;F1
    240  247a		       00 00 00 00	      word.w	0, $0000	;F3
    241  247e		       00 00 00 00	      word.w	0, $0000	;F5
    242  2482		       00 00 00 00	      word.w	0, $0000	;F7
    243  2486		       00 00 00 00	      word.w	0,0	;return
    244  248a		       00 00 00 00	      word.w	0,0	;Larrow
    245  248e
    246  248e
    247  248e
    248  248e				   runstopKeyFunctions
    249  248e							;    functionPointer, inputData:Y,A
    250  248e		       00 00 00 00	      word.w	0, $0000	;space
    251  2492		       a6 18 00 00	      word.w	ksetTune,$0000	;A
    252  2496		       a6 18 00 01	      word.w	ksetTune,$0100	;S
    253  249a		       a6 18 00 02	      word.w	ksetTune,$0200	;D
    254  249e		       a6 18 00 03	      word.w	ksetTune,$0300	;F
    255  24a2		       a6 18 00 04	      word.w	ksetTune,$0400	;G
    256  24a6		       a6 18 00 05	      word.w	ksetTune,$0500	;H
    257  24aa		       a6 18 00 06	      word.w	ksetTune,$0600	;J
    258  24ae		       a6 18 00 07	      word.w	ksetTune,$0700	;K
    259  24b2		       a6 18 00 08	      word.w	ksetTune,$0800	;L
    260  24b6		       a6 18 00 09	      word.w	ksetTune,$0900	;:
    261  24ba		       a6 18 00 0a	      word.w	ksetTune,$0A00	;;
    262  24be		       00 00 00 00	      word.w	0, $0000	;=
    263  24c2		       1c 18 01 00	      word.w	ksetPalNtsc,$0001	;Z
    264  24c6		       1c 18 00 00	      word.w	ksetPalNtsc,$0000	;X
    265  24ca		       00 00 00 00	      word.w	0, $0000	;C
    266  24ce		       00 00 00 00	      word.w	0, $0000	;V
    267  24d2		       00 00 00 00	      word.w	0, $0000	;B
    268  24d6		       00 00 00 00	      word.w	0, $0000	;N
    269  24da		       00 00 00 00	      word.w	0, $0000	;M
    270  24de		       00 00 00 00	      word.w	0, $0000	;,
    271  24e2		       00 00 00 00	      word.w	0, $0000	;.
    272  24e6		       00 00 00 00	      word.w	0, $0000	;/
    273  24ea		       00 00 00 00	      word.w	0, $0000	;up/down
    274  24ee		       00 00 00 00	      word.w	0, $0000	;left/right
    275  24f2		       cb 1c 00 00	      word.w	SIDEdit,$0000	;F1
    276  24f6		       0a 17 00 00	      word.w	ksavePatch,0	;F3
    277  24fa		       00 00 00 00	      word.w	0,0	;F5
    278  24fe		       cb 1c ff ff	      word.w	SIDEdit,$FFFF	;F7
    279  2502		       00 00 00 00	      word.w	0,0	;return
    280  2506		       00 00 00 00	      word.w	0,0	;Larrow
    281  250a
    282  250a		       00 1c	   MAX_PATCH_NUMBER equ	28
    283  250a
    284  250a				   patchName
    285  250a		       53 41 57 20*	      byte.b	"SAW BASS	  "	;0
    286  251a		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
    287  252a		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
    288  253a		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
    289  254a		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
    290  255a		       50 55 4c 53*	      byte.b	"PULSE HIGH	  "	;5
    291  256a		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
    292  257a		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
    293  258a		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
    294  259a		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
    295  25aa		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
    296  25ba		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
    297  25ca		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
    298  25da		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
    299  25ea		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
    300  25fa		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
    301  260a
    302  260a				   patchName2
    303  260a		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
    304  261a		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
    305  262a		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
    306  263a		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
    307  264a		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
    308  265a		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
    309  266a		       4e 45 57 20*	      byte.b	"NEW PATCH 13	  "	;22
    310  267a		       4e 45 57 20*	      byte.b	"NEW PATCH 14	  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
    311  268a		       4e 45 57 20*	      byte.b	"NEW PATCH 15	  "	;24
    312  269a		       4e 45 57 20*	      byte.b	"NEW PATCH 16	  "	;25
    313  26aa		       4e 45 57 20*	      byte.b	"NEW PATCH 17	  "	;26
    314  26ba		       4e 45 57 20*	      byte.b	"NEW PATCH 18	  "	;27
    315  26ca		       4e 45 57 20*	      byte.b	"NEW PATCH 19	  "	;28
    316  26da		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;29
    317  26ea		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;30
    318  26fa
    319  26fa		       00 1d	   SAVED_PATCH_MESSAGE equ	29
    320  26fa		       00 1e	   CUSTOM_PATCH_NUMBER equ	30
    321  26fa
    322  26fa				   modeList
    323  26fa		       00		      byte.b	MODE_NORMAL
    324  26fb		       01		      byte.b	MODE_5THS
    325  26fc		       02		      byte.b	MODE_5PORT
    326  26fd		       10		      byte.b	MODE_PORT1
    327  26fe		       11		      byte.b	MODE_PORT2
    328  26ff		       12		      byte.b	MODE_PORT3
    329  2700		       20		      byte.b	MODE_MONO1
    330  2701		       21		      byte.b	MODE_MONO2
    331  2702		       40		      byte.b	MODE_ARP1
    332  2703		       41		      byte.b	MODE_ARP2
    333  2704		       42		      byte.b	MODE_ARP3
    334  2705		       43		      byte.b	MODE_ARP4
    335  2706		       44		      byte.b	MODE_ARP5
    336  2707		       08		      byte.b	MODE_6CHAN
    337  2708		       08		      byte.b	MODE_6CHAN
    338  2709		       08		      byte.b	MODE_6CHAN	;16
    339  270a
    340  270a
    341  270a				   patchSoundMode
    342  270a		       00		      byte.b	MODE_NORMAL	;0
    343  270b		       00		      byte.b	MODE_NORMAL	;1
    344  270c		       02		      byte.b	MODE_5PORT	;2
    345  270d		       11		      byte.b	MODE_PORT2	;3
    346  270e		       01		      byte.b	MODE_5THS	;4
    347  270f		       11		      byte.b	MODE_PORT2	;5
    348  2710		       00		      byte.b	MODE_NORMAL	;6
    349  2711		       20		      byte.b	MODE_MONO1	;7
    350  2712		       10		      byte.b	MODE_PORT1	;8
    351  2713		       00		      byte.b	MODE_NORMAL	;9
    352  2714		       00		      byte.b	MODE_NORMAL	;10 <--- start of new patches
    353  2715		       40		      byte.b	MODE_ARP1	;11
    354  2716		       41		      byte.b	MODE_ARP2	;12
    355  2717		       42		      byte.b	MODE_ARP3	;13
    356  2718		       20		      byte.b	MODE_MONO1	;14
    357  2719		       21		      byte.b	MODE_MONO2	;15
    358  271a		       00		      byte.b	MODE_NORMAL	;16
    359  271b		       20		      byte.b	MODE_MONO1	;17
    360  271c		       00		      byte.b	MODE_NORMAL	;18
    361  271d		       12		      byte.b	MODE_PORT3	;19
    362  271e		       08		      byte.b	MODE_6CHAN	;20
    363  271f		       44		      byte.b	MODE_ARP5	;21
    364  2720		       08		      byte.b	MODE_6CHAN	;22
    365  2721		       00		      byte.b	MODE_NORMAL	;23
    366  2722		       00		      byte.b	MODE_NORMAL	;24
    367  2723		       00		      byte.b	MODE_NORMAL	;25
    368  2724		       00		      byte.b	MODE_NORMAL	;26
    369  2725		       00		      byte.b	MODE_NORMAL	;27
    370  2726		       00		      byte.b	MODE_NORMAL	;28
    371  2727		       00		      byte.b	MODE_NORMAL	;29
    372  2728		       00		      byte.b	MODE_NORMAL	;30
    373  2729
    374  2729							; FX TYPES:
    375  2729							;MOD_NONE equ 0
    376  2729							;MOD_FILT_LFO equ 1
    377  2729							;MOD_FILT_ENV equ 2
    378  2729							;MOD_FILT3 equ 3
    379  2729							;MOD_FILT4 equ 4
    380  2729							;MOD_FILT5 equ 5
    381  2729							;MOD_PW_LFO equ 6
    382  2729							;MOD_PW2 equ 7
    383  2729
    384  2729							;	 0	 1	 2	 3	 4	  5	  6	  7	 8	 9
    385  2729				   patchFX
    386  2729		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
    387  2733		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
    388  273d		       00 03 00 00*	      byte.b	0, 3, 0, 0, 0, 0, 0, 0, 0, 0
    389  2747				   patchLFO
    390  2747		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $10, $01, $02, $13, $00
    391  2751		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
    392  275b		       10 12 00 00*	      byte.b	$10, $12, $00, $00, $00, $00, $00, $00, $00, $00
    393  2765				   patchOctave
    394  2765		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
    395  276f		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
    396  2779		       01 03 01 01*	      byte.b	1, 3, 1, 1, 1, 2, 3, 2, 0, 0
    397  2783				   patchAD
    398  2783		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    399  278d		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
    400  2797		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
    401  27a1				   patchSR
    402  27a1		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    403  27ab		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    404  27b5		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F0, $F0, 0
    405  27bf				   patchPaddle
    406  27bf		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    407  27c9		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    408  27d3		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    409  27dd							;patchFiltCut
    410  27dd							;	byte	$c0,	$80,	$c0,	$FF,	$40,	$50,	$c0,	$c0,	$80,	0
    411  27dd							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	$80
    412  27dd							;	byte	$c0,	$80,	$c0,	$FF,	$c0,	$c0,	$c0,	$c0,	$80,	0
    413  27dd				   newPatchFiltCut
    414  27dd		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    415  27e7		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    416  27f1		       c0 f0 c0 ff*	      byte.b	$c0, $F0, $c0, $FF, $c0, $c0, $c0, $c0, $80, 0
    417  27fb				   patchVol
    418  27fb		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $6, $7, $F, $C, $c, 0
    419  2805		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $c, $C
    420  280f		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $b, $8, $F, $F, $c, 0
    421  2819				   patchPWL
    422  2819		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    423  2823		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    424  282d		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    425  2837				   patchPWH
    426  2837		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    427  2841		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    428  284b		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    429  2855				   patchWave
    430  2855		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    431  285f		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    432  2869		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    433  2873				   patchFilt
    434  2873		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    435  287d		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    436  2887		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    437  2891				   patchVolMode
    438  2891		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    439  289b		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    440  28a5		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    441  28af
    442  28af				   octaveTable
    443  28af		       00 0c 18 24*	      byte.b	0,12,24,36,48
    444  28b4
    445  28b4
    446  28b4				   pwLFO
    447  28b4		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    448  28b8		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    449  28bc		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    450  28c0		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    451  28c4
    452  28c4				   patOffset
    453  28c4		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    454  28ca
    455  28ca				   voiceOffset
    456  28ca		       00 07 0e 	      byte.b	$0,$7,$E
    457  28cd
    458  28cd
    459  28cd
    460  28cd							;---------------------------- displayPage
    461  28cd
    462  28cd							; This chart references each line
    463  28cd							; on the standard character based screen.
    464  28cd							; = value x 40 + 0x400
    465  28cd				   lineOffsetL
    466  28cd		       00		      byte.b	$00
    467  28ce		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    468  28d4		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    469  28da		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    470  28e0		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    471  28e6		       e8		      byte.b	$E8
    472  28e7				   lineOffsetM
    473  28e7		       04		      byte.b	$04
    474  28e8		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    475  28ee		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    476  28f4		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    477  28fa		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    478  2900		       07		      byte.b	$07
    479  2901
    480  2901				   debugOverlay
    481  2901		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    482  290c		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    483  2918		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    484  2943		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    485  296e							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    486  296e							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    487  296e							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    488  296e							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    489  296e		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    490  297c		       ff		      byte.b	255
    491  297d
    492  297d				   fxNames
    493  297d		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    494  2985		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    495  298d		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    496  2995		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    497  299d		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    498  29a5		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    499  29ad		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    500  29b5		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    501  29bd		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    502  29c5
    503  29c5				   hexEditHelp
    504  29c5		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    505  29f0		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    506  2a1c		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    507  2a2d		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    508  2a59		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    509  2a6a		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    510  2a96		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    511  2aa7		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    512  2ad3		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    513  2ae4		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    514  2b10		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    515  2b21		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    516  2b4c		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",0
    517  2b6f		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",0
    518  2b94		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",0
    519  2bb9		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",0
    520  2bde		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    521  2c03		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    522  2c2e		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    523  2c59		       ff		      byte.b	255
    524  2c5a
    525  2c5a				   helpMessage
    526  2c5a		       52 45 54 55*	      byte.b	"RETURN FOR COMMANDS	       ",0
    527  2c78							;byte "RETURN FOR HELP 	     ",0
    528  2c78				   normalHelp
    529  2c78		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81," KEYBOARD COMMANDS ",$82,"-		",0
    530  2ca7		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    531  2cd2		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS",$8F," ROWS ARE ",$81,"PIANO KEYS  ",0
    532  2d01		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV",$8F," ROWS SELECT",$81," SOUND PRESETS ",0
    533  2d30		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    534  2d5d		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83,"    _",$8F,"=CUSTOM-PRESET",0
    535  2d8a		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    536  2db5		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    537  2dc4		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND MODE",0
    538  2dee		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNMM",$8F,"=FX MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    539  2e1c		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    540  2e46		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    541  2e56		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A,"  JKL",$8F,"=VID-MODE"
    542  2e84		       00		      byte.b	0
    543  2e85		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    544  2eb4		       00		      byte.b	0
    545  2eb5		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    546  2ed3		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR MODULATION",0
    547  2f01		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    548  2f2b		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    549  2f43		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF ",$8E,":;=",$8F,"=OMNI/CH1/CH5"
    550  2f6e		       00		      byte.b	0
    551  2f6f		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    552  2f98		       00		      byte.b	0
    553  2f99		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    554  2fc3		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    555  2fd6		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ZX",$8F,"=PAL/NTSC"
    556  2ffa		       00		      byte.b	0
    557  2ffb		       17 87 46 31*	      byte.b	23,$87,"F1",$8F,"=SID-EDIT-KB" ,$87," F3",$8F,"=SAVE-CUSTOM-PRESET"
    558  3024		       00		      byte.b	0
    559  3025		       18 87 46 37*	      byte.b	24,$87,"F7",$8F,"=SID-EDIT-PIANO	  ",$8B,"RETURN TO EXIT"
    560  3051		       00		      byte.b	0
    561  3052		       ff		      byte.b	255
    562  3053
    563  3053				   mainColorText
    564  3053		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    565  3082		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83,"       ",$8D,"	    ",$8F,"	 ",$8D,"FILTR",$8C,"=",$81,"X	",0
    566  30b5		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    567  30eb		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    568  3121		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"FX",$8C,"=",$81,"XXXXX ",$8F,"	VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    569  3157		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    570  3182
    571  3182							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    572  3182							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    573  3182							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    574  3182							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    575  3182							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    576  3182							;byte 255
    577  3182
    578  3182		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    579  3182		       00 02	   CYNTHCART_COLOR equ	2
    580  3182
    581  3182
    582  3182		       00 2d	   MODETEXT   equ	40*1+5
    583  3182		       00 57	   TUNINGTEXT equ	40*2+7
    584  3182		       00 7f	   OCTAVETEXT equ	40*3+7
    585  3182		       00 a7	   VOLTEXT    equ	40*4+7
    586  3182
    587  3182		       00 62	   ATKTEXT    equ	40*2+18
    588  3182		       00 8a	   RELTEXT    equ	40*3+18
    589  3182		       00 12	   PATCHTEXT  equ	40*0+18
    590  3182
    591  3182		       00 94	   LFORATETEXT equ	40*3+28
    592  3182		       00 6c	   LFODEPTHTEXT equ	40*2+28
    593  3182		       00 bc	   VIDEOTEXT  equ	40*4+28
    594  3182
    595  3182		       00 ae	   FXTEXT     equ	40*4+14
    596  3182
    597  3182		       00 4c	   FILTERTEXT2 equ	40*1+36
    598  3182		       00 75	   FILTERTEXT equ	40*2+37
    599  3182		       00 9c	   PADDLETEXT equ	40*3+36
    600  3182		       00 c4	   PAD2TEXT   equ	40*4+36
    601  3182
    602  3182		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    603  3182
    604  3182							;MODE
    605  3182							;ATTACK
    606  3182							;RELEASE
    607  3182							;VOL
    608  3182
    609  3182
    610  3182
    611  3182
    612  3182		       ff		      byte.b	255
    613  3183
    614  3183				   modeText
    615  3183		       50 4f 4c 59*	      byte.b	"POLY	  "	;0
    616  318b		       50 4f 52 54*	      byte.b	"PORT1   "	;1
    617  3193		       50 4f 52 54*	      byte.b	"PORT2   "	;2
    618  319b		       50 4f 52 54*	      byte.b	"PORT3   "	;3
    619  31a3		       4d 4f 4e 4f*	      byte.b	"MONO	  "	;4
    620  31ab		       41 52 50 31*	      byte.b	"ARP1	  "	;5
    621  31b3		       41 52 50 32*	      byte.b	"ARP2	  "	;6
    622  31bb		       41 52 50 33*	      byte.b	"ARP3	  "	;7
    623  31c3		       41 52 50 34*	      byte.b	"ARP4	  "	;8
    624  31cb		       41 52 50 35*	      byte.b	"ARP5	  "	;9
    625  31d3		       36 2d 56 4f*	      byte.b	"6-VOICE "	;10
    626  31db
    627  31db
    628  31db				   textData		; can contain 64 four byte texts
    629  31db		       4f 46 46 20	      byte.b	"OFF "	;0
    630  31df		       4f 4e 20 20	      byte.b	"ON  "	;4
    631  31e3		       53 4c 4f 57	      byte.b	"SLOW"	;8
    632  31e7		       4d 45 44 20	      byte.b	"MED "	;12
    633  31eb		       46 41 53 54	      byte.b	"FAST"	;16
    634  31ef		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    635  31f3		       2d 33 30 20	      byte.b	"-30 "	;24
    636  31f7		       2d 32 30 20	      byte.b	"-20 "	;28
    637  31fb		       2d 31 30 20	      byte.b	"-10 "	;32
    638  31ff		       30 20 20 20	      byte.b	"0   "	;36
    639  3203		       2b 31 30 20	      byte.b	"+10 "	;40
    640  3207		       2b 32 30 20	      byte.b	"+20 "	;44
    641  320b		       2b 33 30 20	      byte.b	"+30 "	;48
    642  320f		       2b 34 30 20	      byte.b	"+40 "	;52
    643  3213		       2b 35 30 20	      byte.b	"+50 "	;56
    644  3217		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    645  321b		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    646  321f		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    647  3223		       46 49 4c 54	      byte.b	"FILT"	;72
    648  3227		       56 4f 4c 20	      byte.b	"VOL "	;76
    649  322b		       4c 4f 57 20	      byte.b	"LOW "	;80
    650  322f		       4d 45 44 20	      byte.b	"MED "	;84
    651  3233		       48 49 47 48	      byte.b	"HIGH"	;88
    652  3237		       53 49 44 3a	      byte.b	"SID:"	;92
    653  323b		       44 49 53 20	      byte.b	"DIS "	;96
    654  323f		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    655  3243		       50 55 4c 53	      byte.b	"PULS"	;104
    656  3247		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    657  324b		       4c 46 4f 20	      byte.b	"LFO "	;112
    658  324f		       42 45 4e 44	      byte.b	"BEND"	;116
    659  3253
    660  3253
    661  3253				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    662  3253		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00
    663  325b		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08
    664  3263		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10
    665  326b		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18
    666  3273		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20
    667  327b		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28
    668  3283		       4d 4f 4e 4f*	      byte.b	"MONO3  ",1	;$30
    669  328b		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38
    670  3293		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40
    671  329b		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48
    672  32a3		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50
    673  32ab		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58
    674  32b3		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60
    675  32bb		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68
    676  32c3		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70
    677  32cb
    678  32cb				   modeNameOffsets
    679  32cb							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    680  32cb		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    681  32db		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    682  32eb		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    683  32fb		       00 00 00 00*	      byte.b	$00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    684  330b		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    685  331b
    686  331b
    687  331b							; soundModes
    688  331b							;MODE_NORM	equ $00
    689  331b							;MODE_6CHAN equ $08
    690  331b							;MODE_PORT1	equ $10
    691  331b							;MODE_PORT2	equ $11
    692  331b							;MODE_PORT3	equ $12
    693  331b							;MODE_MONO1 equ $20
    694  331b							;MODE_MONO2 equ $21
    695  331b							;MODE_MONO3 equ $22
    696  331b							;MODE_ARP1	equ $40
    697  331b							;MODE_ARP2	equ $41
    698  331b							;MODE_ARP3	equ $42
    699  331b							;MODE_ARP4	equ $43
    700  331b							;MODE_ARP5	equ $44
    701  331b
    702  331b
    703  331b
    704  331b				   bottomText
    705  331b		       20 50 41 4c*	      byte.b	" PAL V1.5.1",0
    706  3327		       4e 54 53 43*	      byte.b	"NTSC V1.5.1",0
    707  3333
    708  3333
    709  3333							; contant pointers into the textData array
    710  3333		       00 00	   ON	      equ	0
    711  3333		       00 04	   OFF	      equ	4
    712  3333		       00 08	   SLOW       equ	8
    713  3333		       00 0c	   MED	      equ	12
    714  3333		       00 10	   FAST       equ	16
    715  3333		       00 14	   TUNING     equ	20
    716  3333		       00 3c	   POLY       equ	60
    717  3333		       00 40	   MONO       equ	64
    718  3333		       00 44	   FREQ       equ	68
    719  3333		       00 48	   FILT       equ	72
    720  3333		       00 4c	   VOL	      equ	76
    721  3333		       00 50	   VLOW       equ	80
    722  3333		       00 54	   VMED       equ	84
    723  3333		       00 58	   VHIGH      equ	88
    724  3333		       00 60	   DISABLED   equ	96
    725  3333		       00 64	   PAD2VALTEXT equ	100
    726  3333
    727  3333
    728  3333
    729  3333
    730  3333				   tuneArrPtrLL
    731  3333		       f5 85 15 5d*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    732  333d				   tuneArrPtrLH
    733  333d		       34 35 36 36*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    734  3347				   tuneArrPtrHL
    735  3347		       3d cd b1 a5*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    736  3351				   tuneArrPtrHH
    737  3351		       35 35 36 36*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    738  335b
    739  335b				   LFODepthArray
    740  335b		       00 02 05 0f	      byte.b	0,2,5,15
    741  335f
    742  335f
    743  335f
    744  335f
    745  335f				   hexDisplay
    746  335f		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    747  336f
    748  336f				   keyData		; numbers 0-9 and letters a-f
    749  336f		       23 38 3b 08*	      byte.b	35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    750  337f
    751  337f							; key set for piano keyboard: black keys + middle A-F on the white keys
    752  337f		       33 3b 08 10*	      byte.b	51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    753  338f
    754  338f							; array of LFO values
    755  338f				   LFOArrL
    756  338f		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    757  339f				   LFOArrH
    758  339f		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    759  33af				   LFOdisp
    760  33af		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    761  33bf
    762  33bf							; NTSC Note Table
    763  33bf				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    764  33bf		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    765  33cb		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    766  33d7		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    767  33e3		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    768  33ef		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    769  33fb		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    770  3407							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    771  3407				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    772  3407		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    773  3413		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    774  341f		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    775  342b		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    776  3437		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    777  3443		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    778  344f
    779  344f							; PAL Note Table
    780  344f				   PSoundLArr
    781  344f		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    782  345b		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    783  3467		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    784  3473		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    785  347f		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    786  348b		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    787  3497		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    788  34a2
    789  34a2				   PSoundHArr
    790  34a2		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    791  34ae		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    792  34ba		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    793  34c6		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    794  34d2		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    795  34de		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    796  34ea		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart152.asm
   4987  34f5
   4988  34f5							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  34f5					      include	"cynth_tuning.asm"
      1  34f5
      2  34f5				   tuningL0
      3  34f5		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  3501		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  350d		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  3519		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  3525		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  3531		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  353d				   tuningH0
     10  353d		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  3549		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  3555		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  3561		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  356d		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  3579		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  3585
     17  3585				   tuningL1
     18  3585		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  3591		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  359d		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  35a9		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  35b5		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  35c1		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  35cd				   tuningH1
     25  35cd		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  35d9		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  35e5		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  35f1		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  35fd		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  3609		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  3615
     32  3615				   tuningL2
     33  3615		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  3621		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  362d		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  3639		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  3645		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  3651		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  365d							;tuningH2
     40  365d							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  365d							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  365d							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  365d							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  365d							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  365d							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  365d
     47  365d				   tuningL3
     48  365d		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  3669		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  3675		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  3681		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  368d		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  3699		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  36a5				   tuningH3
     55  36a5		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  36b1				   tuningH2
     57  36b1		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  36bd		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  36c9		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  36d5		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  36e1		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  36ed		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  36f9
     64  36f9				   tuningL4
     65  36f9				   tuningH4
     66  36f9				   tuningH5
     67  36f9		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  3705				   tuningH6
     69  3705		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  3711		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  371d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  3729		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  3735		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  3741		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  374d							;tuningH4
     76  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  374d							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  374d
     83  374d				   tuningL5
     84  374d		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  3759		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  3765		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  3771		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  377d		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  3789		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  3795
     91  3795							;tuningH5
     92  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  3795							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  3795
     99  3795				   tuningL6
    100  3795		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  37a1		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  37ad		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  37b9		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  37c5		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  37d1		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  37dd							;tuningH6
    107  37dd							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  37dd							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  37dd							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  37dd							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  37dd							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  37dd							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  37dd
    114  37dd				   tuningL7
    115  37dd		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  37e9		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  37f5		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  3801		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  380d		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  3819		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  3825				   tuningH7
    122  3825		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  3831		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  383d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  3849		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  3855		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  3861		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  386d
    129  386d				   tuningL8
    130  386d		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  3879		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  3885		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  3891		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  389d		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  38a9		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  38b5				   tuningH8
    137  38b5		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  38c1		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  38cd		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  38d9		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  38e5		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  38f1		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  38fd
    144  38fd				   tuningL9
    145  38fd		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  3909		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  3915		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  3921		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  392d		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  3939		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  3945				   tuningH9
    152  3945		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  3951		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  395d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  3969		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  3975		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  3981		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart152.asm
   4990  398d
   4991  398d							; Frank's MIDI interface code
   4992  398d				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   4993  398d				  -	      include	"cynth_midi_dummy.asm"
   4994  398d					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  398d					      include	"cynth_midi.asm"
      1  398d							; public MIDI interface routines:
      2  398d							; midiDetect
      3  398d							; midiInit
      4  398d							; midiRead
      5  398d							; midiWrite
      6  398d
      7  398d							; interface type for midiDetect and midiInit:
      8  398d							; 0: no MIDI interface was detected
      9  398d							; 1: Sequential Circuits Inc.
     10  398d							; 2: Passport & Syntech
     11  398d							; 3: DATEL/Siel/JMS
     12  398d							; 4: Namesoft
     13  398d
     14  398d							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  398d		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  398d
     17  398d
     18  398d					      processor	6502
     19  398d
     20  398d		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     21  398d		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     22  398d
     23  398d		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     24  398d		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     25  398d
     26  398d							; detec MIDI interface, return type in accu
     27  398d				   midiDetect		; TODO
     28  398d		       a9 00		      lda	#0
     29  398f		       60		      rts
     30  3990
     31  3990							; init MIDI interface, type in accu from midiDetect
     32  3990				   midiInit
     33  3990		       78		      sei
     34  3991
     35  3991		       85 6e		      sta	midiInterfaceType
     36  3993		       aa		      tax
     37  3994		       ca		      dex
     38  3995
     39  3995		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
     40  3997		       8d 02 dc 	      sta	DDRA
     41  399a
     42  399a		       a9 00		      lda	#0	; CIA#1 port B = inputs
     43  399c		       8d 03 dc 	      sta	DDRB
     44  399f
     45  399f		       a9 00		      lda	#0
     46  39a1		       85 71		      sta	keyPressed
     47  39a3		       85 6f		      sta	keyTestIndex
     48  39a5		       85 70		      sta	keyPressedIntern
     49  39a7
     50  39a7							; init addresses
     51  39a7		       bd 76 3a 	      lda	midiControlOfs,x
     52  39aa		       85 64		      sta	midiControl
     53  39ac		       bd 7a 3a 	      lda	midiStatusOfs,x
     54  39af		       85 66		      sta	midiStatus
     55  39b1		       bd 7e 3a 	      lda	midiTxOfs,x
     56  39b4		       85 68		      sta	midiTx
     57  39b6		       bd 82 3a 	      lda	midiRxOfs,x
     58  39b9		       85 6a		      sta	midiRx
     59  39bb		       a9 de		      lda	#$de
     60  39bd		       85 65		      sta	midiControl+1
     61  39bf		       85 67		      sta	midiStatus+1
     62  39c1		       85 69		      sta	midiTx+1
     63  39c3		       85 6b		      sta	midiRx+1
     64  39c5
     65  39c5		       20 0a 3a 	      jsr	midiReset
     66  39c8
     67  39c8							; clear ringbuffer
     68  39c8		       a9 00		      lda	#0
     69  39ca		       85 6c		      sta	midiRingbufferReadIndex
     70  39cc		       85 6d		      sta	midiRingbufferWriteIndex
     71  39ce
     72  39ce		       bd 8a 3a 	      lda	midiIrqType,x
     73  39d1		       d0 0a		      bne	midiSetIrq
     74  39d3
     75  39d3							; set NMI routine
     76  39d3		       a9 33		      lda	#<midiNmi
     77  39d5		       8d 18 03 	      sta	$0318
     78  39d8		       a9 3a		      lda	#>midiNmi
     79  39da		       8d 19 03 	      sta	$0319
     80  39dd
     81  39dd							; set IRQ routine
     82  39dd		       a9 49	   midiSetIrq lda	#<midiIrq
     83  39df		       8d 14 03 	      sta	$0314
     84  39e2		       a9 3a		      lda	#>midiIrq
     85  39e4		       8d 15 03 	      sta	$0315
     86  39e7
     87  39e7							; enable IRQ/NMI
     88  39e7		       a9 94		      lda	#$94
     89  39e9		       1d 86 3a 	      ora	midiCr0Cr1,x
     90  39ec		       91 64		      sta	(midiControl),y
     91  39ee
     92  39ee		       58		      cli
     93  39ef		       60		      rts
     94  39f0
     95  39f0		       78	   midiRelease sei
     96  39f1		       20 0a 3a 	      jsr	midiReset
     97  39f4		       a9 31		      lda	#$31
     98  39f6		       8d 14 03 	      sta	$0314
     99  39f9		       a9 ea		      lda	#$ea
    100  39fb		       8d 15 03 	      sta	$0315
    101  39fe		       a9 47		      lda	#$47
    102  3a00		       8d 18 03 	      sta	$0318
    103  3a03		       a9 fe		      lda	#$fe
    104  3a05		       8d 19 03 	      sta	$0319
    105  3a08		       58		      cli
    106  3a09		       60		      rts
    107  3a0a
    108  3a0a							; MC68B50 master reset and IRQ off
    109  3a0a				   midiReset
    110  3a0a		       a0 00		      ldy	#0
    111  3a0c		       a9 03		      lda	#3
    112  3a0e		       91 64		      sta	(midiControl),y
    113  3a10		       60		      rts
    114  3a11
    115  3a11		       a6 6c	   midiCanRead ldx	midiRingbufferReadIndex
    116  3a13		       e4 6d		      cpx	midiRingbufferWriteIndex
    117  3a15		       60		      rts
    118  3a16
    119  3a16							; read MIDI byte from ringbuffer
    120  3a16				   midiRead
    121  3a16		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    122  3a18		       e4 6d		      cpx	midiRingbufferWriteIndex
    123  3a1a		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    124  3a1c							;beq midiRead
    125  3a1c		       60		      rts		; No new data, so return
    126  3a1d
    127  3a1d							; wait for MIDI byte and read it from ringbuffer
    128  3a1d				   midiReadWait
    129  3a1d		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    130  3a1f		       e4 6d		      cpx	midiRingbufferWriteIndex
    131  3a21		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    132  3a23		       4c 1d 3a 	      jmp	midiReadWait
    133  3a26							;rts ; No new data, so return
    134  3a26
    135  3a26
    136  3a26				   processMidi
    137  3a26							; read next character from ringbuffer
    138  3a26		       bd 00 7f 	      lda	midiRingbuffer,x
    139  3a29		       a8		      tay		; save next byte into y
    140  3a2a		       e8		      inx		; increment buffer pointer...
    141  3a2b		       8a		      txa
    142  3a2c							;and #31 ; wrap around at end
    143  3a2c		       29 ff		      and	#BUFFER_SIZE_MASK
    144  3a2e		       85 6c		      sta	midiRingbufferReadIndex	; save it
    145  3a30		       98		      tya		; the byte read from the buffer ends up in both y and a
    146  3a31
    147  3a31							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    148  3a31							; DEBUG - SHOW MIDI DATA
    149  3a31				  -	      IF	DEBUG_SHOW_MIDI=1
    150  3a31				  -			;IF DEBUG_DISPLAY=1
    151  3a31				  -	      sta	temp
    152  3a31				  -	      bpl	notStatusByte
    153  3a31				  -	      lda	#$E
    154  3a31				  -	      sta	hexDispColor
    155  3a31				  -	      jmp	endColor
    156  3a31				  -notStatusByte
    157  3a31				  -	      lda	#$F
    158  3a31				  -	      sta	hexDispColor
    159  3a31				  -endColor
    160  3a31				  -	      lda	debugOffset
    161  3a31				  -	      and	#$F0
    162  3a31				  -	      lsr
    163  3a31				  -	      lsr
    164  3a31				  -	      lsr
    165  3a31				  -	      tax
    166  3a31				  -			;ldx #34
    167  3a31				  -	      lda	debugOffset
    168  3a31				  -	      and	#$0F
    169  3a31				  -	      tay
    170  3a31				  -	      iny
    171  3a31				  -	      iny
    172  3a31				  -	      iny
    173  3a31				  -	      iny
    174  3a31				  -	      iny
    175  3a31				  -	      iny
    176  3a31				  -	      lda	temp
    177  3a31				  -	      jsr	displayHex
    178  3a31				  -	      inc	debugOffset
    179  3a31				  -			;ldy debugOffset
    180  3a31				  -			;iny
    181  3a31				  -			;tya
    182  3a31				  -			;and #$0F
    183  3a31				  -			;sta debugOffset
    184  3a31				  -			;adc #5
    185  3a31				  -			;tay
    186  3a31				  -	      lda	temp
    187  3a31				  -	      ldy	temp
    188  3a31					      ENDIF
    189  3a31							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  3a31
    191  3a31		       60		      rts
    192  3a32
    193  3a32							; write MIDI byte and wait for write complete
    194  3a32		       60	   midiWrite  rts		; TODO
    195  3a33
    196  3a33							; NMI handler
    197  3a33		       48	   midiNmi    pha
    198  3a34		       8a		      txa
    199  3a35		       48		      pha
    200  3a36		       98		      tya
    201  3a37		       48		      pha
    202  3a38
    203  3a38							; test if it was a NMI from the MIDI interface
    204  3a38		       a0 00		      ldy	#0
    205  3a3a		       b1 66		      lda	(midiStatus),y
    206  3a3c		       29 01		      and	#1
    207  3a3e		       f0 03		      beq	midiNmiEnd
    208  3a40		       20 68 3a 	      jsr	midiStore
    209  3a43		       68	   midiNmiEnd pla
    210  3a44		       a8		      tay
    211  3a45		       68		      pla
    212  3a46		       aa		      tax
    213  3a47		       68		      pla
    214  3a48		       40		      rti
    215  3a49
    216  3a49							; IRQ handler
    217  3a49		       a6 6e	   midiIrq    ldx	midiInterfaceType
    218  3a4b		       ca		      dex
    219  3a4c		       bd 8a 3a 	      lda	midiIrqType,x
    220  3a4f		       f0 0e		      beq	midiIrqKey
    221  3a51
    222  3a51							; test if it was an IRQ from the MIDI interface
    223  3a51		       a0 00		      ldy	#0
    224  3a53		       b1 66		      lda	(midiStatus),y
    225  3a55		       29 01		      and	#1
    226  3a57		       f0 06		      beq	midiIrqKey
    227  3a59		       20 68 3a 	      jsr	midiStore
    228  3a5c		       4c 43 3a 	      jmp	midiNmiEnd
    229  3a5f
    230  3a5f							; keyboard test
    231  3a5f		       20 8e 3a    midiIrqKey jsr	keyboardTest
    232  3a62		       ad 0d dc 	      lda	$dc0d
    233  3a65		       4c 43 3a 	      jmp	midiNmiEnd
    234  3a68
    235  3a68							; get MIDI byte and store in ringbuffer
    236  3a68		       b1 6a	   midiStore  lda	(midiRx),y
    237  3a6a		       a6 6d		      ldx	midiRingbufferWriteIndex
    238  3a6c		       9d 00 7f 	      sta	midiRingbuffer,x
    239  3a6f		       e8		      inx
    240  3a70		       8a		      txa
    241  3a71							;and #31
    242  3a71		       29 ff		      and	#BUFFER_SIZE_MASK
    243  3a73		       85 6d		      sta	midiRingbufferWriteIndex
    244  3a75		       60		      rts
    245  3a76
    246  3a76							; MC68B50 control register (relative to $de00)
    247  3a76		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    248  3a7a
    249  3a7a							; MC68B50 status register
    250  3a7a		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    251  3a7e
    252  3a7e							; MC68B50 TX register
    253  3a7e		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    254  3a82
    255  3a82							; MC68B50 RX register offset
    256  3a82		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    257  3a86
    258  3a86							; counter divide bits CR0 and CR1 for the MC68B50
    259  3a86				   midiCr0Cr1
    260  3a86		       01 01 02 01	      .byte.b	1, 1, 2, 1
    261  3a8a
    262  3a8a							; 1=IRQ, 0=NMI
    263  3a8a				   midiIrqType
    264  3a8a		       01 01 01 00	      .byte.b	1, 1, 1, 0
    265  3a8e
    266  3a8e
    267  3a8e							; keyboard test
    268  3a8e				   keyboardTest
    269  3a8e		       a6 6f		      ldx	keyTestIndex
    270  3a90		       bd d2 3a 	      lda	keys,x	; load colum
    271  3a93		       8d 00 dc 	      sta	PRA
    272  3a96		       e8		      inx
    273  3a97		       ad 01 dc 	      lda	PRB
    274  3a9a		       3d d2 3a 	      and	keys,x	; mask row
    275  3a9d		       e8		      inx
    276  3a9e		       c9 00		      cmp	#0
    277  3aa0		       d0 0d		      bne	kbt2
    278  3aa2		       bd d2 3a 	      lda	keys,x
    279  3aa5		       c9 80		      cmp	#$80
    280  3aa7		       d0 04		      bne	jump1
    281  3aa9		       e6 72		      inc	shiftPressed
    282  3aab		       d0 02		      bne	kbt2
    283  3aad				   jump1
    284  3aad		       85 70		      sta	keyPressedIntern
    285  3aaf				   kbt2
    286  3aaf		       e8		      inx
    287  3ab0		       e0 12		      cpx	#18
    288  3ab2		       d0 1b		      bne	kbt3
    289  3ab4		       a6 70		      ldx	keyPressedIntern
    290  3ab6		       f0 05		      beq	jump2
    291  3ab8		       a5 72		      lda	shiftPressed
    292  3aba		       f0 01		      beq	jump2
    293  3abc		       e8		      inx
    294  3abd				   jump2
    295  3abd		       86 71		      stx	keyPressed
    296  3abf		       d0 08		      bne	jump3
    297  3ac1		       a5 72		      lda	shiftPressed
    298  3ac3		       f0 04		      beq	jump3
    299  3ac5		       a9 40		      lda	#$40
    300  3ac7		       85 71		      sta	keyPressed
    301  3ac9				   jump3
    302  3ac9		       a2 00		      ldx	#0
    303  3acb		       86 72		      stx	shiftPressed
    304  3acd		       86 70		      stx	keyPressedIntern
    305  3acf				   kbt3
    306  3acf		       86 6f		      stx	keyTestIndex
    307  3ad1		       60		      rts
    308  3ad2
    309  3ad2				   keys
    310  3ad2		       fe 10 01 	      .byte.b	%11111110, %00010000, 1	; F1
    311  3ad5		       fe 20 03 	      .byte.b	%11111110, %00100000, 3	; F3
    312  3ad8		       fe 40 05 	      .byte.b	%11111110, %01000000, 5	; F5
    313  3adb		       fe 08 07 	      .byte.b	%11111110, %00001000, 7	; F7
    314  3ade		       bf 10 80 	      .byte.b	%10111111, %00010000, $80	; right shift
    315  3ae1		       bd 80 80 	      .byte.b	%10111101, %10000000, $80	; left shift
------- FILE cynthcart152.asm
   4996  3ae4					      ENDIF
   4997  3ae4
   4998  3ae4
   4999  3ae4				  -	      IF	MODE=KERNEL_OBSOLETE
   5000  3ae4				  -	      org	$bfff
   5001  3ae4				  -	      byte	0
   5002  3ae4					      ENDIF

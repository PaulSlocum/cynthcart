------- FILE cynthcart2.0.1.asm LEVEL 1 PASS 2
      1  3b72 ????						; Commodore 64 Cynthcart
      2  3b72 ????						; by Paul Slocum
      3  3b72 ????						;------------------------
      4  3b72 ????						; TEXT EDITOR TAB=3
      5  3b72 ????						;------------------------
      6  3b72 ????
      7  3b72 ????						;     ~~~==========================================================================================~~~
      8  3b72 ????						; <<<<<<"MODE" AND "DEVICE_CONFIG" SHOULD BE DEFINED IN DASM CALL (dasm -DMODE=1 -DDEVICE_CONFIG=0) >>>>>>
      9  3b72 ????						;     ~~~==========================================================================================~~~
     10  3b72 ????
     11  3b72 ????						; IMAGE RUN MODES:
     12  3b72 ????	       00 00	   CART_OBSOLETE equ	0	; run at $8000 off cartridge ROM (No longer supported because the ROM is bigger than 8K)
     13  3b72 ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word (PRG format)
     14  3b72 ????	       00 02	   RAM	      equ	2	; run at $3000, needs to be copied or decompressed into $3000 (used for compresed version)
     15  3b72 ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (No longer supported because the ROM is bigger than 8K)
     16  3b72 ????						; -- - -- - -- - -- - -- -
     17  3b72 ????						;;;MODE equ RAM   ; DISK, CART_OBSOLETE, RAM (for compression), or KERNEL_OBSOLETE
     18  3b72 ????						; -- - -- - -- - -- - -- -
     19  3b72 ????
     20  3b72 ????
     21  3b72 ????						; MIDI AND SID2 CONFIGURATION:
     22  3b72 ????	       00 00	   DEFAULT    equ	0	; Midi autodetect, SID2 at $DF00
     23  3b72 ????	       00 01	   KERBEROS   equ	1	; Datel Midi, SID2 at $D420
     24  3b72 ????	       00 02	   EMU	      equ	2	; Midi disabled, SID2 at $D420
     25  3b72 ????	       00 03	   SIDSYMPHONY equ	3	; Midi disabled, SID2 at $DE00
     26  3b72 ????						; -- - -- - -- - -- - -- -
     27  3b72 ????						;;;DEVICE_CONFIG equ DEFAULT
     28  3b72 ????						; -- - -- - -- - -- - -- -
     29  3b72 ????
     30  3b72 ????
     31  3b72 ????	       00 00	   BETA_RELEASE equ	0
     32  3b72 ????
     33  3b72 ????						;=================================------------ - - - -  -   -
     34  3b72 ????						;
     35  3b72 ????						; TODO:
     36  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     37  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     38  3b72 ????						;
     39  3b72 ????						;=================================------------ - - - -  -   -
     40  3b72 ????						;
     41  3b72 ????						; - - - - - - - - - - - - - -
     42  3b72 ????						; Change Log:
     43  3b72 ????						; - - - - - - - - - - - - - -
     44  3b72 ????						; 2.0.1
     45  3b72 ????						; + disabled Restore key, which causes a lock up on a few 64C models
     46  3b72 ????						; + reset paddle2 pitch value when pitch control is turned off
     47  3b72 ????						; 2.0
     48  3b72 ????						; + 7 additional presets
     49  3b72 ????						; + added mono stack portamento modes
     50  3b72 ????						; + wrote new instruction manual
     51  3b72 ????						; + moved secondary SID to $DF00 to work with SIDcart II (note: must build with SID #2 at $D420 for Kerberos)
     52  3b72 ????						; + now supports and autodetects Passport, Datel, Sequential, and Kerberos MIDI adapters (note: autodetect is incompatible with VICE)
     53  3b72 ????						; + created new compression system to fit latest ROM onto 8K cartridge
     54  3b72 ????						; + presets now have independent waveform and sustain/release for each oscillator
     55  3b72 ????						; + added a button to cancel out of the SID editor
     56  3b72 ????						; + help screen now displays even when video is off
     57  3b72 ????						; + fixed SID editor waveform bug
     58  3b72 ????						; + other minor bugfixes
     59  3b72 ????						; + added build switch for alternate midi and SID configurations
     60  3b72 ????						; - - - - - - - - - - - - - -
     61  3b72 ????						; 1.5.1
     62  3b72 ????						; + fixed clock and sysex bytes causing crashes/stuck notes (Midi 0xF0-0xFF)
     63  3b72 ????						; + fixed bad pitch bend startup value		Q
     64  3b72 ????						; + added non-omni modes for channel 1 and 5
     65  3b72 ????						; - - - - - - - - - - - - - -
     66  3b72 ????						; 1.5.0 (major update for Kerberos)
     67  3b72 ????						; + added MIDI support for Kerberos cartridge/DATEL MIDI interface
     68  3b72 ????						; + arpeggiator
     69  3b72 ????						; + mono stack mode and 6-voice mode
     70  3b72 ????						; + new filter and pulse width effects modes
     71  3b72 ????						; + 12 additional presets
     72  3b72 ????						; + improved clarity of help screen text
     73  3b72 ????						; + moved SID location for MIDI version to $D420 since MIDI address overlaps with SID Symphony ($DE00)
     74  3b72 ????						; + refactored much of project source
     75  3b72 ????						; + new smarter note buffering system
     76  3b72 ????						; + reworked patch parameter display
     77  3b72 ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     78  3b72 ????						; + optimized the tuning shift tables for space by overlapping tables
     79  3b72 ????						; + made LFO and all pitch modulations use proper tuning/scaling
     80  3b72 ????						; + fixed some errors in the tuning shift tables
     81  3b72 ????						; + added "RETURN FOR CONTROLS" message at bottom
     82  3b72 ????						; - - - - - - - - - - - - - -
     83  3b72 ????						; 1.2.4
     84  3b72 ????						; + designated paddle 1 and 2 in help screen
     85  3b72 ????						; - - - - - - - - - - - - - -
     86  3b72 ????						; 1.2.3
     87  3b72 ????						; + disable key-commands when 3 piano keys are held
     88  3b72 ????						;		to avoid quirks with keyboard matrix
     89  3b72 ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     90  3b72 ????						; + reinstated shift-lock holding notes
     91  3b72 ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     92  3b72 ????						; + add another octave to tuning charts for 5ths in top octave
     93  3b72 ????						; + auto-paddle on
     94  3b72 ????						; + set up custom test for space bar
     95  3b72 ????						; + disable settings changes w/ space bar
     96  3b72 ????						; + corrected "sine" to "tringl" in patch names
     97  3b72 ????						; + restored startup patch to "saw bass"
     98  3b72 ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     99  3b72 ????						;	+ add key command to switch controls and turn off
    100  3b72 ????						;	+ add display of paddle status
    101  3b72 ????						;	+ add code to run things from the second paddle
    102  3b72 ????						; - - - - - - - - - - - - - -
    103  3b72 ????						; 1.2.2
    104  3b72 ????						; + keyboard driver rewrite
    105  3b72 ????						; + moved tuning from piano to ASDF...
    106  3b72 ????						; + moved filter On/Off to ZXC
    107  3b72 ????						; + keys swap portamento and octave
    108  3b72 ????						; + move video mode to SHFT+FGH and require shift for VIC mode
    109  3b72 ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
    110  3b72 ????						; + separate functions for "show everything" and "variable init"
    111  3b72 ????						; + video mode with no text (shift+:/;)
    112  3b72 ????						; + SID register $20-$26 edits all 3 oscillators at once
    113  3b72 ????						; + write help display routine
    114  3b72 ????						; + add help screen
    115  3b72 ????						; + reverse octave keys
    116  3b72 ????						; + add help for SID edit mode
    117  3b72 ????						; + redo hex editor piano KB layout
    118  3b72 ????						; + save SID edits
    119  3b72 ????						; + added "COPYING TO RAM" text when RAM copy is on
    120  3b72 ????						; - - - - - - - - - - - - - -
    121  3b72 ????						; 1.2.1
    122  3b72 ????						; + pitch fix for PAL
    123  3b72 ????						; + autodetection for PAL/NTSC
    124  3b72 ????						; - - - - - - - - - - - - - -
    125  3b72 ????						; 1.2.0
    126  3b72 ????						; + filter adjustment for SID Symphony
    127  3b72 ????						; - - - - - - - - - - - - - -
    128  3b72 ????						; 1.1 RELEASE
    129  3b72 ????						; + added SID HEX editor
    130  3b72 ????						; + changed tuning keys to avoid accidentally changing the tuning
    131  3b72 ????						; + added ability to turn the SID filter on and off
    132  3b72 ????						; - - - - - - - - - - - - - -
    133  3b72 ????						; 1.0 RELEASE
    134  3b72 ????						; + first official release
    135  3b72 ????						;-----------------------------------------------------
    136  3b72 ????
    137  3b72 ????
    138  3b72 ????						;-----------------------------------------------------
    139  3b72 ????						; FUTURE TODO LIST:
    140  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    141  3b72 ????						; - make port modes respond to pitch wheel
    142  3b72 ????						; - figure out why pulse LFO is so slow
    143  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    144  3b72 ????						; - fix patch saver issue where mode and FX are sometimes not saved
    145  3b72 ????						; - bug is bypassed, but figure out why showScreen messes up the filter setting
    146  3b72 ????						; - figure out why portamento is slower going down than up
    147  3b72 ????						; - make (IRQ) detector that works with VICE?
    148  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    149  3b72 ????						; - make envelope reset on every new note in mono modes
    150  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    151  3b72 ????						; - automatically relocate SID when using Kerberos
    152  3b72 ????						; - move video settings keys to a less used location?
    153  3b72 ????						; - add more FX modes
    154  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    155  3b72 ????						; - add some of Gert's mixed waveform sounds
    156  3b72 ????						; - add a button that resets all settings and turns video on
    157  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    158  3b72 ????						; - automatically turn off paddle when MIDI mod wheel data is received
    159  3b72 ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    160  3b72 ????						; - 'O' key specifically may be out of tune
    161  3b72 ????						; - - - - - - - - - - - - - - -
    162  3b72 ????						; - consider adding per-patch filter on/off/disabled setting
    163  3b72 ????						; - midi trigger to turn off/on omni
    164  3b72 ????						; - - - - - - - - - - - - - - -
    165  3b72 ????						; - make rising mod not drop
    166  3b72 ????						; - wire up pwModValue from functions
    167  3b72 ????						; - wire up pwSetValue from midi and paddle
    168  3b72 ????						; - create filter and PW setter that runs every frame
    169  3b72 ????						; - - - - - - - - - - - - - - -
    170  3b72 ????						; - have mono-stack check to make sure notes aren't too low or too high
    171  3b72 ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    172  3b72 ????						; - create system that cycles which spots are favored for new empty or replacement notes
    173  3b72 ????						; - - - - - - - - - - - - - - -
    174  3b72 ????						; - auto-detect secondary SID
    175  3b72 ????						; - automatic setup for Kerberos MIDI
    176  3b72 ????						; - - - - - - - - - - - - - - -
    177  3b72 ????						; - fix note off bug with drum machine?
    178  3b72 ????						; - - - - - - - - - - - - - - -
    179  3b72 ????						; -- show held modifier keys
    180  3b72 ????						; - link SID memory to a controller block
    181  3b72 ????						; - make fifths buttons preserve the portamento setting
    182  3b72 ????						; - - - - - - - - - - - - - - -
    183  3b72 ????						; - new intervals other than 5ths
    184  3b72 ????						; - better mute/noise reduction
    185  3b72 ????						; - alternate set of keybindings for use without the keyboard overlay
    186  3b72 ????						; - - - - - - - - - - - - - - -
    187  3b72 ????						; - more patches
    188  3b72 ????						; - paddle 2 auto-on
    189  3b72 ????						;--------------------------
    190  3b72 ????						; - add echo long/med/short
    191  3b72 ????						; - more extreme variations in video mode
    192  3b72 ????						; - noise reduction
    193  3b72 ????						; - Envelope -> Filter Cutoff
    194  3b72 ????						; - filter type
    195  3b72 ????						; - ring modulation
    196  3b72 ????						; - sync
    197  3b72 ????						; - Whammy speed control
    198  3b72 ????						;--------------------------
    199  3b72 ????						; - filter Q
    200  3b72 ????						; - save patches to disk
    201  3b72 ????						;--------------------------
    202  3b72 ????						;--------------------------
    203  3b72 ????
    204  3b72 ????
    205  3b72 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    206  3b72 ????						;# MEMORY MAP
    207  3b72 ????						;#
    208  3b72 ????						;# $0800-$3800 Program and data
    209  3b72 ????						;# $7000-$7200 Variables and buffers (512 bytes)
    210  3b72 ????						;# $7F00-$7FFF MIDI ring buffer
    211  3b72 ????						;#
    212  3b72 ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    213  3b72 ????
    214  3b72 ????
    215  3b72 ????
    216  3b72 ????
    217  3b72 ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    218  3b72 ????				      processor	6502
    219  3b72 ????
    220  3b72 ????
    221  3b72 ????						;**********************************************************
    222  3b72 ????						;**********************************************************
    223  3b72 ????						; PROGRAM CONFIGURATION SWITCHES
    224  3b72 ????						;**********************************************************
    225  3b72 ????						;**********************************************************
    226  3b72 ????
    227  3b72 ????
    228  3b72 ????
    229  3b72 ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running (this should always be enabled)
    230  3b72 ????
    231  3b72 ????				      IF	DEVICE_CONFIG=KERBEROS
    232  3b72 ????	       d4 20	   SID2       equ	$D420
    233  3b72 ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    234  3b72 ????				      ENDIF
    235  3b72 ????			  -	      IF	DEVICE_CONFIG=EMU
    236  3b72 ????			  -SID2       equ	$D420
    237  3b72 ????			  -ENABLE_MIDI_COMMANDS equ	0
    238  3b72 ????				      ENDIF
    239  3b72 ????			  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    240  3b72 ????			  -SID2       equ	$DE00
    241  3b72 ????			  -ENABLE_MIDI_COMMANDS equ	0
    242  3b72 ????				      ENDIF
    243  3b72 ????			  -	      IF	DEVICE_CONFIG=DEFAULT
    244  3b72 ????			  -SID2       equ	$DF00
    245  3b72 ????			  -ENABLE_MIDI_COMMANDS equ	1
    246  3b72 ????				      ENDIF
    247  3b72 ????
    248  3b72 ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    249  3b72 ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    250  3b72 ????
    251  3b72 ????						;ENABLE_MIDI_COMMANDS equ 1
    252  3b72 ????
    253  3b72 ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    254  3b72 ????	       00 00	   DEBUG_DISPLAY equ	0
    255  3b72 ????	       00 00	   OFFSET_CONTROLLERS equ	0
    256  3b72 ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    257  3b72 ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    258  3b72 ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    259  3b72 ????
    260  3b72 ????
    261  3b72 ????						;**********************************************************
    262  3b72 ????						;**********************************************************
    263  3b72 ????						;**********************************************************
    264  3b72 ????
    265  3b72 ????						; *********************************************
    266  3b72 ????						; START OF PROGRAM IN MEMORY
    267  3b72 ????						; *********************************************
    268  3b72 ????
    269  3b72 ????						;==================================================
    270  3b72 ????						; load from disk as PRG with auto-run
    271  3b72 ????				      IF	MODE=DISK
    272  3b72 ????	       07 ff	   BASEADDR   equ	2047	; 2047 = $7FF
    273  07ff					      org	BASEADDR	; the beginning of the BASIC program area
    274  07ff
    275  07ff							; disk load location
    276  07ff		       01 08		      byte.b	$01,$08
    277  0801							; BASIC program to call the cynthcart machine code...
    278  0801							; 10 SYS 2061
    279  0801		       0b 08 0a 00*	      byte.b	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    280  080d							; next effective address after this is 2061 / $80D
    281  080d					      ENDIF
    282  080d
    283  080d							;==================================================
    284  080d							; straight cart ROM
    285  080d				  -	      IF	MODE=CART_OBSOLETE
    286  080d				  -BASEADDR   equ	$8000
    287  080d				  -	      org	BASEADDR
    288  080d				  -	      word	Startup
    289  080d				  -	      word	Startup
    290  080d				  -			; 5 byte cartridge startup code
    291  080d				  -	      byte	$C3, $C2, $CD, $38, $30
    292  080d					      ENDIF
    293  080d
    294  080d							;==================================================
    295  080d							; load from RAM, requires wrapper to load into RAM (used for compressed version)
    296  080d				  -	      IF	MODE=RAM
    297  080d				  -BASEADDR   equ	$3000
    298  080d				  -			;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    299  080d				  -	      org	BASEADDR
    300  080d				  -			;byte $00,$50 ; DEBUG SETUP AS PRG
    301  080d					      ENDIF
    302  080d
    303  080d							;==================================================
    304  080d							; to replace BASIC ROM (NO LONGER SUPPORTED)
    305  080d				  -	      IF	MODE=KERNEL_OBSOLETE
    306  080d				  -BASEADDR   equ	$8000
    307  080d				  -	      org	BASEADDR
    308  080d				  -	      word	$E394	; RESET
    309  080d				  -	      word	$E37B	; Warm Start
    310  080d					      ENDIF
    311  080d
    312  080d							;---------------------------------------
    313  080d							; variables and constants here
    314  080d							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  080d					      include	cynth_vars.asm
      1  080d							; *********************************************
      2  080d							; Constants
      3  080d							; *********************************************
      4  080d
      5  080d							;KEYTIME equ 128
      6  080d							;KEYTIME equ 64
      7  080d		       00 28	   KEYTIME    equ	40
      8  080d
      9  080d		       00 e0	   REL_SHORT  equ	$E0
     10  080d		       00 e9	   REL_MED    equ	$E9
     11  080d		       00 ee	   REL_LONG   equ	$EE
     12  080d
     13  080d		       00 00	   ATK_SHORT  equ	$00
     14  080d		       00 90	   ATK_MED    equ	$90
     15  080d		       00 e0	   ATK_LONG   equ	$E0
     16  080d
     17  080d
     18  080d		       00 00	   VOLOFF     equ	$00
     19  080d		       00 07	   VOLLOW     equ	$07
     20  080d		       00 0b	   VOLMED     equ	$0B
     21  080d		       00 0f	   VOLHIGH    equ	$0F
     22  080d
     23  080d		       00 c5	   CURRENTKEY equ	197
     24  080d
     25  080d		       d0 20	   BACK_COLOR equ	53280
     26  080d		       d0 21	   BORD_COLOR equ	53281
     27  080d
     28  080d		       d4 00	   SID1       equ	$D400
     29  080d
     30  080d
     31  080d							;SID2 equ $DEE0
     32  080d
     33  080d		       00 04	   SID2OFFSET equ	4
     34  080d
     35  080d		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  080d
     37  080d		       00 00	   SV1FL      equ	$00
     38  080d		       00 01	   SV1FH      equ	$01
     39  080d		       00 02	   SV1PWL     equ	$02
     40  080d		       00 03	   SV1PWH     equ	$03
     41  080d		       00 04	   SV1WAVE    equ	$04
     42  080d		       00 05	   SV1AD      equ	$05
     43  080d		       00 06	   SV1SR      equ	$06
     44  080d
     45  080d		       00 07	   SV2FL      equ	$07
     46  080d		       00 08	   SV2FH      equ	$08
     47  080d		       00 09	   SV2PWL     equ	$09
     48  080d		       00 0a	   SV2PWH     equ	$0A
     49  080d		       00 0b	   SV2WAVE    equ	$0B
     50  080d		       00 0c	   SV2AD      equ	$0C
     51  080d		       00 0d	   SV2SR      equ	$0D
     52  080d
     53  080d		       00 0e	   SV3FL      equ	$0E
     54  080d		       00 0f	   SV3FH      equ	$0F
     55  080d		       00 10	   SV3PWL     equ	$10
     56  080d		       00 11	   SV3PWH     equ	$11
     57  080d		       00 12	   SV3WAVE    equ	$12
     58  080d		       00 13	   SV3AD      equ	$13
     59  080d		       00 14	   SV3SR      equ	$14
     60  080d
     61  080d		       00 15	   SFILTL     equ	$15
     62  080d		       00 16	   SFILTH     equ	$16
     63  080d		       00 17	   SFILTC     equ	$17
     64  080d		       00 18	   SVOLMODE   equ	$18
     65  080d
     66  080d		       00 19	   SPAD1      equ	$19
     67  080d		       00 1a	   SPAD2      equ	$1A
     68  080d
     69  080d		       00 1b	   SRAND      equ	$1B
     70  080d
     71  080d		       dc 00	   PortA      equ	$dc00
     72  080d		       dc 02	   Ciddra     equ	$dc02
     73  080d
     74  080d
     75  080d							; *********************************************
     76  080d							; RAM Variables
     77  080d							; *********************************************
     78  080d
     79  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  080d							; ZERO PAGE
     81  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  080d
     83  080d							; FROM SORTING ROUTINE
     84  080d		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  080d		       01 22	   nval       =	$122	;set by calling program
     86  080d		       01 25	   work1      =	$125	;3 bytes used as working area
     87  080d		       01 26	   work2      =	$126
     88  080d		       01 27	   work3      =	$127
     89  080d
     90  080d							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  080d							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  080d							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  080d							;WORK2  = $34
     94  080d							;WORK3  = $35
     95  080d
     96  080d							; CYNTHCART
     97  080d		       00 22	   tunePtrL   equ	34	;2 bytes
     98  080d		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  080d		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  080d		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  080d
    102  080d		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  080d		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  080d
    105  080d		       00 2f	   helpReadPointerL equ	47
    106  080d		       00 30	   helpReadPointerM equ	48
    107  080d		       00 31	   helpWritePointerL equ	49
    108  080d		       00 32	   helpWritePointerM equ	50
    109  080d		       00 33	   helpColorPointerL equ	51
    110  080d		       00 34	   helpColorPointerM equ	52
    111  080d
    112  080d		       00 35	   portPtrL   equ	53	;2 bytes
    113  080d		       00 47	   portPtrH   equ	71	;2 bytes
    114  080d
    115  080d		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  080d		       00 c3	   keyPtrH    equ	195
    117  080d
    118  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  080d							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  080d							; private addresses ======
    121  080d		       00 64	   midiControl equ	$64	; $64 = 100
    122  080d		       00 66	   midiStatus =	$66	; 102
    123  080d		       00 68	   midiTx     =	$68	;104
    124  080d		       00 6a	   midiRx     =	$6a	;106
    125  080d		       00 6f	   keyTestIndex =	$6f	; 111
    126  080d		       00 70	   keyPressedIntern =	$70	; 112
    127  080d		       00 72	   shiftPressed =	$72	; 114
    128  080d							; public addresses ======
    129  080d		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  080d		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  080d		       00 6e	   midiInterfaceType =	$6e	;110
    132  080d		       00 71	   keyPressed =	$71	; 113
    133  080d							; this module ======
    134  080d		       00 59	   midiMessage equ	$59	; 95
    135  080d		       00 5a	   lastWaveform equ	$5a	; 90
    136  080d							; - - - - - - - - - - - - - -
    137  080d							; - - - - - - - - - - - - - -
    138  080d							; Non-zero page
    139  080d		       7f 00	   midiRingbuffer =	$7F00
    140  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  080d
    142  080d							;-------------------------------------
    143  080d
    144  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  080d							; NON-ZERO PAGE ($7000-$7FFF)
    146  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  080d
    148  080d		       70 00	   Trem       equ	$7000
    149  080d
    150  080d		       70 02	   FrameH     equ	$7002
    151  080d		       70 03	   Frame      equ	$7003
    152  080d
    153  080d		       70 04	   EchoPtr    equ	$7004
    154  080d		       70 05	   EchoCur    equ	$7005
    155  080d
    156  080d		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  080d
    158  080d		       70 07	   MagicVoice equ	$7007
    159  080d
    160  080d		       70 08	   LastKey    equ	$7008
    161  080d
    162  080d		       70 09	   Button     equ	$7009
    163  080d
    164  080d		       70 0a	   LFO	      equ	$700A
    165  080d
    166  080d		       70 0b	   PatchTune  equ	$700B
    167  080d
    168  080d		       70 0c	   temp       equ	$700C
    169  080d
    170  080d							;KeyA	equ $700D
    171  080d							;KeyB	equ $700E
    172  080d							;KeyC	equ $700F
    173  080d
    174  080d							;lastKeyA equ $7010
    175  080d							;lastKeyB equ $7011
    176  080d							;lastKeyC equ $7012
    177  080d
    178  080d		       70 13	   portDirA   equ	$7013
    179  080d		       70 14	   portDirB   equ	$7014
    180  080d		       70 15	   portDirC   equ	$7015
    181  080d
    182  080d		       70 16	   pitchLA    equ	$7016
    183  080d		       70 17	   pitchLB    equ	$7017
    184  080d		       70 18	   pitchLC    equ	$7018
    185  080d
    186  080d		       70 19	   pitchHA    equ	$7019
    187  080d		       70 1a	   pitchHB    equ	$701A
    188  080d		       70 1b	   pitchHC    equ	$701B
    189  080d
    190  080d		       70 1c	   volume     equ	$701C
    191  080d
    192  080d							; soundModes
    193  080d							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  080d		       00 00	   MODE_NORMAL equ	$00
    195  080d		       00 08	   MODE_6CHAN equ	$08
    196  080d		       00 10	   MODE_PORT1 equ	$10
    197  080d		       00 11	   MODE_PORT2 equ	$11
    198  080d		       00 12	   MODE_PORT3 equ	$12
    199  080d		       00 20	   MODE_MONO1 equ	$20
    200  080d		       00 21	   MODE_MONO2 equ	$21
    201  080d		       00 31	   MODE_MONOPORT1 equ	$31
    202  080d		       00 32	   MODE_MONOPORT2 equ	$32
    203  080d		       00 40	   MODE_ARP1  equ	$40
    204  080d		       00 41	   MODE_ARP2  equ	$41
    205  080d		       00 42	   MODE_ARP3  equ	$42
    206  080d		       00 43	   MODE_ARP4  equ	$43
    207  080d		       00 44	   MODE_ARP5  equ	$44
    208  080d		       00 01	   MODE_5THS  equ	$01
    209  080d		       00 02	   MODE_5PORT equ	$02
    210  080d							;- - - - - - - - - - -
    211  080d
    212  080d		       00 10	   PORT_MASK  equ	$10
    213  080d		       00 20	   MONO_MASK  equ	$20
    214  080d		       00 40	   ARP_MASK   equ	$40
    215  080d		       00 08	   CHAN6_MASK equ	$08
    216  080d
    217  080d
    218  080d		       70 1d	   soundMode  equ	$701D
    219  080d		       70 1e	   arpSpeed   equ	$701E
    220  080d
    221  080d		       70 1f	   dispOn     equ	$701F
    222  080d
    223  080d		       70 20	   VICMode    equ	$7020
    224  080d
    225  080d		       70 21	   patPtr     equ	$7021
    226  080d
    227  080d		       70 22	   keyOffset  equ	$7022
    228  080d
    229  080d		       70 24	   volModeRAM equ	$7024
    230  080d
    231  080d		       70 25	   shiftL1    equ	$7025
    232  080d		       70 26	   shiftH1    equ	$7026
    233  080d		       70 27	   shiftL2    equ	$7027
    234  080d		       70 28	   shiftH2    equ	$7028
    235  080d
    236  080d							;$7025 - $7028 free
    237  080d
    238  080d		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    239  080d
    240  080d		       70 30	   WaveType   equ	$7030
    241  080d		       70 37	   WaveType2  equ	$7037
    242  080d		       70 3e	   WaveType3  equ	$703E
    243  080d
    244  080d		       70 3f	   LFObend    equ	$703F
    245  080d		       70 40	   bender     equ	$7040
    246  080d
    247  080d		       70 43	   pitchTmpL  equ	$7043
    248  080d		       70 44	   pitchTmpH  equ	$7044
    249  080d
    250  080d		       70 45	   videoMode  equ	$7045
    251  080d
    252  080d		       70 46	   textTemp   equ	$7046
    253  080d
    254  080d		       70 47	   patchSetY  equ	$7047
    255  080d
    256  080d		       70 48	   LFORate    equ	$7048
    257  080d		       70 49	   LFODepth   equ	$7049
    258  080d
    259  080d		       70 50	   videoModeNum equ	$7050
    260  080d
    261  080d		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    262  080d		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    263  080d
    264  080d		       70 57	   filter     equ	$7057
    265  080d
    266  080d		       70 58	   keyTimer   equ	$7058
    267  080d
    268  080d		       70 59	   bendSpd    equ	$7059
    269  080d
    270  080d		       70 5a	   SIDeditAddr equ	$705A
    271  080d		       70 5b	   SIDeditValue equ	$705B
    272  080d
    273  080d		       70 5c	   filterDisable equ	$705C
    274  080d
    275  080d		       70 5d	   lastKey    equ	$705D
    276  080d
    277  080d		       70 60	   hexKeyMode equ	$7060
    278  080d
    279  080d		       70 61	   NTSCmode   equ	$7061
    280  080d
    281  080d		       70 62	   temp16L    equ	$7062
    282  080d		       70 63	   temp16H    equ	$7063
    283  080d
    284  080d		       70 64	   saveX      equ	$7064
    285  080d
    286  080d							;EchoBuffer	equ 1184 ; 256 bytes
    287  080d
    288  080d		       70 65	   keyTemp    equ	$7065
    289  080d
    290  080d		       70 66	   lastOsc    equ	$7066
    291  080d
    292  080d		       70 67	   fullScreenMode equ	$7067
    293  080d
    294  080d		       70 68	   videoText  equ	$7068
    295  080d
    296  080d		       70 69	   attack     equ	$7069
    297  080d		       70 6a	   release    equ	$706A
    298  080d		       70 6b	   octave     equ	$706B
    299  080d		       70 6c	   filterStatus equ	$706C
    300  080d
    301  080d		       70 6d	   helpColor  equ	$706D
    302  080d		       70 6e	   helpYIn    equ	$706E
    303  080d		       70 6f	   helpYOut   equ	$706F
    304  080d
    305  080d		       70 70	   helpMode   equ	$7070
    306  080d
    307  080d		       70 71	   tuneSetting equ	$7071
    308  080d
    309  080d		       70 72	   hexDispTemp equ	$7072
    310  080d
    311  080d		       70 73	   sidTemp1   equ	$7073
    312  080d		       70 74	   sidTemp2   equ	$7074
    313  080d
    314  080d		       70 75	   customPatchSaved equ	$7075
    315  080d
    316  080d		       70 76	   paddleTop  equ	$7076
    317  080d		       70 77	   paddleBottom equ	$7077
    318  080d
    319  080d		       70 78	   paddleX    equ	$7078
    320  080d		       70 79	   paddleY    equ	$7079
    321  080d
    322  080d		       70 7a	   paddle2    equ	$707A
    323  080d		       70 7b	   lastPad2   equ	$707B
    324  080d
    325  080d		       70 7c	   debugOffset equ	$707C
    326  080d		       70 7d	   savedMidiStatus equ	$707D
    327  080d		       70 7e	   firstDataByte equ	$707E
    328  080d		       70 7f	   tempVelocity equ	$707F
    329  080d		       70 80	   bufferSize equ	$7080
    330  080d		       70 81	   noteTempA  equ	$7081
    331  080d		       70 82	   noteTempB  equ	$7082
    332  080d
    333  080d		       70 83	   benderAutoreset equ	$7083
    334  080d		       70 84	   polyphony  equ	$7084
    335  080d
    336  080d		       70 85	   arpOffset  equ	$7085
    337  080d
    338  080d		       70 86	   fxType     equ	$7086
    339  080d		       70 87	   modValue1  equ	$7087
    340  080d		       70 89	   modDirection equ	$7089
    341  080d		       70 8a	   modCounter equ	$708A
    342  080d		       70 8b	   modLFOMinValue equ	$708B
    343  080d		       70 8a	   modLFOMaxValue equ	$708A
    344  080d
    345  080d		       00 00	   MOD_NONE   equ	0
    346  080d		       00 01	   MOD_FILT_LFO equ	1
    347  080d		       00 02	   MOD_FILT_ENV equ	2
    348  080d		       00 03	   MOD_FILT3  equ	3
    349  080d		       00 04	   MOD_FILT4  equ	4
    350  080d		       00 05	   MOD_FILT5  equ	5
    351  080d		       00 06	   MOD_PW_LFO equ	6
    352  080d		       00 07	   MOD_PW2    equ	7
    353  080d
    354  080d		       70 8b	   noteOffCount equ	$708B
    355  080d		       70 8c	   noteOnCount equ	$708C
    356  080d
    357  080d		       70 8d	   hexDispColor equ	$708D
    358  080d
    359  080d		       70 8e	   midiBendValue equ	$708E
    360  080d
    361  080d		       70 8f	   temp2      equ	$708F
    362  080d
    363  080d
    364  080d		       70 97	   resonance  equ	$7097
    365  080d
    366  080d		       70 98	   resetValue equ	$7098
    367  080d
    368  080d		       70 99	   lastNoteCount equ	$7099
    369  080d		       70 9a	   lastNote   equ	$709A
    370  080d
    371  080d		       70 9b	   keyCount   equ	$709B
    372  080d
    373  080d		       70 9c	   filterModValue equ	$709C
    374  080d		       70 9d	   filterSetValue equ	$709D
    375  080d		       70 9e	   pwModValue equ	$709E
    376  080d		       70 9f	   pwSetValue equ	$709F
    377  080d
    378  080d		       70 f0	   midiTuning equ	$70F0
    379  080d		       70 f1	   benderTuning equ	$70F1
    380  080d		       70 f2	   lfoTuning  equ	$70F2
    381  080d		       70 f3	   systemTuning equ	$70F3
    382  080d		       70 f4	   masterTuning equ	$70F4
    383  080d		       70 f5	   finalTuning equ	$70F5
    384  080d		       70 f6	   noteShift  equ	$70F6
    385  080d
    386  080d		       70 f7	   midiMode   equ	$70F7
    387  080d
    388  080d
    389  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    390  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  080d							; BUFFERS
    392  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    393  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    394  080d
    395  080d		       00 08	   NOTE_BUF_SIZE equ	8
    396  080d		       70 a0	   noteNumArray equ	$70A0
    397  080d		       70 b0	   playNoteArray equ	$70B0
    398  080d
    399  080d							;noteVelArray equ $70C0
    400  080d
    401  080d		       70 d0	   kbBuffer   equ	$70D0
    402  080d		       70 e0	   lastKbBuffer equ	$70E0
    403  080d
    404  080d		       70 e1	   tempA      equ	$70E1
    405  080d		       70 e2	   tempX      equ	$70E2
    406  080d		       70 e3	   tempY      equ	$70E3
    407  080d
    408  080d
    409  080d							;-----------------------------------------------
    410  080d
    411  080d							; SID editor custom preset data...
    412  080d		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    413  080d
    414  080d		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    415  080d		       71 41	   savePaddle equ	$7141
    416  080d		       71 42	   saveOctave equ	$7142
    417  080d		       71 43	   saveSoundMode equ	$7143
    418  080d		       71 43	   saveFXType equ	$7143
    419  080d		       71 44	   saveArpSpeed equ	$7144
    420  080d		       71 46	   saveLFODepth equ	$7146
    421  080d		       71 47	   saveLFORate equ	$7147
    422  080d		       71 48	   saveVolume equ	$7148
    423  080d		       71 49	   saveVolMode equ	$7149
    424  080d		       71 4a	   saveFilter equ	$714A
    425  080d
    426  080d							;--------------------------------------------------
    427  080d
    428  080d		       71 50	   midiEnabled equ	$7150
    429  080d		       71 51	   dummyMidiIncrementer equ	$7151
    430  080d
    431  080d		       70 52	   sidEditSaveTemp1 equ	$7052
    432  080d		       70 54	   sidEditSaveTemp5 equ	$7054
    433  080d
    434  080d							;pulseModulationValue equ $7056
    435  080d							;pulseMidiValue equ $7057
------- FILE cynthcart2.0.1.asm
    316  080d
    317  080d
    318  080d							; *********************************************
    319  080d							; Start of program
    320  080d							; *********************************************
    321  080d				   Startup
    322  080d
    323  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    324  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    329  080d							; switch to (upper?) lowercase mode
    330  080d		       a9 17		      lda	#23
    331  080f		       8d 18 d0 	      sta	$d018
    332  0812
    333  0812		       a9 c1		      lda	#193
    334  0814		       8d 18 03 	      sta	792
    335  0817
    336  0817							; clear screen and show info
    337  0817							;	ldx #0
    338  0817							;	stx $d020
    339  0817							;	stx $d021
    340  0817							;loop1:	; clear screen...
    341  0817							;	lda #32
    342  0817							;	sta $0400,x
    343  0817							;	sta $0400+250,x
    344  0817							;	sta $0400+500,x
    345  0817							;	sta $0400+750,x
    346  0817							;	lda #14
    347  0817							;	sta $d800,x
    348  0817							;	sta $d800+250,x
    349  0817							;	sta $d800+500,x
    350  0817							;	sta $d800+750,x
    351  0817							;	inx
    352  0817							;	cpx #250
    353  0817							;	bne loop1
    354  0817							;	ldx #0
    355  0817							;loop2:	; show info...
    356  0817							;	lda #1
    357  0817							;	sta $0400+10*40,x
    358  0817							;	inx
    359  0817							;	cpx #80
    360  0817							;	bne loop2
    361  0817
    362  0817							; init SID...
    363  0817		       a9 00		      lda	#0
    364  0819		       a2 00		      ldx	#0
    365  081b		       9d 00 d4    initSid    sta	$d400,x
    366  081e		       e8		      inx
    367  081f		       e0 19		      cpx	#25
    368  0821		       d0 f8		      bne	initSid
    369  0823		       a9 0f		      lda	#15
    370  0825		       8d 18 d4 	      sta	$d418
    371  0828		       a9 01		      lda	#1
    372  082a		       8d 03 d4 	      sta	$d403
    373  082d
    374  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    375  082d							;lock: jmp lock
    376  082d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    377  082d
    378  082d					      IF	ENABLE_MIDI_COMMANDS=1
    379  082d		       20 ff 39 	      jsr	midiDetect	; AUTODETECT MIDI IF NOT KERBEROS BUILD
    380  0830				  -	      ELSE
    381  0830				  -	      lda	#0
    382  0830					      ENDIF
    383  0830		       8d 50 71 	      sta	midiEnabled
    384  0833		       20 77 3a 	      jsr	midiInit
    385  0836							;ENDIF
    386  0836
    387  0836							; Set default hex color
    388  0836		       a9 0e		      lda	#$E
    389  0838		       8d 8d 70 	      sta	hexDispColor
    390  083b
    391  083b		       20 0d 0b 	      jsr	disableRestoreKey
    392  083e
    393  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    394  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    395  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    396  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    397  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    398  083e							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    399  083e
    400  083e				   skipTest
    401  083e
    402  083e							; Copy program into RAM if running from cartridge...
    403  083e				  -	      IF	MODE=CART_OBSOLETE
    404  083e				  -	      ldx	#0
    405  083e				  -RAMTextCopy
    406  083e				  -	      lda	RAMText,x
    407  083e				  -	      beq	quitRAMTextCopy
    408  083e				  -	      cmp	#64
    409  083e				  -	      bmi	showSpaceRAM
    410  083e				  -	      sbc	#64
    411  083e				  -showSpaceRAM
    412  083e				  -	      sta	1024,x
    413  083e				  -	      inx
    414  083e				  -	      jmp	RAMTextCopy
    415  083e				  -RAMText
    416  083e				  -	      byte	"COPYING TO RAM...",0
    417  083e				  -quitRAMTextCopy
    418  083e				  -			;------------
    419  083e				  -	      ldx	#8*4
    420  083e				  -	      lda	#<copyStart
    421  083e				  -	      sta	copyPtrS
    422  083e				  -	      lda	#>copyStart
    423  083e				  -	      sta	copyPtrS+1
    424  083e				  -	      lda	#<ramStart
    425  083e				  -	      sta	copyPtrD
    426  083e				  -	      lda	#>ramStart
    427  083e				  -	      sta	copyPtrD+1
    428  083e				  -ramCopy1
    429  083e				  -	      ldy	#0
    430  083e				  -ramCopy2
    431  083e				  -	      lda	(copyPtrS),y
    432  083e				  -	      sta	(copyPtrD),y
    433  083e				  -	      dey
    434  083e				  -	      bne	ramCopy2
    435  083e				  -	      inc	copyPtrS+1
    436  083e				  -	      inc	copyPtrD+1
    437  083e				  -	      dex
    438  083e				  -	      bne	ramCopy1
    439  083e				  -	      jmp	ramStart
    440  083e				  -copyStart
    441  083e				  -	      rorg	$3000	; RAM destination
    442  083e				  -ramStart
    443  083e					      ENDIF
    444  083e
    445  083e				  -	      IF	MODE=CART_OBSOLETE
    446  083e				  -			; System Startup Stuff
    447  083e				  -			; (not needed if starting from disk)
    448  083e				  -	      sei
    449  083e				  -	      jsr	$FF84	; initialize I/O devices
    450  083e				  -	      jsr	$FF87	; initalise memory pointers
    451  083e				  -	      jsr	$FF8A	; restore I/O vectors
    452  083e				  -	      jsr	$FF81	; initalise screen and keyboard
    453  083e				  -	      cli
    454  083e					      ENDIF
    455  083e
    456  083e				  -	      IF	MODE=KERNEL_OBSOLETE
    457  083e				  -	      org	$A483
    458  083e					      ENDIF
    459  083e
    460  083e		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    461  0841		       29 ef		      AND	#$EF	; badlines
    462  0843		       8d 11 d0 	      STA	$D011
    463  0846
    464  0846							; Disable RESTORE key
    465  0846		       a9 c1		      lda	#193
    466  0848		       8d 18 03 	      sta	792
    467  084b
    468  084b		       a9 00		      lda	#0
    469  084d		       8d 20 d0 	      sta	BACK_COLOR
    470  0850		       8d 21 d0 	      sta	BORD_COLOR
    471  0853
    472  0853							;*****************************
    473  0853							; Detect PAL/NTSC
    474  0853							;*****************************
    475  0853							;palntsc:
    476  0853		       78		      sei		; disable interrupts
    477  0854				   wait
    478  0854		       ad 12 d0 	      lda	$d012
    479  0857		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    480  0859				   wait1
    481  0859		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    482  085c		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    483  085e				   wait2
    484  085e		       a0 00		      ldy	#$00
    485  0860				   synch1
    486  0860		       ad 12 d0 	      lda	$d012
    487  0863		       c9 37		      cmp	#$37	; top PAL rasterline
    488  0865		       d0 f9		      bne	synch1
    489  0867		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    490  086a				   synch2
    491  086a		       cd 12 d0 	      cmp	$d012
    492  086d		       f0 fb		      beq	synch2
    493  086f		       ad 12 d0 	      lda	$d012
    494  0872		       58		      cli		; enable interrupts
    495  0873
    496  0873		       8d 61 70 	      sta	NTSCmode
    497  0876
    498  0876
    499  0876
    500  0876
    501  0876							;****************************************************
    502  0876							; init screen and variables
    503  0876							;****************************************************
    504  0876		       a9 00		      lda	#0
    505  0878		       8d 97 70 	      sta	resonance
    506  087b		       8d 8c 70 	      sta	noteOnCount
    507  087e		       8d 8b 70 	      sta	noteOffCount
    508  0881		       20 03 11 	      jsr	setFullScreenMode
    509  0884		       20 85 0a 	      jsr	variableInit
    510  0887		       20 fa 0b 	      jsr	displayInit
    511  088a
    512  088a							; Clear note buffer...
    513  088a		       a2 08		      ldx	#8
    514  088c		       a9 ff		      lda	#255
    515  088e				   clearBufferLoop
    516  088e		       ca		      dex
    517  088f		       9d a0 70 	      sta	noteNumArray,x
    518  0892							;sta noteAgeArray,x
    519  0892							;sta noteVelArray,x
    520  0892		       d0 fa		      bne	clearBufferLoop
    521  0894
    522  0894
    523  0894				  -	      IF	DEBUG_DISPLAY=1
    524  0894				  -	      ldx	#>debugOverlay	;low/MSB
    525  0894				  -	      ldy	#<debugOverlay	;high/LSB
    526  0894				  -	      jsr	displayPage
    527  0894					      ENDIF
    528  0894
    529  0894		       a9 00		      lda	#0
    530  0896		       a0 00		      ldy	#0
    531  0898		       20 af 13 	      jsr	setPatch
    532  089b
    533  089b		       a9 00		      lda	#0
    534  089d		       8d f0 70 	      sta	midiTuning
    535  08a0
    536  08a0		       a9 ff		      lda	#$FF
    537  08a2		       20 09 12 	      jsr	setMidiMode
    538  08a5							;sta midiMode
    539  08a5
    540  08a5							;===========================================
    541  08a5							;===========================================
    542  08a5							;===========================================
    543  08a5							; Main Loop
    544  08a5							;===========================================
    545  08a5							;===========================================
    546  08a5							;===========================================
    547  08a5				   Loop
    548  08a5							; Increment frame counter
    549  08a5		       ee 03 70 	      inc	Frame
    550  08a8		       ad 03 70 	      lda	Frame
    551  08ab		       29 3f		      and	#%00111111
    552  08ad		       d0 03		      bne	SkipHFrame
    553  08af		       ee 02 70 	      inc	FrameH
    554  08b2				   SkipHFrame
    555  08b2
    556  08b2
    557  08b2		       20 f0 08 	      jsr	processLFO
    558  08b5		       20 7d 0d 	      jsr	processFX
    559  08b8
    560  08b8					      IF	ENABLE_MIDI_COMMANDS=1
    561  08b8		       20 66 1c 	      jsr	processMIDI
    562  08bb					      ENDIF
    563  08bb
    564  08bb		       20 db 1a 	      jsr	readKeyboard
    565  08be		       20 b7 09 	      jsr	processBender
    566  08c1		       20 0c 15 	      jsr	processSoundDriver
    567  08c4		       20 f4 09 	      jsr	processPaddles
    568  08c7		       20 33 0b 	      jsr	processVideoMode
    569  08ca		       20 d0 08 	      jsr	updateFilterAndPW
    570  08cd		       4c a5 08 	      jmp	Loop
    571  08d0							;-------- BOTTOM OF MAIN LOOP ---------------------------
    572  08d0							;--------------------------------------------------------
    573  08d0							;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
    574  08d0
    575  08d0				   updateFilterAndPW
    576  08d0		       ad 9c 70 	      lda	filterModValue
    577  08d3		       38		      sec
    578  08d4		       e9 7f		      sbc	#127
    579  08d6		       30 0a		      bmi	negativeFilterMod
    580  08d8							; Positive
    581  08d8		       6d 9d 70 	      adc	filterSetValue
    582  08db		       90 0f		      bcc	doSetFilter
    583  08dd		       a9 ff		      lda	#255
    584  08df		       4c ec 08 	      jmp	doSetFilter
    585  08e2
    586  08e2				   negativeFilterMod
    587  08e2							; Negative
    588  08e2		       6d 9d 70 	      adc	filterSetValue
    589  08e5		       b0 05		      bcs	doSetFilter
    590  08e7		       a9 00		      lda	#0
    591  08e9		       4c ec 08 	      jmp	doSetFilter
    592  08ec
    593  08ec							;and #$F0
    594  08ec				   doSetFilter
    595  08ec		       20 f4 12 	      jsr	setFilter
    596  08ef							; TODO: add PW setting
    597  08ef		       60		      rts
    598  08f0
    599  08f0
    600  08f0							;-------------------------------
    601  08f0							; LFO
    602  08f0							;-------------------------------
    603  08f0				   processLFO
    604  08f0							; Set current LFO modulation
    605  08f0							; into (pitch) shift variables
    606  08f0
    607  08f0							;---------------------------
    608  08f0							; get pitch bend from paddle2
    609  08f0		       ad 7a 70 	      lda	paddle2
    610  08f3		       c9 04		      cmp	#4	; is pitch bend mode on for paddle 2?
    611  08f5		       d0 09		      bne	noPadBend	; no -->
    612  08f7		       ad 79 70 	      lda	paddleY	; get paddles values
    613  08fa		       8d 40 70 	      sta	bender	; set as bender value
    614  08fd		       4c 05 09 	      jmp	skipZeroBend
    615  0900				   noPadBend
    616  0900		       a9 00		      lda	#0
    617  0902		       8d 40 70 	      sta	bender
    618  0905				   skipZeroBend
    619  0905
    620  0905							;----------------------------
    621  0905							; get depth from paddle2
    622  0905		       ad 7a 70 	      lda	paddle2
    623  0908		       c9 03		      cmp	#3
    624  090a		       d0 0a		      bne	noPadLFO
    625  090c		       ad 79 70 	      lda	paddleY
    626  090f		       4a		      lsr
    627  0910		       4a		      lsr
    628  0911		       4a		      lsr
    629  0912		       a8		      tay
    630  0913		       4c 1c 09 	      jmp	skipFixedLFODepth
    631  0916							;---------------------
    632  0916							; calculate LFO depth
    633  0916							; increases per octave
    634  0916				   noPadLFO
    635  0916		       ae 49 70 	      ldx	LFODepth
    636  0919		       bc ed 33 	      ldy	LFODepthArray,x
    637  091c				   skipFixedLFODepth
    638  091c		       ad 22 70 	      lda	keyOffset	; current octave offset
    639  091f		       c9 0c		      cmp	#12
    640  0921		       30 08		      bmi	endDepth
    641  0923		       c8		      iny
    642  0924		       c9 24		      cmp	#36
    643  0926		       d0 03		      bne	endDepth
    644  0928		       98		      tya
    645  0929		       0a		      asl
    646  092a		       a8		      tay
    647  092b				   endDepth		; y now contains the depth value
    648  092b
    649  092b
    650  092b							; figure out LFO position
    651  092b		       ad 02 70 	      lda	FrameH
    652  092e		       ae 48 70 	      ldx	LFORate
    653  0931		       f0 0e		      beq	LFOSkip
    654  0933		       ad 03 70 	      lda	Frame
    655  0936		       ca		      dex
    656  0937		       ca		      dex
    657  0938		       ca		      dex
    658  0939		       f0 06		      beq	LFOSkip
    659  093b		       4a		      lsr
    660  093c		       e8		      inx
    661  093d		       f0 02		      beq	LFOSkip
    662  093f		       4a		      lsr
    663  0940		       4a		      lsr
    664  0941				   LFOSkip
    665  0941		       4a		      lsr
    666  0942
    667  0942		       29 0f		      and	#$0F
    668  0944		       aa		      tax
    669  0945		       bd 11 34 	      lda	LFOArrH,x
    670  0948		       8d 26 70 	      sta	shiftH1
    671  094b		       d0 10		      bne	negativeLFO
    672  094d
    673  094d		       18		      clc
    674  094e		       bd 01 34 	      lda	LFOArrL,x
    675  0951				   depthLoop
    676  0951		       7d 01 34 	      adc	LFOArrL,x
    677  0954		       88		      dey
    678  0955		       d0 fa		      bne	depthLoop
    679  0957		       8d 25 70 	      sta	shiftL1
    680  095a		       4c 72 09 	      jmp	endLFO
    681  095d
    682  095d				   negativeLFO
    683  095d		       bd 01 34 	      lda	LFOArrL,x
    684  0960				   depthLoopN
    685  0960		       7d 01 34 	      adc	LFOArrL,x
    686  0963		       88		      dey
    687  0964		       d0 fa		      bne	depthLoopN
    688  0966		       8d 0c 70 	      sta	temp
    689  0969		       a9 ff		      lda	#255
    690  096b		       38		      sec
    691  096c		       ed 0c 70 	      sbc	temp
    692  096f		       8d 25 70 	      sta	shiftL1
    693  0972				   endLFO
    694  0972
    695  0972							; if depth=0 then cancel LFO
    696  0972		       ad 7a 70 	      lda	paddle2
    697  0975		       c9 03		      cmp	#3
    698  0977		       f0 0d		      beq	doLFO
    699  0979		       ad 49 70 	      lda	LFODepth
    700  097c		       d0 08		      bne	doLFO
    701  097e		       a9 00		      lda	#0
    702  0980		       8d 25 70 	      sta	shiftL1
    703  0983		       8d 26 70 	      sta	shiftH1
    704  0986				   doLFO
    705  0986
    706  0986		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    707  0989		       d0 05		      bne	showLFO
    708  098b		       ad 67 70 	      lda	fullScreenMode
    709  098e		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    710  0990							;--------
    711  0990							; Show it
    712  0990				   showLFO
    713  0990		       bd 21 34 	      lda	LFOdisp,x
    714  0993		       aa		      tax
    715  0994		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    716  0996							;adc #10
    717  0996
    718  0996							;lda #160
    719  0996							;sta 1063,x
    720  0996		       9d ff d7 	      sta	55296-1,x
    721  0999
    722  0999							;clear the previous one
    723  0999							;lda #32
    724  0999		       a9 02		      lda	#CYNTHCART_COLOR
    725  099b							;sta 1064,x
    726  099b		       9d 00 d8 	      sta	55296+0,x
    727  099e		       e0 01		      cpx	#1
    728  09a0		       f0 03		      beq	dontErase
    729  09a2							;sta 1062,x
    730  09a2		       9d fe d7 	      sta	55296-2,x
    731  09a5				   dontErase
    732  09a5
    733  09a5							; set up shift for second SID
    734  09a5							; chip, pitch a tad higher for
    735  09a5							; awesome chorus effect
    736  09a5		       18		      clc
    737  09a6		       ad 25 70 	      lda	shiftL1
    738  09a9		       69 04		      adc	#SID2OFFSET
    739  09ab		       8d 27 70 	      sta	shiftL2
    740  09ae		       ad 26 70 	      lda	shiftH1
    741  09b1		       69 00		      adc	#0
    742  09b3		       8d 28 70 	      sta	shiftH2
    743  09b6
    744  09b6							; LFO->filter
    745  09b6							;	lda shiftL1
    746  09b6							;	clc
    747  09b6							;	adc #128
    748  09b6							;	sta SID1+SFILTH
    749  09b6							;	sta SID2+SFILTH
    750  09b6
    751  09b6				   skipLFO
    752  09b6		       60		      rts
    753  09b7
    754  09b7
    755  09b7
    756  09b7
    757  09b7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  09b7							; PROCESS BENDER
    759  09b7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    760  09b7				   processBender
    761  09b7							; Update space-bar pitch bend...
    762  09b7		       ad 83 70 	      lda	benderAutoreset
    763  09ba		       f0 13		      beq	endBenderReset
    764  09bc		       ad 40 70 	      lda	bender
    765  09bf		       d0 08		      bne	doBenderReset
    766  09c1		       a9 00		      lda	#0
    767  09c3		       8d 83 70 	      sta	benderAutoreset
    768  09c6		       4c cf 09 	      jmp	endBenderReset
    769  09c9				   doBenderReset
    770  09c9		       ce 40 70 	      dec	bender
    771  09cc		       ce 40 70 	      dec	bender
    772  09cf				   endBenderReset
    773  09cf
    774  09cf
    775  09cf							; Insert bender into LFO offset...
    776  09cf		       ad 25 70 	      lda	shiftL1
    777  09d2		       38		      sec
    778  09d3		       ed 40 70 	      sbc	bender
    779  09d6		       8d 25 70 	      sta	shiftL1
    780  09d9		       ad 26 70 	      lda	shiftH1
    781  09dc		       e9 00		      sbc	#0
    782  09de		       8d 26 70 	      sta	shiftH1
    783  09e1
    784  09e1		       ad 27 70 	      lda	shiftL2
    785  09e4		       38		      sec
    786  09e5		       ed 40 70 	      sbc	bender
    787  09e8		       8d 27 70 	      sta	shiftL2
    788  09eb		       ad 28 70 	      lda	shiftH2
    789  09ee		       e9 00		      sbc	#0
    790  09f0		       8d 28 70 	      sta	shiftH2
    791  09f3		       60		      rts
    792  09f4
    793  09f4							;DEBUG -- disable LFO/bender
    794  09f4							;	lda #0
    795  09f4							;	sta shiftL1
    796  09f4							;	sta shiftL2
    797  09f4							;	sta shiftH1
    798  09f4							;	sta shiftH2
    799  09f4
    800  09f4							;----------------------------
    801  09f4
    802  09f4
    803  09f4
    804  09f4
    805  09f4
    806  09f4							;-------------------------------------
    807  09f4							; Reading paddles from Prog Ref Guide
    808  09f4							;-------------------------------------
    809  09f4				   processPaddles
    810  09f4				   pdlrd0		; entry point for one pair (condition x 1st)
    811  09f4							; -  -  -  -  -
    812  09f4							;sei				; disable interrupts
    813  09f4		       a9 e0		      lda	#224	; disable keyboard scan
    814  09f6		       8d 02 dc 	      sta	56322	; disable keyboard scan
    815  09f9							; -  -  -  -  -
    816  09f9		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
    817  09fc		       8d 06 70 	      sta	Buffer	; save it away
    818  09ff		       a9 c0		      lda	#$c0
    819  0a01		       8d 02 dc 	      sta	Ciddra	; set port a for input
    820  0a04		       a9 80		      lda	#$80
    821  0a06
    822  0a06				   pdlrd1
    823  0a06		       8d 00 dc 	      sta	PortA	; address a pair of paddles
    824  0a09		       a0 80		      ldy	#$80	; wait a while
    825  0a0b				   pdlrd2
    826  0a0b		       ea		      nop
    827  0a0c		       88		      dey
    828  0a0d		       10 fc		      bpl	pdlrd2
    829  0a0f
    830  0a0f		       ae 19 d4 	      ldx	SID1+25	; get x value
    831  0a12		       8e 78 70 	      stx	paddleX
    832  0a15		       ac 1a d4 	      ldy	SID1+26	; get y value
    833  0a18		       8c 79 70 	      sty	paddleY
    834  0a1b
    835  0a1b		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
    836  0a1e		       09 50		      ora	#80	; make it the same as other pair
    837  0a20		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
    838  0a23
    839  0a23		       ad 06 70 	      lda	Buffer
    840  0a26		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
    841  0a29							; -  -  -  -  -
    842  0a29							;cli			; enable interrupts
    843  0a29		       a9 ff		      lda	#255	; enable keyboard scan
    844  0a2b		       8d 02 dc 	      sta	56322	; enable keyboard scan
    845  0a2e							; -  -  -  -  -
    846  0a2e
    847  0a2e							;-------------------------------------
    848  0a2e							; Auto paddle on - turn on paddle control if it's wiggled...
    849  0a2e		       ad 29 70 	      lda	paddle
    850  0a31		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
    851  0a33		       e0 a0		      cpx	#160
    852  0a35		       90 05		      bcc	noPaddleTop
    853  0a37		       a9 01		      lda	#1
    854  0a39		       8d 76 70 	      sta	paddleTop
    855  0a3c				   noPaddleTop
    856  0a3c		       e0 60		      cpx	#96
    857  0a3e		       b0 05		      bcs	noPaddleBottom
    858  0a40		       a9 01		      lda	#1
    859  0a42		       8d 77 70 	      sta	paddleBottom
    860  0a45				   noPaddleBottom
    861  0a45							;-----------
    862  0a45		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
    863  0a48		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
    864  0a4a		       ad 77 70 	      lda	paddleBottom
    865  0a4d		       f0 05		      beq	noPaddleAutoOn
    866  0a4f		       a9 01		      lda	#1	; turn paddle on
    867  0a51		       20 41 11 	      jsr	setPaddles
    868  0a54				   noPaddleAutoOn
    869  0a54
    870  0a54							;-------------------------------------
    871  0a54							; check to see if paddle control is on
    872  0a54		       ad 29 70 	      lda	paddle
    873  0a57		       f0 04		      beq	processPaddle2
    874  0a59
    875  0a59							; paddle1 -> filter
    876  0a59		       8a		      txa
    877  0a5a		       8d 9d 70 	      sta	filterSetValue
    878  0a5d							;jsr setFilterFromA
    879  0a5d
    880  0a5d
    881  0a5d							;sta SID1+SFILTH
    882  0a5d							;sta sidData+SFILTH
    883  0a5d							;clc
    884  0a5d							;adc #SID_SYMPHONY_FILTER_OFFSET
    885  0a5d							;bcc noPaddleRoll
    886  0a5d							;lda #255
    887  0a5d							;noPaddleRoll:
    888  0a5d							;sta SID2+SFILTH
    889  0a5d							;noPaddleControl
    890  0a5d
    891  0a5d							;-------------------------------------
    892  0a5d							; paddle 2
    893  0a5d
    894  0a5d							;	paddle 2 -> Pulse Width
    895  0a5d				   processPaddle2
    896  0a5d		       ad 7a 70 	      lda	paddle2
    897  0a60		       c9 01		      cmp	#1
    898  0a62		       d0 15		      bne	skipPW
    899  0a64		       ad 79 70 	      lda	paddleY
    900  0a67		       c9 f5		      cmp	#245	; check for top limit (= no sound)
    901  0a69		       90 05		      bcc	notPTop
    902  0a6b		       a9 f5		      lda	#245	; limit to maximum
    903  0a6d		       8d 79 70 	      sta	paddleY
    904  0a70				   notPTop
    905  0a70		       ad 79 70 	      lda	paddleY
    906  0a73		       20 6e 10 	      jsr	setPulseWidth
    907  0a76							;-------------
    908  0a76							;inc 1024+80
    909  0a76		       ad 79 70 	      lda	paddleY
    910  0a79				   skipPW
    911  0a79		       60		      rts
    912  0a7a							;END paddle ------------------------------
    913  0a7a
    914  0a7a
    915  0a7a
    916  0a7a
    917  0a7a
    918  0a7a							; All notes off
    919  0a7a				   midiPanic
    920  0a7a		       a2 08		      ldx	#NOTE_BUF_SIZE
    921  0a7c		       a9 ff		      lda	#255
    922  0a7e				   midiPanicLoop
    923  0a7e		       9d a0 70 	      sta	noteNumArray,x
    924  0a81		       ca		      dex
    925  0a82		       10 fa		      bpl	midiPanicLoop
    926  0a84		       60		      rts
    927  0a85
    928  0a85
    929  0a85
    930  0a85
    931  0a85
    932  0a85
    933  0a85
    934  0a85							; ***************************
    935  0a85							; Variable Setup
    936  0a85							; ***************************
    937  0a85				   variableInit
    938  0a85		       a9 00		      lda	#0
    939  0a87		       8d 7a 70 	      sta	paddle2
    940  0a8a		       8d 5c 70 	      sta	filterDisable
    941  0a8d		       8d 6c 70 	      sta	filterStatus
    942  0a90		       8d 58 70 	      sta	keyTimer
    943  0a93		       8d 40 70 	      sta	bender
    944  0a96		       8d 70 70 	      sta	helpMode
    945  0a99		       8d 21 70 	      sta	patPtr
    946  0a9c		       8d 03 70 	      sta	Frame
    947  0a9f		       8d 02 70 	      sta	FrameH
    948  0aa2		       8d 05 70 	      sta	EchoCur
    949  0aa5		       8d 75 70 	      sta	customPatchSaved
    950  0aa8		       8d 76 70 	      sta	paddleTop
    951  0aab		       8d 77 70 	      sta	paddleBottom
    952  0aae
    953  0aae		       a9 02		      lda	#2
    954  0ab0		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
    955  0ab3
    956  0ab3		       a9 04		      lda	#4	; set normal tuning
    957  0ab5		       8d 71 70 	      sta	tuneSetting
    958  0ab8
    959  0ab8		       a9 00		      lda	#0
    960  0aba		       20 62 11 	      jsr	setLFODepth	;********************************
    961  0abd		       a9 00		      lda	#0
    962  0abf		       20 78 11 	      jsr	setLFORate	;********************************
    963  0ac2
    964  0ac2							; set up tuning array pointers
    965  0ac2		       a9 6b		      lda	#<tuningL4
    966  0ac4		       85 22		      sta	tunePtrL
    967  0ac6		       a9 37		      lda	#>tuningL4
    968  0ac8		       85 23		      sta	tunePtrL+1
    969  0aca
    970  0aca		       a9 6b		      lda	#<tuningH4
    971  0acc		       85 24		      sta	tunePtrH
    972  0ace		       a9 37		      lda	#>tuningH4
    973  0ad0		       85 25		      sta	tunePtrH+1
    974  0ad2
    975  0ad2		       a9 02		      lda	#2
    976  0ad4		       8d 20 70 	      sta	VICMode
    977  0ad7		       a9 00		      lda	#0
    978  0ad9		       8d 1d 70 	      sta	soundMode
    979  0adc							;lda #40
    980  0adc							;sta portSpd
    981  0adc
    982  0adc							; Video Mode
    983  0adc		       a9 03		      lda	#3
    984  0ade		       a0 02		      ldy	#2
    985  0ae0		       20 33 11 	      jsr	setVideoMode	;********************************
    986  0ae3
    987  0ae3							; Default full volume
    988  0ae3		       a9 0f		      lda	#$0F
    989  0ae5		       8d 1c 70 	      sta	volume
    990  0ae8
    991  0ae8							; Echo?
    992  0ae8		       a9 70		      lda	#$70
    993  0aea		       8d 04 70 	      sta	EchoPtr
    994  0aed
    995  0aed		       a0 00		      ldy	#0
    996  0aef		       20 af 13 	      jsr	setPatch	;set bass sound
    997  0af2
    998  0af2							; Set up starting portamento values
    999  0af2		       a2 0c		      ldx	#12
   1000  0af4		       bd 31 34 	      lda	NSoundLArr,x
   1001  0af7		       8d 16 70 	      sta	pitchLA
   1002  0afa		       8d 17 70 	      sta	pitchLB
   1003  0afd		       8d 18 70 	      sta	pitchLC
   1004  0b00							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1005  0b00							;sta lastKeyB
   1006  0b00							;sta lastKeyC
   1007  0b00		       bd 79 34 	      lda	NSoundHArr,x
   1008  0b03		       8d 19 70 	      sta	pitchHA
   1009  0b06		       8d 1a 70 	      sta	pitchHB
   1010  0b09		       8d 1b 70 	      sta	pitchHC
   1011  0b0c							;----------
   1012  0b0c		       60		      rts
   1013  0b0d
   1014  0b0d							;__________________________________________________________
   1015  0b0d							;
   1016  0b0d							; DISABLE RESTORE KEY
   1017  0b0d							;
   1018  0b0d				   disableRestoreKey
   1019  0b0d		       a9 32		      lda	#<nmiRestoreKey	;Set NMI vector
   1020  0b0f		       8d 18 03 	      sta	$0318
   1021  0b12		       8d fa ff 	      sta	$fffa
   1022  0b15		       a9 0b		      lda	#>nmiRestoreKey
   1023  0b17		       8d 19 03 	      sta	$0319
   1024  0b1a		       8d fb ff 	      sta	$fffb
   1025  0b1d		       a9 81		      lda	#$81
   1026  0b1f		       8d 0d dd 	      sta	$dd0d	;Use Timer A
   1027  0b22		       a9 01		      lda	#$01	;Timer A count ($0001)
   1028  0b24		       8d 04 dd 	      sta	$dd04
   1029  0b27		       a9 00		      lda	#$00
   1030  0b29		       8d 05 dd 	      sta	$dd05
   1031  0b2c		       a9 19		      lda	#%00011001	;Run Timer A
   1032  0b2e		       8d 0e dd 	      sta	$dd0e
   1033  0b31		       60		      rts
   1034  0b32
   1035  0b32				   nmiRestoreKey
   1036  0b32		       40		      rti
   1037  0b33
   1038  0b33
   1039  0b33
------- FILE cynth_display.asm LEVEL 2 PASS 2
      0  0b33					      include	"cynth_display.asm"
      1  0b33
      2  0b33							; ***************************
      3  0b33							; Process Video Mode
      4  0b33							; ***************************
      5  0b33
      6  0b33				   processVideoMode
      7  0b33							; Turn off Vic when no notes are playing
      8  0b33		       ad 70 70 	      lda	helpMode
      9  0b36		       d0 2e		      bne	vicOn
     10  0b38
     11  0b38		       ad 20 70 	      lda	VICMode
     12  0b3b		       f0 1e		      beq	vicOff
     13  0b3d		       c9 02		      cmp	#2
     14  0b3f		       f0 25		      beq	vicOn
     15  0b41		       ad 1f 70 	      lda	dispOn
     16  0b44		       d0 20		      bne	vicOn
     17  0b46		       ad a0 70 	      lda	noteNumArray+0
     18  0b49							;lda KeyA
     19  0b49
     20  0b49		       c9 ff		      cmp	#255
     21  0b4b		       d0 19		      bne	vicOn
     22  0b4d		       ad a1 70 	      lda	noteNumArray+1
     23  0b50							;lda KeyB
     24  0b50		       c9 ff		      cmp	#255
     25  0b52		       d0 12		      bne	vicOn
     26  0b54		       ad a2 70 	      lda	noteNumArray+2
     27  0b57							;lda KeyC
     28  0b57		       c9 ff		      cmp	#255
     29  0b59		       d0 0b		      bne	vicOn
     30  0b5b				   vicOff
     31  0b5b							; Vic off
     32  0b5b		       ad 11 d0 	      lda	$d011
     33  0b5e		       29 ef		      and	#$EF
     34  0b60		       8d 11 d0 	      sta	$D011
     35  0b63
     36  0b63		       4c 6e 0b 	      jmp	endVic
     37  0b66				   vicOn
     38  0b66							; Vic on
     39  0b66		       ad 11 d0 	      lda	$d011
     40  0b69		       09 10		      ora	#$10
     41  0b6b		       8d 11 d0 	      sta	$d011
     42  0b6e
     43  0b6e				   endVic
     44  0b6e		       a9 00		      lda	#0
     45  0b70		       8d 1f 70 	      sta	dispOn
     46  0b73
     47  0b73		       ad a0 70 	      lda	noteNumArray+0
     48  0b76							;lda KeyA
     49  0b76		       8d 0c 70 	      sta	temp
     50  0b79		       20 8f 0b 	      jsr	drawPattern
     51  0b7c		       ad a1 70 	      lda	noteNumArray+1
     52  0b7f							;lda KeyB
     53  0b7f		       8d 0c 70 	      sta	temp
     54  0b82		       20 8f 0b 	      jsr	drawPattern
     55  0b85		       ad a2 70 	      lda	noteNumArray+2
     56  0b88							;lda KeyC
     57  0b88		       8d 0c 70 	      sta	temp
     58  0b8b		       20 8f 0b 	      jsr	drawPattern
     59  0b8e
     60  0b8e		       60		      rts
     61  0b8f							;jmp Loop
     62  0b8f							;====================================================
     63  0b8f							; bottom of main loop
     64  0b8f							;====================================================
     65  0b8f
     66  0b8f
     67  0b8f							; ***************************
     68  0b8f							; code to draw colored character patterns
     69  0b8f							; ***************************
     70  0b8f							;PTRNTEXTBASE equ 1224
     71  0b8f		       04 00	   PTRNTEXTBASE equ	1224-40*5
     72  0b8f							;PTRNCOLORBASE equ 55496
     73  0b8f		       d8 00	   PTRNCOLORBASE equ	55496-40*5
     74  0b8f
     75  0b8f
     76  0b8f				   drawPattern
     77  0b8f							; don't draw video when in help mode
     78  0b8f		       ad 70 70 	      lda	helpMode
     79  0b92		       f0 01		      beq	continueVideo
     80  0b94		       60		      rts
     81  0b95				   continueVideo
     82  0b95							;---------
     83  0b95							; setup
     84  0b95		       ae 21 70 	      ldx	patPtr
     85  0b98		       e8		      inx
     86  0b99		       e0 28		      cpx	#40
     87  0b9b		       d0 02		      bne	noPatReset
     88  0b9d		       a2 00		      ldx	#0
     89  0b9f				   noPatReset
     90  0b9f		       8e 21 70 	      stx	patPtr
     91  0ba2							;---------
     92  0ba2		       a2 05		      ldx	#5
     93  0ba4							; main pattern loop
     94  0ba4				   patternLoop
     95  0ba4				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
     96  0ba4				  -	      rts		; DEBUG! disable patterns
     97  0ba4					      endif
     98  0ba4
     99  0ba4		       bd 42 29 	      lda	patOffset,x
    100  0ba7							;	clc
    101  0ba7		       6d 21 70 	      adc	patPtr
    102  0baa		       a8		      tay
    103  0bab							;	clc
    104  0bab		       ad 0c 70 	      lda	temp
    105  0bae		       c9 ff		      cmp	#255
    106  0bb0		       f0 0a		      beq	skipExtraColors
    107  0bb2		       ad 03 70 	      lda	Frame
    108  0bb5		       2d 45 70 	      and	videoMode
    109  0bb8		       18		      clc
    110  0bb9		       6d 0c 70 	      adc	temp
    111  0bbc				   skipExtraColors
    112  0bbc		       69 be		      adc	#190
    113  0bbe		       8d 8f 70 	      sta	temp2
    114  0bc1		       ad 0c 70 	      lda	temp
    115  0bc4		       c9 ff		      cmp	#255
    116  0bc6		       d0 05		      bne	reloadValue
    117  0bc8		       a9 7f		      lda	#127
    118  0bca		       4c d0 0b 	      jmp	afterReloadValue
    119  0bcd				   reloadValue
    120  0bcd		       ad 8f 70 	      lda	temp2
    121  0bd0				   afterReloadValue
    122  0bd0		       91 2b		      sta	(lowTextPtr),y
    123  0bd2		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
    124  0bd5		       99 90 05 	      sta	PTRNTEXTBASE+400,y
    125  0bd8		       99 58 06 	      sta	PTRNTEXTBASE+600,y
    126  0bdb		       c0 f8		      cpy	#248
    127  0bdd		       30 03		      bmi	noTopText
    128  0bdf		       99 20 07 	      sta	PTRNTEXTBASE+800,y
    129  0be2				   noTopText
    130  0be2							;sbc #13
    131  0be2		       69 0c		      adc	#12
    132  0be4		       91 2d		      sta	(lowColorPtr),y
    133  0be6		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
    134  0be9		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
    135  0bec		       99 58 da 	      sta	PTRNCOLORBASE+600,y
    136  0bef		       c0 f8		      cpy	#248
    137  0bf1		       30 03		      bmi	noTopColor
    138  0bf3		       99 20 db 	      sta	PTRNCOLORBASE+800,y
    139  0bf6				   noTopColor
    140  0bf6		       ca		      dex
    141  0bf7		       10 ab		      bpl	patternLoop
    142  0bf9		       60		      rts
    143  0bfa							;--------------------- end of draw patterns
    144  0bfa
    145  0bfa
    146  0bfa
    147  0bfa							; ***************************
    148  0bfa							; Display Setup
    149  0bfa							; ***************************
    150  0bfa				   displayInit
    151  0bfa
    152  0bfa		       a9 15		      lda	#21
    153  0bfc		       8d 18 d0 	      sta	53272	; UPPERCASE mode
    154  0bff
    155  0bff							; draw static text at the top of the screen
    156  0bff		       a2 31		      ldx	#>mainColorText	;low/MSB
    157  0c01		       a0 27		      ldy	#<mainColorText	;high/LSB
    158  0c03		       20 10 0d 	      jsr	displayPage
    159  0c06
    160  0c06							; Draw bottom text (version number+PAL/NTSC setting)
    161  0c06		       03 dd	   BOTTOMTEXT equ	40*24+29
    162  0c06
    163  0c06		       20 ee 0f 	      jsr	showHelpMessage
    164  0c09
    165  0c09							; SHOW BETA MESSAGE IF IN BETA MODE
    166  0c09		       a2 0c		      ldx	#12
    167  0c0b				   betaInfoLoop
    168  0c0b		       bd b7 33 	      lda	betaInfo,x
    169  0c0e		       c9 40		      cmp	#64
    170  0c10		       30 02		      bmi	showSpaceBeta
    171  0c12		       e9 40		      sbc	#64
    172  0c14				   showSpaceBeta
    173  0c14		       9d b2 07 	      sta	1024+BOTTOMTEXT-40-3,x
    174  0c17		       ca		      dex
    175  0c18		       10 f1		      bpl	betaInfoLoop
    176  0c1a
    177  0c1a							; choose which text to show from PAL/NTSC test at startup
    178  0c1a		       a2 00		      ldx	#0
    179  0c1c		       a0 00		      ldy	#0
    180  0c1e		       ad 61 70 	      lda	NTSCmode
    181  0c21		       f0 02		      beq	showPAL
    182  0c23		       a2 0c		      ldx	#12
    183  0c25				   showPAL
    184  0c25							; Show version number and NTSC/PAL designation...
    185  0c25				   TextLoop2
    186  0c25		       bd 9f 33 	      lda	bottomText,x
    187  0c28		       f0 12		      beq	endText2
    188  0c2a		       c9 40		      cmp	#64
    189  0c2c		       30 02		      bmi	showSpace2
    190  0c2e		       e9 40		      sbc	#64
    191  0c30				   showSpace2
    192  0c30		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
    193  0c33		       a9 0b		      lda	#11
    194  0c35		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
    195  0c38				   notBlank2
    196  0c38		       e8		      inx
    197  0c39		       c8		      iny
    198  0c3a		       d0 e9		      bne	TextLoop2
    199  0c3c				   endText2
    200  0c3c
    201  0c3c		       07 e2	   MODE_INDICATOR_POS equ	2018
    202  0c3c					      IF	DEVICE_CONFIG=KERBEROS
    203  0c3c		       a9 0b		      lda	#11	; "K"
    204  0c3e		       8d e2 07 	      sta	MODE_INDICATOR_POS
    205  0c41					      ENDIF
    206  0c41				  -	      IF	DEVICE_CONFIG=EMU
    207  0c41				  -	      lda	#5	; "E"
    208  0c41				  -	      sta	MODE_INDICATOR_POS
    209  0c41					      ENDIF
    210  0c41				  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    211  0c41				  -	      lda	#19	; "S"
    212  0c41				  -	      sta	MODE_INDICATOR_POS
    213  0c41					      ENDIF
    214  0c41
    215  0c41		       20 0c 12 	      jsr	showMidiMode
    216  0c44
    217  0c44							;---------------------------------------------
    218  0c44							; Display current sound parameter values
    219  0c44
    220  0c44							; set tuning text
    221  0c44		       ac 71 70 	      ldy	tuneSetting
    222  0c47		       20 ed 10 	      jsr	ksetTune
    223  0c4a
    224  0c4a							; Video Mode
    225  0c4a		       ad 45 70 	      lda	videoMode
    226  0c4d		       ac 68 70 	      ldy	videoText
    227  0c50		       20 33 11 	      jsr	setVideoMode	;********************************
    228  0c53
    229  0c53		       ad 49 70 	      lda	LFODepth
    230  0c56		       20 62 11 	      jsr	setLFODepth	;********************************
    231  0c59		       ad 48 70 	      lda	LFORate
    232  0c5c		       20 78 11 	      jsr	setLFORate	;********************************
    233  0c5f
    234  0c5f		       ad 29 70 	      lda	paddle
    235  0c62		       20 41 11 	      jsr	setPaddles
    236  0c65
    237  0c65		       ad 57 70 	      lda	filter
    238  0c68		       8d 9d 70 	      sta	filterSetValue
    239  0c6b							;jsr setFilter
    240  0c6b
    241  0c6b		       20 5f 13 	      jsr	setMode
    242  0c6e
    243  0c6e		       20 37 13 	      jsr	setFX
    244  0c71
    245  0c71		       ad 69 70 	      lda	attack
    246  0c74		       20 73 12 	      jsr	showAttack
    247  0c77
    248  0c77		       20 0c 12 	      jsr	showMidiMode
    249  0c7a
    250  0c7a		       ad 6a 70 	      lda	release
    251  0c7d		       20 c6 11 	      jsr	showRelease
    252  0c80
    253  0c80		       ac 6c 70 	      ldy	filterStatus
    254  0c83		       20 d8 10 	      jsr	showFiltOnOff
    255  0c86
    256  0c86		       20 8b 12 	      jsr	setVolume
    257  0c89
    258  0c89		       ad 6b 70 	      lda	octave
    259  0c8c		       20 db 12 	      jsr	setOctave
    260  0c8f
    261  0c8f		       20 c1 14 	      jsr	showPatchName
    262  0c92
    263  0c92		       ad 7a 70 	      lda	paddle2
    264  0c95		       20 4c 10 	      jsr	ksetPad2
    265  0c98
    266  0c98		       60		      rts
    267  0c99							;---------------------------------------------------
    268  0c99
    269  0c99							;************************************
    270  0c99							; update text
    271  0c99							;************************************
    272  0c99							; Show text out of the textData array.
    273  0c99							; x=textData, y=screen position
    274  0c99				   updateText
    275  0c99		       ad 70 70 	      lda	helpMode
    276  0c9c		       f0 01		      beq	doUpdateText
    277  0c9e		       60		      rts
    278  0c9f				   doUpdateText
    279  0c9f							;	lda helpMode
    280  0c9f							;	bne doUpdateText
    281  0c9f							;	rts
    282  0c9f							;doUpdateText:
    283  0c9f		       18		      clc
    284  0ca0		       a9 04		      lda	#4
    285  0ca2		       8d 46 70 	      sta	textTemp
    286  0ca5				   updateTextLoop
    287  0ca5		       bd 57 32 	      lda	textData,x
    288  0ca8		       c9 40		      cmp	#64
    289  0caa		       30 02		      bmi	showSpaceU
    290  0cac		       e9 40		      sbc	#64
    291  0cae				   showSpaceU
    292  0cae		       99 00 04 	      sta	1024,y
    293  0cb1		       e8		      inx
    294  0cb2		       c8		      iny
    295  0cb3		       ce 46 70 	      dec	textTemp
    296  0cb6		       d0 ed		      bne	updateTextLoop
    297  0cb8		       60		      rts
    298  0cb9
    299  0cb9
    300  0cb9							;************************************
    301  0cb9							; clrScr - Clear Screen
    302  0cb9							;************************************
    303  0cb9				   clrScr
    304  0cb9		       a2 00		      ldx	#0
    305  0cbb		       a9 20		      lda	#32
    306  0cbd				   clrScrLoop
    307  0cbd		       9d 00 04 	      sta	$400,x
    308  0cc0		       9d 00 05 	      sta	$500,x
    309  0cc3		       9d 00 06 	      sta	$600,x
    310  0cc6		       9d 00 07 	      sta	$700,x
    311  0cc9		       ca		      dex
    312  0cca		       d0 f1		      bne	clrScrLoop
    313  0ccc		       60		      rts
    314  0ccd
    315  0ccd
    316  0ccd							;************************************
    317  0ccd							; DisplayHex - draw hex value on screen
    318  0ccd							;************************************
    319  0ccd							; note uses helpWritePointer so can't be
    320  0ccd							; used within displayPage routine
    321  0ccd							; X = horizontal location
    322  0ccd							; Y = vertical location
    323  0ccd							; A = value
    324  0ccd							; hexDispColor = color
    325  0ccd				   displayHex
    326  0ccd							; figure out screen location
    327  0ccd							; and store in word pointer
    328  0ccd		       8e 72 70 	      stx	hexDispTemp
    329  0cd0		       aa		      tax		; save the hex value in X
    330  0cd1		       b9 4b 29 	      lda	lineOffsetL,y
    331  0cd4		       18		      clc
    332  0cd5		       6d 72 70 	      adc	hexDispTemp
    333  0cd8		       85 31		      sta	helpWritePointerL
    334  0cda		       85 33		      sta	helpColorPointerL
    335  0cdc
    336  0cdc		       b9 65 29 	      lda	lineOffsetM,y
    337  0cdf		       69 00		      adc	#0
    338  0ce1		       85 32		      sta	helpWritePointerM
    339  0ce3		       18		      clc
    340  0ce4		       69 d4		      adc	#$D4
    341  0ce6		       85 34		      sta	helpColorPointerM
    342  0ce8							;--------------------
    343  0ce8		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
    344  0ceb		       8a		      txa
    345  0cec		       29 0f		      and	#$0F	; isolate the LS nibble
    346  0cee		       aa		      tax
    347  0cef		       bd f1 33 	      lda	hexDisplay,x	; get character to display
    348  0cf2		       a0 01		      ldy	#1
    349  0cf4		       91 31		      sta	(helpWritePointerL),y
    350  0cf6							;lda #$E
    351  0cf6		       ad 8d 70 	      lda	hexDispColor
    352  0cf9		       91 33		      sta	(helpColorPointerL),y
    353  0cfb							;-------------------
    354  0cfb		       ad 72 70 	      lda	hexDispTemp
    355  0cfe		       4a		      lsr		; get the MS nibble
    356  0cff		       4a		      lsr
    357  0d00		       4a		      lsr
    358  0d01		       4a		      lsr
    359  0d02		       aa		      tax
    360  0d03		       bd f1 33 	      lda	hexDisplay,x	; get character to display
    361  0d06		       a0 00		      ldy	#0
    362  0d08		       91 31		      sta	(helpWritePointerL),y
    363  0d0a							;lda #$E
    364  0d0a		       ad 8d 70 	      lda	hexDispColor
    365  0d0d		       91 33		      sta	(helpColorPointerL),y
    366  0d0f							;-------------------
    367  0d0f		       60		      rts
    368  0d10
    369  0d10
    370  0d10							;************************************
    371  0d10							; DisplayPage - display an entire
    372  0d10							; page of help info with color support
    373  0d10							;************************************
    374  0d10							; X = LSB of data address
    375  0d10							; Y = MSB of data address
    376  0d10							; data format:
    377  0d10							; line_number, color, text, 0
    378  0d10							; line_number, color, text, 0
    379  0d10							; 255
    380  0d10				   displayPage
    381  0d10		       84 2f		      sty	helpReadPointerL
    382  0d12		       86 30		      stx	helpReadPointerM
    383  0d14
    384  0d14							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    385  0d14							;lda filterSetValue
    386  0d14							;sta sidEditSaveTemp1
    387  0d14
    388  0d14		       a9 01		      lda	#1
    389  0d16		       8d 6d 70 	      sta	helpColor	; default to white
    390  0d19				   helpLoop
    391  0d19		       a0 00		      ldy	#0
    392  0d1b							; get line number and set up output pointers
    393  0d1b		       b1 2f		      lda	(helpReadPointerL),y
    394  0d1d		       c9 ff		      cmp	#255
    395  0d1f		       f0 5b		      beq	quitHelp
    396  0d21		       aa		      tax
    397  0d22		       bd 65 29 	      lda	lineOffsetM,x
    398  0d25		       85 32		      sta	helpWritePointerM
    399  0d27		       18		      clc
    400  0d28		       69 d4		      adc	#$D4
    401  0d2a		       85 34		      sta	helpColorPointerM
    402  0d2c		       bd 4b 29 	      lda	lineOffsetL,x
    403  0d2f		       85 31		      sta	helpWritePointerL
    404  0d31		       85 33		      sta	helpColorPointerL
    405  0d33							;--------------------
    406  0d33		       a0 01		      ldy	#1
    407  0d35		       8c 6e 70 	      sty	helpYIn
    408  0d38		       a0 00		      ldy	#0
    409  0d3a		       8c 6f 70 	      sty	helpYOut
    410  0d3d				   helpTextLoop
    411  0d3d							; get the first character
    412  0d3d		       ac 6e 70 	      ldy	helpYIn
    413  0d40		       b1 2f		      lda	(helpReadPointerL),y
    414  0d42		       f0 28		      beq	quitTextLoop
    415  0d44		       c8		      iny
    416  0d45		       8c 6e 70 	      sty	helpYIn
    417  0d48							; see if it's a color command
    418  0d48		       c9 80		      cmp	#128
    419  0d4a		       10 17		      bpl	setColor	;---
    420  0d4c		       c9 40		      cmp	#64
    421  0d4e		       30 02		      bmi	showSpaceHelp
    422  0d50		       e9 40		      sbc	#64
    423  0d52							;lda #126
    424  0d52				   showSpaceHelp
    425  0d52							; write the color and character to the screen
    426  0d52		       ac 6f 70 	      ldy	helpYOut
    427  0d55		       91 31		      sta	(helpWritePointerL),y
    428  0d57		       ad 6d 70 	      lda	helpColor
    429  0d5a		       91 33		      sta	(helpColorPointerL),y
    430  0d5c		       c8		      iny
    431  0d5d		       8c 6f 70 	      sty	helpYOut
    432  0d60		       4c 3d 0d 	      jmp	helpTextLoop
    433  0d63				   setColor
    434  0d63		       38		      sec
    435  0d64		       e9 80		      sbc	#128
    436  0d66		       8d 6d 70 	      sta	helpColor
    437  0d69		       4c 3d 0d 	      jmp	helpTextLoop
    438  0d6c							;---------------
    439  0d6c				   quitTextLoop
    440  0d6c							; update the input pointer
    441  0d6c		       c8		      iny
    442  0d6d		       98		      tya
    443  0d6e		       18		      clc
    444  0d6f		       65 2f		      adc	helpReadPointerL
    445  0d71		       85 2f		      sta	helpReadPointerL
    446  0d73		       a5 30		      lda	helpReadPointerM
    447  0d75		       69 00		      adc	#0
    448  0d77		       85 30		      sta	helpReadPointerM
    449  0d79		       4c 19 0d 	      jmp	helpLoop	;/\/\/\/\/\
    450  0d7c				   quitHelp
    451  0d7c
    452  0d7c							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    453  0d7c							;lda sidEditSaveTemp1
    454  0d7c							;sta filterSetValue
    455  0d7c
    456  0d7c		       60		      rts		; END OF DISPLAY PAGE
------- FILE cynthcart2.0.1.asm
------- FILE cynth_modulation.asm LEVEL 2 PASS 2
      0  0d7d					      include	"cynth_modulation.asm"
      1  0d7d
      2  0d7d
      3  0d7d							;-------------------------------------
      4  0d7d							; Process FX
      5  0d7d							;-------------------------------------
      6  0d7d							;fxType equ $7086
      7  0d7d							;modValue1 equ $7087
      8  0d7d							;modDirection equ $7089
      9  0d7d							;modCounter equ $708A
     10  0d7d							;modMinValue equ $708B
     11  0d7d							;modMaxValue equ $708A
     12  0d7d							; - - - - - - - - - -
     13  0d7d							;MOD_NONE equ 0
     14  0d7d							;MOD_PW_LFO equ 1
     15  0d7d							;MOD_FILT_LFO equ 2
     16  0d7d							;MOD_FILT_OPEN equ 3
     17  0d7d							;MOD_FILT_CLOSE equ 4
     18  0d7d							;MOD_FILT_WOW equ 5
     19  0d7d
     20  0d7d				   processFX
     21  0d7d		       ad 86 70 	      lda	fxType
     22  0d80		       d0 0b		      bne	doFX
     23  0d82		       a9 7f		      lda	#127	; Set default mod values...
     24  0d84		       8d 9e 70 	      sta	pwModValue
     25  0d87		       8d 9c 70 	      sta	filterModValue
     26  0d8a		       4c b5 0d 	      jmp	quitFX
     27  0d8d							; - - - - - - - -
     28  0d8d				   doFX
     29  0d8d		       c9 06		      cmp	#MOD_PW_LFO
     30  0d8f		       d0 03		      bne	notModPulseLFO
     31  0d91		       4c 9f 0e 	      jmp	modPulseLFO	;------->
     32  0d94				   notModPulseLFO
     33  0d94		       c9 01		      cmp	#MOD_FILT_LFO
     34  0d96		       d0 03		      bne	notModFiltLFO
     35  0d98		       4c 8b 0e 	      jmp	modFiltLFO	;------->
     36  0d9b				   notModFiltLFO
     37  0d9b		       c9 02		      cmp	#MOD_FILT_ENV
     38  0d9d		       d0 03		      bne	noModFiltEnv
     39  0d9f		       4c 5b 0e 	      jmp	modFiltEnv	;------->
     40  0da2				   noModFiltEnv
     41  0da2		       c9 03		      cmp	#MOD_FILT3
     42  0da4		       f0 10		      beq	modFilt3	;------->
     43  0da6		       c9 04		      cmp	#MOD_FILT4
     44  0da8		       f0 67		      beq	modFilt4	;------->
     45  0daa		       c9 05		      cmp	#MOD_FILT5
     46  0dac		       f0 76		      beq	modFilt5	;------->
     47  0dae		       c9 07		      cmp	#MOD_PW2
     48  0db0		       d0 03		      bne	quitFX
     49  0db2		       4c 37 0e 	      jmp	modPW2	;------->
     50  0db5				   quitFX
     51  0db5		       60		      rts
     52  0db6
     53  0db6
     54  0db6							;---------------------
     55  0db6				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
     56  0db6		       ad 03 70 	      lda	Frame
     57  0db9		       ad 87 70 	      lda	modValue1
     58  0dbc		       29 f8		      and	#%11111000
     59  0dbe		       f0 0b		      beq	noDecModValue2
     60  0dc0		       ae 87 70 	      ldx	modValue1
     61  0dc3		       ca		      dex
     62  0dc4		       ca		      dex
     63  0dc5		       ca		      dex
     64  0dc6		       ca		      dex
     65  0dc7		       ca		      dex
     66  0dc8		       8e 87 70 	      stx	modValue1
     67  0dcb				   noDecModValue2
     68  0dcb		       ad 87 70 	      lda	modValue1
     69  0dce		       8d 9c 70 	      sta	filterModValue
     70  0dd1							;jsr setFilterFromA
     71  0dd1							;rts ; DEBUG!!
     72  0dd1
     73  0dd1		       a9 b4		      lda	#180
     74  0dd3		       8d 98 70 	      sta	resetValue
     75  0dd6							;jmp filtEnvReset ;---- end
     76  0dd6
     77  0dd6				   filtEnvResetFast
     78  0dd6		       ad 1d 70 	      lda	soundMode
     79  0dd9		       c9 20		      cmp	#MODE_MONO1
     80  0ddb		       f0 22		      beq	handleMonoMode
     81  0ddd		       c9 21		      cmp	#MODE_MONO2
     82  0ddf		       f0 1e		      beq	handleMonoMode
     83  0de1
     84  0de1							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
     85  0de1		       a2 05		      ldx	#5
     86  0de3		       a0 00		      ldy	#0
     87  0de5				   countNotesLoop
     88  0de5		       bd a0 70 	      lda	noteNumArray,x
     89  0de8		       c9 ff		      cmp	#255
     90  0dea		       d0 01		      bne	skipCountingNote
     91  0dec		       c8		      iny
     92  0ded				   skipCountingNote
     93  0ded		       ca		      dex
     94  0dee		       10 f5		      bpl	countNotesLoop
     95  0df0		       cc 99 70 	      cpy	lastNoteCount
     96  0df3		       f0 09		      beq	noNewNotes
     97  0df5		       8c 99 70 	      sty	lastNoteCount
     98  0df8		       ad 98 70 	      lda	resetValue	; Reset filter envelope
     99  0dfb		       8d 87 70 	      sta	modValue1
    100  0dfe				   noNewNotes
    101  0dfe		       60		      rts
    102  0dff
    103  0dff				   handleMonoMode
    104  0dff		       ac a0 70 	      ldy	noteNumArray+0
    105  0e02		       cc 9a 70 	      cpy	lastNote
    106  0e05		       f0 09		      beq	sameOldNote
    107  0e07		       8c 9a 70 	      sty	lastNote
    108  0e0a		       ad 98 70 	      lda	resetValue	; Reset filter envelope
    109  0e0d		       8d 87 70 	      sta	modValue1
    110  0e10				   sameOldNote
    111  0e10		       60		      rts
    112  0e11
    113  0e11							; Reset filter env when no notes are held...
    114  0e11							;	ldx #5
    115  0e11							;filtEnvResetLoop2
    116  0e11							;lda noteNumArray,x
    117  0e11							;cmp #255
    118  0e11							;bne quitFiltEnv2
    119  0e11							;dex
    120  0e11							;bpl filtEnvResetLoop2
    121  0e11							;lda resetValue
    122  0e11							;sta modValue1
    123  0e11							;quitFiltEnv2:
    124  0e11							;rts
    125  0e11
    126  0e11							;---------------------
    127  0e11				   modFilt4		; Filter chopper FAST
    128  0e11		       ad 03 70 	      lda	Frame
    129  0e14		       29 08		      and	#%1000
    130  0e16		       f0 06		      beq	filterClosed
    131  0e18		       a9 e6		      lda	#230
    132  0e1a		       8d 9c 70 	      sta	filterModValue
    133  0e1d		       60		      rts
    134  0e1e							;jmp setFilterFromA
    135  0e1e				   filterClosed
    136  0e1e		       a9 00		      lda	#0
    137  0e20		       8d 9c 70 	      sta	filterModValue
    138  0e23		       60		      rts
    139  0e24							;jmp setFilterFromA
    140  0e24
    141  0e24
    142  0e24							;---------------------
    143  0e24				   modFilt5		; Filter chopper MEDIUM
    144  0e24		       ad 03 70 	      lda	Frame
    145  0e27		       29 02		      and	#%10
    146  0e29		       f0 06		      beq	filterClosed2
    147  0e2b		       a9 96		      lda	#150
    148  0e2d							;jmp setFilterFromA
    149  0e2d		       8d 9c 70 	      sta	filterModValue
    150  0e30		       60		      rts
    151  0e31				   filterClosed2
    152  0e31		       a9 32		      lda	#50
    153  0e33							;jmp setFilterFromA
    154  0e33		       8d 9c 70 	      sta	filterModValue
    155  0e36		       60		      rts
    156  0e37
    157  0e37							;---------------------
    158  0e37				   modPW2		; PW Envelope
    159  0e37		       ad 03 70 	      lda	Frame
    160  0e3a		       ad 87 70 	      lda	modValue1
    161  0e3d							;and #%11111000
    162  0e3d		       29 e0		      and	#%11100000
    163  0e3f		       f0 0b		      beq	noDecModValue3
    164  0e41		       ae 87 70 	      ldx	modValue1
    165  0e44		       ca		      dex
    166  0e45		       ca		      dex
    167  0e46		       ca		      dex
    168  0e47		       ca		      dex
    169  0e48		       ca		      dex
    170  0e49		       8e 87 70 	      stx	modValue1
    171  0e4c				   noDecModValue3
    172  0e4c		       ad 87 70 	      lda	modValue1
    173  0e4f		       20 6e 10 	      jsr	setPulseWidth
    174  0e52
    175  0e52		       a9 b4		      lda	#180
    176  0e54		       8d 98 70 	      sta	resetValue
    177  0e57
    178  0e57		       4c d6 0d 	      jmp	filtEnvResetFast
    179  0e5a		       60		      rts
    180  0e5b
    181  0e5b
    182  0e5b
    183  0e5b
    184  0e5b							;---------------------
    185  0e5b				   modFiltEnv
    186  0e5b		       ad 03 70 	      lda	Frame
    187  0e5e		       29 01		      and	#%1
    188  0e60		       f0 01		      beq	doEnvLFO
    189  0e62		       60		      rts
    190  0e63				   doEnvLFO
    191  0e63		       ad 87 70 	      lda	modValue1
    192  0e66		       c9 ff		      cmp	#255
    193  0e68		       f0 03		      beq	noIncreaseModValue
    194  0e6a		       ee 87 70 	      inc	modValue1
    195  0e6d				   noIncreaseModValue
    196  0e6d		       ad 87 70 	      lda	modValue1
    197  0e70		       8d 9c 70 	      sta	filterModValue
    198  0e73							;jsr setFilterFromA
    199  0e73		       a9 00		      lda	#0
    200  0e75		       8d 98 70 	      sta	resetValue
    201  0e78							; jmp filtEnvReset
    202  0e78
    203  0e78				   filtEnvReset
    204  0e78		       a2 05		      ldx	#5
    205  0e7a				   filtEnvResetLoop
    206  0e7a		       bd a0 70 	      lda	noteNumArray,x
    207  0e7d		       c9 ff		      cmp	#255
    208  0e7f		       d0 09		      bne	quitFiltEnv
    209  0e81		       ca		      dex
    210  0e82		       10 f6		      bpl	filtEnvResetLoop
    211  0e84							;lda #0
    212  0e84		       ad 98 70 	      lda	resetValue
    213  0e87		       8d 87 70 	      sta	modValue1
    214  0e8a				   quitFiltEnv
    215  0e8a		       60		      rts
    216  0e8b
    217  0e8b							;---------------------
    218  0e8b				   modFiltLFO
    219  0e8b		       a9 96		      lda	#150
    220  0e8d		       8d 8b 70 	      sta	modLFOMinValue
    221  0e90		       a9 fe		      lda	#254
    222  0e92		       8d 8a 70 	      sta	modLFOMaxValue
    223  0e95		       20 c3 0e 	      jsr	doModulationLFO
    224  0e98		       ad 87 70 	      lda	modValue1
    225  0e9b		       8d 9c 70 	      sta	filterModValue
    226  0e9e							;jsr setFilterFromA
    227  0e9e		       60		      rts
    228  0e9f
    229  0e9f
    230  0e9f
    231  0e9f							;---------------------
    232  0e9f				   modPulseLFO
    233  0e9f
    234  0e9f							; Reset into range if way off value...
    235  0e9f		       ad 87 70 	      lda	modValue1
    236  0ea2		       30 05		      bmi	noResetValue
    237  0ea4		       a9 c8		      lda	#200
    238  0ea6		       8d 87 70 	      sta	modValue1
    239  0ea9				   noResetValue
    240  0ea9
    241  0ea9							;inc 1025 ; DEBUG!
    242  0ea9		       a9 96		      lda	#150
    243  0eab		       8d 8b 70 	      sta	modLFOMinValue
    244  0eae		       a9 fe		      lda	#254
    245  0eb0		       8d 8a 70 	      sta	modLFOMaxValue
    246  0eb3		       20 c3 0e 	      jsr	doModulationLFO
    247  0eb6		       ae 87 70 	      ldx	modValue1
    248  0eb9		       8e 79 70 	      stx	paddleY
    249  0ebc
    250  0ebc		       ad 87 70 	      lda	modValue1
    251  0ebf		       20 6e 10 	      jsr	setPulseWidth
    252  0ec2		       60		      rts
    253  0ec3
    254  0ec3							; Process special LFO for modulation
    255  0ec3							; Store modLFOMaxValue and modLFOMinValue first
    256  0ec3				   doModulationLFO
    257  0ec3		       ad 03 70 	      lda	Frame
    258  0ec6		       29 07		      and	#%111
    259  0ec8		       f0 01		      beq	doModLFO
    260  0eca		       60		      rts
    261  0ecb				   doModLFO
    262  0ecb		       ad 89 70 	      lda	modDirection
    263  0ece		       f0 12		      beq	LFODown
    264  0ed0				   LFOUp
    265  0ed0		       ae 87 70 	      ldx	modValue1
    266  0ed3		       e8		      inx
    267  0ed4		       8e 87 70 	      stx	modValue1
    268  0ed7							;jsr setPWValue
    269  0ed7		       8e 79 70 	      stx	paddleY
    270  0eda							;jsr setPulseWidth
    271  0eda		       ae 87 70 	      ldx	modValue1
    272  0edd
    273  0edd		       e0 f5		      cpx	#245
    274  0edf		       f0 0d		      beq	switchDirections
    275  0ee1		       60		      rts
    276  0ee2
    277  0ee2				   LFODown
    278  0ee2		       ae 87 70 	      ldx	modValue1
    279  0ee5		       ca		      dex
    280  0ee6		       8e 87 70 	      stx	modValue1
    281  0ee9		       e0 96		      cpx	#150
    282  0eeb		       f0 01		      beq	switchDirections
    283  0eed		       60		      rts
    284  0eee
    285  0eee				   switchDirections
    286  0eee		       ad 89 70 	      lda	modDirection
    287  0ef1		       18		      clc
    288  0ef2		       69 01		      adc	#1
    289  0ef4		       29 01		      and	#1
    290  0ef6		       8d 89 70 	      sta	modDirection
    291  0ef9		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_setshow.asm LEVEL 2 PASS 2
      0  0efa					      include	"cynth_setshow.asm"
      1  0efa
      2  0efa							;-------------------------------------------
      3  0efa							; new key-based set functions
      4  0efa							;-------------------------------------------
      5  0efa
      6  0efa				   ksavePatch
      7  0efa		       a9 01		      lda	#1
      8  0efc		       8d 75 70 	      sta	customPatchSaved
      9  0eff							;-------------------
     10  0eff		       a9 1e		      lda	#SAVED_PATCH_MESSAGE
     11  0f01		       8d 47 70 	      sta	patchSetY
     12  0f04		       20 c1 14 	      jsr	showPatchName
     13  0f07							;----------------
     14  0f07		       a2 19		      ldx	#$19
     15  0f09				   saveLoop
     16  0f09		       bd 00 71 	      lda	sidData,x
     17  0f0c		       9d 20 71 	      sta	sidSaveData,x
     18  0f0f		       ca		      dex
     19  0f10		       10 f7		      bpl	saveLoop
     20  0f12							;----------------
     21  0f12		       ad 29 70 	      lda	paddle
     22  0f15		       8d 41 71 	      sta	savePaddle
     23  0f18		       ad 6b 70 	      lda	octave
     24  0f1b		       8d 42 71 	      sta	saveOctave
     25  0f1e		       ad 1d 70 	      lda	soundMode
     26  0f21		       8d 43 71 	      sta	saveSoundMode
     27  0f24		       ad 86 70 	      lda	fxType
     28  0f27		       8d 43 71 	      sta	saveFXType
     29  0f2a		       ad 1e 70 	      lda	arpSpeed
     30  0f2d		       8d 44 71 	      sta	saveArpSpeed
     31  0f30		       ad 49 70 	      lda	LFODepth
     32  0f33		       8d 46 71 	      sta	saveLFODepth
     33  0f36		       ad 48 70 	      lda	LFORate
     34  0f39		       8d 47 71 	      sta	saveLFORate
     35  0f3c		       ad 1c 70 	      lda	volume
     36  0f3f		       8d 48 71 	      sta	saveVolume
     37  0f42		       ad 24 70 	      lda	volModeRAM
     38  0f45		       8d 49 71 	      sta	saveVolMode
     39  0f48		       ad 57 70 	      lda	filter
     40  0f4b		       8d 4a 71 	      sta	saveFilter
     41  0f4e							;----------------
     42  0f4e		       60		      rts
     43  0f4f
     44  0f4f				   kloadPatch
     45  0f4f							; don't load patch if none has been saved
     46  0f4f		       ad 75 70 	      lda	customPatchSaved
     47  0f52		       d0 01		      bne	contLoadPatch
     48  0f54		       60		      rts
     49  0f55				   contLoadPatch
     50  0f55							; Maybe show this name with direct text instead?...
     51  0f55							;lda #SAVED_PATCH_MESSAGE
     52  0f55							;sta patchSetY
     53  0f55							;jsr showPatchName
     54  0f55							;----------------
     55  0f55		       a9 1f		      lda	#CUSTOM_PATCH_NUMBER
     56  0f57		       8d 47 70 	      sta	patchSetY
     57  0f5a		       20 c1 14 	      jsr	showPatchName
     58  0f5d							;-----------------------
     59  0f5d		       ad 49 71 	      lda	saveVolMode
     60  0f60		       8d 24 70 	      sta	volModeRAM
     61  0f63							;.....................
     62  0f63		       ad 48 71 	      lda	saveVolume
     63  0f66		       8d 1c 70 	      sta	volume
     64  0f69							;.....................
     65  0f69		       ad 41 71 	      lda	savePaddle
     66  0f6c		       20 41 11 	      jsr	setPaddles
     67  0f6f							;.....................
     68  0f6f		       ad 42 71 	      lda	saveOctave
     69  0f72		       20 db 12 	      jsr	setOctave
     70  0f75							;.....................
     71  0f75		       ad 43 71 	      lda	saveSoundMode
     72  0f78		       8d 1d 70 	      sta	soundMode
     73  0f7b							;lda saveArpSpeed
     74  0f7b		       20 5f 13 	      jsr	setMode
     75  0f7e							;.....................
     76  0f7e		       ad 43 71 	      lda	saveFXType
     77  0f81		       8d 86 70 	      sta	fxType
     78  0f84		       20 37 13 	      jsr	setFX
     79  0f87							;.....................
     80  0f87		       ad 46 71 	      lda	saveLFODepth
     81  0f8a		       20 62 11 	      jsr	setLFODepth
     82  0f8d							;.....................
     83  0f8d		       ad 47 71 	      lda	saveLFORate
     84  0f90		       20 78 11 	      jsr	setLFORate
     85  0f93							;.....................
     86  0f93		       ad 4a 71 	      lda	saveFilter
     87  0f96		       8d 57 70 	      sta	filter
     88  0f99							;----------------
     89  0f99		       a2 19		      ldx	#$19
     90  0f9b				   loadLoop
     91  0f9b		       bd 20 71 	      lda	sidSaveData,x
     92  0f9e		       9d 00 d4 	      sta	SID1,x
     93  0fa1		       9d 20 d4 	      sta	SID2,x
     94  0fa4		       9d 00 71 	      sta	sidData,x
     95  0fa7		       ca		      dex
     96  0fa8		       10 f1		      bpl	loadLoop
     97  0faa							;----------------
     98  0faa		       ad 04 71 	      lda	sidData+SV1WAVE
     99  0fad		       8d 30 70 	      sta	WaveType
    100  0fb0		       ad 0b 71 	      lda	sidData+SV2WAVE
    101  0fb3		       8d 37 70 	      sta	WaveType2
    102  0fb6		       ad 12 71 	      lda	sidData+SV3WAVE
    103  0fb9		       8d 3e 70 	      sta	WaveType3
    104  0fbc							;----------------
    105  0fbc		       60		      rts
    106  0fbd
    107  0fbd				   khelp
    108  0fbd							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    109  0fbd		       ad 9d 70 	      lda	filterSetValue
    110  0fc0		       8d 52 70 	      sta	sidEditSaveTemp1
    111  0fc3
    112  0fc3
    113  0fc3		       a9 00		      lda	#0
    114  0fc5		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
    115  0fc8
    116  0fc8		       20 b9 0c 	      jsr	clrScr
    117  0fcb		       a9 28		      lda	#KEYTIME
    118  0fcd		       8d 58 70 	      sta	keyTimer
    119  0fd0		       ad 70 70 	      lda	helpMode
    120  0fd3		       49 01		      eor	#1
    121  0fd5							;sta helpMode
    122  0fd5		       20 2f 11 	      jsr	setHelpMode
    123  0fd8		       20 fa 0b 	      jsr	displayInit
    124  0fdb		       ad 70 70 	      lda	helpMode
    125  0fde		       f0 0e		      beq	showHelpMessage
    126  0fe0							;---------------
    127  0fe0							; Show full help page...
    128  0fe0		       a2 2d		      ldx	#>normalHelp	;low/MSB
    129  0fe2		       a0 3b		      ldy	#<normalHelp	;high/LSB
    130  0fe4		       20 10 0d 	      jsr	displayPage	; <--- Draw full help page
    131  0fe7
    132  0fe7							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    133  0fe7		       ad 52 70 	      lda	sidEditSaveTemp1
    134  0fea		       8d 9d 70 	      sta	filterSetValue
    135  0fed		       60		      rts
    136  0fee
    137  0fee							; \/ Show help message at bottom of screen
    138  0fee				   showHelpMessage
    139  0fee							; Show help key...
    140  0fee		       a2 00		      ldx	#0
    141  0ff0				   helpMessageLoop
    142  0ff0		       bd 1d 2d 	      lda	helpMessage,x
    143  0ff3		       f0 11		      beq	endHelpMsgLoop
    144  0ff5		       c9 40		      cmp	#64
    145  0ff7		       30 02		      bmi	showSpace99
    146  0ff9		       e9 40		      sbc	#64
    147  0ffb				   showSpace99
    148  0ffb		       9d c0 07 	      sta	1024+24*40,x
    149  0ffe		       a9 0b		      lda	#11
    150  1000		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
    151  1003		       e8		      inx
    152  1004		       d0 ea		      bne	helpMessageLoop
    153  1006				   endHelpMsgLoop
    154  1006
    155  1006		       20 0c 12 	      jsr	showMidiMode
    156  1009
    157  1009
    158  1009							;	jsr displayInit
    159  1009
    160  1009
    161  1009							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    162  1009		       ad 52 70 	      lda	sidEditSaveTemp1
    163  100c		       8d 9d 70 	      sta	filterSetValue
    164  100f
    165  100f							;	ldx #39
    166  100f							;	lda #32
    167  100f							;clearLastRow:
    168  100f							;	sta 1024+23*40,x
    169  100f							;	dex
    170  100f							;	bpl clearLastRow
    171  100f		       60		      rts
    172  1010
    173  1010				   kclearModulation
    174  1010		       a9 00		      lda	#0
    175  1012		       20 34 13 	      jsr	ksetFX
    176  1015		       a9 00		      lda	#0
    177  1017		       20 62 11 	      jsr	setLFODepth
    178  101a		       a9 00		      lda	#0
    179  101c		       4c 78 11 	      jmp	setLFORate
    180  101f
    181  101f
    182  101f							;ksetBlackBG
    183  101f							;	lda #0
    184  101f							;	sta 53281
    185  101f							;	sta 53280
    186  101f							;	rts
    187  101f
    188  101f							;ksetBlueBG
    189  101f							;	lda #6
    190  101f							;	sta 53281
    191  101f							;	lda #14
    192  101f							;	sta 53280
    193  101f							;	rts
    194  101f
    195  101f
    196  101f				   ksetPalNtsc
    197  101f		       8d 61 70 	      sta	NTSCmode
    198  1022		       4c fa 0b 	      jmp	displayInit
    199  1025
    200  1025							; bend the bender down
    201  1025				   bendBender
    202  1025		       ad 40 70 	      lda	bender
    203  1028		       c9 fc		      cmp	#252
    204  102a		       f0 11		      beq	notBender
    205  102c		       ee 40 70 	      inc	bender
    206  102f		       ee 40 70 	      inc	bender
    207  1032		       ee 40 70 	      inc	bender
    208  1035		       ee 40 70 	      inc	bender
    209  1038		       a9 01		      lda	#1
    210  103a		       8d 83 70 	      sta	benderAutoreset
    211  103d				   notBender
    212  103d		       60		      rts
    213  103e
    214  103e							; set VIC video chip mode
    215  103e				   setVIC
    216  103e		       8d 20 70 	      sta	VICMode
    217  1041		       60		      rts
    218  1042
    219  1042							; set paddle on/off
    220  1042				   ksetPaddles
    221  1042		       20 41 11 	      jsr	setPaddles
    222  1045		       ad 57 70 	      lda	filter
    223  1048		       8d 9d 70 	      sta	filterSetValue
    224  104b							;jmp setFilter
    225  104b		       60		      rts
    226  104c
    227  104c				   ksetPad2
    228  104c		       8d 7a 70 	      sta	paddle2
    229  104f		       c9 00		      cmp	#0
    230  1051		       f0 03		      beq	skipLastPadSave
    231  1053		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
    232  1056				   skipLastPadSave
    233  1056		       0a		      asl
    234  1057		       0a		      asl
    235  1058		       18		      clc
    236  1059		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
    237  105b		       aa		      tax
    238  105c		       a0 c4		      ldy	#PAD2TEXT	; screen position
    239  105e		       4c 99 0c 	      jmp	updateText
    240  1061
    241  1061				   ksetFilter
    242  1061		       a2 00		      ldx	#0
    243  1063		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
    244  1066							;jsr setFilter
    245  1066		       8d 9d 70 	      sta	filterSetValue
    246  1069		       a9 00		      lda	#0
    247  106b		       4c 41 11 	      jmp	setPaddles
    248  106e
    249  106e
    250  106e							;------------------
    251  106e							; Set pulse width
    252  106e							;------------------
    253  106e							; MIDI CONTROLLER	      <- 1 1 1	1 1 1 1
    254  106e							; PULSE WIDTH	      1 1 1 1  1 1 1 1	1 1 1 1
    255  106e							; -----------------------------------------------
    256  106e				   setPulseWidth
    257  106e							; write pulse high byte
    258  106e		       aa		      tax
    259  106f		       4a		      lsr
    260  1070		       4a		      lsr
    261  1071		       4a		      lsr
    262  1072		       4a		      lsr
    263  1073							;sta 1025+40 ; DEBUG!
    264  1073		       8d 03 d4 	      sta	SID1+SV1PWH
    265  1076		       8d 0a d4 	      sta	SID1+SV2PWH
    266  1079		       8d 11 d4 	      sta	SID1+SV3PWH
    267  107c		       8d 23 d4 	      sta	SID2+SV1PWH
    268  107f		       8d 2a d4 	      sta	SID2+SV2PWH
    269  1082		       8d 31 d4 	      sta	SID2+SV3PWH
    270  1085		       8d 03 71 	      sta	sidData+SV1PWH
    271  1088		       8d 0a 71 	      sta	sidData+SV2PWH
    272  108b		       8d 11 71 	      sta	sidData+SV3PWH
    273  108e
    274  108e							; write pulse low byte
    275  108e		       8a		      txa
    276  108f		       0a		      asl
    277  1090		       0a		      asl
    278  1091		       0a		      asl
    279  1092		       0a		      asl
    280  1093							;asl ; extra ?
    281  1093		       09 0f		      ora	#$0F
    282  1095							;sta 1024+40 ; DEBUG!
    283  1095		       8d 02 d4 	      sta	SID1+SV1PWL
    284  1098		       8d 09 d4 	      sta	SID1+SV2PWL
    285  109b		       8d 10 d4 	      sta	SID1+SV3PWL
    286  109e		       8d 22 d4 	      sta	SID2+SV1PWL
    287  10a1		       8d 29 d4 	      sta	SID2+SV2PWL
    288  10a4		       8d 30 d4 	      sta	SID2+SV3PWL
    289  10a7		       8d 02 71 	      sta	sidData+SV1PWL
    290  10aa		       8d 09 71 	      sta	sidData+SV2PWL
    291  10ad		       8d 10 71 	      sta	sidData+SV3PWL
    292  10b0		       60		      rts
    293  10b1
    294  10b1
    295  10b1							;setAllOscillators:
    296  10b1							;sta SID1+0,y
    297  10b1							;sta SID1+7,y
    298  10b1							;sta SID1+14,y
    299  10b1							;sta SID2+0,y
    300  10b1							;sta SID2+7,y
    301  10b1							;sta SID2+14,y
    302  10b1							;sta sidData+0,y
    303  10b1							;sta sidData+7,y
    304  10b1							;sta sidData+14,y
    305  10b1							;rts
    306  10b1
    307  10b1
    308  10b1
    309  10b1				   kfiltOnOff
    310  10b1		       8c 6c 70 	      sty	filterStatus
    311  10b4				   setResonance
    312  10b4		       ac 6c 70 	      ldy	filterStatus
    313  10b7							;------------------
    314  10b7							;lda sidData+SFILTC
    315  10b7		       ad 97 70 	      lda	resonance
    316  10ba		       19 e1 10 	      ora	filtOrValue,y
    317  10bd		       39 e4 10 	      and	filtAndValue,y
    318  10c0		       8d 17 d4 	      sta	SID1+SFILTC
    319  10c3		       8d 17 71 	      sta	sidData+SFILTC
    320  10c6							;------------------
    321  10c6		       ad 17 71 	      lda	sidData+SFILTC
    322  10c9		       19 e1 10 	      ora	filtOrValue,y
    323  10cc		       39 e4 10 	      and	filtAndValue,y
    324  10cf		       8d 37 d4 	      sta	SID2+SFILTC
    325  10d2							;------------------
    326  10d2		       b9 e7 10 	      lda	filtDisableValue,y
    327  10d5		       8d 5c 70 	      sta	filterDisable
    328  10d8							;------------------
    329  10d8				   showFiltOnOff
    330  10d8		       b9 ea 10 	      lda	filtTextValue,y
    331  10db		       aa		      tax
    332  10dc		       a0 4c		      ldy	#FILTERTEXT2
    333  10de		       4c 99 0c 	      jmp	updateText
    334  10e1
    335  10e1
    336  10e1				   filtOrValue
    337  10e1		       0f 00 00 	      byte.b	$0F,0,0
    338  10e4				   filtAndValue
    339  10e4		       ff f0 f0 	      byte.b	$FF,$F0,$F0
    340  10e7				   filtDisableValue
    341  10e7		       00 00 01 	      byte.b	0,0,1
    342  10ea				   filtTextValue
    343  10ea		       04 00 60 	      byte.b	4,0,DISABLED
    344  10ed
    345  10ed				   ksetTune
    346  10ed		       8c 71 70 	      sty	tuneSetting
    347  10f0
    348  10f0		       98		      tya
    349  10f1		       38		      sec
    350  10f2		       e9 04		      sbc	#4
    351  10f4		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
    352  10f7
    353  10f7							;lda tuneArrPtrLL,y
    354  10f7							;sta tunePtrL
    355  10f7							;lda tuneArrPtrLH,y
    356  10f7							;sta tunePtrL+1
    357  10f7							;lda tuneArrPtrHL,y
    358  10f7							;sta tunePtrH
    359  10f7							;lda tuneArrPtrHH,y
    360  10f7							;sta tunePtrH+1
    361  10f7		       98		      tya
    362  10f8		       0a		      asl
    363  10f9		       0a		      asl
    364  10fa		       18		      clc
    365  10fb		       69 14		      adc	#TUNING
    366  10fd		       aa		      tax
    367  10fe		       a0 57		      ldy	#TUNINGTEXT
    368  1100		       4c 99 0c 	      jmp	updateText
    369  1103
    370  1103
    371  1103				   setFullScreenMode
    372  1103		       8d 67 70 	      sta	fullScreenMode
    373  1106		       c9 00		      cmp	#0
    374  1108		       f0 11		      beq	notFullScreen
    375  110a							;--------
    376  110a		       a9 00		      lda	#<(PTRNTEXTBASE)
    377  110c		       85 2b		      sta	lowTextPtr
    378  110e		       a9 04		      lda	#>(PTRNTEXTBASE)
    379  1110		       85 2c		      sta	lowTextPtr+1
    380  1112		       a9 00		      lda	#<(PTRNCOLORBASE)
    381  1114		       85 2d		      sta	lowColorPtr
    382  1116		       a9 d8		      lda	#>(PTRNCOLORBASE)
    383  1118		       85 2e		      sta	lowColorPtr+1
    384  111a		       60		      rts
    385  111b							;--------
    386  111b				   notFullScreen
    387  111b		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
    388  111d		       85 2b		      sta	lowTextPtr
    389  111f		       a9 04		      lda	#>(PTRNTEXTBASE+200)
    390  1121		       85 2c		      sta	lowTextPtr+1
    391  1123		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
    392  1125		       85 2d		      sta	lowColorPtr
    393  1127		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
    394  1129		       85 2e		      sta	lowColorPtr+1
    395  112b		       20 fa 0b 	      jsr	displayInit
    396  112e		       60		      rts
    397  112f
    398  112f				   setHelpMode
    399  112f		       8d 70 70 	      sta	helpMode
    400  1132		       60		      rts
    401  1133
    402  1133							;--------------------------------
    403  1133							; Set Video Mode
    404  1133							;--------------------------------
    405  1133				   setVideoMode
    406  1133		       8d 45 70 	      sta	videoMode
    407  1136		       8c 68 70 	      sty	videoText
    408  1139		       98		      tya
    409  113a		       18		      clc
    410  113b		       69 30		      adc	#"0"
    411  113d		       8d bc 04 	      sta	1024+VIDEOTEXT
    412  1140		       60		      rts
    413  1141
    414  1141							;--------------------------------
    415  1141							; Set Paddles
    416  1141							;--------------------------------
    417  1141				   setPaddles
    418  1141		       8d 29 70 	      sta	paddle
    419  1144		       0a		      asl
    420  1145		       d0 0c		      bne	noFilterReset
    421  1147		       ae 57 70 	      ldx	filter
    422  114a		       8e 16 d4 	      stx	SID1+SFILTH
    423  114d		       8e 36 d4 	      stx	SID2+SFILTH
    424  1150		       8d 16 71 	      sta	sidData+SFILTH
    425  1153				   noFilterReset
    426  1153		       a0 00		      ldy	#0
    427  1155		       8c 76 70 	      sty	paddleTop
    428  1158		       8c 77 70 	      sty	paddleBottom
    429  115b				   showPaddle
    430  115b		       0a		      asl
    431  115c		       aa		      tax
    432  115d		       a0 9c		      ldy	#PADDLETEXT
    433  115f		       4c 99 0c 	      jmp	updateText
    434  1162
    435  1162
    436  1162							;--------------------------------
    437  1162							; Set LFO Depth
    438  1162							;--------------------------------
    439  1162				   setLFODepth
    440  1162		       8d 49 70 	      sta	LFODepth
    441  1165							;showLFO:
    442  1165		       ac 70 70 	      ldy	helpMode
    443  1168		       f0 01		      beq	doShowLFO
    444  116a		       60		      rts
    445  116b				   doShowLFO
    446  116b		       a0 6c		      ldy	#LFODEPTHTEXT
    447  116d		       18		      clc
    448  116e		       69 30		      adc	#"0"
    449  1170		       99 00 04 	      sta	1024,y
    450  1173		       a9 20		      lda	#32
    451  1175		       a2 08		      ldx	#8
    452  1177		       60		      rts
    453  1178
    454  1178
    455  1178							;--------------------------------
    456  1178							; Set LFO Rate
    457  1178							;--------------------------------
    458  1178				   setLFORate
    459  1178		       8d 48 70 	      sta	LFORate
    460  117b				   showLFORate
    461  117b		       ac 70 70 	      ldy	helpMode
    462  117e		       f0 01		      beq	doShowLFORate
    463  1180		       60		      rts
    464  1181				   doShowLFORate
    465  1181		       a0 94		      ldy	#LFORATETEXT
    466  1183		       18		      clc
    467  1184		       69 30		      adc	#"0"
    468  1186		       99 00 04 	      sta	1024,y
    469  1189							;lda #32
    470  1189		       a9 02		      lda	#CYNTHCART_COLOR
    471  118b		       a2 08		      ldx	#8
    472  118d				   LFOClear
    473  118d							;sta 1064,x
    474  118d		       9d 00 d8 	      sta	55296,x
    475  1190		       ca		      dex
    476  1191		       10 fa		      bpl	LFOClear
    477  1193		       60		      rts
    478  1194
    479  1194							;--------------------------------
    480  1194							; Set Release for each OSC2 indpendently
    481  1194							;--------------------------------
    482  1194							; A = release OSC2 value
    483  1194				   setReleaseOSC2
    484  1194							;sta release
    485  1194		       8d 0d d4 	      sta	SID1+SV2SR
    486  1197		       8d 2d d4 	      sta	SID2+SV2SR
    487  119a		       8d 0d 71 	      sta	sidData+SV2SR
    488  119d		       60		      rts
    489  119e							;jmp showRelease
    490  119e							;----------------
    491  119e
    492  119e							;--------------------------------
    493  119e							; Set Release for each OSC3 indpendently
    494  119e							;--------------------------------
    495  119e							; A = release OSC2 value
    496  119e				   setReleaseOSC3
    497  119e							;sta release
    498  119e		       8d 14 d4 	      sta	SID1+SV3SR
    499  11a1		       8d 34 d4 	      sta	SID2+SV3SR
    500  11a4		       8d 14 71 	      sta	sidData+SV3SR
    501  11a7		       60		      rts
    502  11a8							;jmp showRelease
    503  11a8							;----------------
    504  11a8							;--------------------------------
    505  11a8							; Set Release
    506  11a8							;--------------------------------
    507  11a8							; A = release OSC1 value
    508  11a8							; X = release OSC2 value
    509  11a8							; Y = release OSC3 value
    510  11a8				   setRelease
    511  11a8		       8d 6a 70 	      sta	release
    512  11ab		       8d 06 d4 	      sta	SID1+SV1SR
    513  11ae		       8d 0d d4 	      sta	SID1+SV2SR
    514  11b1		       8d 14 d4 	      sta	SID1+SV3SR
    515  11b4		       8d 26 d4 	      sta	SID2+SV1SR
    516  11b7		       8d 2d d4 	      sta	SID2+SV2SR
    517  11ba		       8d 34 d4 	      sta	SID2+SV3SR
    518  11bd		       8d 06 71 	      sta	sidData+SV1SR
    519  11c0		       8d 0d 71 	      sta	sidData+SV2SR
    520  11c3		       8d 14 71 	      sta	sidData+SV3SR
    521  11c6							;----------------
    522  11c6				   showRelease
    523  11c6		       ac 70 70 	      ldy	helpMode
    524  11c9		       f0 01		      beq	doShowRelease
    525  11cb		       60		      rts
    526  11cc				   doShowRelease
    527  11cc		       29 0f		      and	#$0F
    528  11ce		       a8		      tay
    529  11cf		       b9 f9 11 	      lda	sixteenToTen,y
    530  11d2		       18		      clc
    531  11d3		       69 30		      adc	#"0"
    532  11d5		       8d 8a 04 	      sta	1024+RELTEXT
    533  11d8		       60		      rts
    534  11d9
    535  11d9		       a0 8a		      ldy	#RELTEXT
    536  11db		       a9 e0		      lda	#REL_SHORT
    537  11dd		       cd 6a 70 	      cmp	release
    538  11e0		       30 05		      bmi	notRel0
    539  11e2		       a9 30		      lda	#"0"
    540  11e4		       4c f5 11 	      jmp	setReleaseText
    541  11e7				   notRel0
    542  11e7		       a9 e9		      lda	#REL_MED
    543  11e9		       cd 6a 70 	      cmp	release
    544  11ec		       30 05		      bmi	notRel1
    545  11ee		       a9 31		      lda	#"1"
    546  11f0		       4c f5 11 	      jmp	setReleaseText
    547  11f3				   notRel1
    548  11f3		       a9 32		      lda	#"2"
    549  11f5				   setReleaseText
    550  11f5		       99 00 04 	      sta	1024,y
    551  11f8		       60		      rts
    552  11f9
    553  11f9				   sixteenToTen
    554  11f9		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
    555  1209
    556  1209
    557  1209				   setMidiMode
    558  1209		       8d f7 70 	      sta	midiMode
    559  120c				   showMidiMode
    560  120c		       a9 2f		      lda	#47
    561  120e		       8d e1 07 	      sta	2017
    562  1211		       ad 50 71 	      lda	midiEnabled
    563  1214		       d0 01		      bne	doShowMidiMode
    564  1216		       60		      rts
    565  1217				   doShowMidiMode
    566  1217		       a9 2f		      lda	#47
    567  1219		       8d dc 07 	      sta	2012
    568  121c		       8d d7 07 	      sta	2007
    569  121f		       ae f7 70 	      ldx	midiMode
    570  1222		       30 19		      bmi	showOmni
    571  1224							;sta 2010
    572  1224				   showChannel
    573  1224		       a9 20		      lda	#32
    574  1226		       8d d8 07 	      sta	2008
    575  1229		       a9 03		      lda	#3
    576  122b		       8d d9 07 	      sta	2009
    577  122e		       a9 08		      lda	#8
    578  1230		       8d da 07 	      sta	2010
    579  1233		       a9 31		      lda	#49
    580  1235		       18		      clc
    581  1236		       6d f7 70 	      adc	midiMode
    582  1239		       8d db 07 	      sta	2011
    583  123c		       60		      rts
    584  123d				   showOmni
    585  123d		       a9 0f		      lda	#15
    586  123f		       8d d8 07 	      sta	2008
    587  1242		       a9 0d		      lda	#13
    588  1244		       8d d9 07 	      sta	2009
    589  1247		       a9 0e		      lda	#14
    590  1249		       8d da 07 	      sta	2010
    591  124c		       a9 09		      lda	#9
    592  124e		       8d db 07 	      sta	2011
    593  1251
    594  1251		       20 18 13 	      jsr	showAdapter
    595  1254		       60		      rts
    596  1255
    597  1255							;--------------------------------
    598  1255							; Set Attack
    599  1255							;--------------------------------
    600  1255							; A = Attack value
    601  1255				   setAttack
    602  1255		       8d 69 70 	      sta	attack
    603  1258		       8d 0c d4 	      sta	SID1+SV2AD
    604  125b		       8d 13 d4 	      sta	SID1+SV3AD
    605  125e		       8d 2c d4 	      sta	SID2+SV2AD
    606  1261		       8d 33 d4 	      sta	SID2+SV3AD
    607  1264		       8d 05 d4 	      sta	SID1+SV1AD
    608  1267		       8d 25 d4 	      sta	SID2+SV1AD
    609  126a		       8d 0c 71 	      sta	sidData+SV2AD
    610  126d		       8d 13 71 	      sta	sidData+SV3AD
    611  1270		       8d 05 71 	      sta	sidData+SV1AD
    612  1273							;----------------
    613  1273				   showAttack
    614  1273		       ac 70 70 	      ldy	helpMode
    615  1276		       f0 01		      beq	doShowAttack
    616  1278		       60		      rts
    617  1279				   doShowAttack
    618  1279		       4a		      lsr
    619  127a		       4a		      lsr
    620  127b		       4a		      lsr
    621  127c		       4a		      lsr
    622  127d		       a8		      tay
    623  127e		       b9 f9 11 	      lda	sixteenToTen,y
    624  1281		       18		      clc
    625  1282		       69 30		      adc	#"0"
    626  1284		       8d 62 04 	      sta	1024+ATKTEXT
    627  1287		       60		      rts
    628  1288
    629  1288
    630  1288							;-----------------------------------
    631  1288							; Set Volume to A (for key command)
    632  1288							;-----------------------------------
    633  1288				   ksetVolume
    634  1288		       8d 1c 70 	      sta	volume
    635  128b
    636  128b
    637  128b							;-----------------------------------
    638  128b							; Set Volume
    639  128b							;-----------------------------------
    640  128b				   setVolume
    641  128b		       ad 24 70 	      lda	volModeRAM
    642  128e		       29 f0		      and	#$F0
    643  1290		       0d 1c 70 	      ora	volume
    644  1293		       8d 18 d4 	      sta	SID1+SVOLMODE
    645  1296		       8d 38 d4 	      sta	SID2+SVOLMODE
    646  1299		       8d 18 71 	      sta	sidData+SVOLMODE
    647  129c				   showVolume
    648  129c		       ac 70 70 	      ldy	helpMode
    649  129f		       f0 01		      beq	doShowVolume
    650  12a1		       60		      rts
    651  12a2				   doShowVolume
    652  12a2		       29 0f		      and	#$0F
    653  12a4		       aa		      tax
    654  12a5		       bd f9 11 	      lda	sixteenToTen,x
    655  12a8		       18		      clc
    656  12a9		       69 30		      adc	#"0"
    657  12ab		       8d a7 04 	      sta	1024+VOLTEXT
    658  12ae		       60		      rts
    659  12af
    660  12af		       aa		      tax
    661  12b0		       bd f9 11 	      lda	sixteenToTen,x
    662  12b3		       aa		      tax
    663  12b4		       a0 a7		      ldy	#VOLTEXT
    664  12b6		       a9 07		      lda	#VOLLOW
    665  12b8		       20 99 0c 	      jsr	updateText
    666  12bb		       60		      rts
    667  12bc
    668  12bc
    669  12bc							; set volume text
    670  12bc		       a0 a7		      ldy	#VOLTEXT
    671  12be		       a9 07		      lda	#VOLLOW
    672  12c0		       cd 1c 70 	      cmp	volume
    673  12c3		       30 05		      bmi	notLow
    674  12c5		       a2 50		      ldx	#VLOW
    675  12c7		       4c 99 0c 	      jmp	updateText
    676  12ca				   notLow
    677  12ca		       a9 0b		      lda	#VOLMED
    678  12cc		       cd 1c 70 	      cmp	volume
    679  12cf		       30 05		      bmi	notMed
    680  12d1		       a2 54		      ldx	#VMED
    681  12d3		       4c 99 0c 	      jmp	updateText
    682  12d6				   notMed
    683  12d6		       a2 58		      ldx	#VHIGH
    684  12d8		       4c 99 0c 	      jmp	updateText
    685  12db							;-------------------------------------
    686  12db
    687  12db
    688  12db							;-----------------------------------
    689  12db							; Set Octave
    690  12db							;-----------------------------------
    691  12db				   setOctave
    692  12db		       8d 6b 70 	      sta	octave
    693  12de		       aa		      tax
    694  12df		       bd 2d 29 	      lda	octaveTable,x
    695  12e2		       8d 22 70 	      sta	keyOffset
    696  12e5				   showOctave
    697  12e5		       ac 70 70 	      ldy	helpMode
    698  12e8		       f0 01		      beq	doShowOctave
    699  12ea		       60		      rts
    700  12eb				   doShowOctave
    701  12eb		       8a		      txa
    702  12ec		       18		      clc
    703  12ed		       69 30		      adc	#"0"
    704  12ef		       aa		      tax
    705  12f0		       8d 7f 04 	      sta	1024+OCTAVETEXT
    706  12f3		       60		      rts
    707  12f4
    708  12f4							;-----------------------------------
    709  12f4							; Set Filter
    710  12f4							;-----------------------------------
    711  12f4				   setFilter
    712  12f4		       8d 16 d4 	      sta	SID1+SFILTH
    713  12f7		       8d 36 d4 	      sta	SID2+SFILTH
    714  12fa		       8d 16 71 	      sta	sidData+SFILTH
    715  12fd
    716  12fd		       8d 57 70 	      sta	filter
    717  1300				   showFilter
    718  1300		       ac 70 70 	      ldy	helpMode
    719  1303		       f0 01		      beq	testFullScreenMode
    720  1305							;beq doShowFilter
    721  1305		       60		      rts
    722  1306				   testFullScreenMode
    723  1306		       ac 67 70 	      ldy	fullScreenMode
    724  1309		       f0 01		      beq	doShowFilter
    725  130b		       60		      rts
    726  130c				   doShowFilter
    727  130c		       4a		      lsr
    728  130d		       4a		      lsr
    729  130e		       4a		      lsr
    730  130f		       4a		      lsr
    731  1310		       4a		      lsr
    732  1311		       18		      clc
    733  1312		       69 30		      adc	#"0"
    734  1314				   endFilter
    735  1314		       8d 75 04 	      sta	1024+FILTERTEXT
    736  1317		       60		      rts
    737  1318
    738  1318
    739  1318							;-----------------------------------
    740  1318							; Set Midi mode
    741  1318							;-----------------------------------
    742  1318				   showAdapter
    743  1318							; Draw name of new sound mode on screen...
    744  1318		       ad 50 71 	      lda	midiEnabled
    745  131b		       0a		      asl
    746  131c		       0a		      asl
    747  131d		       0a		      asl
    748  131e							;lda modeNameOffsets,x
    749  131e							;lda fxNames,x
    750  131e		       aa		      tax
    751  131f		       a0 00		      ldy	#0
    752  1321				   drawMidiModeLoop
    753  1321							;lda modeNamesPolyphony,x
    754  1321		       bd fb 29 	      lda	midiModeNames,x
    755  1324		       c9 40		      cmp	#64
    756  1326		       30 02		      bmi	showSpaceZMidiMode
    757  1328		       e9 40		      sbc	#64
    758  132a				   showSpaceZMidiMode
    759  132a		       99 cf 07 	      sta	1024+40*24+15,y
    760  132d		       e8		      inx
    761  132e		       c8		      iny
    762  132f		       c0 08		      cpy	#8
    763  1331		       d0 ee		      bne	drawMidiModeLoop
    764  1333							; - - - - -
    765  1333							;inx ; Get polyphony value at end of name string...
    766  1333							;inx
    767  1333							;lda modeNamesPolyphony,x
    768  1333							;sta polyphony
    769  1333
    770  1333							;lda #8
    771  1333							;sta bufferSize
    772  1333
    773  1333		       60		      rts
    774  1334
    775  1334
    776  1334
    777  1334							;-----------------------------------
    778  1334							; Set FX mode with A,Y (for key command)
    779  1334							;-----------------------------------
    780  1334				   ksetFX
    781  1334		       8d 86 70 	      sta	fxType
    782  1337							;-----------------------------------
    783  1337							; Set FX mode
    784  1337							;-----------------------------------
    785  1337				   setFX
    786  1337		       ad 70 70 	      lda	helpMode
    787  133a		       f0 01		      beq	doShowFX
    788  133c		       60		      rts
    789  133d				   doShowFX
    790  133d							;lda fxType
    791  133d
    792  133d							; Draw name of new sound mode on screen...
    793  133d		       ad 86 70 	      lda	fxType
    794  1340		       0a		      asl
    795  1341		       0a		      asl
    796  1342		       0a		      asl
    797  1343							;lda modeNameOffsets,x
    798  1343							;lda fxNames,x
    799  1343		       aa		      tax
    800  1344		       a0 00		      ldy	#0
    801  1346				   drawModeLoopFX
    802  1346							;lda modeNamesPolyphony,x
    803  1346		       bd 23 2a 	      lda	fxNames,x
    804  1349		       c9 40		      cmp	#64
    805  134b		       30 02		      bmi	showSpaceZFX
    806  134d		       e9 40		      sbc	#64
    807  134f				   showSpaceZFX
    808  134f		       99 af 04 	      sta	1024+FXTEXT,y
    809  1352		       e8		      inx
    810  1353		       c8		      iny
    811  1354		       c0 05		      cpy	#5
    812  1356		       d0 ee		      bne	drawModeLoopFX
    813  1358							; - - - - -
    814  1358							;inx ; Get polyphony value at end of name string...
    815  1358							;inx
    816  1358							;lda modeNamesPolyphony,x
    817  1358							;sta polyphony
    818  1358
    819  1358							;lda #8
    820  1358							;sta bufferSize
    821  1358
    822  1358		       60		      rts
    823  1359
    824  1359
    825  1359
    826  1359				   portSpeedTable
    827  1359		       06 07 09 	      byte.b	6,7,9
    828  135c							;byte 5,7,9
    829  135c
    830  135c							;-----------------------------------
    831  135c							; set port with A,Y (for key command)
    832  135c							;-----------------------------------
    833  135c				   ksetMode
    834  135c							;sta portOn
    835  135c		       8d 1d 70 	      sta	soundMode
    836  135f							;sty portSpd
    837  135f							; . . . . . . . . . .
    838  135f							;-----------------------------------
    839  135f							; Set sound mode
    840  135f							;-----------------------------------
    841  135f				   setMode
    842  135f				   showModeName
    843  135f		       ac 70 70 	      ldy	helpMode
    844  1362		       f0 01		      beq	doShowModeName
    845  1364		       60		      rts
    846  1365				   doShowModeName
    847  1365
    848  1365		       ad 1d 70 	      lda	soundMode	; This probably needs work
    849  1368
    850  1368							; Draw name of new sound mode on screen...
    851  1368		       ae 1d 70 	      ldx	soundMode
    852  136b		       bd 4f 33 	      lda	modeNameOffsets,x
    853  136e		       aa		      tax
    854  136f		       a0 00		      ldy	#0
    855  1371				   drawModeLoop
    856  1371		       bd cf 32 	      lda	modeNamesPolyphony,x
    857  1374		       c9 40		      cmp	#64
    858  1376		       30 02		      bmi	showSpaceZ
    859  1378		       e9 40		      sbc	#64
    860  137a				   showSpaceZ
    861  137a		       99 2d 04 	      sta	1024+MODETEXT,y
    862  137d		       e8		      inx
    863  137e		       c8		      iny
    864  137f		       c0 05		      cpy	#5
    865  1381		       d0 ee		      bne	drawModeLoop
    866  1383							; - - - - -
    867  1383		       e8		      inx		; Get polyphony value at end of name string...
    868  1384		       e8		      inx
    869  1385		       bd cf 32 	      lda	modeNamesPolyphony,x
    870  1388		       8d 84 70 	      sta	polyphony
    871  138b
    872  138b		       a9 08		      lda	#8
    873  138d		       8d 80 70 	      sta	bufferSize
    874  1390
    875  1390
    876  1390							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    877  1390							;sta 1024+161 ;DEBUG
    878  1390							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    879  1390
    880  1390
    881  1390							; set up pointer to portamento speed array
    882  1390							; (which is the tuning array)
    883  1390							;lda portSpd
    884  1390							;clc
    885  1390							;adc #4
    886  1390
    887  1390							; New version of code above...
    888  1390		       ad 1d 70 	      lda	soundMode
    889  1393		       29 0f		      and	#$0F	; Get portamento speed
    890  1395		       a8		      tay
    891  1396		       b9 59 13 	      lda	portSpeedTable,y
    892  1399
    893  1399							;clc
    894  1399							;asl ; X2
    895  1399							;adc #5
    896  1399
    897  1399		       a8		      tay
    898  139a							;	ldy #5 ; portSpd DEBUG
    899  139a		       b9 c5 33 	      lda	tuneArrPtrLL,y
    900  139d		       85 35		      sta	portPtrL
    901  139f		       b9 cf 33 	      lda	tuneArrPtrLH,y
    902  13a2		       85 36		      sta	portPtrL+1
    903  13a4		       b9 d9 33 	      lda	tuneArrPtrHL,y
    904  13a7		       85 47		      sta	portPtrH
    905  13a9		       b9 e3 33 	      lda	tuneArrPtrHH,y
    906  13ac		       85 48		      sta	portPtrH+1
    907  13ae		       60		      rts
    908  13af
    909  13af
    910  13af							;----------------------------------------
    911  13af							; subroutine to set up patch
    912  13af							; (patch # stored in Y)
    913  13af							;----------------------------------------
    914  13af				   setPatch
    915  13af		       8c 47 70 	      sty	patchSetY
    916  13b2
    917  13b2		       b9 3d 28 	      lda	patchVol,y
    918  13b5		       8d 1c 70 	      sta	volume
    919  13b8
    920  13b8		       b9 01 28 	      lda	patchPaddle,y
    921  13bb		       20 41 11 	      jsr	setPaddles
    922  13be
    923  13be							;.....................
    924  13be		       20 7a 0a 	      jsr	midiPanic
    925  13c1							;.....................
    926  13c1
    927  13c1							; Reset modulation values
    928  13c1		       a9 7f		      lda	#127
    929  13c3		       8d 9c 70 	      sta	filterModValue
    930  13c6		       8d 9e 70 	      sta	pwModValue
    931  13c9
    932  13c9		       ac 47 70 	      ldy	patchSetY
    933  13cc		       b9 1f 28 	      lda	newPatchFiltCut,y
    934  13cf		       8d 9d 70 	      sta	filterSetValue
    935  13d2							;jsr setFilter
    936  13d2
    937  13d2							;lda patchFilt,y
    938  13d2							;sta SID1+SV1PWL
    939  13d2
    940  13d2
    941  13d2		       ac 47 70 	      ldy	patchSetY
    942  13d5		       b9 10 27 	      lda	patchSoundMode,y
    943  13d8		       8d 1d 70 	      sta	soundMode
    944  13db		       20 5f 13 	      jsr	setMode
    945  13de
    946  13de		       ac 47 70 	      ldy	patchSetY
    947  13e1		       b9 5b 28 	      lda	patchPWL,y
    948  13e4		       8d 02 d4 	      sta	SID1+SV1PWL
    949  13e7		       8d 09 d4 	      sta	SID1+SV2PWL
    950  13ea		       8d 10 d4 	      sta	SID1+SV3PWL
    951  13ed		       8d 22 d4 	      sta	SID2+SV1PWL
    952  13f0		       8d 29 d4 	      sta	SID2+SV2PWL
    953  13f3		       8d 30 d4 	      sta	SID2+SV3PWL
    954  13f6		       8d 02 71 	      sta	sidData+SV1PWL
    955  13f9		       8d 09 71 	      sta	sidData+SV2PWL
    956  13fc		       8d 10 71 	      sta	sidData+SV3PWL
    957  13ff
    958  13ff		       ac 47 70 	      ldy	patchSetY
    959  1402		       b9 79 28 	      lda	patchPWH,y
    960  1405		       8d 03 d4 	      sta	SID1+SV1PWH
    961  1408		       8d 0a d4 	      sta	SID1+SV2PWH
    962  140b		       8d 11 d4 	      sta	SID1+SV3PWH
    963  140e		       8d 23 d4 	      sta	SID2+SV1PWH
    964  1411		       8d 2a d4 	      sta	SID2+SV2PWH
    965  1414		       8d 31 d4 	      sta	SID2+SV3PWH
    966  1417		       8d 03 71 	      sta	sidData+SV1PWH
    967  141a		       8d 0a 71 	      sta	sidData+SV2PWH
    968  141d		       8d 11 71 	      sta	sidData+SV3PWH
    969  1420
    970  1420		       ac 47 70 	      ldy	patchSetY
    971  1423		       b9 97 28 	      lda	patchWave1,y
    972  1426		       8d 30 70 	      sta	WaveType
    973  1429		       b9 b5 28 	      lda	patchWave2,y
    974  142c		       8d 37 70 	      sta	WaveType2
    975  142f		       b9 d3 28 	      lda	patchWave3,y
    976  1432		       8d 3e 70 	      sta	WaveType3
    977  1435
    978  1435		       ac 47 70 	      ldy	patchSetY
    979  1438		       b9 4d 27 	      lda	patchLFO,y
    980  143b		       29 0f		      and	#$0F
    981  143d		       8c 0c 70 	      sty	temp
    982  1440		       20 78 11 	      jsr	setLFORate
    983  1443		       ac 0c 70 	      ldy	temp
    984  1446		       b9 4d 27 	      lda	patchLFO,y
    985  1449		       29 f0		      and	#$F0
    986  144b		       4a		      lsr
    987  144c		       4a		      lsr
    988  144d		       4a		      lsr
    989  144e		       4a		      lsr
    990  144f							;lda #2
    991  144f		       20 62 11 	      jsr	setLFODepth
    992  1452
    993  1452		       ac 0c 70 	      ldy	temp
    994  1455		       b9 89 27 	      lda	patchAD,y
    995  1458							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
    996  1458							;lda #$F0
    997  1458		       20 55 12 	      jsr	setAttack
    998  145b		       ac 47 70 	      ldy	patchSetY
    999  145e
   1000  145e		       ac 0c 70 	      ldy	temp
   1001  1461		       b9 a7 27 	      lda	patchSR1,y
   1002  1464		       20 a8 11 	      jsr	setRelease
   1003  1467		       ac 0c 70 	      ldy	temp
   1004  146a		       b9 c5 27 	      lda	patchSR2,y
   1005  146d		       20 94 11 	      jsr	setReleaseOSC2
   1006  1470		       b9 e3 27 	      lda	patchSR3,y
   1007  1473		       20 9e 11 	      jsr	setReleaseOSC3
   1008  1476
   1009  1476		       ac 47 70 	      ldy	patchSetY
   1010  1479
   1011  1479		       b9 f1 28 	      lda	patchFilt,y
   1012  147c		       ae 5c 70 	      ldx	filterDisable
   1013  147f		       f0 02		      beq	skipFilterDisable
   1014  1481		       29 f0		      and	#$F0
   1015  1483				   skipFilterDisable
   1016  1483		       8d 17 d4 	      sta	SID1+SFILTC
   1017  1486		       8d 37 d4 	      sta	SID2+SFILTC
   1018  1489		       8d 17 71 	      sta	sidData+SFILTC
   1019  148c		       29 01		      and	#$01
   1020  148e		       f0 07		      beq	skipFilterOnText
   1021  1490		       a0 4c		      ldy	#FILTERTEXT2
   1022  1492		       a2 04		      ldx	#4
   1023  1494		       20 99 0c 	      jsr	updateText
   1024  1497				   skipFilterOnText
   1025  1497		       ac 47 70 	      ldy	patchSetY
   1026  149a
   1027  149a		       b9 0f 29 	      lda	patchVolMode,y
   1028  149d		       29 f0		      and	#$F0
   1029  149f		       0d 1c 70 	      ora	volume
   1030  14a2		       8d 24 70 	      sta	volModeRAM
   1031  14a5		       20 8b 12 	      jsr	setVolume
   1032  14a8		       ac 47 70 	      ldy	patchSetY
   1033  14ab
   1034  14ab		       b9 6b 27 	      lda	patchOctave,y
   1035  14ae		       20 db 12 	      jsr	setOctave
   1036  14b1		       ac 47 70 	      ldy	patchSetY
   1037  14b4
   1038  14b4		       b9 2f 27 	      lda	patchFX,y
   1039  14b7		       8d 86 70 	      sta	fxType
   1040  14ba		       20 37 13 	      jsr	setFX
   1041  14bd
   1042  14bd		       20 c1 14 	      jsr	showPatchName
   1043  14c0
   1044  14c0		       60		      rts
   1045  14c1							;------------------------ end of setpatch
   1046  14c1
   1047  14c1				   showPatchName
   1048  14c1		       ad 70 70 	      lda	helpMode
   1049  14c4		       f0 01		      beq	doShowPatchName
   1050  14c6		       60		      rts
   1051  14c7				   doShowPatchName
   1052  14c7		       ad 47 70 	      lda	patchSetY
   1053  14ca		       29 f0		      and	#%11110000
   1054  14cc		       d0 1f		      bne	patchNameSecondBank
   1055  14ce							;tay
   1056  14ce		       ac 47 70 	      ldy	patchSetY
   1057  14d1		       c8		      iny
   1058  14d2		       98		      tya
   1059  14d3		       0a		      asl
   1060  14d4		       0a		      asl
   1061  14d5		       0a		      asl
   1062  14d6		       0a		      asl
   1063  14d7		       a8		      tay
   1064  14d8		       88		      dey
   1065  14d9		       a2 0f		      ldx	#15
   1066  14db				   patchText
   1067  14db		       b9 10 25 	      lda	patchName,y
   1068  14de		       c9 40		      cmp	#64
   1069  14e0		       30 03		      bmi	pshowSpace
   1070  14e2		       38		      sec
   1071  14e3		       e9 40		      sbc	#64
   1072  14e5				   pshowSpace
   1073  14e5		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1074  14e8		       88		      dey
   1075  14e9		       ca		      dex
   1076  14ea		       10 ef		      bpl	patchText
   1077  14ec		       60		      rts
   1078  14ed
   1079  14ed				   patchNameSecondBank
   1080  14ed							;tay
   1081  14ed		       ac 47 70 	      ldy	patchSetY
   1082  14f0		       c8		      iny
   1083  14f1		       98		      tya
   1084  14f2		       0a		      asl
   1085  14f3		       0a		      asl
   1086  14f4		       0a		      asl
   1087  14f5		       0a		      asl
   1088  14f6		       a8		      tay
   1089  14f7		       88		      dey
   1090  14f8		       a2 0f		      ldx	#15
   1091  14fa				   patchText2
   1092  14fa		       b9 10 26 	      lda	patchName2,y
   1093  14fd		       c9 40		      cmp	#64
   1094  14ff		       30 03		      bmi	pshowSpace2
   1095  1501		       38		      sec
   1096  1502		       e9 40		      sbc	#64
   1097  1504				   pshowSpace2
   1098  1504		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1099  1507		       88		      dey
   1100  1508		       ca		      dex
   1101  1509		       10 ef		      bpl	patchText2
   1102  150b		       60		      rts
   1103  150c
   1104  150c
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sound.asm LEVEL 2 PASS 2
      0  150c					      include	"cynth_sound.asm"
      1  150c				   processSoundDriver
      2  150c							; determine whether to use portamento player
      3  150c							; or regular player...
      4  150c		       ad 1d 70 	      lda	soundMode
      5  150f		       f0 28		      beq	polyMode
      6  1511		       29 20		      and	#MONO_MASK
      7  1513		       f0 03		      beq	nextSoundModeCheck1
      8  1515		       4c 59 15 	      jmp	playMono
      9  1518				   nextSoundModeCheck1
     10  1518		       ad 1d 70 	      lda	soundMode
     11  151b		       29 10		      and	#PORT_MASK
     12  151d		       f0 03		      beq	nextSoundModeCheck2
     13  151f		       4c c8 19 	      jmp	playPort
     14  1522				   nextSoundModeCheck2
     15  1522		       ad 1d 70 	      lda	soundMode
     16  1525		       29 40		      and	#ARP_MASK
     17  1527		       f0 03		      beq	nextSoundModeCheck3
     18  1529		       4c 19 16 	      jmp	playArp
     19  152c				   nextSoundModeCheck3
     20  152c		       ad 1d 70 	      lda	soundMode
     21  152f		       29 08		      and	#CHAN6_MASK
     22  1531		       f0 03		      beq	nextSoundModeCheck4
     23  1533		       4c 98 16 	      jmp	play6Chan
     24  1536				   nextSoundModeCheck4
     25  1536		       4c b4 15 	      jmp	playFifths	; Otherwise, it's a 5ths mode
     26  1539							;lda soundMode
     27  1539							;cmp #MODE_5THS
     28  1539							;bne endSoundMode
     29  1539							;jmp playFifths
     30  1539							;endSoundMode:
     31  1539							;brk ; Shouldn't ever reach this point in code
     32  1539
     33  1539
     34  1539							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     35  1539							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
     36  1539							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     37  1539				   polyMode
     38  1539		       a2 02		      ldx	#2
     39  153b				   polyCopyLoop
     40  153b		       bd a0 70 	      lda	noteNumArray,x
     41  153e		       9d b0 70 	      sta	playNoteArray,x
     42  1541		       ca		      dex
     43  1542		       10 f7		      bpl	polyCopyLoop
     44  1544
     45  1544		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
     46  1547		       8d b3 70 	      sta	playNoteArray+3
     47  154a		       ad a1 70 	      lda	noteNumArray+1
     48  154d		       8d b4 70 	      sta	playNoteArray+4
     49  1550		       ad a2 70 	      lda	noteNumArray+2
     50  1553		       8d b5 70 	      sta	playNoteArray+5
     51  1556
     52  1556		       4c be 18 	      jmp	sixVoicePlayer
     53  1559
     54  1559							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     55  1559							; MONO-STACK SOUND DRIVER
     56  1559							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     57  1559				   playMono
     58  1559		       ad a0 70 	      lda	noteNumArray
     59  155c				   playMonoWithA
     60  155c		       8d 0c 70 	      sta	temp
     61  155f		       8d b0 70 	      sta	playNoteArray+0
     62  1562		       c9 ff		      cmp	#255
     63  1564		       f0 29		      beq	monoMute
     64  1566		       ae 1d 70 	      ldx	soundMode
     65  1569							;dex
     66  1569							;beq noRaiseOctave
     67  1569		       e0 21		      cpx	#MODE_MONO2
     68  156b		       f0 07		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
     69  156d		       e0 32		      cpx	#MODE_MONOPORT2
     70  156f		       f0 03		      beq	noRaiseOctave
     71  1571							;-------------------------------------
     72  1571		       18		      clc
     73  1572		       69 0c		      adc	#12
     74  1574				   noRaiseOctave
     75  1574		       8d b1 70 	      sta	playNoteArray+1
     76  1577							;lda noteNumArray
     77  1577		       ad 0c 70 	      lda	temp
     78  157a		       ae 1d 70 	      ldx	soundMode
     79  157d		       e0 21		      cpx	#MODE_MONO2
     80  157f		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
     81  1581		       38		      sec
     82  1582		       e9 0c		      sbc	#12
     83  1584		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
     84  1586		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
     85  1589							;-------------------------------------
     86  1589				   noDropOctave
     87  1589		       8d b2 70 	      sta	playNoteArray+2
     88  158c		       4c 95 15 	      jmp	doubleToStereo
     89  158f				   monoMute
     90  158f		       8d b1 70 	      sta	playNoteArray+1
     91  1592		       8d b2 70 	      sta	playNoteArray+2
     92  1595
     93  1595				   doubleToStereo
     94  1595		       ad b0 70 	      lda	playNoteArray+0
     95  1598		       8d b3 70 	      sta	playNoteArray+3
     96  159b		       ad b1 70 	      lda	playNoteArray+1
     97  159e		       8d b4 70 	      sta	playNoteArray+4
     98  15a1		       ad b2 70 	      lda	playNoteArray+2
     99  15a4		       8d b5 70 	      sta	playNoteArray+5
    100  15a7
    101  15a7							;;- NEW! ------------------------------;;
    102  15a7		       ad 1d 70 	      lda	soundMode
    103  15aa		       29 10		      and	#PORT_MASK
    104  15ac		       f0 03		      beq	continueToSixVoice7
    105  15ae		       4c d3 19 	      jmp	portPlayer	; SKIP TO PLAYER
    106  15b1							;jmp playPort ; ORIGINAL
    107  15b1							;;-------------------------------------;;
    108  15b1
    109  15b1				   continueToSixVoice7
    110  15b1		       4c be 18 	      jmp	sixVoicePlayer
    111  15b4
    112  15b4							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    113  15b4							; 5THS SOUND DRIVER (DEFAULT)
    114  15b4							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    115  15b4				   playFifths
    116  15b4							;jmp polyMode ; DEBUG!
    117  15b4		       20 23 21 	      jsr	doSort
    118  15b7		       a2 02		      ldx	#2
    119  15b9				   fifthsCopyLoop
    120  15b9		       bd a0 70 	      lda	noteNumArray,x
    121  15bc		       9d b0 70 	      sta	playNoteArray,x
    122  15bf		       ca		      dex
    123  15c0		       10 f7		      bpl	fifthsCopyLoop
    124  15c2							; Add 5th
    125  15c2		       ad b0 70 	      lda	playNoteArray
    126  15c5		       c9 ff		      cmp	#255
    127  15c7		       f0 26		      beq	end5ths
    128  15c9		       ad b1 70 	      lda	playNoteArray+1
    129  15cc		       c9 ff		      cmp	#255
    130  15ce		       d0 0c		      bne	checkThird
    131  15d0							; Found a note and an empty slot, put 5th in second slot
    132  15d0		       ad b0 70 	      lda	playNoteArray
    133  15d3		       18		      clc
    134  15d4		       69 07		      adc	#7
    135  15d6		       8d b1 70 	      sta	playNoteArray+1
    136  15d9		       4c ef 15 	      jmp	end5ths
    137  15dc
    138  15dc				   checkThird
    139  15dc		       ad b2 70 	      lda	playNoteArray+2
    140  15df		       c9 ff		      cmp	#255
    141  15e1		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
    142  15e3							; Third slot is free, so put 5th is 3rd slot
    143  15e3		       ad b1 70 	      lda	playNoteArray+1
    144  15e6		       18		      clc
    145  15e7		       69 07		      adc	#7
    146  15e9		       8d b2 70 	      sta	playNoteArray+2
    147  15ec		       4c ef 15 	      jmp	end5ths
    148  15ef
    149  15ef				   end5ths
    150  15ef		       ad b0 70 	      lda	playNoteArray+0
    151  15f2		       8d b3 70 	      sta	playNoteArray+3
    152  15f5		       ad b1 70 	      lda	playNoteArray+1
    153  15f8		       8d b4 70 	      sta	playNoteArray+4
    154  15fb		       ad b2 70 	      lda	playNoteArray+2
    155  15fe		       8d b5 70 	      sta	playNoteArray+5
    156  1601
    157  1601		       ad 1d 70 	      lda	soundMode
    158  1604		       c9 02		      cmp	#MODE_5PORT
    159  1606		       f0 03		      beq	playPort5th
    160  1608		       4c be 18 	      jmp	sixVoicePlayer
    161  160b				   playPort5th
    162  160b		       4c d3 19 	      jmp	portPlayer
    163  160e
    164  160e
    165  160e
    166  160e
    167  160e				   arpSpeedTable
    168  160e		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
    169  1619
    170  1619							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    171  1619							; ARP STEREO SOUND DRIVER
    172  1619							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    173  1619				   playArp
    174  1619
    175  1619							; Figure out arp speed setting...
    176  1619		       ad 1d 70 	      lda	soundMode
    177  161c		       29 0f		      and	#$0F
    178  161e		       aa		      tax
    179  161f		       bd 0e 16 	      lda	arpSpeedTable,x
    180  1622		       8d 0c 70 	      sta	temp
    181  1625
    182  1625		       ae 1d 70 	      ldx	soundMode
    183  1628		       e0 43		      cpx	#MODE_ARP4
    184  162a		       f0 35		      beq	playArpDown
    185  162c		       e0 44		      cpx	#MODE_ARP5
    186  162e		       f0 31		      beq	playArpDown
    187  1630
    188  1630							;***********
    189  1630							; ARP UP
    190  1630							;***********
    191  1630							; Increment arpOffset pointer...
    192  1630		       ad 03 70 	      lda	Frame
    193  1633		       2d 0c 70 	      and	temp	; Arp speed
    194  1636		       d0 03		      bne	skipArpAdvance
    195  1638		       ee 85 70 	      inc	arpOffset
    196  163b				   skipArpAdvance
    197  163b
    198  163b							; Sort note buffer
    199  163b		       20 23 21 	      jsr	doSort
    200  163e
    201  163e							; Count the number of notes...
    202  163e		       a2 00		      ldx	#0
    203  1640		       a9 ff		      lda	#255
    204  1642				   noteCount
    205  1642		       dd a0 70 	      cmp	noteNumArray,x
    206  1645		       f0 06		      beq	quitNoteCount
    207  1647		       e8		      inx
    208  1648		       ec 80 70 	      cpx	bufferSize
    209  164b		       d0 f5		      bne	noteCount
    210  164d				   quitNoteCount
    211  164d							; X now contains the note count
    212  164d
    213  164d							; Make sure arpOffset isn't past end...
    214  164d		       ca		      dex
    215  164e		       ec 85 70 	      cpx	arpOffset
    216  1651		       10 05		      bpl	noArpOffsetReset
    217  1653		       a9 00		      lda	#0	; Reset to zero
    218  1655		       8d 85 70 	      sta	arpOffset
    219  1658				   noArpOffsetReset
    220  1658
    221  1658							; Play single arp note...
    222  1658		       ac 85 70 	      ldy	arpOffset
    223  165b		       b9 a0 70 	      lda	noteNumArray,y
    224  165e
    225  165e		       4c 5c 15 	      jmp	playMonoWithA
    226  1661
    227  1661							;lda soundMode
    228  1661							;and #PORT_MASK
    229  1661							;beq nextSoundModeCheck2
    230  1661							;jmp playPort
    231  1661
    232  1661
    233  1661							;***********
    234  1661							; ARP DOWN
    235  1661							;***********
    236  1661				   playArpDown
    237  1661							; Decrement arpOffset pointer...
    238  1661		       ad 03 70 	      lda	Frame
    239  1664		       2d 0c 70 	      and	temp	; Arp speed
    240  1667		       d0 03		      bne	skipArpAdvance2
    241  1669		       ce 85 70 	      dec	arpOffset
    242  166c				   skipArpAdvance2
    243  166c
    244  166c							; Sort note buffer
    245  166c		       20 23 21 	      jsr	doSort
    246  166f
    247  166f							; Count the number of notes...
    248  166f		       a2 00		      ldx	#0
    249  1671		       a9 ff		      lda	#255
    250  1673				   noteCount2
    251  1673		       dd a0 70 	      cmp	noteNumArray,x
    252  1676		       f0 06		      beq	quitNoteCount2
    253  1678		       e8		      inx
    254  1679		       ec 80 70 	      cpx	bufferSize
    255  167c		       30 f5		      bmi	noteCount2
    256  167e				   quitNoteCount2
    257  167e							; X now contains the note count
    258  167e		       8e 0c 70 	      stx	temp
    259  1681
    260  1681							; Make sure arpOffset isn't at zero...
    261  1681		       ad 85 70 	      lda	arpOffset
    262  1684		       10 09		      bpl	noArpOffsetReset2
    263  1686		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
    264  1689		       f0 01		      beq	skipTempDecrement
    265  168b		       ca		      dex
    266  168c				   skipTempDecrement
    267  168c		       8e 85 70 	      stx	arpOffset
    268  168f				   noArpOffsetReset2
    269  168f
    270  168f							; Play single arp note...
    271  168f		       ac 85 70 	      ldy	arpOffset
    272  1692		       b9 a0 70 	      lda	noteNumArray,y
    273  1695
    274  1695		       4c 5c 15 	      jmp	playMonoWithA
    275  1698
    276  1698
    277  1698							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    278  1698							; 6-CHANNEL MONO SOUND DRIVER
    279  1698							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    280  1698				   play6Chan
    281  1698		       ad a0 70 	      lda	noteNumArray+0
    282  169b		       8d b0 70 	      sta	playNoteArray+0
    283  169e		       ad a1 70 	      lda	noteNumArray+1
    284  16a1		       8d b4 70 	      sta	playNoteArray+4
    285  16a4		       ad a2 70 	      lda	noteNumArray+2
    286  16a7		       8d b2 70 	      sta	playNoteArray+2
    287  16aa
    288  16aa		       ad a3 70 	      lda	noteNumArray+3
    289  16ad		       8d b3 70 	      sta	playNoteArray+3
    290  16b0		       ad a4 70 	      lda	noteNumArray+4
    291  16b3		       8d b1 70 	      sta	playNoteArray+1
    292  16b6		       ad a5 70 	      lda	noteNumArray+5
    293  16b9		       8d b5 70 	      sta	playNoteArray+5
    294  16bc
    295  16bc		       4c be 18 	      jmp	sixVoicePlayer
    296  16bf
    297  16bf
    298  16bf				   retuneNoteShiftTable
    299  16bf		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
    300  16d8		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
    301  16f1		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
    302  170a		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
    303  1722		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    304  1728		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    305  1741		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    306  175a
    307  175a							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    308  175a							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    309  175a							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
    310  175a							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
    311  175a		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
    312  1773		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
    313  178c		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
    314  17a5		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
    315  17be
    316  17be				   retuneTable
    317  17be		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    318  17d7		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    319  17f0		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    320  1809		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    321  1822		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    322  1828		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    323  1841		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    324  185a		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    325  1873		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    326  188c		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    327  18a5		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    328  18be							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    329  18be
    330  18be							;************************************************
    331  18be							; 6-VOICE SOUND DRIVER
    332  18be							;************************************************
    333  18be				   sixVoicePlayer
    334  18be
    335  18be							;inc 1024 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    336  18be
    337  18be							; Calculate master tuning...
    338  18be		       ad f3 70 	      lda	systemTuning
    339  18c1		       18		      clc
    340  18c2		       6d f0 70 	      adc	midiTuning
    341  18c5		       8d f4 70 	      sta	masterTuning
    342  18c8		       a8		      tay
    343  18c9
    344  18c9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    345  18c9							; DEBUG - SHOW TUNING DATA
    346  18c9				  -	      IF	DEBUG_DISPLAY=1
    347  18c9				  -	      tya
    348  18c9				  -	      sta	temp
    349  18c9				  -	      ldy	#20
    350  18c9				  -	      ldx	#20
    351  18c9				  -	      jsr	displayHex
    352  18c9				  -	      lda	temp
    353  18c9				  -	      ldy	temp
    354  18c9					      ENDIF
    355  18c9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  18c9
    357  18c9		       b9 be 17 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
    358  18cc		       18		      clc
    359  18cd		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
    360  18cf
    361  18cf							;inc 1025 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    362  18cf
    363  18cf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  18cf							; DEBUG - SHOW TUNING DATA
    365  18cf				  -	      IF	DEBUG_DISPLAY=1
    366  18cf				  -	      sta	temp
    367  18cf				  -	      ldy	#21
    368  18cf				  -	      ldx	#20
    369  18cf				  -	      jsr	displayHex
    370  18cf				  -	      lda	temp
    371  18cf				  -	      ldy	temp
    372  18cf					      ENDIF
    373  18cf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    374  18cf
    375  18cf		       a8		      tay
    376  18d0		       b9 c5 33 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
    377  18d3		       85 22		      sta	tunePtrL
    378  18d5		       b9 cf 33 	      lda	tuneArrPtrLH,y
    379  18d8		       85 23		      sta	tunePtrL+1
    380  18da		       b9 d9 33 	      lda	tuneArrPtrHL,y
    381  18dd		       85 24		      sta	tunePtrH
    382  18df		       b9 e3 33 	      lda	tuneArrPtrHH,y
    383  18e2		       85 25		      sta	tunePtrH+1
    384  18e4
    385  18e4							;inc 1026 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    386  18e4
    387  18e4							; Look up note shift from master tuning...
    388  18e4		       ac f4 70 	      ldy	masterTuning
    389  18e7		       b9 bf 16 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
    390  18ea		       8d f6 70 	      sta	noteShift
    391  18ed							; - - - - - - - - - - - - -
    392  18ed		       a2 05		      ldx	#5
    393  18ef				   shiftNoteLoop
    394  18ef		       bd b0 70 	      lda	playNoteArray,x
    395  18f2		       c9 ff		      cmp	#255
    396  18f4		       f0 07		      beq	skipShiftNote
    397  18f6		       18		      clc
    398  18f7		       6d f6 70 	      adc	noteShift
    399  18fa		       9d b0 70 	      sta	playNoteArray,x
    400  18fd				   skipShiftNote
    401  18fd		       ca		      dex
    402  18fe		       10 ef		      bpl	shiftNoteLoop
    403  1900
    404  1900							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  1900							; DEBUG - SHOW TUNING DATA
    406  1900				  -	      IF	DEBUG_DISPLAY=1
    407  1900				  -	      sta	temp
    408  1900				  -	      ldy	#22
    409  1900				  -	      ldx	#20
    410  1900				  -	      jsr	displayHex
    411  1900				  -	      lda	temp
    412  1900				  -	      ldy	temp
    413  1900					      ENDIF
    414  1900							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    415  1900
    416  1900							; For each voice on SID #1...
    417  1900		       a2 02		      ldx	#2
    418  1902				   NsetRegsSidA
    419  1902		       8e 0c 70 	      stx	temp	; save current voice number
    420  1905		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
    421  1908		       bd 48 29 	      lda	voiceOffset,x	;
    422  190b		       aa		      tax
    423  190c		       c0 ff		      cpy	#255
    424  190e		       d0 04		      bne	NsoundOnSidA
    425  1910		       a9 00		      lda	#0
    426  1912		       f0 3f		      beq	NsoundOffSidA
    427  1914				   NsoundOnSidA
    428  1914
    429  1914							;inc 1027 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    430  1914
    431  1914							; load note and deal
    432  1914							; with tuning ------;
    433  1914		       ad 61 70 	      lda	NTSCmode	;
    434  1917		       f0 14		      beq	palPlaySidA	;
    435  1919				   ntscPlaySidA 		;
    436  1919		       18		      clc		;
    437  191a		       b9 31 34 	      lda	NSoundLArr,y	;
    438  191d		       71 22		      adc	(tunePtrL),y	;
    439  191f		       8d 43 70 	      sta	pitchTmpL	;
    440  1922		       b9 79 34 	      lda	NSoundHArr,y	;
    441  1925		       71 24		      adc	(tunePtrH),y	;
    442  1927		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    443  192a		       4c 3e 19 	      jmp	skipPalPlaySidA	;
    444  192d							;- - - - - - - - -;
    445  192d				   palPlaySidA		;
    446  192d		       18		      clc		;
    447  192e		       b9 c1 34 	      lda	PSoundLArr,y	;
    448  1931		       71 22		      adc	(tunePtrL),y	;
    449  1933		       8d 43 70 	      sta	pitchTmpL	;
    450  1936		       b9 14 35 	      lda	PSoundHArr,y	;
    451  1939		       71 24		      adc	(tunePtrH),y	;
    452  193b		       8d 44 70 	      sta	pitchTmpH	;
    453  193e				   skipPalPlaySidA		;;;;;
    454  193e
    455  193e							;inc 1024+40 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    456  193e							;lda shiftL1
    457  193e							;sta 1024+120
    458  193e							;lda shiftH1
    459  193e							;sta 1025+120
    460  193e
    461  193e							; play SID #1
    462  193e		       18		      clc
    463  193f		       ad 43 70 	      lda	pitchTmpL
    464  1942		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
    465  1945		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
    466  1948		       ad 44 70 	      lda	pitchTmpH
    467  194b		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
    468  194e		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
    469  1951
    470  1951		       a9 01		      lda	#1
    471  1953							; Set voice gates on or off
    472  1953				   NsoundOffSidA
    473  1953		       1d 30 70 	      ora	WaveType,x	; changed to Y
    474  1956		       9d 04 d4 	      sta	SID1+SV1WAVE,x	; SID 1 ONLY  changed to Y
    475  1959							;sta SID2+SV1WAVE,y ; changed to Y (why was this line disabled?)
    476  1959		       9d 04 71 	      sta	sidData+SV1WAVE,x	;BUG BUG BUG BUG BUG BUG  changed to Y
    477  195c		       ae 0c 70 	      ldx	temp
    478  195f		       ca		      dex
    479  1960		       30 03		      bmi	quitPlayLoop
    480  1962		       4c 02 19 	      jmp	NsetRegsSidA
    481  1965				   quitPlayLoop
    482  1965
    483  1965							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    484  1965							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    485  1965							; For each voice on SID #2...
    486  1965		       a2 02		      ldx	#2
    487  1967				   NsetRegsSidB
    488  1967		       8e 0c 70 	      stx	temp
    489  196a							;lda playNoteArray+3,x
    490  196a
    491  196a		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
    492  196d		       bd 48 29 	      lda	voiceOffset,x
    493  1970
    494  1970		       aa		      tax
    495  1971		       c0 ff		      cpy	#255
    496  1973		       d0 04		      bne	NsoundOnSidB
    497  1975		       a9 00		      lda	#0
    498  1977		       f0 3f		      beq	NsoundOffSidB
    499  1979				   NsoundOnSidB
    500  1979
    501  1979							; load note and deal
    502  1979							; with tuning ------;
    503  1979		       ad 61 70 	      lda	NTSCmode	;
    504  197c		       f0 14		      beq	palPlaySidB	;
    505  197e				   ntscPlaySidB 		;
    506  197e		       18		      clc		;
    507  197f		       b9 31 34 	      lda	NSoundLArr,y	;
    508  1982		       71 22		      adc	(tunePtrL),y	;
    509  1984		       8d 43 70 	      sta	pitchTmpL	;
    510  1987		       b9 79 34 	      lda	NSoundHArr,y	;
    511  198a		       71 24		      adc	(tunePtrH),y	;
    512  198c		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    513  198f		       4c a3 19 	      jmp	skipPalPlaySidB	;
    514  1992				   palPlaySidB		;
    515  1992		       18		      clc		;
    516  1993		       b9 c1 34 	      lda	PSoundLArr,y	;
    517  1996		       71 22		      adc	(tunePtrL),y	;
    518  1998		       8d 43 70 	      sta	pitchTmpL	;
    519  199b		       b9 14 35 	      lda	PSoundHArr,y	;
    520  199e		       71 24		      adc	(tunePtrH),y	;
    521  19a0		       8d 44 70 	      sta	pitchTmpH	;
    522  19a3				   skipPalPlaySidB		;;;;;
    523  19a3
    524  19a3							; play SID #2
    525  19a3		       18		      clc
    526  19a4		       ad 43 70 	      lda	pitchTmpL
    527  19a7		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
    528  19aa		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
    529  19ad		       ad 44 70 	      lda	pitchTmpH
    530  19b0		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
    531  19b3		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
    532  19b6
    533  19b6		       a9 01		      lda	#1
    534  19b8							; Set voice gates on or off
    535  19b8				   NsoundOffSidB
    536  19b8		       1d 30 70 	      ora	WaveType,x	; changed to Y
    537  19bb							;sta SID1+SV1WAVE,x ; changed to Y
    538  19bb		       9d 24 d4 	      sta	SID2+SV1WAVE,x	; SID2 ONLY changed to Y
    539  19be		       9d 04 71 	      sta	sidData+SV1WAVE,x	; changed to Y
    540  19c1		       ae 0c 70 	      ldx	temp
    541  19c4		       ca		      dex
    542  19c5		       10 a0		      bpl	NsetRegsSidB
    543  19c7
    544  19c7							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    545  19c7							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    546  19c7		       60		      rts
    547  19c8
    548  19c8
    549  19c8
    550  19c8							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    551  19c8							; PORTAMENTO SOUND SETUP
    552  19c8							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    553  19c8				   playPort
    554  19c8
    555  19c8		       a2 02		      ldx	#2
    556  19ca				   portCopyLoop
    557  19ca		       bd a0 70 	      lda	noteNumArray,x
    558  19cd		       9d b0 70 	      sta	playNoteArray,x
    559  19d0		       ca		      dex
    560  19d1		       10 f7		      bpl	portCopyLoop
    561  19d3
    562  19d3							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
    563  19d3							;sta playNoteArray+3
    564  19d3							;lda noteNumArray+1
    565  19d3							;sta playNoteArray+4
    566  19d3							;lda noteNumArray+2
    567  19d3							;sta playNoteArray+5
    568  19d3
    569  19d3							;jmp sixVoicePlayer
    570  19d3
    571  19d3							;jmp portPlayer
    572  19d3
    573  19d3
    574  19d3
    575  19d3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    576  19d3							; PORTAMENTO 3-VOICE SOUND DRIVER
    577  19d3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    578  19d3				   portPlayer
    579  19d3							; set up pointer to portamento speed array
    580  19d3							; (which is the tuning array)
    581  19d3		       a2 02		      ldx	#2
    582  19d5				   portLoop
    583  19d5		       bc b0 70 	      ldy	playNoteArray,x
    584  19d8							;ldy KeyA,x
    585  19d8		       c0 ff		      cpy	#255
    586  19da		       d0 03		      bne	noPlayNote
    587  19dc		       4c ef 19 	      jmp	playNote
    588  19df				   noPlayNote
    589  19df		       ad 03 70 	      lda	Frame
    590  19e2		       29 01		      and	#1
    591  19e4		       f0 03		      beq	noPlayNote2
    592  19e6		       4c ef 19 	      jmp	playNote
    593  19e9				   noPlayNote2
    594  19e9
    595  19e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  19e9							; DEBUG - SHOW DATA
    597  19e9				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    598  19e9				  -	      lda	pitchHA,x	;
    599  19e9				  -	      stx	tempX
    600  19e9				  -	      sty	tempY
    601  19e9				  -	      sta	tempA
    602  19e9				  -			;- - - - -
    603  19e9				  -			;sta temp
    604  19e9				  -	      ldx	#20
    605  19e9				  -	      ldy	#6
    606  19e9				  -	      jsr	displayHex
    607  19e9				  -			;lda temp
    608  19e9				  -			;ldy temp
    609  19e9				  -			;- - - - -
    610  19e9				  -	      ldx	tempX
    611  19e9				  -	      ldy	tempY
    612  19e9				  -	      lda	tempA
    613  19e9					      ENDIF
    614  19e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    615  19e9
    616  19e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    617  19e9							; DEBUG - SHOW DATA
    618  19e9				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    619  19e9				  -	      lda	NSoundHArr,y	;
    620  19e9				  -	      stx	tempX
    621  19e9				  -	      sty	tempY
    622  19e9				  -	      sta	tempA
    623  19e9				  -			;- - - - -
    624  19e9				  -			;sta temp
    625  19e9				  -	      ldx	#20
    626  19e9				  -	      ldy	#7
    627  19e9				  -	      jsr	displayHex
    628  19e9				  -			;lda temp
    629  19e9				  -			;ldy temp
    630  19e9				  -			;- - - - -
    631  19e9				  -	      ldx	tempX
    632  19e9				  -	      ldy	tempY
    633  19e9				  -	      lda	tempA
    634  19e9					      ENDIF
    635  19e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    636  19e9
    637  19e9
    638  19e9		       20 47 1a 	      jsr	updatePortPosition
    639  19ec		       20 47 1a 	      jsr	updatePortPosition
    640  19ef
    641  19ef
    642  19ef				   playNote
    643  19ef
    644  19ef							;inc 1024+80 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    645  19ef
    646  19ef							; deal with tuning
    647  19ef		       18		      clc
    648  19f0		       bd 16 70 	      lda	pitchLA,x
    649  19f3		       71 22		      adc	(tunePtrL),y
    650  19f5		       8d 43 70 	      sta	pitchTmpL
    651  19f8		       bd 19 70 	      lda	pitchHA,x
    652  19fb		       71 24		      adc	(tunePtrH),y
    653  19fd		       8d 44 70 	      sta	pitchTmpH
    654  1a00
    655  1a00		       98		      tya		; Move the current key to ACC
    656  1a01		       bc 48 29 	      ldy	voiceOffset,x
    657  1a04		       c9 ff		      cmp	#255	; Check for note off
    658  1a06		       d0 04		      bne	soundOn
    659  1a08		       a9 00		      lda	#0
    660  1a0a		       f0 28		      beq	soundOff
    661  1a0c				   soundOn
    662  1a0c
    663  1a0c							;inc 1025+80 ; DEBUG !!!!!!!!!!!!!!!!!!!!
    664  1a0c
    665  1a0c							;lda shiftL1
    666  1a0c							;sta 1024+120
    667  1a0c							;lda shiftH1
    668  1a0c							;sta 1025+120
    669  1a0c
    670  1a0c							; play SID #1
    671  1a0c		       18		      clc
    672  1a0d		       ad 43 70 	      lda	pitchTmpL
    673  1a10		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
    674  1a13		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
    675  1a16		       ad 44 70 	      lda	pitchTmpH
    676  1a19		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
    677  1a1c		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
    678  1a1f
    679  1a1f							; play SID #2
    680  1a1f		       18		      clc
    681  1a20		       ad 43 70 	      lda	pitchTmpL
    682  1a23		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
    683  1a26		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
    684  1a29		       ad 44 70 	      lda	pitchTmpH
    685  1a2c		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
    686  1a2f		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
    687  1a32
    688  1a32				   afterDStep
    689  1a32
    690  1a32		       a9 01		      lda	#1
    691  1a34							; Set voice gates on or off
    692  1a34				   soundOff
    693  1a34							;ldy voiceOffset,x ; added this line for copying, but implemented above...
    694  1a34		       19 30 70 	      ora	WaveType,y
    695  1a37		       99 04 d4 	      sta	SID1+SV1WAVE,y
    696  1a3a		       99 24 d4 	      sta	SID2+SV1WAVE,y
    697  1a3d		       99 04 71 	      sta	sidData+SV1WAVE,y	; changed to Y
    698  1a40
    699  1a40		       ca		      dex
    700  1a41		       30 03		      bmi	quitPort
    701  1a43		       4c d5 19 	      jmp	portLoop
    702  1a46				   quitPort
    703  1a46				   skipPort
    704  1a46		       60		      rts
    705  1a47							;--------------------------------------------------------------------
    706  1a47							;end of portamento play loop
    707  1a47							;--------------------------------------------------------------------
    708  1a47
    709  1a47
    710  1a47				   updatePortPosition
    711  1a47							;check portamn direction;
    712  1a47		       ad 61 70 	      lda	NTSCmode	;
    713  1a4a		       f0 0c		      beq	palPortH	;
    714  1a4c				   ntscPortH		;
    715  1a4c		       bd 19 70 	      lda	pitchHA,x	;
    716  1a4f		       d9 79 34 	      cmp	NSoundHArr,y	;
    717  1a52		       f0 10		      beq	portCheckL	;
    718  1a54		       30 2a		      bmi	portUp	; PAL/NTSC split
    719  1a56		       10 3e		      bpl	portDown	;
    720  1a58							;bpl portUp				; PAL/NTSC split
    721  1a58							;bmi portDown			;
    722  1a58				   palPortH		;
    723  1a58		       bd 19 70 	      lda	pitchHA,x	;
    724  1a5b		       d9 14 35 	      cmp	PSoundHArr,y	;
    725  1a5e		       f0 04		      beq	portCheckL	;
    726  1a60		       30 1e		      bmi	portUp	;
    727  1a62		       10 32		      bpl	portDown	;;;;;
    728  1a64							;bpl portUp				;
    729  1a64							;bmi portDown		;;;;;
    730  1a64
    731  1a64				   portCheckL
    732  1a64
    733  1a64							;check portamn lowbyte--;
    734  1a64		       ad 61 70 	      lda	NTSCmode	;
    735  1a67		       f0 0d		      beq	palPortL	;
    736  1a69				   ntscPortL		;
    737  1a69		       bd 16 70 	      lda	pitchLA,x	;
    738  1a6c		       d9 31 34 	      cmp	NSoundLArr,y	;
    739  1a6f		       f0 69		      beq	endPortUpdate
    740  1a71							;beq playNote ; note on	;
    741  1a71							;the stop so play	;
    742  1a71		       b0 23		      bcs	portDown	; PAL/NTSC split
    743  1a73							;bcs portUp			; PAL/NTSC split
    744  1a73		       4c 80 1a 	      jmp	skipPalPortL	;
    745  1a76				   palPortL		;
    746  1a76		       bd 16 70 	      lda	pitchLA,x	;
    747  1a79		       d9 c1 34 	      cmp	PSoundLArr,y	;
    748  1a7c		       f0 5c		      beq	endPortUpdate
    749  1a7e							;beq playNote ; note on	;
    750  1a7e							;the stop so play	;
    751  1a7e		       b0 16		      bcs	portDown	;
    752  1a80							;bcs portUp				;
    753  1a80				   skipPalPortL 		;;;;;
    754  1a80
    755  1a80
    756  1a80				   portUp
    757  1a80		       bd 16 70 	      lda	pitchLA,x
    758  1a83		       18		      clc
    759  1a84		       71 35		      adc	(portPtrL),y
    760  1a86		       9d 16 70 	      sta	pitchLA,x
    761  1a89		       bd 19 70 	      lda	pitchHA,x
    762  1a8c		       71 47		      adc	(portPtrH),y
    763  1a8e		       9d 19 70 	      sta	pitchHA,x
    764  1a91							;inc 1025 ; DEBUG!!
    765  1a91		       a9 00		      lda	#0	; indicate port direction
    766  1a93		       4c a9 1a 	      jmp	oscCheck
    767  1a96				   portDown
    768  1a96		       bd 16 70 	      lda	pitchLA,x
    769  1a99		       38		      sec
    770  1a9a		       f1 35		      sbc	(portPtrL),y
    771  1a9c		       9d 16 70 	      sta	pitchLA,x
    772  1a9f		       bd 19 70 	      lda	pitchHA,x
    773  1aa2		       f1 47		      sbc	(portPtrH),y
    774  1aa4		       9d 19 70 	      sta	pitchHA,x
    775  1aa7							;inc 1024 ; DEBUG!!
    776  1aa7		       a9 01		      lda	#1	; indicate port direction
    777  1aa9
    778  1aa9							; check for pitch oscillation
    779  1aa9							; (which means it's at the correct note)
    780  1aa9							; it's oscillating if: the port direction
    781  1aa9							; has changed and the note hasn't.
    782  1aa9				   oscCheck
    783  1aa9		       dd 54 70 	      cmp	portLastDir,x
    784  1aac		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
    785  1aaf		       f0 29		      beq	skipOsc
    786  1ab1		       98		      tya
    787  1ab2		       dd 51 70 	      cmp	portLastNote,x
    788  1ab5		       9d 51 70 	      sta	portLastNote,x	; save it...
    789  1ab8		       d0 20		      bne	skipOsc
    790  1aba
    791  1aba							; it's oscilating at;
    792  1aba							; the note, so lock ;
    793  1aba							; it onto the actual;
    794  1aba							; note				;
    795  1aba		       ad 61 70 	      lda	NTSCmode	;
    796  1abd		       f0 0f		      beq	palLock	;
    797  1abf				   ntscLock		;
    798  1abf		       b9 31 34 	      lda	NSoundLArr,y	;
    799  1ac2		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
    800  1ac5		       b9 79 34 	      lda	NSoundHArr,y	;
    801  1ac8		       9d 19 70 	      sta	pitchHA,x	;
    802  1acb		       4c da 1a 	      jmp	skipPalLock	;
    803  1ace				   palLock		;
    804  1ace		       b9 c1 34 	      lda	PSoundLArr,y	;
    805  1ad1		       9d 16 70 	      sta	pitchLA,x	;
    806  1ad4		       b9 14 35 	      lda	PSoundHArr,y	;
    807  1ad7		       9d 19 70 	      sta	pitchHA,x	;
    808  1ada				   skipPalLock		;;;;;
    809  1ada
    810  1ada				   skipOsc
    811  1ada				   endPortUpdate
    812  1ada		       60		      rts
    813  1adb
------- FILE cynthcart2.0.1.asm
------- FILE cynth_keyboard.asm LEVEL 2 PASS 2
      0  1adb					      include	"cynth_keyboard.asm"
      1  1adb							;------------------------------------------
      2  1adb							; Read the keyboard
      3  1adb							;------------------------------------------
      4  1adb				   readKeyboard
      5  1adb							; Keyboard read setup
      6  1adb		       a9 7f		      lda	#127
      7  1add		       8d 0d dc 	      sta	56333
      8  1ae0
      9  1ae0							;------------------------------------------
     10  1ae0							; determine which keyset to use
     11  1ae0							; (raw/shift/commodorekey/runstop)
     12  1ae0							;------------------------------------------
     13  1ae0
     14  1ae0							; default is raw key functions (no modified keys)
     15  1ae0		       a9 18		      lda	#<rawKeyFunctions	;-
     16  1ae2		       85 c2		      sta	keyPtrL	;
     17  1ae4		       a9 22		      lda	#>rawKeyFunctions	;
     18  1ae6		       85 c3		      sta	keyPtrH	;-
     19  1ae8
     20  1ae8							; Check for Shift/C=
     21  1ae8		       a9 bf		      lda	#~64	; (Right Shift)
     22  1aea		       8d 00 dc 	      sta	56320
     23  1aed		       ad 01 dc 	      lda	56321
     24  1af0		       29 10		      and	#16
     25  1af2		       d0 08		      bne	notAltKeys	;-
     26  1af4		       a9 8c		      lda	#<shiftKeyFunctions	;
     27  1af6		       85 c2		      sta	keyPtrL	;
     28  1af8		       a9 23		      lda	#>shiftKeyFunctions	;-
     29  1afa		       85 c3		      sta	keyPtrH
     30  1afc				   notAltKeys
     31  1afc		       a9 fd		      lda	#~2	; (Left Shift)
     32  1afe		       8d 00 dc 	      sta	56320
     33  1b01		       ad 01 dc 	      lda	56321
     34  1b04		       29 80		      and	#128
     35  1b06		       d0 0b		      bne	notAltKeys2	;-
     36  1b08		       a9 8c		      lda	#<shiftKeyFunctions	;
     37  1b0a		       85 c2		      sta	keyPtrL	;
     38  1b0c		       a9 23		      lda	#>shiftKeyFunctions	;-
     39  1b0e		       85 c3		      sta	keyPtrH
     40  1b10		       4c 15 1c 	      jmp	doKeyCheck
     41  1b13				   notAltKeys2
     42  1b13		       a9 7f		      lda	#~128	; (C= key)
     43  1b15		       8d 00 dc 	      sta	56320
     44  1b18		       ad 01 dc 	      lda	56321
     45  1b1b		       29 20		      and	#32
     46  1b1d		       d0 08		      bne	notAltKeys3
     47  1b1f		       a9 08		      lda	#<commKeyFunctions	;-
     48  1b21		       85 c2		      sta	keyPtrL	;
     49  1b23		       a9 24		      lda	#>commKeyFunctions	;
     50  1b25		       85 c3		      sta	keyPtrH	;-
     51  1b27				   notAltKeys3
     52  1b27		       a9 7f		      lda	#~128	; (Run Stop)
     53  1b29		       8d 00 dc 	      sta	56320
     54  1b2c		       ad 01 dc 	      lda	56321
     55  1b2f		       29 80		      and	#128
     56  1b31		       d0 08		      bne	notAltKeys4
     57  1b33		       a9 84		      lda	#<runstopKeyFunctions	;-
     58  1b35		       85 c2		      sta	keyPtrL	;
     59  1b37		       a9 24		      lda	#>runstopKeyFunctions	;
     60  1b39		       85 c3		      sta	keyPtrH	;-
     61  1b3b				   notAltKeys4
     62  1b3b		       a9 7f		      lda	#~128	; (CTRL key)
     63  1b3d		       8d 00 dc 	      sta	56320
     64  1b40		       ad 01 dc 	      lda	56321
     65  1b43		       29 04		      and	#4	; CTRL
     66  1b45							;and #2 ; BACK ARROW
     67  1b45		       d0 08		      bne	notAltKeys5
     68  1b47		       a9 10		      lda	#<CTRLKeyFunctions	;-
     69  1b49		       85 c2		      sta	keyPtrL	;
     70  1b4b		       a9 23		      lda	#>CTRLKeyFunctions	;
     71  1b4d		       85 c3		      sta	keyPtrH	;-
     72  1b4f				   notAltKeys5
     73  1b4f
     74  1b4f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75  1b4f				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
     76  1b4f				  -	      lda	#0
     77  1b4f				  -	      sta	keyTimer	; DEBUG!  Disable key timer
     78  1b4f					      ENDIF
     79  1b4f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  1b4f
     81  1b4f							; handle keytimer
     82  1b4f							; (to avoid accidental keypresses on shifted keys)
     83  1b4f		       ad 58 70 	      lda	keyTimer
     84  1b52		       f0 06		      beq	readKeys
     85  1b54		       ce 58 70 	      dec	keyTimer
     86  1b57		       4c 5a 1b 	      jmp	startCheck
     87  1b5a				   readKeys
     88  1b5a
     89  1b5a							;********************************
     90  1b5a							; Check for Notes Being Pressed
     91  1b5a							;********************************
     92  1b5a				   startCheck
     93  1b5a		       a9 00		      lda	#0
     94  1b5c		       8d 9b 70 	      sta	keyCount
     95  1b5f
     96  1b5f							; Save last notes and clear note buffer
     97  1b5f		       ae 80 70 	      ldx	bufferSize
     98  1b62							;dex
     99  1b62		       e8		      inx
    100  1b63		       e8		      inx
    101  1b64				   clearKeys
    102  1b64		       bd d0 70 	      lda	kbBuffer,x
    103  1b67				  -	      IF	DEBUG_DISPLAY=1
    104  1b67				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
    105  1b67					      ENDIF
    106  1b67		       9d e0 70 	      sta	lastKbBuffer,x
    107  1b6a		       a9 ff		      lda	#255
    108  1b6c		       9d d0 70 	      sta	kbBuffer,x
    109  1b6f		       ca		      dex
    110  1b70		       10 f2		      bpl	clearKeys
    111  1b72
    112  1b72							;lda #255
    113  1b72							;sta KeyA
    114  1b72							;sta KeyB
    115  1b72							;sta KeyC
    116  1b72
    117  1b72		       ae 80 70 	      ldx	bufferSize
    118  1b75							;dex
    119  1b75		       e8		      inx
    120  1b76		       e8		      inx
    121  1b77		       a0 00		      ldy	#0
    122  1b79							; check for note keys being pressed
    123  1b79				   checkLoop
    124  1b79		       b9 a8 21 	      lda	col,y
    125  1b7c		       f0 1c		      beq	quitCheck
    126  1b7e		       8d 00 dc 	      sta	56320
    127  1b81		       ad 01 dc 	      lda	56321
    128  1b84		       39 c1 21 	      and	row,y
    129  1b87		       d0 0e		      bne	notPressed
    130  1b89		       98		      tya
    131  1b8a		       18		      clc
    132  1b8b		       6d 22 70 	      adc	keyOffset
    133  1b8e							;sta KeyA,x
    134  1b8e		       9d d0 70 	      sta	kbBuffer,x
    135  1b91		       ca		      dex
    136  1b92		       ee 9b 70 	      inc	keyCount
    137  1b95		       30 03		      bmi	quitCheck
    138  1b97				   notPressed
    139  1b97		       c8		      iny
    140  1b98		       d0 df		      bne	checkLoop
    141  1b9a
    142  1b9a				   quitCheck
    143  1b9a							;-- -- -- -- -- -- -- -- -- -- -- -- --
    144  1b9a							; Generate note on/offs from keyboard data
    145  1b9a							;-- -- -- -- -- -- -- -- -- -- -- -- --
    146  1b9a							; FIND NOTE ONS...
    147  1b9a		       ae 80 70 	      ldx	bufferSize
    148  1b9d							;dex
    149  1b9d		       e8		      inx
    150  1b9e		       e8		      inx
    151  1b9f				   noteOnCheck
    152  1b9f		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
    153  1ba2		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    154  1ba5							;dey
    155  1ba5		       c8		      iny
    156  1ba6		       c8		      iny
    157  1ba7				   innerNoteOnCheck
    158  1ba7		       d9 e0 70 	      cmp	lastKbBuffer,y
    159  1baa		       f0 12		      beq	checkNextNote
    160  1bac		       88		      dey
    161  1bad		       10 f8		      bpl	innerNoteOnCheck
    162  1baf							;Found new note-on!
    163  1baf							;inc 53280
    164  1baf		       8d 81 70 	      sta	noteTempA
    165  1bb2		       8e 82 70 	      stx	noteTempB
    166  1bb5		       20 9d 1e 	      jsr	doNoteOn
    167  1bb8		       ad 81 70 	      lda	noteTempA
    168  1bbb		       ae 82 70 	      ldx	noteTempB
    169  1bbe							; TODO: call note on function
    170  1bbe				   checkNextNote
    171  1bbe		       ca		      dex
    172  1bbf		       10 de		      bpl	noteOnCheck
    173  1bc1
    174  1bc1							; FIND NOTE OFF...
    175  1bc1		       ae 80 70 	      ldx	bufferSize
    176  1bc4							;dex
    177  1bc4		       e8		      inx
    178  1bc5		       e8		      inx
    179  1bc6				   noteOnCheck2
    180  1bc6		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
    181  1bc9		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    182  1bcc							;dey
    183  1bcc		       c8		      iny
    184  1bcd		       c8		      iny
    185  1bce				   innerNoteOnCheck2
    186  1bce		       d9 d0 70 	      cmp	kbBuffer,y
    187  1bd1		       f0 12		      beq	checkNextNote2
    188  1bd3		       88		      dey
    189  1bd4		       10 f8		      bpl	innerNoteOnCheck2
    190  1bd6							;Found new note-on!
    191  1bd6							;inc 53280
    192  1bd6		       8d 81 70 	      sta	noteTempA
    193  1bd9		       8e 82 70 	      stx	noteTempB
    194  1bdc		       20 cb 1e 	      jsr	doNoteOff
    195  1bdf		       ad 81 70 	      lda	noteTempA
    196  1be2		       ae 82 70 	      ldx	noteTempB
    197  1be5							; TODO: call note on function
    198  1be5				   checkNextNote2
    199  1be5		       ca		      dex
    200  1be6		       10 de		      bpl	noteOnCheck2
    201  1be8							;-- -- -- -- -- -- -- -- -- -- -- -- --
    202  1be8							; End of note on/off generation
    203  1be8							;-- -- -- -- -- -- -- -- -- -- -- -- --
    204  1be8
    205  1be8							; Skip key command check if 3 or more piano keys
    206  1be8							; are held to avoid quirks with C64 keyboard
    207  1be8							; matrix hardware.
    208  1be8		       ae 9b 70 	      ldx	keyCount
    209  1beb		       f0 0d		      beq	skipMinimalKeyboard
    210  1bed							; default is raw key functions (no modified keys)
    211  1bed		       a9 94		      lda	#<minimalKeyFunctions	;-
    212  1bef		       85 c2		      sta	keyPtrL	;
    213  1bf1		       a9 22		      lda	#>minimalKeyFunctions	;
    214  1bf3		       85 c3		      sta	keyPtrH	;-
    215  1bf5							; also disable keytimer...
    216  1bf5		       a9 00		      lda	#0
    217  1bf7		       8d 58 70 	      sta	keyTimer
    218  1bfa				   skipMinimalKeyboard
    219  1bfa
    220  1bfa							; Check key timer...
    221  1bfa		       ad 58 70 	      lda	keyTimer
    222  1bfd		       f0 01		      beq	contReadKeys
    223  1bff		       60		      rts
    224  1c00				   contReadKeys
    225  1c00		       8e 66 70 	      stx	lastOsc
    226  1c03
    227  1c03							; Check for space bar (pitch bender)...
    228  1c03		       a9 7f		      lda	#~$80
    229  1c05		       8d 00 dc 	      sta	56320
    230  1c08		       ad 01 dc 	      lda	56321
    231  1c0b		       29 10		      and	#$10
    232  1c0d		       d0 06		      bne	noSpace
    233  1c0f		       20 25 10 	      jsr	bendBender
    234  1c12		       4c 65 1c 	      jmp	skipKeyCheck
    235  1c15				   noSpace
    236  1c15
    237  1c15
    238  1c15				   doKeyCheck
    239  1c15							;********************************
    240  1c15							; Generic command key check
    241  1c15							;********************************
    242  1c15
    243  1c15		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
    244  1c17				   keyChkLoop
    245  1c17		       bd da 21 	      lda	commandKeys,x
    246  1c1a		       8d 00 dc 	      sta	56320
    247  1c1d		       ad 01 dc 	      lda	56321
    248  1c20		       3d db 21 	      and	commandKeys+1,x
    249  1c23		       d0 3c		      bne	keyNotDown
    250  1c25
    251  1c25							; key down!
    252  1c25							;-----------
    253  1c25		       8a		      txa		;multiply x by 2
    254  1c26		       0a		      asl		;  to get the offset
    255  1c27		       a8		      tay		;  into the key functions array
    256  1c28
    257  1c28							; get address of function to call
    258  1c28		       b1 c2		      lda	(keyPtrL),y
    259  1c2a		       8d 62 70 	      sta	temp16L
    260  1c2d		       c8		      iny
    261  1c2e		       b1 c2		      lda	(keyPtrL),y
    262  1c30		       8d 63 70 	      sta	temp16H
    263  1c33		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
    264  1c35							;  no function assigned to this key so quit
    265  1c35
    266  1c35							; put return address onto stack to simulate JSR with a JMP()
    267  1c35		       a9 1c		      lda	#>returnAddress
    268  1c37		       48		      pha
    269  1c38		       a9 4f		      lda	#<returnAddress
    270  1c3a		       48		      pha
    271  1c3b
    272  1c3b							; save the value of X
    273  1c3b		       8e 64 70 	      stx	saveX
    274  1c3e
    275  1c3e		       c8		      iny
    276  1c3f		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
    277  1c41		       8d 65 70 	      sta	keyTemp
    278  1c44		       c8		      iny
    279  1c45		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
    280  1c47		       a8		      tay
    281  1c48		       ad 65 70 	      lda	keyTemp
    282  1c4b
    283  1c4b							; indirect jump to function, which acts as a JSR since
    284  1c4b							;   we pushed the return address onto the stack
    285  1c4b		       6c 62 70 	      jmp	(temp16L)
    286  1c4e
    287  1c4e		       ea		      nop
    288  1c4f				   returnAddress
    289  1c4f		       ea		      nop
    290  1c50
    291  1c50		       ae 64 70 	      ldx	saveX	; restore X
    292  1c53
    293  1c53							; only set the keytimer when a raw key is used
    294  1c53		       a5 c2		      lda	keyPtrL
    295  1c55		       c9 18		      cmp	#<rawKeyFunctions
    296  1c57		       f0 08		      beq	keyNotDown
    297  1c59
    298  1c59		       a9 28		      lda	#KEYTIME
    299  1c5b		       8d 58 70 	      sta	keyTimer
    300  1c5e							;-----------
    301  1c5e		       4c 65 1c 	      jmp	skipKeyCheck	; quit keycheck after a key is found
    302  1c61
    303  1c61				   keyNotDown
    304  1c61		       ca		      dex
    305  1c62		       ca		      dex
    306  1c63		       10 b2		      bpl	keyChkLoop
    307  1c65
    308  1c65				   skipKeyCheck
    309  1c65
    310  1c65							; done
    311  1c65		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_midirecv.asm LEVEL 2 PASS 2
      0  1c66					      include	"cynth_midirecv.asm"
      1  1c66							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      2  1c66							; Read MIDI
      3  1c66							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      4  1c66							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
      5  1c66					      IF	ENABLE_MIDI_COMMANDS=1
      6  1c66				   processMIDI
      7  1c66							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  1c66							; Debug - show main note buffer
      9  1c66				  -	      IF	DEBUG_DISPLAY=1
     10  1c66				  -	      lda	noteNumArray+0
     11  1c66				  -	      sta	1744+125
     12  1c66				  -	      lda	noteNumArray+1
     13  1c66				  -	      sta	1744+126
     14  1c66				  -	      lda	noteNumArray+2
     15  1c66				  -	      sta	1744+127
     16  1c66				  -	      lda	noteNumArray+3
     17  1c66				  -	      sta	1744+128
     18  1c66				  -
     19  1c66				  -	      lda	noteNumArray+4
     20  1c66				  -	      sta	1744+129
     21  1c66				  -	      lda	noteNumArray+5
     22  1c66				  -	      sta	1744+130
     23  1c66				  -	      lda	noteNumArray+6
     24  1c66				  -	      sta	1744+131
     25  1c66				  -	      lda	noteNumArray+7
     26  1c66				  -	      sta	1744+132
     27  1c66					      ENDIF
     28  1c66							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  1c66
     30  1c66							; get next MIDI byte
     31  1c66				   check
     32  1c66					      IF	ENABLE_MIDI_COMMANDS=1
     33  1c66		       ad 50 71 	      lda	midiEnabled
     34  1c69		       f0 03		      beq	skipMidiRead
     35  1c6b		       20 fd 3a 	      jsr	midiRead	; Midi byte will be in A and Y
     36  1c6e				   skipMidiRead
     37  1c6e					      ENDIF
     38  1c6e		       d0 03		      bne	continueReading
     39  1c70		       4c ec 1e 	      jmp	endMIDI
     40  1c73				   continueReading
     41  1c73
     42  1c73
     43  1c73							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  1c73							; DEBUG - SHOW MIDI DATA
     45  1c73				  -	      IF	DEBUG_DISPLAY=1
     46  1c73				  -	      inc	1824+81
     47  1c73				  -	      sta	temp
     48  1c73				  -	      ldx	#34
     49  1c73				  -	      ldy	debugOffset
     50  1c73				  -	      iny
     51  1c73				  -	      iny
     52  1c73				  -	      iny
     53  1c73				  -	      iny
     54  1c73				  -	      iny
     55  1c73				  -	      iny
     56  1c73				  -	      jsr	displayHex
     57  1c73				  -	      ldy	debugOffset
     58  1c73				  -	      iny
     59  1c73				  -	      tya
     60  1c73				  -	      and	#$0F
     61  1c73				  -	      sta	debugOffset
     62  1c73				  -	      adc	#5
     63  1c73				  -	      tay
     64  1c73				  -	      lda	temp
     65  1c73				  -	      ldy	temp
     66  1c73					      ENDIF
     67  1c73							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  1c73
     69  1c73							; If bit 7 isn't set, then it's a running mode byte...
     70  1c73		       10 68		      bpl	runningModeByte
     71  1c75		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
     72  1c78		       a8		      tay
     73  1c79		       29 f0		      and	#$F0
     74  1c7b		       c9 f0		      cmp	#$F0
     75  1c7d		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
     76  1c7f							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     77  1c7f
     78  1c7f							;tya
     79  1c7f
     80  1c7f							; If bit 7 isn't set, then it's a running mode byte...
     81  1c7f							;bpl runningModeByte
     82  1c7f
     83  1c7f
     84  1c7f							;tay
     85  1c7f							;and #$F0
     86  1c7f							;cmp #$F0
     87  1c7f							;beq processSysex ;Skip saving status if it's sysex
     88  1c7f							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     89  1c7f							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
     90  1c7f					      IF	ENABLE_MIDI_COMMANDS=1
     91  1c7f		       20 04 3b 	      jsr	midiReadWait	; Midi byte will be in A and Y
     92  1c82					      ENDIF
     93  1c82		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
     94  1c85		       ad 7d 70 	      lda	savedMidiStatus
     95  1c88		       20 f5 1c 	      jsr	processMidiMessage	; handle the rest of the message...
     96  1c8b		       4c 66 1c 	      jmp	check	; End of loop - - -
     97  1c8e
     98  1c8e				   processSysex
     99  1c8e		       98		      tya		; Get systex byte
    100  1c8f		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    101  1c91		       d0 0a		      bne	checkF1
    102  1c93				   sysexReadingLoop
    103  1c93		       20 04 3b 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    104  1c96		       c9 f7		      cmp	#$F7
    105  1c98		       d0 f9		      bne	sysexReadingLoop
    106  1c9a		       4c 66 1c 	      jmp	check
    107  1c9d							; - - - - - -
    108  1c9d				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    109  1c9d		       c9 f1		      cmp	#$F1
    110  1c9f		       d0 06		      bne	checkF2
    111  1ca1		       20 04 3b 	      jsr	midiReadWait
    112  1ca4		       4c 66 1c 	      jmp	check
    113  1ca7							; - - - - - -
    114  1ca7				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    115  1ca7		       c9 f2		      cmp	#$F2
    116  1ca9		       d0 09		      bne	checkF3
    117  1cab					      IF	ENABLE_MIDI_COMMANDS=1
    118  1cab		       20 04 3b 	      jsr	midiReadWait
    119  1cae		       20 04 3b 	      jsr	midiReadWait
    120  1cb1					      ENDIF
    121  1cb1		       4c 66 1c 	      jmp	check
    122  1cb4							; - - - - - -
    123  1cb4				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    124  1cb4		       c9 f3		      cmp	#$F3
    125  1cb6		       d0 09		      bne	checkF8
    126  1cb8		       20 04 3b 	      jsr	midiReadWait
    127  1cbb		       4c 66 1c 	      jmp	check
    128  1cbe							; - - - - - -
    129  1cbe							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    130  1cbe		       4c 66 1c 	      jmp	check
    131  1cc1
    132  1cc1
    133  1cc1				   checkF8
    134  1cc1		       c9 f8		      cmp	#$F8
    135  1cc3		       d0 03		      bne	checkFA
    136  1cc5							; NO EXTRA BYTES TO READ
    137  1cc5		       4c 66 1c 	      jmp	check
    138  1cc8							; - - - - - -
    139  1cc8				   checkFA
    140  1cc8		       c9 fa		      cmp	#$FA
    141  1cca		       d0 03		      bne	checkFC
    142  1ccc							; NO EXTRA BYTES TO READ
    143  1ccc		       4c 66 1c 	      jmp	check
    144  1ccf							; - - - - - -
    145  1ccf				   checkFC
    146  1ccf		       c9 fc		      cmp	#$FC
    147  1cd1		       d0 03		      bne	checkFF
    148  1cd3							; NO EXTRA BYTES TO READ
    149  1cd3		       4c 66 1c 	      jmp	check
    150  1cd6							; - - - - - -
    151  1cd6				   checkFF
    152  1cd6		       c9 ff		      cmp	#$FF
    153  1cd8		       d0 00		      bne	endSysex
    154  1cda							;---- END SYSTEM/CLOCK ----
    155  1cda				   endSysex
    156  1cda		       4c 66 1c 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    157  1cdd
    158  1cdd
    159  1cdd				   runningModeByte
    160  1cdd		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    161  1ce0		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    162  1ce3		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    163  1ce5		       c9 f0		      cmp	#$F0
    164  1ce7		       d0 03		      bne	normalRunningMode
    165  1ce9							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    166  1ce9							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    167  1ce9		       4c 66 1c 	      jmp	check
    168  1cec							;-----------------------
    169  1cec							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    170  1cec							;jsr midiReadWait ; Now need to get a new "status byte"
    171  1cec							;jmp runningModeByte
    172  1cec
    173  1cec				   normalRunningMode
    174  1cec		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    175  1cef		       20 f5 1c 	      jsr	processMidiMessage
    176  1cf2		       4c 66 1c 	      jmp	check
    177  1cf5
    178  1cf5				   processMidiMessage
    179  1cf5		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    180  1cf6
    181  1cf6							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    182  1cf6		       ad f7 70 	      lda	midiMode
    183  1cf9		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    184  1cfb		       98		      tya
    185  1cfc		       29 0f		      and	#$0F
    186  1cfe		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    187  1d01		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    188  1d03
    189  1d03							;---------------------------------------------
    190  1d03							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    191  1d03							;---------------------------------------------
    192  1d03		       98		      tya
    193  1d04		       09 40		      ora	#%01000000
    194  1d06		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    195  1d08		       98		      tya
    196  1d09		       09 20		      ora	#%00100000
    197  1d0b		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    198  1d0d
    199  1d0d				   twoParameters
    200  1d0d		       20 04 3b 	      jsr	midiReadWait
    201  1d10				   oneParameter
    202  1d10							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    203  1d10		       60		      rts
    204  1d11							;jmp check
    205  1d11
    206  1d11
    207  1d11				   endChannelCheck
    208  1d11							; Status byte should be in A
    209  1d11							; Ignoring channel for now
    210  1d11							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    211  1d11		       98		      tya
    212  1d12
    213  1d12		       29 f0		      and	#$F0
    214  1d14		       c9 80		      cmp	#$80	; Note off
    215  1d16		       d0 03		      bne	notNoteOff
    216  1d18		       4c b9 1e 	      jmp	noteOff
    217  1d1b				   notNoteOff
    218  1d1b		       c9 90		      cmp	#$90	; Note on
    219  1d1d		       d0 03		      bne	notNoteOn
    220  1d1f		       4c 83 1e 	      jmp	noteOn
    221  1d22				   notNoteOn
    222  1d22		       c9 e0		      cmp	#$E0	; Pitch bend
    223  1d24		       f0 3a		      beq	pitchBend
    224  1d26		       c9 b0		      cmp	#$B0	; Control change
    225  1d28		       d0 03		      bne	notControlChange
    226  1d2a		       4c 80 1d 	      jmp	controlChange
    227  1d2d				   notControlChange
    228  1d2d		       c9 d0		      cmp	#$D0	; Channel pressure
    229  1d2f		       f0 2b		      beq	channelPressure
    230  1d31		       c9 a0		      cmp	#$A0	; Key pressure
    231  1d33		       f0 0f		      beq	keyPressure
    232  1d35		       c9 c0		      cmp	#$C0	; Patch change
    233  1d37		       f0 12		      beq	patchChange
    234  1d39							;cmp #$F0 ; Sysex
    235  1d39							;beq sysex
    236  1d39		       8d e4 07 	      sta	2020
    237  1d3c		       a9 02		      lda	#2
    238  1d3e		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    239  1d41		       4c ec 1e 	      jmp	endMIDI
    240  1d44
    241  1d44
    242  1d44				   keyPressure
    243  1d44				  -	      IF	DEBUG_DISPLAY=1
    244  1d44				  -	      inc	1824+86
    245  1d44					      ENDIF
    246  1d44		       ad 7e 70 	      lda	firstDataByte
    247  1d47					      IF	ENABLE_MIDI_COMMANDS=1
    248  1d47		       20 04 3b 	      jsr	midiReadWait
    249  1d4a					      ENDIF
    250  1d4a		       60		      rts
    251  1d4b
    252  1d4b
    253  1d4b
    254  1d4b							;REL_SHORT equ $E0
    255  1d4b							;REL_MED	equ $E9
    256  1d4b							;REL_LONG equ $EE
    257  1d4b
    258  1d4b							;ATK_SHORT equ $00
    259  1d4b							;ATK_MED	equ $90
    260  1d4b							;ATK_LONG equ $E0
    261  1d4b
    262  1d4b				   patchChange
    263  1d4b				  -	      IF	DEBUG_DISPLAY=1
    264  1d4b				  -	      inc	1824+88
    265  1d4b					      ENDIF
    266  1d4b		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    267  1d4e		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    268  1d50		       a0 1d		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    269  1d52				   skipPatchDefault1
    270  1d52		       c0 1e		      cpy	#MAX_PATCH_NUMBER+1
    271  1d54		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    272  1d56		       a0 00		      ldy	#0	; Saw Bass (because sending patch change zero doesn't work)
    273  1d58				   skipPatchDefault2
    274  1d58		       20 af 13 	      jsr	setPatch
    275  1d5b		       60		      rts
    276  1d5c
    277  1d5c				   channelPressure
    278  1d5c				  -	      IF	DEBUG_DISPLAY=1
    279  1d5c				  -	      inc	1824+89
    280  1d5c					      ENDIF
    281  1d5c		       ad 7e 70 	      lda	firstDataByte
    282  1d5f		       60		      rts
    283  1d60
    284  1d60				   pitchBend
    285  1d60							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    286  1d60							; DEBUG - SHOW MIDI DATA
    287  1d60				  -	      IF	DEBUG_DISPLAY=1
    288  1d60				  -			;sta temp
    289  1d60				  -	      ldx	#25
    290  1d60				  -	      ldy	#22
    291  1d60				  -	      jsr	displayHex
    292  1d60				  -	      lda	temp
    293  1d60				  -	      ldy	temp
    294  1d60				  -	      inc	1824+90
    295  1d60					      ENDIF
    296  1d60							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  1d60
    298  1d60		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    299  1d63		       4a		      lsr
    300  1d64		       4a		      lsr
    301  1d65		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    302  1d68		       38		      sec
    303  1d69		       e9 50		      sbc	#$50	; Center on zero
    304  1d6b		       30 09		      bmi	negPitch	; If negative...
    305  1d6d		       c9 46		      cmp	#70	; Max value
    306  1d6f		       30 0b		      bmi	setTuningValue
    307  1d71		       a9 46		      lda	#70	; Over max, so set to max value (50)
    308  1d73		       4c 7c 1d 	      jmp	setTuningValue
    309  1d76
    310  1d76		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
    311  1d76				   negPitch
    312  1d76		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
    313  1d78		       10 02		      bpl	setTuningValue
    314  1d7a		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
    315  1d7c
    316  1d7c				   setTuningValue
    317  1d7c		       8d f0 70 	      sta	midiTuning
    318  1d7f
    319  1d7f
    320  1d7f							;	lda firstDataByte
    321  1d7f
    322  1d7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  1d7f							; DEBUG - SHOW MIDI DATA
    324  1d7f				  -	      IF	DEBUG_DISPLAY=1
    325  1d7f				  -	      sta	temp
    326  1d7f				  -	      ldx	#25
    327  1d7f				  -	      ldy	#23
    328  1d7f				  -	      jsr	displayHex
    329  1d7f				  -	      lda	temp
    330  1d7f				  -	      ldy	temp
    331  1d7f					      ENDIF
    332  1d7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    333  1d7f
    334  1d7f		       60		      rts
    335  1d80
    336  1d80
    337  1d80				   controlChange
    338  1d80				  -	      IF	DEBUG_DISPLAY=1
    339  1d80				  -	      inc	1824+87
    340  1d80					      ENDIF
    341  1d80							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  1d80							; DEBUG - SHOW MIDI DATA
    343  1d80				  -	      IF	DEBUG_DISPLAY=1
    344  1d80				  -	      sta	temp
    345  1d80				  -	      lda	firstDataByte
    346  1d80				  -	      ldy	#21
    347  1d80				  -	      ldx	#17
    348  1d80				  -	      jsr	displayHex
    349  1d80				  -	      lda	temp
    350  1d80				  -	      ldy	temp
    351  1d80					      ENDIF
    352  1d80							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  1d80
    354  1d80					      IF	ENABLE_MIDI_COMMANDS=1
    355  1d80		       20 04 3b 	      jsr	midiReadWait	; Read controller value
    356  1d83					      ENDIF
    357  1d83		       a8		      tay
    358  1d84							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  1d84							; DEBUG - SHOW MIDI DATA
    360  1d84				  -	      IF	DEBUG_DISPLAY=1
    361  1d84				  -	      sta	temp
    362  1d84				  -			;lda firstDataByte
    363  1d84				  -	      ldy	#22
    364  1d84				  -	      ldx	#17
    365  1d84				  -	      jsr	displayHex
    366  1d84				  -	      lda	temp
    367  1d84				  -	      ldy	temp
    368  1d84					      ENDIF
    369  1d84							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  1d84		       ad 7e 70 	      lda	firstDataByte	; Get controller number
    371  1d87				  -	      IF	OFFSET_CONTROLLERS=1
    372  1d87				  -	      sec
    373  1d87				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
    374  1d87					      ENDIF
    375  1d87							;and #$0F ; Repeat every 16 controllers
    376  1d87		       29 ef		      and	#%11101111	; Repeat every 16 controllers
    377  1d89		       d0 0a		      bne	notResonance
    378  1d8b							;---- Resonance----
    379  1d8b		       98		      tya
    380  1d8c		       29 f0		      and	#$F0
    381  1d8e		       8d 97 70 	      sta	resonance
    382  1d91		       20 b4 10 	      jsr	setResonance
    383  1d94		       60		      rts
    384  1d95				   notResonance
    385  1d95		       c9 01		      cmp	#1
    386  1d97		       d0 11		      bne	notModWheel
    387  1d99							;----Mod wheel (filter)----
    388  1d99		       98		      tya
    389  1d9a		       0a		      asl
    390  1d9b		       a8		      tay
    391  1d9c		       8d 9d 70 	      sta	filterSetValue
    392  1d9f		       ad 29 70 	      lda	paddle
    393  1da2		       f0 05		      beq	skipTurnOffPaddle
    394  1da4		       a9 00		      lda	#0	; turn paddle off
    395  1da6		       20 41 11 	      jsr	setPaddles
    396  1da9				   skipTurnOffPaddle
    397  1da9
    398  1da9							;jsr ksetFilter
    399  1da9		       60		      rts
    400  1daa				   notModWheel
    401  1daa		       c9 02		      cmp	#2
    402  1dac		       d0 0e		      bne	notMode
    403  1dae							;---- Sound Mode----
    404  1dae		       98		      tya
    405  1daf		       4a		      lsr
    406  1db0		       4a		      lsr
    407  1db1		       4a		      lsr
    408  1db2		       29 0f		      and	#$0F
    409  1db4		       aa		      tax
    410  1db5		       bd 00 25 	      lda	modeList,x
    411  1db8		       20 5c 13 	      jsr	ksetMode
    412  1dbb		       60		      rts
    413  1dbc				   notMode
    414  1dbc		       c9 03		      cmp	#3
    415  1dbe		       d0 0b		      bne	notFX
    416  1dc0							;---- FX----
    417  1dc0		       98		      tya
    418  1dc1		       4a		      lsr
    419  1dc2		       4a		      lsr
    420  1dc3		       4a		      lsr
    421  1dc4		       4a		      lsr
    422  1dc5		       29 07		      and	#$07
    423  1dc7		       20 34 13 	      jsr	ksetFX
    424  1dca		       60		      rts
    425  1dcb				   notFX
    426  1dcb		       c9 04		      cmp	#4
    427  1dcd		       d0 08		      bne	notAttack
    428  1dcf							;--- Attack----
    429  1dcf		       98		      tya
    430  1dd0		       0a		      asl
    431  1dd1		       29 f0		      and	#$F0
    432  1dd3		       20 55 12 	      jsr	setAttack
    433  1dd6		       60		      rts
    434  1dd7				   notAttack
    435  1dd7		       c9 05		      cmp	#5
    436  1dd9		       d0 0c		      bne	notRelease
    437  1ddb							;---- Release----
    438  1ddb		       98		      tya
    439  1ddc		       4a		      lsr
    440  1ddd		       4a		      lsr
    441  1dde		       4a		      lsr
    442  1ddf		       29 0f		      and	#$0F
    443  1de1		       09 f0		      ora	#$F0
    444  1de3		       20 a8 11 	      jsr	setRelease
    445  1de6		       60		      rts
    446  1de7				   notRelease
    447  1de7		       c9 06		      cmp	#6
    448  1de9		       d0 2d		      bne	notPW
    449  1deb							;--- Pulse Width----
    450  1deb		       98		      tya
    451  1dec		       0a		      asl
    452  1ded		       09 10		      ora	#%10000
    453  1def		       20 6e 10 	      jsr	setPulseWidth
    454  1df2		       ee 00 04 	      inc	1024
    455  1df5		       ad 86 70 	      lda	fxType	; if pulse modulation is on...
    456  1df8		       c9 07		      cmp	#MOD_PW2
    457  1dfa		       f0 04		      beq	fxReset
    458  1dfc		       c9 06		      cmp	#MOD_PW_LFO
    459  1dfe		       d0 0b		      bne	noFXReset
    460  1e00				   fxReset
    461  1e00		       ee 01 04 	      inc	1025
    462  1e03		       a9 00		      lda	#0
    463  1e05		       8d 86 70 	      sta	fxType
    464  1e08		       20 37 13 	      jsr	setFX	; Turn off pulse modulation modes
    465  1e0b				   noFXReset
    466  1e0b		       ad 7a 70 	      lda	paddle2	; if paddle2 pulse width control is on...
    467  1e0e		       c9 01		      cmp	#1
    468  1e10		       d0 05		      bne	noPaddle2Reset	;
    469  1e12		       a9 00		      lda	#0
    470  1e14							;sta paddle2 ; Turn off paddle 2 pulse control
    471  1e14		       20 4c 10 	      jsr	ksetPad2
    472  1e17				   noPaddle2Reset
    473  1e17		       60		      rts
    474  1e18				   notPW
    475  1e18		       c9 07		      cmp	#7
    476  1e1a		       d0 08		      bne	notVolume
    477  1e1c							; ----Volume----
    478  1e1c		       98		      tya
    479  1e1d		       4a		      lsr
    480  1e1e		       4a		      lsr
    481  1e1f		       4a		      lsr
    482  1e20		       20 88 12 	      jsr	ksetVolume
    483  1e23		       60		      rts
    484  1e24				   notVolume
    485  1e24		       c9 08		      cmp	#8
    486  1e26		       d0 0b		      bne	notTremolo
    487  1e28							;---- Tremolo level----
    488  1e28		       98		      tya
    489  1e29		       4a		      lsr
    490  1e2a		       4a		      lsr
    491  1e2b		       4a		      lsr
    492  1e2c		       4a		      lsr
    493  1e2d		       29 03		      and	#$03
    494  1e2f		       20 62 11 	      jsr	setLFODepth
    495  1e32		       60		      rts
    496  1e33				   notTremolo
    497  1e33		       c9 09		      cmp	#9
    498  1e35		       d0 0b		      bne	notTremRate
    499  1e37							;---- Tremolo level----
    500  1e37		       98		      tya
    501  1e38		       4a		      lsr
    502  1e39		       4a		      lsr
    503  1e3a		       4a		      lsr
    504  1e3b		       4a		      lsr
    505  1e3c		       29 03		      and	#$03
    506  1e3e		       20 78 11 	      jsr	setLFORate
    507  1e41		       60		      rts
    508  1e42				   notTremRate
    509  1e42		       c9 0d		      cmp	#13
    510  1e44		       d0 14		      bne	notWaveform
    511  1e46							;--- Waveform (all voices)---
    512  1e46		       98		      tya
    513  1e47		       4a		      lsr
    514  1e48		       4a		      lsr
    515  1e49		       4a		      lsr
    516  1e4a		       29 03		      and	#$03
    517  1e4c		       aa		      tax
    518  1e4d		       bd 7f 1e 	      lda	waveForms,x
    519  1e50		       8d 37 70 	      sta	WaveType2
    520  1e53		       8d 3e 70 	      sta	WaveType3
    521  1e56		       8d 30 70 	      sta	WaveType
    522  1e59		       60		      rts
    523  1e5a				   notWaveform
    524  1e5a		       c9 0e		      cmp	#14
    525  1e5c		       d0 0e		      bne	notWaveform2
    526  1e5e							;--- Waveform (voice 2 only)----
    527  1e5e		       98		      tya
    528  1e5f		       4a		      lsr
    529  1e60		       4a		      lsr
    530  1e61		       4a		      lsr
    531  1e62		       29 03		      and	#$03
    532  1e64		       aa		      tax
    533  1e65		       bd 7f 1e 	      lda	waveForms,x
    534  1e68		       8d 37 70 	      sta	WaveType2
    535  1e6b		       60		      rts
    536  1e6c				   notWaveform2
    537  1e6c		       c9 0f		      cmp	#15
    538  1e6e		       d0 0e		      bne	notWaveform3
    539  1e70							;---- Waveform (voice 3 only)----
    540  1e70		       98		      tya
    541  1e71		       4a		      lsr
    542  1e72		       4a		      lsr
    543  1e73		       4a		      lsr
    544  1e74		       29 03		      and	#$03
    545  1e76		       aa		      tax
    546  1e77		       bd 7f 1e 	      lda	waveForms,x
    547  1e7a		       8d 3e 70 	      sta	WaveType3
    548  1e7d		       60		      rts
    549  1e7e				   notWaveform3
    550  1e7e		       60		      rts
    551  1e7f
    552  1e7f				   waveForms
    553  1e7f		       10 20 40 80	      byte.b	$10,$20,$40,$80
    554  1e83							;-  -	-  -  -  -  -  -
    555  1e83
    556  1e83							;IF ENABLE_MIDI_COMMANDS=1
    557  1e83					      ENDIF
    558  1e83
    559  1e83
    560  1e83
    561  1e83							; note is in Y
    562  1e83				   noteOn
    563  1e83
    564  1e83		       8d 0c 70 	      sta	temp
    565  1e86					      IF	ENABLE_MIDI_COMMANDS=1
    566  1e86		       20 04 3b 	      jsr	midiReadWait	; Read velocity byte
    567  1e89					      ENDIF
    568  1e89		       8d 7f 70 	      sta	tempVelocity
    569  1e8c		       d0 09		      bne	almostNoteOn
    570  1e8e							; Zero-velocity, so it's really a note-off...
    571  1e8e							;inc 53280
    572  1e8e		       ad 7e 70 	      lda	firstDataByte
    573  1e91		       38		      sec
    574  1e92		       e9 0c		      sbc	#12	; Down one octave
    575  1e94		       4c cb 1e 	      jmp	doNoteOff
    576  1e97				   almostNoteOn
    577  1e97							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    578  1e97							; DEBUG - SHOW MIDI DATA
    579  1e97				  -	      IF	DEBUG_DISPLAY=1
    580  1e97				  -	      sta	temp
    581  1e97				  -	      lda	noteOnCount
    582  1e97				  -	      and	#1
    583  1e97				  -	      asl
    584  1e97				  -	      asl
    585  1e97				  -	      asl
    586  1e97				  -	      ora	#$F4
    587  1e97				  -	      sta	hexDispColor
    588  1e97				  -	      lda	noteOnCount
    589  1e97				  -	      and	#%1111
    590  1e97				  -	      asl
    591  1e97				  -	      tax
    592  1e97				  -			;lda temp
    593  1e97				  -	      lda	savedMidiStatus
    594  1e97				  -	      ldy	#6
    595  1e97				  -	      jsr	displayHex
    596  1e97				  -	      lda	temp
    597  1e97				  -	      ldy	temp
    598  1e97				  -	      inc	1824+83	; DEBUG INDICATOR
    599  1e97					      ENDIF
    600  1e97							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    601  1e97		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
    602  1e9a		       38		      sec
    603  1e9b		       e9 0c		      sbc	#12	; Down one octave
    604  1e9d				   doNoteOn
    605  1e9d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    606  1e9d							; DEBUG - SHOW MIDI DATA
    607  1e9d				  -	      IF	DEBUG_DISPLAY=1
    608  1e9d				  -	      sta	temp
    609  1e9d				  -	      lda	noteOnCount
    610  1e9d				  -	      and	#%1111
    611  1e9d				  -	      asl
    612  1e9d				  -	      tax
    613  1e9d				  -	      lda	temp
    614  1e9d				  -	      ldy	#7
    615  1e9d				  -	      jsr	displayHex
    616  1e9d				  -	      lda	temp
    617  1e9d				  -	      ldy	temp
    618  1e9d					      ENDIF
    619  1e9d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    620  1e9d
    621  1e9d							; Find empty note slot...
    622  1e9d		       ae 80 70 	      ldx	bufferSize	;3
    623  1ea0		       a8		      tay
    624  1ea1							;ldx #3 ; DEBUG!
    625  1ea1		       ca		      dex
    626  1ea2				   noteOnLoop
    627  1ea2		       bd a0 70 	      lda	noteNumArray,x
    628  1ea5		       c9 ff		      cmp	#255
    629  1ea7		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
    630  1ea9		       ca		      dex
    631  1eaa		       10 f6		      bpl	noteOnLoop
    632  1eac		       a2 00		      ldx	#0
    633  1eae				   quitNoteOnLoop
    634  1eae
    635  1eae		       98		      tya
    636  1eaf		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
    637  1eb2
    638  1eb2							;jsr midiReadWait ; Read velocity byte
    639  1eb2		       ad 7f 70 	      lda	tempVelocity
    640  1eb5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    641  1eb5							; DEBUG - SHOW MIDI DATA
    642  1eb5				  -	      IF	DEBUG_DISPLAY=1
    643  1eb5				  -	      sta	temp
    644  1eb5				  -	      lda	noteOnCount
    645  1eb5				  -	      and	#%1111
    646  1eb5				  -	      asl
    647  1eb5				  -	      tax
    648  1eb5				  -	      lda	temp
    649  1eb5				  -	      ldy	#8
    650  1eb5				  -	      jsr	displayHex
    651  1eb5				  -	      lda	temp
    652  1eb5				  -	      ldy	temp
    653  1eb5					      ENDIF
    654  1eb5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    655  1eb5							;/----------------------
    656  1eb5		       ee 8c 70 	      inc	noteOnCount
    657  1eb8		       60		      rts
    658  1eb9
    659  1eb9				   noteOff
    660  1eb9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  1eb9							; DEBUG - SHOW MIDI DATA
    662  1eb9				  -	      IF	DEBUG_DISPLAY=1
    663  1eb9				  -	      sta	temp
    664  1eb9				  -	      lda	noteOffCount
    665  1eb9				  -	      and	#1
    666  1eb9				  -			;eor #1
    667  1eb9				  -	      asl
    668  1eb9				  -	      asl
    669  1eb9				  -	      asl
    670  1eb9				  -	      ora	#$F4
    671  1eb9				  -	      sta	hexDispColor
    672  1eb9				  -	      lda	noteOffCount
    673  1eb9				  -	      and	#%1111
    674  1eb9				  -	      asl
    675  1eb9				  -	      tax
    676  1eb9				  -	      lda	temp
    677  1eb9				  -	      ldy	#10
    678  1eb9				  -	      jsr	displayHex
    679  1eb9				  -	      lda	temp
    680  1eb9				  -	      ldy	temp
    681  1eb9					      ENDIF
    682  1eb9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    683  1eb9
    684  1eb9							;jmp endMIDI
    685  1eb9
    686  1eb9		       8d 0c 70 	      sta	temp
    687  1ebc					      IF	ENABLE_MIDI_COMMANDS=1
    688  1ebc		       20 04 3b 	      jsr	midiReadWait	; Read velocity byte
    689  1ebf					      ENDIF
    690  1ebf		       8d 7f 70 	      sta	tempVelocity
    691  1ec2		       ad 0c 70 	      lda	temp
    692  1ec5
    693  1ec5		       ad 7e 70 	      lda	firstDataByte
    694  1ec8		       38		      sec
    695  1ec9		       e9 0c		      sbc	#12	; Down one octave
    696  1ecb							;jsr midiReadWait ; Note number
    697  1ecb
    698  1ecb				   doNoteOff
    699  1ecb							; Find matching note number to turn note off...
    700  1ecb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    701  1ecb							; DEBUG - SHOW MIDI DATA
    702  1ecb				  -	      IF	DEBUG_DISPLAY=1
    703  1ecb				  -	      sta	temp
    704  1ecb				  -	      lda	noteOffCount
    705  1ecb				  -	      and	#%1111
    706  1ecb				  -	      asl
    707  1ecb				  -	      tax
    708  1ecb				  -	      lda	temp
    709  1ecb				  -	      ldy	#11
    710  1ecb				  -	      jsr	displayHex
    711  1ecb				  -	      lda	temp
    712  1ecb				  -	      ldy	temp
    713  1ecb					      ENDIF
    714  1ecb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    715  1ecb
    716  1ecb		       ae 80 70 	      ldx	bufferSize	;3
    717  1ece		       8d 0c 70 	      sta	temp
    718  1ed1							;ldx #3 ; DEBUG!
    719  1ed1		       ca		      dex
    720  1ed2				   killNoteLoop
    721  1ed2		       bd a0 70 	      lda	noteNumArray,x
    722  1ed5		       cd 0c 70 	      cmp	temp	; Note match?
    723  1ed8		       f0 06		      beq	foundNote	; Then go turn off note
    724  1eda		       ca		      dex		; next slot
    725  1edb		       10 f5		      bpl	killNoteLoop	; loop through all slots
    726  1edd							;Not found, so ignore
    727  1edd		       4c e5 1e 	      jmp	endNoteOff
    728  1ee0
    729  1ee0				   foundNote
    730  1ee0		       a9 ff		      lda	#255
    731  1ee2		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
    732  1ee5
    733  1ee5				   endNoteOff
    734  1ee5		       ad 7f 70 	      lda	tempVelocity
    735  1ee8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    736  1ee8							; DEBUG - SHOW MIDI DATA
    737  1ee8				  -	      IF	DEBUG_DISPLAY=1
    738  1ee8				  -	      sta	temp
    739  1ee8				  -	      lda	noteOffCount
    740  1ee8				  -	      and	#%1111
    741  1ee8				  -	      asl
    742  1ee8				  -	      tax
    743  1ee8				  -	      lda	temp
    744  1ee8				  -	      ldy	#12
    745  1ee8				  -	      jsr	displayHex
    746  1ee8				  -	      lda	temp
    747  1ee8				  -	      ldy	temp
    748  1ee8					      ENDIF
    749  1ee8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    750  1ee8							;/----------------------
    751  1ee8		       ee 8b 70 	      inc	noteOffCount
    752  1eeb		       60		      rts
    753  1eec
    754  1eec
    755  1eec				   endMIDI
    756  1eec							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    757  1eec							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  1eec							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    759  1eec							; FILL EMPTY PLAYABLE NOTES WITH ANY
    760  1eec							; NON-PLAYING NOTES IN THE BUFFER
    761  1eec							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    762  1eec							;jsr doSort
    763  1eec
    764  1eec		       ae 84 70 	      ldx	polyphony
    765  1eef		       ca		      dex
    766  1ef0							;ldx #2 ; DEBUG
    767  1ef0				   noteScan
    768  1ef0		       bd a0 70 	      lda	noteNumArray,x
    769  1ef3		       c9 ff		      cmp	#255	; Is note off?
    770  1ef5		       f0 06		      beq	searchCopyNote
    771  1ef7				   contNoteScan
    772  1ef7		       ca		      dex
    773  1ef8		       10 f6		      bpl	noteScan	; Loop...
    774  1efa		       4c 19 1f 	      jmp	quitNoteScan	; Done, jump to end
    775  1efd
    776  1efd				   searchCopyNote
    777  1efd							;ldy bufferSize
    778  1efd							;dey
    779  1efd							;ldy #3
    780  1efd		       ac 84 70 	      ldy	polyphony
    781  1f00				   copyNoteLoop
    782  1f00		       b9 a0 70 	      lda	noteNumArray,y
    783  1f03		       c9 ff		      cmp	#255
    784  1f05		       d0 07		      bne	replaceNote
    785  1f07		       c8		      iny
    786  1f08		       c0 08		      cpy	#NOTE_BUF_SIZE
    787  1f0a		       f0 eb		      beq	contNoteScan
    788  1f0c		       d0 f2		      bne	copyNoteLoop
    789  1f0e
    790  1f0e				   replaceNote
    791  1f0e		       9d a0 70 	      sta	noteNumArray,x
    792  1f11		       a9 ff		      lda	#255
    793  1f13		       99 a0 70 	      sta	noteNumArray,y
    794  1f16		       4c f7 1e 	      jmp	contNoteScan
    795  1f19
    796  1f19				   quitNoteScan
    797  1f19		       60		      rts
    798  1f1a							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    799  1f1a
    800  1f1a
    801  1f1a
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sidedit.asm LEVEL 2 PASS 2
      0  1f1a					      include	"cynth_sidedit.asm"
      1  1f1a		       00 04	   HEX_DISP_OFFSET equ	4
      2  1f1a
      3  1f1a
      4  1f1a							;---------------------------------
      5  1f1a							; Wait until no hex key is down
      6  1f1a							; (doesn't check all keys, only hex keys!)
      7  1f1a				   waitForKeyRelease
      8  1f1a		       20 ea 20 	      jsr	readHexKey
      9  1f1d		       c9 ff		      cmp	#255
     10  1f1f		       d0 f9		      bne	waitForKeyRelease
     11  1f21		       a2 ff		      ldx	#255	; Always 255
     12  1f23		       a0 60		      ldy	#96	; Delay amount
     13  1f25				   delay		; Delay a short time to avoid catching key bounce...
     14  1f25		       ca		      dex
     15  1f26		       d0 fd		      bne	delay
     16  1f28		       88		      dey
     17  1f29		       d0 fa		      bne	delay
     18  1f2b		       60		      rts
     19  1f2c
     20  1f2c
     21  1f2c							;===============================================
     22  1f2c							; Allow the user to hex edit the SID registers
     23  1f2c							; directly.
     24  1f2c				   SIDEdit
     25  1f2c
     26  1f2c							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
     27  1f2c		       ae 9d 70 	      ldx	filterSetValue
     28  1f2f		       8e 54 70 	      stx	sidEditSaveTemp5
     29  1f32
     30  1f32		       8d 60 70 	      sta	hexKeyMode
     31  1f35
     32  1f35							;jsr beep
     33  1f35							;jsr beep
     34  1f35							;jsr beep
     35  1f35
     36  1f35		       20 b9 0c 	      jsr	clrScr
     37  1f38		       20 fa 0b 	      jsr	displayInit
     38  1f3b
     39  1f3b							; X = low data address
     40  1f3b							; Y = high data address
     41  1f3b		       a2 2a		      ldx	#>hexEditHelp	;low/MSB
     42  1f3d		       a0 6b		      ldy	#<hexEditHelp	;high/LSB
     43  1f3f		       20 10 0d 	      jsr	displayPage
     44  1f42
     45  1f42		       20 6f 20 	      jsr	showSidValues
     46  1f45
     47  1f45
     48  1f45							;enable keyboard interrupt
     49  1f45							;	lda #129
     50  1f45							;	sta 56333
     51  1f45							; wait for all keys to be released first
     52  1f45							;waitForNoKey:
     53  1f45							;	lda 197
     54  1f45							;	cmp #64
     55  1f45							;	bne waitForNoKey
     56  1f45
     57  1f45
     58  1f45							; clear top line
     59  1f45		       a2 09		      ldx	#9
     60  1f47		       a9 20		      lda	#32
     61  1f49				   hexClearA
     62  1f49		       9d 00 04 	      sta	1024,x
     63  1f4c		       ca		      dex
     64  1f4d		       10 fa		      bpl	hexClearA
     65  1f4f
     66  1f4f							; display "sid edit" text
     67  1f4f		       a2 5c		      ldx	#92
     68  1f51		       a0 00		      ldy	#0
     69  1f53		       20 99 0c 	      jsr	updateText
     70  1f56
     71  1f56							;jsr waitForKeyRelease
     72  1f56
     73  1f56							; get/display the first hex digit of the address to edit
     74  1f56		       a9 24		      lda	#36
     75  1f58		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     76  1f5b		       20 df 20 	      jsr	getHexKey
     77  1f5e		       c9 10		      cmp	#16	; cancelled
     78  1f60		       d0 03		      bne	notCancelled
     79  1f62		       4c 57 20 	      jmp	waitKeyRelease
     80  1f65				   notCancelled
     81  1f65		       aa		      tax
     82  1f66		       0a		      asl
     83  1f67		       0a		      asl
     84  1f68		       0a		      asl
     85  1f69		       0a		      asl
     86  1f6a		       8d 5a 70 	      sta	SIDeditAddr
     87  1f6d		       bd f1 33 	      lda	hexDisplay,x
     88  1f70		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     89  1f73
     90  1f73							;sta 1024
     91  1f73							;jsr waitForKeyRelease
     92  1f73							;sta 1024
     93  1f73
     94  1f73							; get/display the second hex digit of the address to edit
     95  1f73		       a9 24		      lda	#36
     96  1f75		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
     97  1f78		       20 df 20 	      jsr	getHexKey
     98  1f7b		       c9 10		      cmp	#16	; cancelled
     99  1f7d		       d0 03		      bne	notCancelled2
    100  1f7f		       4c 57 20 	      jmp	waitKeyRelease
    101  1f82				   notCancelled2
    102  1f82		       aa		      tax
    103  1f83		       0d 5a 70 	      ora	SIDeditAddr
    104  1f86		       8d 5a 70 	      sta	SIDeditAddr
    105  1f89		       bd f1 33 	      lda	hexDisplay,x
    106  1f8c		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
    107  1f8f
    108  1f8f							; display a '>' between
    109  1f8f		       a9 3e		      lda	#62
    110  1f91		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
    111  1f94
    112  1f94							; get/display the first hex digit of the value to write
    113  1f94		       a9 24		      lda	#36
    114  1f96		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    115  1f99		       20 df 20 	      jsr	getHexKey
    116  1f9c		       c9 10		      cmp	#16	; cancelled
    117  1f9e		       d0 03		      bne	notCancelled3
    118  1fa0		       4c 57 20 	      jmp	waitKeyRelease
    119  1fa3				   notCancelled3
    120  1fa3		       aa		      tax
    121  1fa4		       0a		      asl
    122  1fa5		       0a		      asl
    123  1fa6		       0a		      asl
    124  1fa7		       0a		      asl
    125  1fa8		       8d 5b 70 	      sta	SIDeditValue
    126  1fab		       bd f1 33 	      lda	hexDisplay,x
    127  1fae		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    128  1fb1
    129  1fb1							; get/display the second hex digit of the value to write
    130  1fb1		       a9 24		      lda	#36
    131  1fb3		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    132  1fb6		       20 df 20 	      jsr	getHexKey
    133  1fb9		       c9 10		      cmp	#16	; cancelled
    134  1fbb		       d0 03		      bne	notCancelled4
    135  1fbd		       4c 57 20 	      jmp	waitKeyRelease
    136  1fc0				   notCancelled4
    137  1fc0		       aa		      tax
    138  1fc1		       0d 5b 70 	      ora	SIDeditValue
    139  1fc4		       8d 5b 70 	      sta	SIDeditValue
    140  1fc7		       bd f1 33 	      lda	hexDisplay,x
    141  1fca		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    142  1fcd
    143  1fcd							; if <=$20 then write to all 3 SID oscillator regs
    144  1fcd		       ae 5a 70 	      ldx	SIDeditAddr
    145  1fd0		       e0 20		      cpx	#$20
    146  1fd2		       30 2e		      bmi	normalWrite
    147  1fd4							;--------------
    148  1fd4		       ad 5b 70 	      lda	SIDeditValue
    149  1fd7		       9d e0 d3 	      sta	SID1-32,x
    150  1fda		       9d 00 d4 	      sta	SID2-32,x
    151  1fdd		       9d e0 70 	      sta	sidData-32,x
    152  1fe0		       9d e7 d3 	      sta	SID1-32+#$7,x
    153  1fe3		       9d 07 d4 	      sta	SID2-32+#$7,x
    154  1fe6		       9d e7 70 	      sta	sidData-32+#$7,x
    155  1fe9		       9d ee d3 	      sta	SID1-32+#$E,x
    156  1fec		       9d 0e d4 	      sta	SID2-32+#$E,x
    157  1fef		       9d ee 70 	      sta	sidData-32+#$E,x
    158  1ff2		       e0 24		      cpx	#SV1WAVE+32
    159  1ff4		       d0 09		      bne	no3Wave
    160  1ff6		       8d 30 70 	      sta	WaveType
    161  1ff9		       8d 37 70 	      sta	WaveType2
    162  1ffc		       8d 3e 70 	      sta	WaveType3
    163  1fff				   no3Wave
    164  1fff		       4c 3d 20 	      jmp	skipNormalWrite
    165  2002							;...............
    166  2002				   normalWrite
    167  2002							; write the value to both sids
    168  2002		       ae 5a 70 	      ldx	SIDeditAddr
    169  2005		       ad 5b 70 	      lda	SIDeditValue
    170  2008		       9d 00 d4 	      sta	SID1,x
    171  200b		       9d 20 d4 	      sta	SID2,x
    172  200e		       9d 00 71 	      sta	sidData,x
    173  2011
    174  2011		       e0 04		      cpx	#SV1WAVE
    175  2013		       d0 03		      bne	noWave1
    176  2015		       8d 30 70 	      sta	WaveType
    177  2018				   noWave1
    178  2018
    179  2018		       e0 0b		      cpx	#SV2WAVE
    180  201a		       d0 03		      bne	noWave2
    181  201c		       8d 37 70 	      sta	WaveType2
    182  201f				   noWave2
    183  201f
    184  201f		       e0 12		      cpx	#SV3WAVE
    185  2021		       d0 03		      bne	noWave3
    186  2023		       8d 3e 70 	      sta	WaveType3
    187  2026				   noWave3
    188  2026
    189  2026		       e0 16		      cpx	#SFILTH
    190  2028		       d0 03		      bne	noFiltSave
    191  202a		       8d 57 70 	      sta	filter
    192  202d				   noFiltSave
    193  202d
    194  202d							; turn off paddles if filter was adjusted
    195  202d		       e0 15		      cpx	#SFILTL
    196  202f		       f0 04		      beq	paddleOffhex
    197  2031		       e0 16		      cpx	#SFILTH
    198  2033		       d0 08		      bne	noPaddleOff
    199  2035				   paddleOffhex
    200  2035		       a9 00		      lda	#0
    201  2037		       8d 29 70 	      sta	paddle	; turn off paddle controller first
    202  203a		       20 5b 11 	      jsr	showPaddle
    203  203d				   noPaddleOff
    204  203d
    205  203d				   skipNormalWrite
    206  203d		       ae 5a 70 	      ldx	SIDeditAddr
    207  2040		       ad 5b 70 	      lda	SIDeditValue
    208  2043
    209  2043							; check for a volume/mode change...
    210  2043							; if changed, write it to related variables too
    211  2043		       e0 18		      cpx	#SVOLMODE
    212  2045		       d0 10		      bne	noVolumeSetting
    213  2047		       8d 0c 70 	      sta	temp
    214  204a		       29 f0		      and	#$F0
    215  204c		       8d 24 70 	      sta	volModeRAM
    216  204f		       ad 0c 70 	      lda	temp
    217  2052		       29 0f		      and	#$0F
    218  2054		       8d 1c 70 	      sta	volume
    219  2057				   noVolumeSetting
    220  2057							;	lda volModeRAM
    221  2057							;	and #$F0
    222  2057							;	ora volume
    223  2057
    224  2057							; wait for key to be released before returning
    225  2057				   waitKeyRelease
    226  2057		       a5 c5		      lda	197
    227  2059		       c9 40		      cmp	#64
    228  205b		       d0 fa		      bne	waitKeyRelease
    229  205d
    230  205d							; reset volume (messed up from clicks)
    231  205d		       20 8b 12 	      jsr	setVolume
    232  2060
    233  2060		       a9 00		      lda	#0
    234  2062							;sta helpMode
    235  2062		       20 2f 11 	      jsr	setHelpMode
    236  2065		       20 fa 0b 	      jsr	displayInit
    237  2068							; X = low data address
    238  2068							; Y = high data address
    239  2068							;	ldx #>hexEditHelp ;low/MSB
    240  2068							;	ldy #<hexEditHelp ;high/LSB
    241  2068							;	jsr displayPage
    242  2068							;	jsr showSidValues
    243  2068
    244  2068							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
    245  2068		       ad 54 70 	      lda	sidEditSaveTemp5
    246  206b		       8d 9d 70 	      sta	filterSetValue
    247  206e
    248  206e
    249  206e		       60		      rts		; EXIT HEX EDIT MODE
    250  206f							; -------------------------------------------------- /
    251  206f
    252  206f
    253  206f
    254  206f							;************************************
    255  206f				   showSidValues
    256  206f		       a0 02		      ldy	#2
    257  2071				   sidDispLoop1
    258  2071		       8c 73 70 	      sty	sidTemp1
    259  2074		       b9 00 71 	      lda	sidData,y
    260  2077		       8d 74 70 	      sta	sidTemp2
    261  207a		       98		      tya
    262  207b		       0a		      asl
    263  207c		       18		      clc
    264  207d		       69 04		      adc	#4
    265  207f		       a8		      tay
    266  2080		       ad 74 70 	      lda	sidTemp2
    267  2083		       a2 06		      ldx	#6
    268  2085		       20 cd 0c 	      jsr	displayHex
    269  2088		       ac 73 70 	      ldy	sidTemp1
    270  208b							;---------------
    271  208b		       b9 07 71 	      lda	sidData+7,y
    272  208e		       8d 74 70 	      sta	sidTemp2
    273  2091		       98		      tya
    274  2092		       0a		      asl
    275  2093		       18		      clc
    276  2094		       69 04		      adc	#4
    277  2096		       a8		      tay
    278  2097		       ad 74 70 	      lda	sidTemp2
    279  209a		       a2 0a		      ldx	#10
    280  209c		       20 cd 0c 	      jsr	displayHex
    281  209f		       ac 73 70 	      ldy	sidTemp1
    282  20a2							;---------------
    283  20a2		       b9 0e 71 	      lda	sidData+14,y
    284  20a5		       8d 74 70 	      sta	sidTemp2
    285  20a8		       98		      tya
    286  20a9		       0a		      asl
    287  20aa		       18		      clc
    288  20ab		       69 04		      adc	#4
    289  20ad		       a8		      tay
    290  20ae		       ad 74 70 	      lda	sidTemp2
    291  20b1		       a2 0e		      ldx	#14
    292  20b3		       20 cd 0c 	      jsr	displayHex
    293  20b6		       ac 73 70 	      ldy	sidTemp1
    294  20b9
    295  20b9		       c8		      iny
    296  20ba		       c0 07		      cpy	#7
    297  20bc		       d0 b3		      bne	sidDispLoop1
    298  20be							;---------------
    299  20be							;---------------
    300  20be		       a0 15		      ldy	#$15
    301  20c0				   sidDispLoop2
    302  20c0		       8c 73 70 	      sty	sidTemp1
    303  20c3		       b9 00 71 	      lda	sidData,y
    304  20c6		       8d 74 70 	      sta	sidTemp2
    305  20c9		       98		      tya
    306  20ca		       38		      sec
    307  20cb		       e9 02		      sbc	#2
    308  20cd		       a8		      tay
    309  20ce		       ad 74 70 	      lda	sidTemp2
    310  20d1		       a2 05		      ldx	#5
    311  20d3		       20 cd 0c 	      jsr	displayHex
    312  20d6		       ac 73 70 	      ldy	sidTemp1
    313  20d9
    314  20d9		       c8		      iny
    315  20da		       c0 19		      cpy	#$19
    316  20dc		       d0 e2		      bne	sidDispLoop2
    317  20de							;---------------
    318  20de		       60		      rts
    319  20df
    320  20df
    321  20df
    322  20df							;=======================================================================
    323  20df							; waits for user to press a key (0-F) and returns
    324  20df							; the value in A
    325  20df				   getHexKey
    326  20df		       20 1a 1f 	      jsr	waitForKeyRelease
    327  20e2				   getHexLoop
    328  20e2							;inc 1024
    329  20e2		       20 ea 20 	      jsr	readHexKey
    330  20e5		       c9 ff		      cmp	#255	; No key pressed
    331  20e7		       f0 f9		      beq	getHexLoop
    332  20e9							;inc 1025
    333  20e9		       60		      rts
    334  20ea
    335  20ea
    336  20ea
    337  20ea							;=======================================================================
    338  20ea							; Returns the currently pressed hex key, or #255 if none
    339  20ea							; is currently pressed
    340  20ea				   readHexKey
    341  20ea
    342  20ea		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
    343  20ed		       f0 1a		      beq	normalHexKey
    344  20ef
    345  20ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    346  20ef							; Use piano keys to enter hex numbers
    347  20ef				   pianoHexKey
    348  20ef		       a0 00		      ldy	#0
    349  20f1				   checkLoop2
    350  20f1		       b9 60 21 	      lda	hexColPiano,y
    351  20f4		       f0 10		      beq	quitCheck2
    352  20f6		       8d 00 dc 	      sta	56320
    353  20f9		       ad 01 dc 	      lda	56321
    354  20fc		       39 84 21 	      and	hexRowPiano,y
    355  20ff		       d0 02		      bne	notPressed2
    356  2101		       98		      tya
    357  2102							;sta 1027
    358  2102		       60		      rts
    359  2103							;jmp quitCheck2
    360  2103				   notPressed2
    361  2103		       c8		      iny
    362  2104		       d0 eb		      bne	checkLoop2
    363  2106				   quitCheck2
    364  2106		       a9 ff		      lda	#255	; no key pressed
    365  2108		       60		      rts
    366  2109							;jmp pianoHexKey
    367  2109							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  2109
    369  2109							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  2109							; Use normal keys (0-9,A-F) to enter hex numbers
    371  2109				   normalHexKey
    372  2109		       a0 00		      ldy	#0
    373  210b				   checkLoop3
    374  210b		       b9 72 21 	      lda	hexCol,y
    375  210e		       f0 10		      beq	quitCheck3
    376  2110		       8d 00 dc 	      sta	56320
    377  2113		       ad 01 dc 	      lda	56321
    378  2116		       39 96 21 	      and	hexRow,y
    379  2119		       d0 02		      bne	notPressed3
    380  211b		       98		      tya
    381  211c							;sta 1027
    382  211c		       60		      rts
    383  211d							;jmp quitCheck3
    384  211d				   notPressed3
    385  211d		       c8		      iny
    386  211e		       d0 eb		      bne	checkLoop3
    387  2120				   quitCheck3
    388  2120		       a9 ff		      lda	#255	; no key pressed
    389  2122		       60		      rts
    390  2123
    391  2123							;beep:
    392  2123							;ldx #3
    393  2123							;beepLoop:
    394  2123							;	lda volModeRAM
    395  2123							;	ora #$0F
    396  2123							;	sta SID1+SVOLMODE
    397  2123							;	sta SID2+SVOLMODE
    398  2123							;	sta sidData+SVOLMODE
    399  2123							;	jsr clickDelay
    400  2123							;	lda volModeRAM
    401  2123							;	and #$F0
    402  2123							;	sta SID1+SVOLMODE
    403  2123							;	sta SID2+SVOLMODE
    404  2123							;	sta sidData+SVOLMODE
    405  2123							;	dex
    406  2123							;	bne beepLoop
    407  2123							;	rts
    408  2123
    409  2123
    410  2123							; ------------------------------------
    411  2123							; delay for click (for beep) -- uses Y
    412  2123							;clickDelay:
    413  2123							;ldy #$10
    414  2123							;sty temp
    415  2123							;mainDelayLoop:
    416  2123							;	ldy #0
    417  2123							;innerDelayLoop:
    418  2123							;	dey
    419  2123							;	bne innerDelayLoop
    420  2123							;	dec temp
    421  2123							;	bne mainDelayLoop
    422  2123							;	rts
    423  2123
------- FILE cynthcart2.0.1.asm
   1047  2123
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  2123					      include	"cynth_subroutines.asm"	; Extra subroutines - currently just note sorting routine
      1  2123							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  2123							;
      3  2123							; input:
      4  2123							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  2123							;			 should point to the byte just before the first byte to be sorted
      6  2123							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  2123							;nval	 - number of values,  1<= nval <= 255
      8  2123							;			 value will be destroyed (set to zero)
      9  2123							;
     10  2123
     11  2123
     12  2123							;*=$6000			;code anywhere in ram or rom
     13  2123
     14  2123							;=====================================================================
     15  2123							; CUSTOM SORT FOR NOTE ARRAY
     16  2123				   doSort
     17  2123		       a9 08		      lda	#8
     18  2125		       8d 22 01 	      sta	nval
     19  2128				   sort
     20  2128		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  212b		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  212e		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  2131		       4c 3f 21 	      jmp	l2
     24  2134				   l1
     25  2134		       88		      dey
     26  2135		       f0 11		      beq	l3
     27  2137		       b9 9f 70 	      lda	noteNumArray-1,y
     28  213a		       cd 26 01 	      cmp	work2
     29  213d		       90 f5		      bcc	l1
     30  213f				   l2
     31  213f		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  2142		       8d 26 01 	      sta	work2	;potentially largest value
     33  2145		       4c 34 21 	      jmp	l1
     34  2148				   l3
     35  2148		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  214b		       ad 26 01 	      lda	work2	;the largest value
     37  214e		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  2151		       ac 25 01 	      ldy	work1	;index of free space
     39  2154		       ad 27 01 	      lda	work3	;the over-written value
     40  2157		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  215a		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  215d		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  215f		       60		      rts
     44  2160							;=====================================================================
     45  2160
     46  2160
     47  2160
     48  2160
     49  2160							;=====================================================================
     50  2160							; ORIGINAL VERSION
     51  2160							;originalSort:
     52  2160							;ldy nval			 ;start of subroutine sort
     53  2160							;;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  2160							;sta work3			;save value. will be over-written by largest number
     55  2160							;jmp l2
     56  2160							;l1:
     57  2160							;dey
     58  2160							;beq l3
     59  2160							;;lda (zpadd),y
     60  2160							;cmp work2
     61  2160							;bcc l1
     62  2160							;l2:
     63  2160							;sty work1			;index of potentially largest value
     64  2160							;sta work2			;potentially largest value
     65  2160							;jmp l1
     66  2160							;l3:
     67  2160							;ldy nval				;where the largest value shall be put
     68  2160							;lda work2			;the largest value
     69  2160							;;sta (zpadd),y		;put largest value in place
     70  2160							;ldy work1			;index of free space
     71  2160							;lda work3			;the over-written value
     72  2160							;;sta (zpadd),y		;put the over-written value in the free space
     73  2160							;dec nval				;end of the shorter sequence still left
     74  2160							;bne sort				;start working with the shorter sequence
     75  2160							;rts
     76  2160							;=====================================================================
     77  2160
     78  2160
------- FILE cynthcart2.0.1.asm
   1049  2160
------- FILE cynth_keycommands.asm LEVEL 2 PASS 2
      0  2160					      include	"cynth_keycommands.asm"	; key matrix tables and key command tables
      1  2160
      2  2160							;------------------------------------------
      3  2160							; Keyboard Reading Data
      4  2160							;------------------------------------------
      5  2160
      6  2160				   hexColPiano
      7  2160		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB, $FB,$F7,$EF,$EF, $DF,$BF, $F7,$F7, $EF,$EF,$DF,$DF, $7F,0	; PIANO KEYBOARD
      8  2172				   hexCol
      9  2172		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04, $7F,0
     10  2184							; 0   1   2   3     4	 5   6	 7     8   9	A   B	    C	D   E	F    SPACEBAR (cancel)
     11  2184				   hexRowPiano
     12  2184		       08 08 01 01*	      byte.b	$08,$08,$01,$01, $08,$01,$01,$08, $08,$01,$02,$40, $02,$40,$02,$40, $02,0	; PIANO KEYBOARD ($10 = space) ($02 = backarrow)
     13  2196				   hexRow
     14  2196		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, $02,0
     15  21a8							; 0   1   2   3     4	 5   6	 7     8   9   A   B	 C   D	 E   F	   SPACEBAR (cancel)
     16  21a8
     17  21a8							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     18  21a8							; Column activation data
     19  21a8				   col			;	   x	     x		      x 	  x    A    x	 B
     20  21a8		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     21  21b4		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     22  21c1							;    C    x	D    x	    E	 F    x 	  x	    x
     23  21c1
     24  21c1							; Row testing data
     25  21c1				   row			;	   x	     x		      x 	  x    A    x	 B
     26  21c1		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     27  21cd		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     28  21da							;    C    x	D    x	    E	 F    x 	  x	    x
     29  21da							;-----------------------------------------------
     30  21da							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     31  21da							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     32  21da							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     33  21da							;-----------------------------------------------
     34  21da							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     35  21da							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     36  21da							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     37  21da							;-----------------------------------------------
     38  21da
     39  21da				   commandKeys		; row, column
     40  21da		       7f 10		      byte.b	~$80, $10	;spc 28
     41  21dc		       fd 04		      byte.b	~$02, $04	;A   0
     42  21de		       fd 20		      byte.b	~$02, $20	;S   1
     43  21e0		       fb 04		      byte.b	~$04, $04	;D   2
     44  21e2		       fb 20		      byte.b	~$04, $20	;F   3
     45  21e4		       f7 04		      byte.b	~$08, $04	;G   4
     46  21e6		       f7 20		      byte.b	~$08, $20	;H   5
     47  21e8		       ef 04		      byte.b	~$10, $04	;J   6
     48  21ea		       ef 20		      byte.b	~$10, $20	;K   7
     49  21ec		       df 04		      byte.b	~$20, $04	;L   8
     50  21ee		       df 20		      byte.b	~$20, $20	;:   9
     51  21f0		       bf 04		      byte.b	~$40, $04	;;   10
     52  21f2		       bf 20		      byte.b	~$40, $20	;=   11
     53  21f4		       fd 10		      byte.b	~$02, $10	;Z   12
     54  21f6		       fb 80		      byte.b	~$04, $80	;X   13
     55  21f8		       fb 10		      byte.b	~$04, $10	;C   14
     56  21fa		       f7 80		      byte.b	~$08, $80	;V   15
     57  21fc		       f7 10		      byte.b	~$08, $10	;B   16
     58  21fe		       ef 80		      byte.b	~$10, $80	;N   17
     59  2200		       ef 10		      byte.b	~$10, $10	;M   18
     60  2202		       df 80		      byte.b	~$20, $80	;,   19
     61  2204		       df 10		      byte.b	~$20, $10	;.   20
     62  2206		       bf 80		      byte.b	~$40, $80	;/   21
     63  2208		       fe 80		      byte.b	~$01, $80	;u/d 22
     64  220a		       fe 04		      byte.b	~$01, $04	;l/r 23
     65  220c		       fe 10		      byte.b	~$01, $10	;F1  24
     66  220e		       fe 20		      byte.b	~$01, $20	;F3  25
     67  2210		       fe 40		      byte.b	~$01, $40	;F5  26
     68  2212		       fe 08		      byte.b	~$01, $08	;F7  27
     69  2214		       fe 02		      byte.b	~$01, $02	;ret 29
     70  2216		       7f 02		      byte.b	~$80, $02	;Larr 30
     71  2218							;byte ~$80, $04		;Larr 30
     72  2218
     73  2218				   rawKeyFunctions
     74  2218							;    functionPointer, inputData:Y,A
     75  2218		       25 10 00 00	      word.w	bendBender, $0000	;space
     76  221c		       af 13 00 0a	      word.w	setPatch, $0A00	;A
     77  2220		       af 13 00 0b	      word.w	setPatch, $0B00	;S
     78  2224		       af 13 00 0c	      word.w	setPatch, $0C00	;D
     79  2228		       af 13 00 0d	      word.w	setPatch, $0D00	;F
     80  222c		       af 13 00 0e	      word.w	setPatch, $0E00	;G
     81  2230		       af 13 00 0f	      word.w	setPatch, $0F00	;H
     82  2234		       af 13 00 10	      word.w	setPatch, $1000	;J
     83  2238		       af 13 00 11	      word.w	setPatch, $1100	;K
     84  223c		       af 13 00 12	      word.w	setPatch, $1200	;L
     85  2240		       af 13 00 13	      word.w	setPatch, $1300	;:
     86  2244		       af 13 00 15	      word.w	setPatch, $1500	;;
     87  2248		       af 13 00 14	      word.w	setPatch, $1400	;=
     88  224c		       af 13 00 00	      word.w	setPatch, $0000	;Z
     89  2250		       af 13 00 01	      word.w	setPatch, $0100	;X
     90  2254		       af 13 00 02	      word.w	setPatch, $0200	;C
     91  2258		       af 13 00 03	      word.w	setPatch, $0300	;V
     92  225c		       af 13 00 04	      word.w	setPatch, $0400	;B
     93  2260		       af 13 00 05	      word.w	setPatch, $0500	;N
     94  2264		       af 13 00 06	      word.w	setPatch, $0600	;M
     95  2268		       af 13 00 07	      word.w	setPatch, $0700	;,
     96  226c		       af 13 00 08	      word.w	setPatch, $0800	;.
     97  2270		       af 13 00 09	      word.w	setPatch, $0900	;/
     98  2274		       5c 13 00 00	      word.w	ksetMode, $0000	;up/down
     99  2278		       5c 13 01 00	      word.w	ksetMode, $0001	;left/right
    100  227c		       db 12 03 00	      word.w	setOctave, 3	;F1
    101  2280		       db 12 02 00	      word.w	setOctave, 2	;F3
    102  2284		       db 12 01 00	      word.w	setOctave, 1	;F5
    103  2288		       db 12 00 00	      word.w	setOctave, 0	;F7
    104  228c		       bd 0f 00 00	      word.w	khelp,0	;return
    105  2290		       4f 0f 00 00	      word.w	kloadPatch,0	;Larrow
    106  2294
    107  2294				   minimalKeyFunctions
    108  2294							;    functionPointer, inputData:Y,A
    109  2294		       25 10 00 00	      word.w	bendBender, $0000	;space
    110  2298		       00 00 00 00	      word.w	0, 0	;A
    111  229c		       00 00 00 00	      word.w	0, 0	;S
    112  22a0		       00 00 00 00	      word.w	0, 0	;D
    113  22a4		       00 00 00 00	      word.w	0, 0	;F
    114  22a8		       00 00 00 00	      word.w	0, 0	;G
    115  22ac		       00 00 00 00	      word.w	0, 0	;H
    116  22b0		       00 00 00 00	      word.w	0, 0	;J
    117  22b4		       00 00 00 00	      word.w	0, 0	;K
    118  22b8		       00 00 00 00	      word.w	0, 0	;L
    119  22bc		       00 00 00 00	      word.w	0, 0	;:
    120  22c0		       00 00 00 00	      word.w	0, 0	;;
    121  22c4		       00 00 00 00	      word.w	0, 0	;=
    122  22c8		       00 00 00 00	      word.w	0, 0	;Z
    123  22cc		       00 00 00 00	      word.w	0, 0	;X
    124  22d0		       00 00 00 00	      word.w	0, 0	;C
    125  22d4		       00 00 00 00	      word.w	0, 0	;V
    126  22d8		       00 00 00 00	      word.w	0, 0	;B
    127  22dc		       00 00 00 00	      word.w	0, 0	;N
    128  22e0		       00 00 00 00	      word.w	0, 0	;M
    129  22e4		       00 00 00 00	      word.w	0, 0	;,
    130  22e8		       00 00 00 00	      word.w	0, 0	;.
    131  22ec		       00 00 00 00	      word.w	0, 0	;/
    132  22f0		       00 00 00 00	      word.w	0, 0	;up/down
    133  22f4		       00 00 00 00	      word.w	0, 0	;left/right
    134  22f8		       db 12 03 00	      word.w	setOctave, 3	;F1
    135  22fc		       db 12 02 00	      word.w	setOctave, 2	;F3
    136  2300		       db 12 01 00	      word.w	setOctave, 1	;F5
    137  2304		       db 12 00 00	      word.w	setOctave, 0	;F7
    138  2308		       00 00 00 00	      word.w	0,0	;return
    139  230c		       00 00 00 00	      word.w	0,0	;Larrow
    140  2310
    141  2310				   CTRLKeyFunctions
    142  2310							;    functionPointer, inputData:Y,A
    143  2310		       00 00 00 00	      word.w	0, $0000	;space
    144  2314		       a8 11 e0 00	      word.w	setRelease, REL_SHORT	;A
    145  2318		       a8 11 e9 00	      word.w	setRelease, REL_MED	;S
    146  231c		       a8 11 ee 00	      word.w	setRelease, REL_LONG	;D
    147  2320		       5c 13 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    148  2324		       5c 13 01 00	      word.w	ksetMode, MODE_5THS	;G
    149  2328		       5c 13 02 00	      word.w	ksetMode, MODE_5PORT	;H
    150  232c		       5c 13 20 00	      word.w	ksetMode, MODE_MONO1	;J
    151  2330		       5c 13 40 00	      word.w	ksetMode, MODE_ARP1	;K
    152  2334		       5c 13 41 00	      word.w	ksetMode, MODE_ARP2	;L
    153  2338		       5c 13 42 00	      word.w	ksetMode, MODE_ARP3	;:
    154  233c		       5c 13 43 00	      word.w	ksetMode, MODE_ARP4	;;
    155  2340		       5c 13 44 00	      word.w	ksetMode, MODE_ARP5	;=
    156  2344		       34 13 00 00	      word.w	ksetFX, $0000	;Z
    157  2348		       34 13 01 00	      word.w	ksetFX, $0001	;X
    158  234c		       34 13 02 00	      word.w	ksetFX, $0002	;C
    159  2350		       34 13 03 00	      word.w	ksetFX, $0003	;V
    160  2354		       34 13 04 00	      word.w	ksetFX, $0004	;B
    161  2358		       34 13 05 00	      word.w	ksetFX, $0005	;N
    162  235c		       34 13 06 00	      word.w	ksetFX, $0006	;M
    163  2360		       34 13 07 00	      word.w	ksetFX, $0007	;,
    164  2364		       34 13 08 00	      word.w	ksetFX, $0008	;.
    165  2368							;word ksetFX,	$0009	;/
    166  2368		       5c 13 21 00	      word.w	ksetMode, MODE_MONO2	;/
    167  236c		       5c 13 31 00	      word.w	ksetMode, MODE_MONOPORT1	;up/down
    168  2370		       5c 13 32 00	      word.w	ksetMode, MODE_MONOPORT2	;left/right
    169  2374		       88 12 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    170  2378		       88 12 0b 00	      word.w	ksetVolume, VOLMED	;F3
    171  237c		       88 12 07 00	      word.w	ksetVolume, VOLLOW	;F5
    172  2380		       88 12 00 00	      word.w	ksetVolume, VOLOFF	;F7
    173  2384		       5c 13 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    174  2388		       00 00 00 00	      word.w	0,0	;Larrow
    175  238c
    176  238c				   shiftKeyFunctions
    177  238c							;    functionPointer, inputData:Y,A
    178  238c		       00 00 00 00	      word.w	0, $0000	;space
    179  2390		       55 12 00 00	      word.w	setAttack,ATK_SHORT	;A
    180  2394		       55 12 90 00	      word.w	setAttack,ATK_MED	;S
    181  2398		       55 12 e0 00	      word.w	setAttack,ATK_LONG	;D
    182  239c		       33 11 08 01	      word.w	setVideoMode,$0108	;F
    183  23a0		       33 11 03 02	      word.w	setVideoMode,$0203	;G
    184  23a4		       33 11 15 03	      word.w	setVideoMode,$0315	;H
    185  23a8		       3e 10 02 00	      word.w	setVIC, 2	;J
    186  23ac		       3e 10 01 00	      word.w	setVIC, 1	;K
    187  23b0		       3e 10 00 00	      word.w	setVIC, 0	;L
    188  23b4		       03 11 01 00	      word.w	setFullScreenMode, $0001	;:
    189  23b8		       03 11 00 00	      word.w	setFullScreenMode, $0000	;;
    190  23bc		       00 00 00 00	      word.w	0, $0000	;=
    191  23c0		       78 11 00 00	      word.w	setLFORate,0	;Z
    192  23c4		       78 11 01 00	      word.w	setLFORate,1	;X
    193  23c8		       78 11 02 00	      word.w	setLFORate,2	;C
    194  23cc		       78 11 03 00	      word.w	setLFORate,3	;V
    195  23d0		       62 11 00 00	      word.w	setLFODepth,0	;B
    196  23d4		       62 11 01 00	      word.w	setLFODepth,1	;N
    197  23d8		       62 11 02 00	      word.w	setLFODepth,2	;M
    198  23dc		       62 11 03 00	      word.w	setLFODepth,3	;,
    199  23e0		       00 00 00 00	      word.w	0, $0000	;.
    200  23e4		       00 00 00 00	      word.w	0, $0000	;/
    201  23e8		       42 10 00 00	      word.w	ksetPaddles, 0	;up/down
    202  23ec		       42 10 01 00	      word.w	ksetPaddles, 1	;left/right
    203  23f0		       5c 13 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    204  23f4		       5c 13 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    205  23f8		       5c 13 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    206  23fc		       5c 13 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    207  2400		       10 10 00 00	      word.w	kclearModulation,0	;return
    208  2404		       00 00 00 00	      word.w	0,0	;Larrow
    209  2408
    210  2408				   commKeyFunctions
    211  2408							;    functionPointer, inputData:Y,A
    212  2408		       00 00 00 00	      word.w	0, $0000	;space
    213  240c		       61 10 00 00	      word.w	ksetFilter, $0000	;A
    214  2410		       61 10 20 00	      word.w	ksetFilter, $0020	;S
    215  2414		       61 10 40 00	      word.w	ksetFilter, $0040	;D
    216  2418		       61 10 60 00	      word.w	ksetFilter, $0060	;F
    217  241c		       61 10 80 00	      word.w	ksetFilter, $0080	;G
    218  2420		       61 10 a0 00	      word.w	ksetFilter, $00A0	;H
    219  2424		       61 10 c0 00	      word.w	ksetFilter, $00C0	;J
    220  2428		       61 10 e0 00	      word.w	ksetFilter, $00E0	;K
    221  242c		       00 00 00 00	      word.w	0, $0000	;L
    222  2430		       00 00 00 00	      word.w	0, $0000	;:
    223  2434		       00 00 00 00	      word.w	0, $0000	;;
    224  2438		       00 00 00 00	      word.w	0, $0000	;=
    225  243c		       b1 10 00 00	      word.w	kfiltOnOff,$0000	;Z
    226  2440		       b1 10 00 01	      word.w	kfiltOnOff,$0100	;X
    227  2444		       b1 10 00 02	      word.w	kfiltOnOff,$0200	;C
    228  2448		       4c 10 00 00	      word.w	ksetPad2, $0000	;V
    229  244c		       4c 10 01 00	      word.w	ksetPad2, $0001	;B
    230  2450		       4c 10 03 00	      word.w	ksetPad2, $0003	;N
    231  2454		       4c 10 04 00	      word.w	ksetPad2, $0004	;M
    232  2458		       09 12 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    233  245c		       09 12 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    234  2460		       09 12 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    235  2464		       00 00 00 00	      word.w	0, $0000	;up/down
    236  2468		       00 00 00 00	      word.w	0, $0000	;left/right
    237  246c		       1f 10 01 00	      word.w	ksetPalNtsc,$0001	;F1
    238  2470		       1f 10 00 00	      word.w	ksetPalNtsc,$0000	;F3
    239  2474							;word 0, $0000			;F1
    240  2474							;word 0, $0000			;F3
    241  2474		       00 00 00 00	      word.w	0, $0000	;F5
    242  2478		       00 00 00 00	      word.w	0, $0000	;F7
    243  247c		       00 00 00 00	      word.w	0,0	;return
    244  2480		       00 00 00 00	      word.w	0,0	;Larrow
    245  2484
    246  2484
    247  2484
    248  2484				   runstopKeyFunctions
    249  2484							;    functionPointer, inputData:Y,A
    250  2484		       00 00 00 00	      word.w	0, $0000	;space
    251  2488		       ed 10 00 00	      word.w	ksetTune,$0000	;A
    252  248c		       ed 10 00 01	      word.w	ksetTune,$0100	;S
    253  2490		       ed 10 00 02	      word.w	ksetTune,$0200	;D
    254  2494		       ed 10 00 03	      word.w	ksetTune,$0300	;F
    255  2498		       ed 10 00 04	      word.w	ksetTune,$0400	;G
    256  249c		       ed 10 00 05	      word.w	ksetTune,$0500	;H
    257  24a0		       ed 10 00 06	      word.w	ksetTune,$0600	;J
    258  24a4		       ed 10 00 07	      word.w	ksetTune,$0700	;K
    259  24a8		       ed 10 00 08	      word.w	ksetTune,$0800	;L
    260  24ac		       ed 10 00 09	      word.w	ksetTune,$0900	;:
    261  24b0		       00 00 00 00	      word.w	0, $0000	;;
    262  24b4							;word ksetTune,$0A00	;;
    263  24b4		       00 00 00 00	      word.w	0, $0000	;=
    264  24b8		       af 13 00 16	      word.w	setPatch, $1600	;Z
    265  24bc		       af 13 00 17	      word.w	setPatch, $1700	;X
    266  24c0		       af 13 00 18	      word.w	setPatch, $1800	;C
    267  24c4		       af 13 00 19	      word.w	setPatch, $1900	;V
    268  24c8		       af 13 00 1a	      word.w	setPatch, $1A00	;B
    269  24cc		       af 13 00 1b	      word.w	setPatch, $1B00	;N
    270  24d0		       af 13 00 1c	      word.w	setPatch, $1C00	;M
    271  24d4		       af 13 00 1d	      word.w	setPatch, $1D00	;,
    272  24d8		       00 00 00 00	      word.w	0, $0000	;.
    273  24dc		       00 00 00 00	      word.w	0, $0000	;/
    274  24e0							;word ksetBlackBG, $0000	;.
    275  24e0							;word ksetBlueBG, $0000  ;/
    276  24e0		       00 00 00 00	      word.w	0, $0000	;up/down
    277  24e4		       00 00 00 00	      word.w	0, $0000	;left/right
    278  24e8		       2c 1f 00 00	      word.w	SIDEdit,$0000	;F1
    279  24ec		       fa 0e 00 00	      word.w	ksavePatch,0	;F3
    280  24f0		       00 00 00 00	      word.w	0,0	;F5
    281  24f4		       2c 1f ff ff	      word.w	SIDEdit,$FFFF	;F7
    282  24f8		       00 00 00 00	      word.w	0,0	;return
    283  24fc		       00 00 00 00	      word.w	0,0	;Larrow
    284  2500
    285  2500				   modeList
    286  2500		       00		      byte.b	MODE_NORMAL
    287  2501		       01		      byte.b	MODE_5THS
    288  2502		       02		      byte.b	MODE_5PORT
    289  2503		       10		      byte.b	MODE_PORT1
    290  2504		       11		      byte.b	MODE_PORT2
    291  2505		       12		      byte.b	MODE_PORT3
    292  2506		       20		      byte.b	MODE_MONO1
    293  2507		       21		      byte.b	MODE_MONO2
    294  2508		       31		      byte.b	MODE_MONOPORT1	; new
    295  2509		       32		      byte.b	MODE_MONOPORT2	; new
    296  250a		       40		      byte.b	MODE_ARP1
    297  250b		       41		      byte.b	MODE_ARP2
    298  250c		       42		      byte.b	MODE_ARP3
    299  250d		       43		      byte.b	MODE_ARP4
    300  250e		       44		      byte.b	MODE_ARP5
    301  250f		       08		      byte.b	MODE_6CHAN	;16
    302  2510							;byte MODE_MONOPORT1
    303  2510							;byte MODE_MONOPORT2 ;16
------- FILE cynthcart2.0.1.asm
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  2510					      include	"cynth_data.asm"	; Screen text, data tables, note tuning tables, etc.
      1  2510
      2  2510
      3  2510		       00 1d	   MAX_PATCH_NUMBER equ	29
      4  2510
      5  2510
      6  2510				   patchName
      7  2510		       53 41 57 54*	      byte.b	"SAWTOOTH BASS   "	;0
      8  2520		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
      9  2530		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
     10  2540		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
     11  2550		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
     12  2560		       50 55 4c 53*	      byte.b	"PULSE HIGH PORT "	;5
     13  2570		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
     14  2580		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
     15  2590		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
     16  25a0		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
     17  25b0		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
     18  25c0		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
     19  25d0		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
     20  25e0		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
     21  25f0		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
     22  2600		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
     23  2610
     24  2610				   patchName2
     25  2610		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
     26  2620		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
     27  2630		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
     28  2640		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
     29  2650		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
     30  2660		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
     31  2670		       4c 41 53 45*	      byte.b	"LASER BASS	  "	;22
     32  2680		       54 52 4f 4d*	      byte.b	"TROMBONE BLAST  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
     33  2690		       4e 4f 49 53*	      byte.b	"NOISY SQUARE ARP"	;24
     34  26a0		       54 52 49 41*	      byte.b	"TRIANGLE SYNC   "	;25
     35  26b0		       4d 4f 4e 4f*	      byte.b	"MONO SYNC ECHO  "	;26
     36  26c0		       43 4c 45 41*	      byte.b	"CLEAN SAWTOOTH  "	;27 ; To ADD: TRI+SAW 30 30 30    TRI-RINGMOD 14 14 14    TRI+PULSE-RINGMOD 54 54 54
     37  26d0		       43 4c 45 41*	      byte.b	"CLEAN TRIANGLE  "	;28
     38  26e0		       43 4c 45 41*	      byte.b	"CLEAN SQUARE	  "	;29
     39  26f0		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;30
     40  2700		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;31
     41  2710
     42  2710
     43  2710							;SAVED_PATCH_MESSAGE equ 29
     44  2710							;CUSTOM_PATCH_NUMBER equ 30
     45  2710		       00 1e	   SAVED_PATCH_MESSAGE equ	MAX_PATCH_NUMBER+1
     46  2710		       00 1f	   CUSTOM_PATCH_NUMBER equ	MAX_PATCH_NUMBER+2
     47  2710
     48  2710
     49  2710				   patchSoundMode
     50  2710		       00		      byte.b	MODE_NORMAL	;0
     51  2711		       00		      byte.b	MODE_NORMAL	;1
     52  2712		       02		      byte.b	MODE_5PORT	;2
     53  2713		       11		      byte.b	MODE_PORT2	;3
     54  2714		       01		      byte.b	MODE_5THS	;4
     55  2715		       11		      byte.b	MODE_PORT2	;5
     56  2716		       00		      byte.b	MODE_NORMAL	;6
     57  2717		       20		      byte.b	MODE_MONO1	;7
     58  2718		       10		      byte.b	MODE_PORT1	;8
     59  2719		       00		      byte.b	MODE_NORMAL	;9
     60  271a		       00		      byte.b	MODE_NORMAL	;10 <--- start of new 1.5.0 patches
     61  271b		       40		      byte.b	MODE_ARP1	;11
     62  271c		       41		      byte.b	MODE_ARP2	;12
     63  271d		       42		      byte.b	MODE_ARP3	;13
     64  271e		       20		      byte.b	MODE_MONO1	;14
     65  271f		       21		      byte.b	MODE_MONO2	;15
     66  2720		       00		      byte.b	MODE_NORMAL	;16
     67  2721		       20		      byte.b	MODE_MONO1	;17
     68  2722		       00		      byte.b	MODE_NORMAL	;18
     69  2723		       12		      byte.b	MODE_PORT3	;19
     70  2724		       08		      byte.b	MODE_6CHAN	;20
     71  2725		       44		      byte.b	MODE_ARP5	;21
     72  2726		       31		      byte.b	MODE_MONOPORT1	;22 <---- start of 2.0 patches
     73  2727		       32		      byte.b	MODE_MONOPORT2	;23
     74  2728		       40		      byte.b	MODE_ARP1	;24
     75  2729		       32		      byte.b	MODE_MONOPORT2	;25
     76  272a		       32		      byte.b	MODE_MONOPORT2	;26
     77  272b		       00		      byte.b	MODE_NORMAL	;27
     78  272c		       00		      byte.b	MODE_NORMAL	;28
     79  272d		       00		      byte.b	MODE_NORMAL	;29
     80  272e		       00		      byte.b	MODE_NORMAL	;30
     81  272f
     82  272f
     83  272f							;     0     1	   2	 3     4     5	   6	 7     8     9
     84  272f				   patchFX
     85  272f		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
     86  2739		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
     87  2743		       00 03 01 03*	      byte.b	0, 3, 1, 3, 3, 0, 3, 0, 0, 0
     88  274d				   patchLFO		; (TREMOLO)
     89  274d		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $00, $01, $02, $13, $00
     90  2757		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
     91  2761		       10 12 13 00*	      byte.b	$10, $12, $13, $00, $00, $13, $13, $00, $00, $00
     92  276b				   patchOctave
     93  276b		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
     94  2775		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
     95  277f		       01 03 00 03*	      byte.b	1, 3, 0, 3, 3, 1, 1, 1, 3, 1
     96  2789				   patchAD
     97  2789		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
     98  2793		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
     99  279d		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    100  27a7				   patchSR1
    101  27a7		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    102  27b1		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    103  27bb		       f0 f5 f5 86*	      byte.b	$F0, $F5, $F5, $86, $F6, $F2, $F8, $F2, $F2, $F0
    104  27c5				   patchSR2
    105  27c5		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    106  27cf		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    107  27d9		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $54, $F2, $F8, $F2, $F2, $F0
    108  27e3				   patchSR3
    109  27e3		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    110  27ed		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    111  27f7		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $F6, $F2, $F8, $F2, $F2, $F0
    112  2801				   patchPaddle
    113  2801		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    114  280b		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    115  2815		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    116  281f				   newPatchFiltCut
    117  281f		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    118  2829		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    119  2833		       c0 f0 c0 b0*	      byte.b	$c0, $F0, $c0, $b0, $A0, $50, $50, $c0, $c0, $80
    120  283d				   patchVol
    121  283d		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $9, $7, $F, $C, $c, 0
    122  2847		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $F, $8
    123  2851		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $F, $F, $C, $F, $F, $c
    124  285b				   patchPWL
    125  285b		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    126  2865		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    127  286f		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    128  2879				   patchPWH
    129  2879		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    130  2883		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    131  288d		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    132  2897
    133  2897				   patchWave1
    134  2897		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    135  28a1		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    136  28ab		       20 20 14 80*	      byte.b	$20, $20, $14, $80, $40, $12, $14, $20, $10, $40
    137  28b5				   patchWave2
    138  28b5		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    139  28bf		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    140  28c9		       20 20 14 20*	      byte.b	$20, $20, $14, $20, $80, $12, $14, $20, $10, $40
    141  28d3				   patchWave3
    142  28d3		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    143  28dd		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    144  28e7		       20 20 14 10*	      byte.b	$20, $20, $14, $10, $10, $12, $14, $20, $10, $40
    145  28f1
    146  28f1				   patchFilt
    147  28f1		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    148  28fb		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    149  2905		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $EF, $0F, $0F, $EF
    150  290f				   patchVolMode
    151  290f		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    152  2919		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    153  2923		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $10, $10, $20, $10, $10, $10
    154  292d
    155  292d				   octaveTable
    156  292d		       00 0c 18 24*	      byte.b	0,12,24,36,48
    157  2932
    158  2932
    159  2932				   pwLFO
    160  2932		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    161  2936		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    162  293a		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    163  293e		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    164  2942
    165  2942				   patOffset
    166  2942		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    167  2948
    168  2948				   voiceOffset
    169  2948		       00 07 0e 	      byte.b	$0,$7,$E
    170  294b
    171  294b
    172  294b
    173  294b							;---------------------------- displayPage
    174  294b
    175  294b							; This chart references each line
    176  294b							; on the standard character based screen.
    177  294b							; = value x 40 + 0x400
    178  294b				   lineOffsetL
    179  294b		       00		      byte.b	$00
    180  294c		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    181  2952		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    182  2958		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    183  295e		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    184  2964		       e8		      byte.b	$E8
    185  2965				   lineOffsetM
    186  2965		       04		      byte.b	$04
    187  2966		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    188  296c		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    189  2972		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    190  2978		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    191  297e		       07		      byte.b	$07
    192  297f
    193  297f				   debugOverlay
    194  297f		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    195  298a		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    196  2996		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    197  29c1		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    198  29ec							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    199  29ec							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    200  29ec							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    201  29ec							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    202  29ec		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    203  29fa		       ff		      byte.b	255
    204  29fb
    205  29fb				   midiModeNames
    206  29fb		       20 20 20 20*	      byte.b	"	  "	;0
    207  2a03		       53 45 51 55*	      byte.b	"SEQUENTL"	;1
    208  2a0b		       50 41 53 53*	      byte.b	"PASSPORT"	;2
    209  2a13		       20 20 20 44*	      byte.b	"   DATEL"	;3
    210  2a1b		       4e 41 4d 45*	      byte.b	"NAMESOFT"	;4
    211  2a23
    212  2a23				   fxNames
    213  2a23		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    214  2a2b		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    215  2a33		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    216  2a3b		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    217  2a43		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    218  2a4b		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    219  2a53		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    220  2a5b		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    221  2a63		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    222  2a6b
    223  2a6b				   hexEditHelp
    224  2a6b		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    225  2a96		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    226  2ac2		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    227  2ad3		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    228  2aff		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    229  2b10		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    230  2b3c		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    231  2b4d		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    232  2b79		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    233  2b8a		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    234  2bb6		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    235  2bc7		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    236  2bf2		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",$8B,"  PRESS",0
    237  2c1d		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",$8B,"	'_' TO",0
    238  2c4b		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",$8B,"	CANCEL",0
    239  2c79		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",$8B,"	",0
    240  2ca1		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    241  2cc6		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    242  2cf1		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    243  2d1c		       ff		      byte.b	255
    244  2d1d
    245  2d1d				   helpMessage
    246  2d1d							;byte "RETURN FOR COMMANDS	     ",0
    247  2d1d							;byte "RETURN FOR HELP 	     ",0
    248  2d1d		       52 45 54 55*	      byte.b	"RETURN=HELP		       ",0
    249  2d3b				   normalHelp
    250  2d3b		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81,"KEY COMMANDS",$82,"-",$8B,"  RETURN TO EXIT012345",0
    251  2d6f		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    252  2d9a		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS ROWS",$8F," ARE ",$81,"PIANO KEYS  ",0
    253  2dc9		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV ROWS",$8F," SELECT",$81," SOUND PRESETS ",0
    254  2df8		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS-ON/OFF",0
    255  2e25		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83," _",$8F,"=LOAD-CUSTOM-SOUND",0
    256  2e53		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    257  2e7e		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    258  2e8d		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND-MODE",0
    259  2eb7		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNM",$8F,"=MOD-MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    260  2ee5		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    261  2f0f		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    262  2f1f		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A," JKL",$8F,"=VID-ON/OFF"
    263  2f4e		       00		      byte.b	0
    264  2f4f		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    265  2f7e		       00		      byte.b	0
    266  2f7f		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    267  2f9d		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR-MODULATION",0
    268  2fcb		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    269  2ff5		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    270  300d		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF  ",$8E,",./",$8F,"=OMNI/CH1/CH5"
    271  3039		       00		      byte.b	0
    272  303a		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    273  3063		       00		      byte.b	0
    274  3064		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    275  308e		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    276  30a1		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ./",$8F,"=PAL/NTSC"
    277  30c5		       00		      byte.b	0
    278  30c6		       17 87 5a 58*	      byte.b	23,$87,"ZXCVBNM",$8F,"=",$81,"MORE",$8F,"-",$81,"PRESETS  ",$87,"F1",$8F,"=SID-EDIT-C64KEYS"
    279  30f7		       00		      byte.b	0
    280  30f8		       18 87 46 33*	      byte.b	24,$87,"F3",$8F,"=SAVE-CUSTOM-SOUND  ",$87,"F7",$8F,"=SID-EDIT-PIANO "
    281  3125		       00		      byte.b	0
    282  3126		       ff		      byte.b	255
    283  3127
    284  3127				   mainColorText
    285  3127		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    286  3156		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83," ------",$8D,"-------",$8F,"----- ",$8D,"FILTR",$8C,"=",$81,"X	",0
    287  3189		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    288  31bf		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    289  31f5		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"MOD",$8C,"=",$81,"XXXXX ",$8F," VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    290  322b		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    291  3256
    292  3256							; OLD LAYOUT
    293  3256							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    294  3256							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    295  3256							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    296  3256							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    297  3256							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    298  3256							;byte 255
    299  3256
    300  3256		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    301  3256		       00 02	   CYNTHCART_COLOR equ	2
    302  3256
    303  3256
    304  3256		       00 2d	   MODETEXT   equ	40*1+5
    305  3256		       00 57	   TUNINGTEXT equ	40*2+7
    306  3256		       00 7f	   OCTAVETEXT equ	40*3+7
    307  3256		       00 a7	   VOLTEXT    equ	40*4+7
    308  3256
    309  3256		       00 62	   ATKTEXT    equ	40*2+18
    310  3256		       00 8a	   RELTEXT    equ	40*3+18
    311  3256		       00 12	   PATCHTEXT  equ	40*0+18
    312  3256
    313  3256		       00 94	   LFORATETEXT equ	40*3+28
    314  3256		       00 6c	   LFODEPTHTEXT equ	40*2+28
    315  3256		       00 bc	   VIDEOTEXT  equ	40*4+28
    316  3256
    317  3256		       00 af	   FXTEXT     equ	40*4+15
    318  3256
    319  3256		       00 4c	   FILTERTEXT2 equ	40*1+36
    320  3256		       00 75	   FILTERTEXT equ	40*2+37
    321  3256		       00 9c	   PADDLETEXT equ	40*3+36
    322  3256		       00 c4	   PAD2TEXT   equ	40*4+36
    323  3256
    324  3256		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    325  3256
    326  3256
    327  3256		       ff		      byte.b	255
    328  3257
    329  3257
    330  3257
    331  3257				   textData		; can contain 64 four byte texts
    332  3257		       4f 46 46 20	      byte.b	"OFF "	;0
    333  325b		       4f 4e 20 20	      byte.b	"ON  "	;4
    334  325f		       53 4c 4f 57	      byte.b	"SLOW"	;8
    335  3263		       4d 45 44 20	      byte.b	"MED "	;12
    336  3267		       46 41 53 54	      byte.b	"FAST"	;16
    337  326b		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    338  326f		       2d 33 30 20	      byte.b	"-30 "	;24
    339  3273		       2d 32 30 20	      byte.b	"-20 "	;28
    340  3277		       2d 31 30 20	      byte.b	"-10 "	;32
    341  327b		       30 20 20 20	      byte.b	"0   "	;36
    342  327f		       2b 31 30 20	      byte.b	"+10 "	;40
    343  3283		       2b 32 30 20	      byte.b	"+20 "	;44
    344  3287		       2b 33 30 20	      byte.b	"+30 "	;48
    345  328b		       2b 34 30 20	      byte.b	"+40 "	;52
    346  328f		       2b 35 30 20	      byte.b	"+50 "	;56
    347  3293		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    348  3297		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    349  329b		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    350  329f		       46 49 4c 54	      byte.b	"FILT"	;72
    351  32a3		       56 4f 4c 20	      byte.b	"VOL "	;76
    352  32a7		       4c 4f 57 20	      byte.b	"LOW "	;80
    353  32ab		       4d 45 44 20	      byte.b	"MED "	;84
    354  32af		       48 49 47 48	      byte.b	"HIGH"	;88
    355  32b3		       53 49 44 3a	      byte.b	"SID:"	;92
    356  32b7		       44 49 53 20	      byte.b	"DIS "	;96
    357  32bb		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    358  32bf		       50 55 4c 53	      byte.b	"PULS"	;104
    359  32c3		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    360  32c7		       4c 46 4f 20	      byte.b	"LFO "	;112
    361  32cb		       42 45 4e 44	      byte.b	"BEND"	;116
    362  32cf
    363  32cf
    364  32cf				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    365  32cf		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00 0
    366  32d7		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08 1
    367  32df		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10 2
    368  32e7		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18 3
    369  32ef		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20 4
    370  32f7		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28 5
    371  32ff		       4d 4f 4e 50*	      byte.b	"MONP1  ",1	;$30 6
    372  3307		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38 7
    373  330f		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40 8
    374  3317		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48 9
    375  331f		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50 10
    376  3327		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58 11
    377  332f		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60 12
    378  3337		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68 13
    379  333f		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70 14
    380  3347		       4d 4f 4e 50*	      byte.b	"MONP2  ",1	;$78 15
    381  334f
    382  334f				   modeNameOffsets
    383  334f							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    384  334f		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    385  335f		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    386  336f		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    387  337f		       30 30 78 78*	      byte.b	$30,$30,$78,$78, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    388  338f		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    389  339f
    390  339f
    391  339f							; VERSION NUMBER
    392  339f				   bottomText
    393  339f		       20 50 41 4c*	      byte.b	" PAL V2.0.1",0
    394  33ab		       4e 54 53 43*	      byte.b	"NTSC V2.0.1",0
    395  33b7
    396  33b7				  -	      IF	BETA_RELEASE=1
    397  33b7				  -betaInfo
    398  33b7				  -	      byte	"V2.0 BETA RC4",0	;13 bytes of text
    399  33b7					      ELSE
    400  33b7				   betaInfo
    401  33b7		       20 20 20 20*	      byte.b	"	       ",0	;13 bytes of text
    402  33c5					      ENDIF
    403  33c5
    404  33c5							; contant pointers into the textData array
    405  33c5		       00 00	   ON	      equ	0
    406  33c5		       00 04	   OFF	      equ	4
    407  33c5		       00 08	   SLOW       equ	8
    408  33c5		       00 0c	   MED	      equ	12
    409  33c5		       00 10	   FAST       equ	16
    410  33c5		       00 14	   TUNING     equ	20
    411  33c5		       00 3c	   POLY       equ	60
    412  33c5		       00 40	   MONO       equ	64
    413  33c5		       00 44	   FREQ       equ	68
    414  33c5		       00 48	   FILT       equ	72
    415  33c5		       00 4c	   VOL	      equ	76
    416  33c5		       00 50	   VLOW       equ	80
    417  33c5		       00 54	   VMED       equ	84
    418  33c5		       00 58	   VHIGH      equ	88
    419  33c5		       00 60	   DISABLED   equ	96
    420  33c5		       00 64	   PAD2VALTEXT equ	100
    421  33c5
    422  33c5
    423  33c5
    424  33c5
    425  33c5				   tuneArrPtrLL
    426  33c5		       67 f7 87 cf*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    427  33cf				   tuneArrPtrLH
    428  33cf		       35 35 36 36*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    429  33d9				   tuneArrPtrHL
    430  33d9		       af 3f 23 17*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    431  33e3				   tuneArrPtrHH
    432  33e3		       35 36 37 37*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    433  33ed
    434  33ed				   LFODepthArray
    435  33ed		       00 02 05 0f	      byte.b	0,2,5,15
    436  33f1
    437  33f1
    438  33f1
    439  33f1
    440  33f1				   hexDisplay
    441  33f1		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    442  3401
    443  3401							;keyData ; numbers 0-9 and letters a-f
    444  3401							;	byte 35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    445  3401
    446  3401							; key set for piano keyboard: black keys + middle A-F on the white keys
    447  3401							;	byte 51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    448  3401
    449  3401							; array of LFO values
    450  3401				   LFOArrL
    451  3401		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    452  3411				   LFOArrH
    453  3411		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    454  3421				   LFOdisp
    455  3421		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    456  3431
    457  3431							; NTSC Note Table
    458  3431				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    459  3431		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    460  343d		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    461  3449		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    462  3455		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    463  3461		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    464  346d		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    465  3479							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    466  3479				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    467  3479		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    468  3485		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    469  3491		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    470  349d		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    471  34a9		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    472  34b5		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    473  34c1
    474  34c1							; PAL Note Table
    475  34c1				   PSoundLArr
    476  34c1		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    477  34cd		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    478  34d9		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    479  34e5		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    480  34f1		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    481  34fd		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    482  3509		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    483  3514
    484  3514				   PSoundHArr
    485  3514		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    486  3520		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    487  352c		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    488  3538		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    489  3544		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    490  3550		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    491  355c		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart2.0.1.asm
   1052  3567
   1053  3567							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  3567					      include	"cynth_tuning.asm"
      1  3567
      2  3567				   tuningL0
      3  3567		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  3573		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  357f		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  358b		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  3597		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  35a3		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  35af				   tuningH0
     10  35af		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  35bb		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  35c7		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  35d3		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  35df		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  35eb		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  35f7
     17  35f7				   tuningL1
     18  35f7		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  3603		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  360f		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  361b		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  3627		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  3633		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  363f				   tuningH1
     25  363f		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  364b		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  3657		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  3663		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  366f		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  367b		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  3687
     32  3687				   tuningL2
     33  3687		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  3693		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  369f		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  36ab		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  36b7		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  36c3		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  36cf							;tuningH2
     40  36cf							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  36cf							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  36cf							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  36cf							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  36cf							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  36cf							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  36cf
     47  36cf				   tuningL3
     48  36cf		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  36db		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  36e7		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  36f3		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  36ff		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  370b		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  3717				   tuningH3
     55  3717		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  3723				   tuningH2
     57  3723		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  372f		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  373b		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  3747		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  3753		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  375f		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  376b
     64  376b				   tuningL4
     65  376b				   tuningH4
     66  376b				   tuningH5
     67  376b		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  3777				   tuningH6
     69  3777		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  3783		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  378f		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  379b		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  37a7		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  37b3		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  37bf							;tuningH4
     76  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  37bf							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  37bf
     83  37bf				   tuningL5
     84  37bf		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  37cb		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  37d7		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  37e3		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  37ef		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  37fb		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  3807
     91  3807							;tuningH5
     92  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  3807							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  3807
     99  3807				   tuningL6
    100  3807		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  3813		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  381f		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  382b		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  3837		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  3843		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  384f							;tuningH6
    107  384f							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  384f							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  384f							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  384f							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  384f							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  384f							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  384f
    114  384f				   tuningL7
    115  384f		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  385b		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  3867		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  3873		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  387f		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  388b		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  3897				   tuningH7
    122  3897		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  38a3		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  38af		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  38bb		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  38c7		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  38d3		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  38df
    129  38df				   tuningL8
    130  38df		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  38eb		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  38f7		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  3903		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  390f		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  391b		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  3927				   tuningH8
    137  3927		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  3933		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  393f		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  394b		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  3957		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  3963		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  396f
    144  396f				   tuningL9
    145  396f		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  397b		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  3987		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  3993		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  399f		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  39ab		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  39b7				   tuningH9
    152  39b7		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  39c3		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  39cf		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  39db		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  39e7		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  39f3		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart2.0.1.asm
   1055  39ff
   1056  39ff							; Frank's MIDI interface code
   1057  39ff				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   1058  39ff				  -	      include	"cynth_midi_dummy.asm"
   1059  39ff					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  39ff					      include	"cynth_midi.asm"
      1  39ff							; public MIDI interface routines:
      2  39ff							; midiDetect
      3  39ff							; midiInit
      4  39ff							; midiRead
      5  39ff							; midiWrite
      6  39ff
      7  39ff							; interface type for midiDetect and midiInit:
      8  39ff							; 0: no MIDI interface was detected
      9  39ff							; 1: Sequential Circuits Inc.
     10  39ff							; 2: Passport & Syntech
     11  39ff							; 3: DATEL/Siel/JMS
     12  39ff							; 4: Namesoft
     13  39ff
     14  39ff							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  39ff		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  39ff
     17  39ff
     18  39ff					      processor	6502
     19  39ff
     20  39ff		       00 01	   TRUE       equ	1
     21  39ff		       00 00	   FALSE      equ	0
     22  39ff
     23  39ff		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     24  39ff		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     25  39ff
     26  39ff		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     27  39ff		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     28  39ff
     29  39ff							;loopCount equ 1104
     30  39ff							;irqCountTotal equ 1105
     31  39ff							;irqCountMidi equ 1106
     32  39ff							;irqCountTDREmpty equ 1107
     33  39ff							;saveY equ 1140
     34  39ff							;firstPass equ 1141
     35  39ff		       04 50	   statusSample1 equ	1104
     36  39ff		       04 51	   statusSample2 equ	1105
     37  39ff
     38  39ff		       00 00	   TEST_KEYBOARD equ	FALSE
     39  39ff		       00 00	   INCLUDE_DETECT_IRQ equ	FALSE
     40  39ff
     41  39ff							;=========================================================================
     42  39ff							; MIDI DETECT
     43  39ff							; =========================================================================
     44  39ff
     45  39ff							; detect MIDI interface, return type in accu
     46  39ff				   midiDetect		; TODO
     47  39ff							;lda #0
     48  39ff							;sta irqCountTotal
     49  39ff							;sta irqCountMidi
     50  39ff							;sta loopCount
     51  39ff
     52  39ff
     53  39ff
     54  39ff							; old code to manually set interface type
     55  39ff		       a9 03		      lda	#3	; DATEL (DEFAULT, THIS ONE SHOULD BE SELECTED UNLESS DEBUGGING)
     56  3a01							;lda #2 ; PASSPORT
     57  3a01							;lda #4 ; NAMESOFT (NOT SUPPORTED YET!)
     58  3a01							;lda #0 ; MIDI OFF
     59  3a01					      IF	DEVICE_CONFIG=KERBEROS
     60  3a01		       60		      rts		; <--DETECT FUNCTION DISABLED
     61  3a02					      ENDIF
     62  3a02
     63  3a02		       85 6e		      sta	midiInterfaceType
     64  3a04				   testingLoop
     65  3a04							; save interface type from ACC
     66  3a04		       a5 6e		      lda	midiInterfaceType
     67  3a06		       aa		      tax
     68  3a07		       ca		      dex
     69  3a08
     70  3a08		       78		      sei		; disable IRQ interrupts
     71  3a09							;cli ; enable IRQ interrupts
     72  3a09
     73  3a09							; init addresses
     74  3a09		       bd 5a 3b 	      lda	midiControlOfs,x
     75  3a0c		       85 64		      sta	midiControl
     76  3a0e		       bd 5e 3b 	      lda	midiStatusOfs,x
     77  3a11		       85 66		      sta	midiStatus
     78  3a13		       bd 62 3b 	      lda	midiTxOfs,x
     79  3a16		       85 68		      sta	midiTx
     80  3a18		       bd 66 3b 	      lda	midiRxOfs,x
     81  3a1b		       85 6a		      sta	midiRx
     82  3a1d		       a9 de		      lda	#$de
     83  3a1f		       85 65		      sta	midiControl+1
     84  3a21		       85 67		      sta	midiStatus+1
     85  3a23		       85 69		      sta	midiTx+1
     86  3a25		       85 6b		      sta	midiRx+1
     87  3a27
     88  3a27							; send reset code to MIDI adapter
     89  3a27		       20 f1 3a 	      jsr	midiReset
     90  3a2a
     91  3a2a							; small delay
     92  3a2a		       a2 00		      ldx	#0
     93  3a2c				   detectDelay1
     94  3a2c		       ca		      dex
     95  3a2d		       d0 fd		      bne	detectDelay1
     96  3a2f
     97  3a2f							; read midi status
     98  3a2f		       b1 66		      lda	(midiStatus),y
     99  3a31		       11 66		      ora	(midiStatus),y
    100  3a33		       11 66		      ora	(midiStatus),y
    101  3a35		       8d a0 04 	      sta	1024+160	; DEBUG
    102  3a38		       8d 50 04 	      sta	statusSample1
    103  3a3b
    104  3a3b							; enable IRQ/NMI
    105  3a3b							;lda #3 ; MIDI reset (DEBUG)
    106  3a3b		       a9 b4		      lda	#$B4	; $Bx turns on transmit interrupt as well as receive interrupt
    107  3a3d							;lda #$34 ; transmit interrupt only
    108  3a3d							;lda #$94 ; receive interrupt only (default)
    109  3a3d		       1d 6a 3b 	      ora	midiCr0Cr1,x
    110  3a40		       91 64		      sta	(midiControl),y
    111  3a42
    112  3a42							; small delay
    113  3a42		       a2 00		      ldx	#0
    114  3a44				   detectDelay2
    115  3a44		       ca		      dex
    116  3a45		       d0 fd		      bne	detectDelay2
    117  3a47
    118  3a47							; read midi status
    119  3a47		       a0 00		      ldy	#0
    120  3a49		       b1 66		      lda	(midiStatus),y
    121  3a4b		       11 66		      ora	(midiStatus),y
    122  3a4d		       11 66		      ora	(midiStatus),y
    123  3a4f		       8d a1 04 	      sta	1024+160+1	; DEBUG
    124  3a52		       8d 51 04 	      sta	statusSample2
    125  3a55
    126  3a55				   lock 		; DEBUG!!!!!!!!!!!!!!!!!!!!
    127  3a55							;inc 1065
    128  3a55							;jmp lock ; DEBUG!!!!!!!!!!!!!!!!!!!!
    129  3a55
    130  3a55							; set the interface to DATEL or NO_MIDI based on results
    131  3a55		       ad 50 04 	      lda	statusSample1
    132  3a58		       d0 08		      bne	midiNotDetected
    133  3a5a		       ad 51 04 	      lda	statusSample2
    134  3a5d		       f0 03		      beq	midiNotDetected
    135  3a5f							;lda midiInterfaceType ; use current interface
    136  3a5f							;cli
    137  3a5f							;rts ; quit
    138  3a5f		       4c 70 3a 	      jmp	quitDetect
    139  3a62				   midiNotDetected
    140  3a62		       a6 6e		      ldx	midiInterfaceType
    141  3a64		       ca		      dex
    142  3a65		       86 6e		      stx	midiInterfaceType
    143  3a67							;cpx #1
    144  3a67		       f0 03		      beq	noMidi	; loop again to try next interface
    145  3a69		       4c 04 3a 	      jmp	testingLoop
    146  3a6c				   noMidi
    147  3a6c		       a9 00		      lda	#0	; last interface, so no MIDI
    148  3a6e		       85 6e		      sta	midiInterfaceType
    149  3a70							;cli
    150  3a70							;rts ; quit
    151  3a70
    152  3a70				   quitDetect
    153  3a70		       20 f1 3a 	      jsr	midiReset
    154  3a73		       a5 6e		      lda	midiInterfaceType
    155  3a75		       58		      cli
    156  3a76		       60		      rts
    157  3a77
    158  3a77							;;------------------------------------====================================
    159  3a77
    160  3a77
    161  3a77							; =========================================================================
    162  3a77							; MIDI INIT
    163  3a77							; =========================================================================
    164  3a77
    165  3a77							; init MIDI interface, type in accu from midiDetect
    166  3a77				   midiInit
    167  3a77							;rts ; <-- MIDI DISABLED (DEBUG!!)
    168  3a77
    169  3a77
    170  3a77		       78		      sei		; disable IRQ interrupts
    171  3a78
    172  3a78		       85 6e		      sta	midiInterfaceType
    173  3a7a		       aa		      tax
    174  3a7b		       ca		      dex
    175  3a7c
    176  3a7c		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
    177  3a7e		       8d 02 dc 	      sta	DDRA
    178  3a81
    179  3a81		       a9 00		      lda	#0	; CIA#1 port B = inputs
    180  3a83		       8d 03 dc 	      sta	DDRB
    181  3a86
    182  3a86							; clear memory variables
    183  3a86		       a9 00		      lda	#0
    184  3a88		       85 71		      sta	keyPressed
    185  3a8a		       85 6f		      sta	keyTestIndex
    186  3a8c		       85 70		      sta	keyPressedIntern
    187  3a8e
    188  3a8e							; init addresses
    189  3a8e		       bd 5a 3b 	      lda	midiControlOfs,x
    190  3a91		       85 64		      sta	midiControl
    191  3a93		       bd 5e 3b 	      lda	midiStatusOfs,x
    192  3a96		       85 66		      sta	midiStatus
    193  3a98		       bd 62 3b 	      lda	midiTxOfs,x
    194  3a9b		       85 68		      sta	midiTx
    195  3a9d		       bd 66 3b 	      lda	midiRxOfs,x
    196  3aa0		       85 6a		      sta	midiRx
    197  3aa2		       a9 de		      lda	#$de
    198  3aa4		       85 65		      sta	midiControl+1
    199  3aa6		       85 67		      sta	midiStatus+1
    200  3aa8		       85 69		      sta	midiTx+1
    201  3aaa		       85 6b		      sta	midiRx+1
    202  3aac
    203  3aac							; send reset code to MIDI adapter
    204  3aac		       20 f1 3a 	      jsr	midiReset
    205  3aaf
    206  3aaf							; clear ringbuffer
    207  3aaf		       a9 00		      lda	#0
    208  3ab1		       85 6c		      sta	midiRingbufferReadIndex
    209  3ab3		       85 6d		      sta	midiRingbufferWriteIndex
    210  3ab5
    211  3ab5							; if the adapter uses NMI interrupts instead of IRQ
    212  3ab5		       bd 6e 3b 	      lda	midiIrqType,x
    213  3ab8		       d0 0a		      bne	midiSetIrq
    214  3aba
    215  3aba							; set NMI routine
    216  3aba		       a9 1a		      lda	#<midiNmi
    217  3abc		       8d 18 03 	      sta	$0318
    218  3abf		       a9 3b		      lda	#>midiNmi
    219  3ac1		       8d 19 03 	      sta	$0319
    220  3ac4
    221  3ac4							; set IRQ routine
    222  3ac4				   midiSetIrq
    223  3ac4							;---------------------------
    224  3ac4		       a9 30		      lda	#<midiIrq
    225  3ac6		       8d 14 03 	      sta	$0314
    226  3ac9		       a9 3b		      lda	#>midiIrq
    227  3acb		       8d 15 03 	      sta	$0315
    228  3ace							;---------------------------
    229  3ace
    230  3ace							; enable IRQ/NMI
    231  3ace		       a9 94		      lda	#$94
    232  3ad0		       1d 6a 3b 	      ora	midiCr0Cr1,x
    233  3ad3		       91 64		      sta	(midiControl),y
    234  3ad5
    235  3ad5		       58		      cli
    236  3ad6		       60		      rts
    237  3ad7
    238  3ad7							; =========================================================================
    239  3ad7
    240  3ad7				   midiRelease
    241  3ad7		       78		      sei
    242  3ad8		       20 f1 3a 	      jsr	midiReset
    243  3adb		       a9 31		      lda	#$31
    244  3add		       8d 14 03 	      sta	$0314
    245  3ae0		       a9 ea		      lda	#$ea
    246  3ae2		       8d 15 03 	      sta	$0315
    247  3ae5		       a9 47		      lda	#$47
    248  3ae7		       8d 18 03 	      sta	$0318
    249  3aea		       a9 fe		      lda	#$fe
    250  3aec		       8d 19 03 	      sta	$0319
    251  3aef		       58		      cli
    252  3af0		       60		      rts
    253  3af1
    254  3af1							; MC68B50 master reset and IRQ off
    255  3af1				   midiReset
    256  3af1		       a0 00		      ldy	#0
    257  3af3		       a9 03		      lda	#3
    258  3af5		       91 64		      sta	(midiControl),y
    259  3af7		       60		      rts
    260  3af8
    261  3af8				   midiCanRead
    262  3af8		       a6 6c		      ldx	midiRingbufferReadIndex
    263  3afa		       e4 6d		      cpx	midiRingbufferWriteIndex
    264  3afc		       60		      rts
    265  3afd
    266  3afd							; read MIDI byte from ringbuffer
    267  3afd				   midiRead
    268  3afd		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    269  3aff		       e4 6d		      cpx	midiRingbufferWriteIndex
    270  3b01		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    271  3b03							;beq midiRead
    272  3b03		       60		      rts		; No new data, so return
    273  3b04
    274  3b04							; wait for MIDI byte and read it from ringbuffer
    275  3b04				   midiReadWait
    276  3b04		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    277  3b06		       e4 6d		      cpx	midiRingbufferWriteIndex
    278  3b08		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    279  3b0a		       4c 04 3b 	      jmp	midiReadWait
    280  3b0d							;rts ; No new data, so return
    281  3b0d
    282  3b0d
    283  3b0d				   processMidi
    284  3b0d							; read next character from ringbuffer
    285  3b0d		       bd 00 7f 	      lda	midiRingbuffer,x
    286  3b10		       a8		      tay		; save next byte into y
    287  3b11		       e8		      inx		; increment buffer pointer...
    288  3b12		       8a		      txa
    289  3b13							;and #31 ; wrap around at end
    290  3b13		       29 ff		      and	#BUFFER_SIZE_MASK
    291  3b15		       85 6c		      sta	midiRingbufferReadIndex	; save it
    292  3b17		       98		      tya		; the byte read from the buffer ends up in both y and a
    293  3b18
    294  3b18							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    295  3b18							; DEBUG - SHOW MIDI DATA
    296  3b18				  -	      IF	DEBUG_SHOW_MIDI=1
    297  3b18				  -			;IF DEBUG_DISPLAY=1
    298  3b18				  -	      sta	temp
    299  3b18				  -	      bpl	notStatusByte
    300  3b18				  -	      lda	#$E
    301  3b18				  -	      sta	hexDispColor
    302  3b18				  -	      jmp	endColor
    303  3b18				  -notStatusByte
    304  3b18				  -	      lda	#$F
    305  3b18				  -	      sta	hexDispColor
    306  3b18				  -endColor
    307  3b18				  -	      lda	debugOffset
    308  3b18				  -	      and	#$F0
    309  3b18				  -	      lsr
    310  3b18				  -	      lsr
    311  3b18				  -	      lsr
    312  3b18				  -	      tax
    313  3b18				  -			;ldx #34
    314  3b18				  -	      lda	debugOffset
    315  3b18				  -	      and	#$0F
    316  3b18				  -	      tay
    317  3b18				  -	      iny
    318  3b18				  -	      iny
    319  3b18				  -	      iny
    320  3b18				  -	      iny
    321  3b18				  -	      iny
    322  3b18				  -	      iny
    323  3b18				  -	      lda	temp
    324  3b18				  -	      jsr	displayHex
    325  3b18				  -	      inc	debugOffset
    326  3b18				  -			;ldy debugOffset
    327  3b18				  -			;iny
    328  3b18				  -			;tya
    329  3b18				  -			;and #$0F
    330  3b18				  -			;sta debugOffset
    331  3b18				  -			;adc #5
    332  3b18				  -			;tay
    333  3b18				  -	      lda	temp
    334  3b18				  -	      ldy	temp
    335  3b18					      ENDIF
    336  3b18							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    337  3b18
    338  3b18		       60		      rts
    339  3b19
    340  3b19							; write MIDI byte and wait for write complete
    341  3b19		       60	   midiWrite  rts		; TODO
    342  3b1a
    343  3b1a							; NMI handler
    344  3b1a		       48	   midiNmi    pha
    345  3b1b		       8a		      txa
    346  3b1c		       48		      pha
    347  3b1d		       98		      tya
    348  3b1e		       48		      pha
    349  3b1f
    350  3b1f							; test if it was a NMI from the MIDI interface
    351  3b1f		       a0 00		      ldy	#0
    352  3b21		       b1 66		      lda	(midiStatus),y
    353  3b23		       29 01		      and	#1
    354  3b25		       f0 03		      beq	midiNmiEnd
    355  3b27		       20 4c 3b 	      jsr	midiStore
    356  3b2a		       68	   midiNmiEnd pla
    357  3b2b		       a8		      tay
    358  3b2c		       68		      pla
    359  3b2d		       aa		      tax
    360  3b2e		       68		      pla
    361  3b2f		       40		      rti
    362  3b30
    363  3b30							; IRQ handler
    364  3b30				   midiIrq
    365  3b30		       a6 6e		      ldx	midiInterfaceType
    366  3b32		       ca		      dex
    367  3b33		       bd 6e 3b 	      lda	midiIrqType,x
    368  3b36		       f0 0e		      beq	midiIrqKey
    369  3b38
    370  3b38							; test if it was an IRQ from the MIDI interface
    371  3b38		       a0 00		      ldy	#0
    372  3b3a		       b1 66		      lda	(midiStatus),y
    373  3b3c		       29 01		      and	#1
    374  3b3e		       f0 06		      beq	midiIrqKey
    375  3b40		       20 4c 3b 	      jsr	midiStore
    376  3b43		       4c 2a 3b 	      jmp	midiNmiEnd
    377  3b46
    378  3b46							; keyboard test
    379  3b46				   midiIrqKey
    380  3b46				  -	      IF	TEST_KEYBOARD=1
    381  3b46				  -	      jsr	keyboardTest
    382  3b46					      ENDIF
    383  3b46		       ad 0d dc 	      lda	$dc0d
    384  3b49		       4c 2a 3b 	      jmp	midiNmiEnd
    385  3b4c
    386  3b4c							; get MIDI byte and store in ringbuffer
    387  3b4c				   midiStore
    388  3b4c		       b1 6a		      lda	(midiRx),y
    389  3b4e		       a6 6d		      ldx	midiRingbufferWriteIndex
    390  3b50		       9d 00 7f 	      sta	midiRingbuffer,x
    391  3b53		       e8		      inx
    392  3b54		       8a		      txa
    393  3b55							;and #31
    394  3b55		       29 ff		      and	#BUFFER_SIZE_MASK
    395  3b57		       85 6d		      sta	midiRingbufferWriteIndex
    396  3b59		       60		      rts
    397  3b5a
    398  3b5a							; MC68B50 control register (relative to $de00)
    399  3b5a		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    400  3b5e
    401  3b5e							; MC68B50 status register
    402  3b5e		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    403  3b62
    404  3b62							; MC68B50 TX register
    405  3b62		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    406  3b66
    407  3b66							; MC68B50 RX register offset
    408  3b66		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    409  3b6a
    410  3b6a							; counter divide bits CR0 and CR1 for the MC68B50
    411  3b6a				   midiCr0Cr1
    412  3b6a		       01 01 02 01	      .byte.b	1, 1, 2, 1
    413  3b6e
    414  3b6e							; 1=IRQ, 0=NMI
    415  3b6e				   midiIrqType
    416  3b6e		       01 01 01 00	      .byte.b	1, 1, 1, 0
    417  3b72
    418  3b72				  -	      IF	TEST_KEYBOARD=1
    419  3b72				  -			; keyboard test
    420  3b72				  -keyboardTest
    421  3b72				  -	      ldx	keyTestIndex
    422  3b72				  -	      lda	keys,x	; load colum
    423  3b72				  -	      sta	PRA
    424  3b72				  -	      inx
    425  3b72				  -	      lda	PRB
    426  3b72				  -	      and	keys,x	; mask row
    427  3b72				  -	      inx
    428  3b72				  -	      cmp	#0
    429  3b72				  -	      bne	kbt2
    430  3b72				  -	      lda	keys,x
    431  3b72				  -	      cmp	#$80
    432  3b72				  -	      bne	jump1
    433  3b72				  -	      inc	shiftPressed
    434  3b72				  -	      bne	kbt2
    435  3b72				  -jump1
    436  3b72				  -	      sta	keyPressedIntern
    437  3b72				  -kbt2
    438  3b72				  -	      inx
    439  3b72				  -	      cpx	#18
    440  3b72				  -	      bne	kbt3
    441  3b72				  -	      ldx	keyPressedIntern
    442  3b72				  -	      beq	jump2
    443  3b72				  -	      lda	shiftPressed
    444  3b72				  -	      beq	jump2
    445  3b72				  -	      inx
    446  3b72				  -jump2
    447  3b72				  -	      stx	keyPressed
    448  3b72				  -	      bne	jump3
    449  3b72				  -	      lda	shiftPressed
    450  3b72				  -	      beq	jump3
    451  3b72				  -	      lda	#$40
    452  3b72				  -	      sta	keyPressed
    453  3b72				  -jump3
    454  3b72				  -	      ldx	#0
    455  3b72				  -	      stx	shiftPressed
    456  3b72				  -	      stx	keyPressedIntern
    457  3b72				  -kbt3
    458  3b72				  -	      stx	keyTestIndex
    459  3b72				  -	      rts
    460  3b72				  -
    461  3b72				  -keys
    462  3b72				  -	      .byte	%11111110, %00010000, 1	; F1
    463  3b72				  -	      .byte	%11111110, %00100000, 3	; F3
    464  3b72				  -	      .byte	%11111110, %01000000, 5	; F5
    465  3b72				  -	      .byte	%11111110, %00001000, 7	; F7
    466  3b72				  -	      .byte	%10111111, %00010000, $80	; right shift
    467  3b72				  -	      .byte	%10111101, %10000000, $80	; left shift
    468  3b72					      ENDIF
------- FILE cynthcart2.0.1.asm
   1061  3b72					      ENDIF
   1062  3b72
   1063  3b72
   1064  3b72				  -	      IF	MODE=KERNEL_OBSOLETE
   1065  3b72				  -	      org	$bfff
   1066  3b72				  -	      byte	0
   1067  3b72					      ENDIF

------- FILE cynthcart2.0.1.asm LEVEL 1 PASS 2
      1  3b3c ????						; Commodore 64 Cynthcart
      2  3b3c ????						; by Paul Slocum
      3  3b3c ????						;------------------------
      4  3b3c ????						; TEXT EDITOR TAB=3
      5  3b3c ????						;------------------------
      6  3b3c ????
      7  3b3c ????						;     ~~~==========================================================================================~~~
      8  3b3c ????						; <<<<<<"MODE" AND "DEVICE_CONFIG" SHOULD BE DEFINED IN DASM CALL (dasm -DMODE=1 -DDEVICE_CONFIG=0) >>>>>>
      9  3b3c ????						;     ~~~==========================================================================================~~~
     10  3b3c ????
     11  3b3c ????						; IMAGE RUN MODES:
     12  3b3c ????	       00 00	   CART_OBSOLETE equ	0	; run at $8000 off cartridge ROM (No longer supported because the ROM is bigger than 8K)
     13  3b3c ????	       00 01	   DISK       equ	1	; run at $8000, include initial load location word (PRG format)
     14  3b3c ????	       00 02	   RAM	      equ	2	; run at $3000, needs to be copied or decompressed into $3000 (used for compresed version)
     15  3b3c ????	       00 03	   KERNEL_OBSOLETE equ	3	; set up as replacement for 8k BASIC section of KERNEL (No longer supported because the ROM is bigger than 8K)
     16  3b3c ????						; -- - -- - -- - -- - -- -
     17  3b3c ????						;;;MODE equ RAM   ; DISK, CART_OBSOLETE, RAM (for compression), or KERNEL_OBSOLETE
     18  3b3c ????						; -- - -- - -- - -- - -- -
     19  3b3c ????
     20  3b3c ????
     21  3b3c ????						; MIDI AND SID2 CONFIGURATION:
     22  3b3c ????	       00 00	   DEFAULT    equ	0	; Midi autodetect, SID2 at $DF00
     23  3b3c ????	       00 01	   KERBEROS   equ	1	; Datel Midi, SID2 at $D420
     24  3b3c ????	       00 02	   EMU	      equ	2	; Midi disabled, SID2 at $D420
     25  3b3c ????	       00 03	   SIDSYMPHONY equ	3	; Midi disabled, SID2 at $DE00
     26  3b3c ????						; -- - -- - -- - -- - -- -
     27  3b3c ????						;;;DEVICE_CONFIG equ DEFAULT
     28  3b3c ????						; -- - -- - -- - -- - -- -
     29  3b3c ????
     30  3b3c ????
     31  3b3c ????	       00 00	   BETA_RELEASE equ	0
     32  3b3c ????
     33  3b3c ????						;=================================------------ - - - -  -   -
     34  3b3c ????						;
     35  3b3c ????						; TODO:
     36  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     37  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
     38  3b3c ????						;
     39  3b3c ????						;=================================------------ - - - -  -   -
     40  3b3c ????						;
     41  3b3c ????						; - - - - - - - - - - - - - -
     42  3b3c ????						; Change Log:
     43  3b3c ????						; - - - - - - - - - - - - - -
     44  3b3c ????						; 2.0.1
     45  3b3c ????						; + disabled Restore key, which causes a lock up on a few 64C models
     46  3b3c ????						; + reset paddle2 pitch value when pitch control is turned off
     47  3b3c ????						; 2.0
     48  3b3c ????						; + 7 additional presets
     49  3b3c ????						; + added mono stack portamento modes
     50  3b3c ????						; + wrote new instruction manual
     51  3b3c ????						; + moved secondary SID to $DF00 to work with SIDcart II (note: must build with SID #2 at $D420 for Kerberos)
     52  3b3c ????						; + now supports and autodetects Passport, Datel, Sequential, and Kerberos MIDI adapters (note: autodetect is incompatible with VICE)
     53  3b3c ????						; + created new compression system to fit latest ROM onto 8K cartridge
     54  3b3c ????						; + presets now have independent waveform and sustain/release for each oscillator
     55  3b3c ????						; + added a button to cancel out of the SID editor
     56  3b3c ????						; + help screen now displays even when video is off
     57  3b3c ????						; + fixed SID editor waveform bug
     58  3b3c ????						; + other minor bugfixes
     59  3b3c ????						; + added build switch for alternate midi and SID configurations
     60  3b3c ????						; - - - - - - - - - - - - - -
     61  3b3c ????						; 1.5.1
     62  3b3c ????						; + fixed clock and sysex bytes causing crashes/stuck notes (Midi 0xF0-0xFF)
     63  3b3c ????						; + fixed bad pitch bend startup value		Q
     64  3b3c ????						; + added non-omni modes for channel 1 and 5
     65  3b3c ????						; - - - - - - - - - - - - - -
     66  3b3c ????						; 1.5.0 (major update for Kerberos)
     67  3b3c ????						; + added MIDI support for Kerberos cartridge/DATEL MIDI interface
     68  3b3c ????						; + arpeggiator
     69  3b3c ????						; + mono stack mode and 6-voice mode
     70  3b3c ????						; + new filter and pulse width effects modes
     71  3b3c ????						; + 12 additional presets
     72  3b3c ????						; + improved clarity of help screen text
     73  3b3c ????						; + moved SID location for MIDI version to $D420 since MIDI address overlaps with SID Symphony ($DE00)
     74  3b3c ????						; + refactored much of project source
     75  3b3c ????						; + new smarter note buffering system
     76  3b3c ????						; + reworked patch parameter display
     77  3b3c ????						; + only disable keyboard scanning during paddle reads instead of disabling all interrupts
     78  3b3c ????						; + optimized the tuning shift tables for space by overlapping tables
     79  3b3c ????						; + made LFO and all pitch modulations use proper tuning/scaling
     80  3b3c ????						; + fixed some errors in the tuning shift tables
     81  3b3c ????						; + added "RETURN FOR CONTROLS" message at bottom
     82  3b3c ????						; - - - - - - - - - - - - - -
     83  3b3c ????						; 1.2.4
     84  3b3c ????						; + designated paddle 1 and 2 in help screen
     85  3b3c ????						; - - - - - - - - - - - - - -
     86  3b3c ????						; 1.2.3
     87  3b3c ????						; + disable key-commands when 3 piano keys are held
     88  3b3c ????						;		to avoid quirks with keyboard matrix
     89  3b3c ????						; + fixed LFO indicator w/ fullscreen video in helpMode
     90  3b3c ????						; + reinstated shift-lock holding notes
     91  3b3c ????						; + add another octave to NTSC note chart (had 1 less than PAL)
     92  3b3c ????						; + add another octave to tuning charts for 5ths in top octave
     93  3b3c ????						; + auto-paddle on
     94  3b3c ????						; + set up custom test for space bar
     95  3b3c ????						; + disable settings changes w/ space bar
     96  3b3c ????						; + corrected "sine" to "tringl" in patch names
     97  3b3c ????						; + restored startup patch to "saw bass"
     98  3b3c ????						; o add support for second paddle (pitch, LFO depth, LFO rate, pulse width)
     99  3b3c ????						;	+ add key command to switch controls and turn off
    100  3b3c ????						;	+ add display of paddle status
    101  3b3c ????						;	+ add code to run things from the second paddle
    102  3b3c ????						; - - - - - - - - - - - - - -
    103  3b3c ????						; 1.2.2
    104  3b3c ????						; + keyboard driver rewrite
    105  3b3c ????						; + moved tuning from piano to ASDF...
    106  3b3c ????						; + moved filter On/Off to ZXC
    107  3b3c ????						; + keys swap portamento and octave
    108  3b3c ????						; + move video mode to SHFT+FGH and require shift for VIC mode
    109  3b3c ????						; + add key to switch between PAL/NTSC (RUNSTOP+Z/X)
    110  3b3c ????						; + separate functions for "show everything" and "variable init"
    111  3b3c ????						; + video mode with no text (shift+:/;)
    112  3b3c ????						; + SID register $20-$26 edits all 3 oscillators at once
    113  3b3c ????						; + write help display routine
    114  3b3c ????						; + add help screen
    115  3b3c ????						; + reverse octave keys
    116  3b3c ????						; + add help for SID edit mode
    117  3b3c ????						; + redo hex editor piano KB layout
    118  3b3c ????						; + save SID edits
    119  3b3c ????						; + added "COPYING TO RAM" text when RAM copy is on
    120  3b3c ????						; - - - - - - - - - - - - - -
    121  3b3c ????						; 1.2.1
    122  3b3c ????						; + pitch fix for PAL
    123  3b3c ????						; + autodetection for PAL/NTSC
    124  3b3c ????						; - - - - - - - - - - - - - -
    125  3b3c ????						; 1.2.0
    126  3b3c ????						; + filter adjustment for SID Symphony
    127  3b3c ????						; - - - - - - - - - - - - - -
    128  3b3c ????						; 1.1 RELEASE
    129  3b3c ????						; + added SID HEX editor
    130  3b3c ????						; + changed tuning keys to avoid accidentally changing the tuning
    131  3b3c ????						; + added ability to turn the SID filter on and off
    132  3b3c ????						; - - - - - - - - - - - - - -
    133  3b3c ????						; 1.0 RELEASE
    134  3b3c ????						; + first official release
    135  3b3c ????						;-----------------------------------------------------
    136  3b3c ????
    137  3b3c ????
    138  3b3c ????						;-----------------------------------------------------
    139  3b3c ????						; FUTURE TODO LIST:
    140  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    141  3b3c ????						; - make port modes respond to pitch wheel
    142  3b3c ????						; - figure out why pulse LFO is so slow
    143  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    144  3b3c ????						; - fix patch saver issue where mode and FX are sometimes not saved
    145  3b3c ????						; - bug is bypassed, but figure out why showScreen messes up the filter setting
    146  3b3c ????						; - figure out why portamento is slower going down than up
    147  3b3c ????						; - make (IRQ) detector that works with VICE?
    148  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    149  3b3c ????						; - make envelope reset on every new note in mono modes
    150  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    151  3b3c ????						; - automatically relocate SID when using Kerberos
    152  3b3c ????						; - move video settings keys to a less used location?
    153  3b3c ????						; - add more FX modes
    154  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    155  3b3c ????						; - add some of Gert's mixed waveform sounds
    156  3b3c ????						; - add a button that resets all settings and turns video on
    157  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    158  3b3c ????						; - automatically turn off paddle when MIDI mod wheel data is received
    159  3b3c ????						; -  ~  -  ~  -  ~  -	~  -  ~  -  ~  -  ~
    160  3b3c ????						; - 'O' key specifically may be out of tune
    161  3b3c ????						; - - - - - - - - - - - - - - -
    162  3b3c ????						; - consider adding per-patch filter on/off/disabled setting
    163  3b3c ????						; - midi trigger to turn off/on omni
    164  3b3c ????						; - - - - - - - - - - - - - - -
    165  3b3c ????						; - make rising mod not drop
    166  3b3c ????						; - wire up pwModValue from functions
    167  3b3c ????						; - wire up pwSetValue from midi and paddle
    168  3b3c ????						; - create filter and PW setter that runs every frame
    169  3b3c ????						; - - - - - - - - - - - - - - -
    170  3b3c ????						; - have mono-stack check to make sure notes aren't too low or too high
    171  3b3c ????						; - create 3-char copy routine and update "FILTR" to "FILTER"
    172  3b3c ????						; - create system that cycles which spots are favored for new empty or replacement notes
    173  3b3c ????						; - - - - - - - - - - - - - - -
    174  3b3c ????						; - auto-detect secondary SID
    175  3b3c ????						; - automatic setup for Kerberos MIDI
    176  3b3c ????						; - - - - - - - - - - - - - - -
    177  3b3c ????						; - fix note off bug with drum machine?
    178  3b3c ????						; - - - - - - - - - - - - - - -
    179  3b3c ????						; -- show held modifier keys
    180  3b3c ????						; - link SID memory to a controller block
    181  3b3c ????						; - make fifths buttons preserve the portamento setting
    182  3b3c ????						; - - - - - - - - - - - - - - -
    183  3b3c ????						; - new intervals other than 5ths
    184  3b3c ????						; - better mute/noise reduction
    185  3b3c ????						; - alternate set of keybindings for use without the keyboard overlay
    186  3b3c ????						; - - - - - - - - - - - - - - -
    187  3b3c ????						; - more patches
    188  3b3c ????						; - paddle 2 auto-on
    189  3b3c ????						;--------------------------
    190  3b3c ????						; - add echo long/med/short
    191  3b3c ????						; - more extreme variations in video mode
    192  3b3c ????						; - noise reduction
    193  3b3c ????						; - Envelope -> Filter Cutoff
    194  3b3c ????						; - filter type
    195  3b3c ????						; - ring modulation
    196  3b3c ????						; - sync
    197  3b3c ????						; - Whammy speed control
    198  3b3c ????						;--------------------------
    199  3b3c ????						; - filter Q
    200  3b3c ????						; - save patches to disk
    201  3b3c ????						;--------------------------
    202  3b3c ????						;--------------------------
    203  3b3c ????
    204  3b3c ????
    205  3b3c ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    206  3b3c ????						;# MEMORY MAP
    207  3b3c ????						;#
    208  3b3c ????						;# $0800-$3800 Program and data
    209  3b3c ????						;# $7000-$7200 Variables and buffers (512 bytes)
    210  3b3c ????						;# $7F00-$7FFF MIDI ring buffer
    211  3b3c ????						;#
    212  3b3c ????						;#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
    213  3b3c ????
    214  3b3c ????
    215  3b3c ????
    216  3b3c ????
    217  3b3c ????						;/\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/ /\ \/
    218  3b3c ????				      processor	6502
    219  3b3c ????
    220  3b3c ????
    221  3b3c ????						;**********************************************************
    222  3b3c ????						;**********************************************************
    223  3b3c ????						; PROGRAM CONFIGURATION SWITCHES
    224  3b3c ????						;**********************************************************
    225  3b3c ????						;**********************************************************
    226  3b3c ????
    227  3b3c ????
    228  3b3c ????
    229  3b3c ????	       00 01	   RAMCOPY    equ	1	; Copy program to RAM before running (this should always be enabled)
    230  3b3c ????
    231  3b3c ????				      IF	DEVICE_CONFIG=KERBEROS
    232  3b3c ????	       d4 20	   SID2       equ	$D420
    233  3b3c ????	       00 01	   ENABLE_MIDI_COMMANDS equ	1
    234  3b3c ????				      ENDIF
    235  3b3c ????			  -	      IF	DEVICE_CONFIG=EMU
    236  3b3c ????			  -SID2       equ	$D420
    237  3b3c ????			  -ENABLE_MIDI_COMMANDS equ	0
    238  3b3c ????				      ENDIF
    239  3b3c ????			  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    240  3b3c ????			  -SID2       equ	$DE00
    241  3b3c ????			  -ENABLE_MIDI_COMMANDS equ	0
    242  3b3c ????				      ENDIF
    243  3b3c ????			  -	      IF	DEVICE_CONFIG=DEFAULT
    244  3b3c ????			  -SID2       equ	$DF00
    245  3b3c ????			  -ENABLE_MIDI_COMMANDS equ	1
    246  3b3c ????				      ENDIF
    247  3b3c ????
    248  3b3c ????	       00 00	   USE_DUMMY_MIDI_LIBRARY equ	0
    249  3b3c ????						;USE_DUMMY_MIDI_LIBRARY equ 1
    250  3b3c ????
    251  3b3c ????						;ENABLE_MIDI_COMMANDS equ 1
    252  3b3c ????
    253  3b3c ????	       00 00	   DEBUG_DISABLE_VIDEO_MODE equ	0
    254  3b3c ????	       00 00	   DEBUG_DISPLAY equ	0
    255  3b3c ????	       00 00	   OFFSET_CONTROLLERS equ	0
    256  3b3c ????	       00 00	   DEBUG_SHOW_MIDI equ	0
    257  3b3c ????	       00 00	   DEBUG_DISABLE_KEY_TIMER equ	0
    258  3b3c ????	       00 00	   DEBUG_SHOW_PORTAMENTO equ	0
    259  3b3c ????
    260  3b3c ????
    261  3b3c ????						;**********************************************************
    262  3b3c ????						;**********************************************************
    263  3b3c ????						;**********************************************************
    264  3b3c ????
    265  3b3c ????						; *********************************************
    266  3b3c ????						; START OF PROGRAM IN MEMORY
    267  3b3c ????						; *********************************************
    268  3b3c ????
    269  3b3c ????						;==================================================
    270  3b3c ????						; load from disk as PRG with auto-run
    271  3b3c ????				      IF	MODE=DISK
    272  3b3c ????	       07 ff	   BASEADDR   equ	2047	; 2047 = $7FF
    273  07ff					      org	BASEADDR	; the beginning of the BASIC program area
    274  07ff
    275  07ff							; disk load location
    276  07ff		       01 08		      byte.b	$01,$08
    277  0801							; BASIC program to call the cynthcart machine code...
    278  0801							; 10 SYS 2061
    279  0801		       0b 08 0a 00*	      byte.b	$0b,$08, $0a,$00,$9e,$32, $30,$36,$31,$00, $00,$00
    280  080d							; next effective address after this is 2061 / $80D
    281  080d					      ENDIF
    282  080d
    283  080d							;==================================================
    284  080d							; straight cart ROM
    285  080d				  -	      IF	MODE=CART_OBSOLETE
    286  080d				  -BASEADDR   equ	$8000
    287  080d				  -	      org	BASEADDR
    288  080d				  -	      word	Startup
    289  080d				  -	      word	Startup
    290  080d				  -			; 5 byte cartridge startup code
    291  080d				  -	      byte	$C3, $C2, $CD, $38, $30
    292  080d					      ENDIF
    293  080d
    294  080d							;==================================================
    295  080d							; load from RAM, requires wrapper to load into RAM (used for compressed version)
    296  080d				  -	      IF	MODE=RAM
    297  080d				  -BASEADDR   equ	$3000
    298  080d				  -			;BASEADDR equ $4FFE ; DEBUG SETUP AS PRG
    299  080d				  -	      org	BASEADDR
    300  080d				  -			;byte $00,$50 ; DEBUG SETUP AS PRG
    301  080d					      ENDIF
    302  080d
    303  080d							;==================================================
    304  080d							; to replace BASIC ROM (NO LONGER SUPPORTED)
    305  080d				  -	      IF	MODE=KERNEL_OBSOLETE
    306  080d				  -BASEADDR   equ	$8000
    307  080d				  -	      org	BASEADDR
    308  080d				  -	      word	$E394	; RESET
    309  080d				  -	      word	$E37B	; Warm Start
    310  080d					      ENDIF
    311  080d
    312  080d							;---------------------------------------
    313  080d							; variables and constants here
    314  080d							;---------------------------------------
------- FILE cynth_vars.asm LEVEL 2 PASS 2
      0  080d					      include	cynth_vars.asm
      1  080d							; *********************************************
      2  080d							; Constants
      3  080d							; *********************************************
      4  080d
      5  080d							;KEYTIME equ 128
      6  080d							;KEYTIME equ 64
      7  080d		       00 28	   KEYTIME    equ	40
      8  080d
      9  080d		       00 e0	   REL_SHORT  equ	$E0
     10  080d		       00 e9	   REL_MED    equ	$E9
     11  080d		       00 ee	   REL_LONG   equ	$EE
     12  080d
     13  080d		       00 00	   ATK_SHORT  equ	$00
     14  080d		       00 90	   ATK_MED    equ	$90
     15  080d		       00 e0	   ATK_LONG   equ	$E0
     16  080d
     17  080d
     18  080d		       00 00	   VOLOFF     equ	$00
     19  080d		       00 07	   VOLLOW     equ	$07
     20  080d		       00 0b	   VOLMED     equ	$0B
     21  080d		       00 0f	   VOLHIGH    equ	$0F
     22  080d
     23  080d		       00 c5	   CURRENTKEY equ	197
     24  080d
     25  080d		       d0 20	   BACK_COLOR equ	53280
     26  080d		       d0 21	   BORD_COLOR equ	53281
     27  080d
     28  080d		       d4 00	   SID1       equ	$D400
     29  080d
     30  080d
     31  080d							;SID2 equ $DEE0
     32  080d
     33  080d		       00 04	   SID2OFFSET equ	4
     34  080d
     35  080d		       00 0a	   SID_SYMPHONY_FILTER_OFFSET equ	10
     36  080d
     37  080d		       00 00	   SV1FL      equ	$00
     38  080d		       00 01	   SV1FH      equ	$01
     39  080d		       00 02	   SV1PWL     equ	$02
     40  080d		       00 03	   SV1PWH     equ	$03
     41  080d		       00 04	   SV1WAVE    equ	$04
     42  080d		       00 05	   SV1AD      equ	$05
     43  080d		       00 06	   SV1SR      equ	$06
     44  080d
     45  080d		       00 07	   SV2FL      equ	$07
     46  080d		       00 08	   SV2FH      equ	$08
     47  080d		       00 09	   SV2PWL     equ	$09
     48  080d		       00 0a	   SV2PWH     equ	$0A
     49  080d		       00 0b	   SV2WAVE    equ	$0B
     50  080d		       00 0c	   SV2AD      equ	$0C
     51  080d		       00 0d	   SV2SR      equ	$0D
     52  080d
     53  080d		       00 0e	   SV3FL      equ	$0E
     54  080d		       00 0f	   SV3FH      equ	$0F
     55  080d		       00 10	   SV3PWL     equ	$10
     56  080d		       00 11	   SV3PWH     equ	$11
     57  080d		       00 12	   SV3WAVE    equ	$12
     58  080d		       00 13	   SV3AD      equ	$13
     59  080d		       00 14	   SV3SR      equ	$14
     60  080d
     61  080d		       00 15	   SFILTL     equ	$15
     62  080d		       00 16	   SFILTH     equ	$16
     63  080d		       00 17	   SFILTC     equ	$17
     64  080d		       00 18	   SVOLMODE   equ	$18
     65  080d
     66  080d		       00 19	   SPAD1      equ	$19
     67  080d		       00 1a	   SPAD2      equ	$1A
     68  080d
     69  080d		       00 1b	   SRAND      equ	$1B
     70  080d
     71  080d		       dc 00	   PortA      equ	$dc00
     72  080d		       dc 02	   Ciddra     equ	$dc02
     73  080d
     74  080d
     75  080d							; *********************************************
     76  080d							; RAM Variables
     77  080d							; *********************************************
     78  080d
     79  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  080d							; ZERO PAGE
     81  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  080d
     83  080d							; FROM SORTING ROUTINE
     84  080d		       01 20	   zpadd      =	$120	;2 byte pointer in page zero. set by calling program
     85  080d		       01 22	   nval       =	$122	;set by calling program
     86  080d		       01 25	   work1      =	$125	;3 bytes used as working area
     87  080d		       01 26	   work2      =	$126
     88  080d		       01 27	   work3      =	$127
     89  080d
     90  080d							;ZPADD  = $30		  ;2 BYTE POINTER IN PAGE ZERO. SET BY CALLING PROGRAM
     91  080d							;NVAL	 = $32		  ;SET BY CALLING PROGRAM
     92  080d							;WORK1  = $33		  ;3 BYTES USED AS WORKING AREA
     93  080d							;WORK2  = $34
     94  080d							;WORK3  = $35
     95  080d
     96  080d							; CYNTHCART
     97  080d		       00 22	   tunePtrL   equ	34	;2 bytes
     98  080d		       00 22	   copyPtrS   equ	34	; (also used for RAM copying)
     99  080d		       00 24	   tunePtrH   equ	36	;2 bytes (also used for RAM copying)
    100  080d		       00 24	   copyPtrD   equ	36	; (also used for RAM copying)
    101  080d
    102  080d		       00 2b	   lowTextPtr equ	43	; 2 BYTES
    103  080d		       00 2d	   lowColorPtr equ	45	; 2 BYTES
    104  080d
    105  080d		       00 2f	   helpReadPointerL equ	47
    106  080d		       00 30	   helpReadPointerM equ	48
    107  080d		       00 31	   helpWritePointerL equ	49
    108  080d		       00 32	   helpWritePointerM equ	50
    109  080d		       00 33	   helpColorPointerL equ	51
    110  080d		       00 34	   helpColorPointerM equ	52
    111  080d
    112  080d		       00 35	   portPtrL   equ	53	;2 bytes
    113  080d		       00 47	   portPtrH   equ	71	;2 bytes
    114  080d
    115  080d		       00 c2	   keyPtrL    equ	194	; used to set up key command function calls
    116  080d		       00 c3	   keyPtrH    equ	195
    117  080d
    118  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    119  080d							; MIDI module -= -= -= -= -= -= -= -= -= -= -= -=
    120  080d							; private addresses ======
    121  080d		       00 64	   midiControl equ	$64	; $64 = 100
    122  080d		       00 66	   midiStatus =	$66	; 102
    123  080d		       00 68	   midiTx     =	$68	;104
    124  080d		       00 6a	   midiRx     =	$6a	;106
    125  080d		       00 6f	   keyTestIndex =	$6f	; 111
    126  080d		       00 70	   keyPressedIntern =	$70	; 112
    127  080d		       00 72	   shiftPressed =	$72	; 114
    128  080d							; public addresses ======
    129  080d		       00 6c	   midiRingbufferReadIndex =	$6c	;108
    130  080d		       00 6d	   midiRingbufferWriteIndex =	$6d	;109
    131  080d		       00 6e	   midiInterfaceType =	$6e	;110
    132  080d		       00 71	   keyPressed =	$71	; 113
    133  080d							; this module ======
    134  080d		       00 59	   midiMessage equ	$59	; 95
    135  080d		       00 5a	   lastWaveform equ	$5a	; 90
    136  080d							; - - - - - - - - - - - - - -
    137  080d							; - - - - - - - - - - - - - -
    138  080d							; Non-zero page
    139  080d		       7f 00	   midiRingbuffer =	$7F00
    140  080d							; -= -= -= -= -= - = -= -= -= -= -= -= -= -= -= -= -= -= -= -= -=
    141  080d
    142  080d							;-------------------------------------
    143  080d
    144  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  080d							; NON-ZERO PAGE ($7000-$7FFF)
    146  080d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  080d
    148  080d		       70 00	   Trem       equ	$7000
    149  080d
    150  080d		       70 02	   FrameH     equ	$7002
    151  080d		       70 03	   Frame      equ	$7003
    152  080d
    153  080d		       70 04	   EchoPtr    equ	$7004
    154  080d		       70 05	   EchoCur    equ	$7005
    155  080d
    156  080d		       70 06	   Buffer     equ	$7006	; for paddle reading routine
    157  080d
    158  080d		       70 07	   MagicVoice equ	$7007
    159  080d
    160  080d		       70 08	   LastKey    equ	$7008
    161  080d
    162  080d		       70 09	   Button     equ	$7009
    163  080d
    164  080d		       70 0a	   LFO	      equ	$700A
    165  080d
    166  080d		       70 0b	   PatchTune  equ	$700B
    167  080d
    168  080d		       70 0c	   temp       equ	$700C
    169  080d
    170  080d							;KeyA	equ $700D
    171  080d							;KeyB	equ $700E
    172  080d							;KeyC	equ $700F
    173  080d
    174  080d							;lastKeyA equ $7010
    175  080d							;lastKeyB equ $7011
    176  080d							;lastKeyC equ $7012
    177  080d
    178  080d		       70 13	   portDirA   equ	$7013
    179  080d		       70 14	   portDirB   equ	$7014
    180  080d		       70 15	   portDirC   equ	$7015
    181  080d
    182  080d		       70 16	   pitchLA    equ	$7016
    183  080d		       70 17	   pitchLB    equ	$7017
    184  080d		       70 18	   pitchLC    equ	$7018
    185  080d
    186  080d		       70 19	   pitchHA    equ	$7019
    187  080d		       70 1a	   pitchHB    equ	$701A
    188  080d		       70 1b	   pitchHC    equ	$701B
    189  080d
    190  080d		       70 1c	   volume     equ	$701C
    191  080d
    192  080d							; soundModes
    193  080d							; UPPER 5 BITS = MODE, LOWER 3 BITS = SUBMODE
    194  080d		       00 00	   MODE_NORMAL equ	$00
    195  080d		       00 08	   MODE_6CHAN equ	$08
    196  080d		       00 10	   MODE_PORT1 equ	$10
    197  080d		       00 11	   MODE_PORT2 equ	$11
    198  080d		       00 12	   MODE_PORT3 equ	$12
    199  080d		       00 20	   MODE_MONO1 equ	$20
    200  080d		       00 21	   MODE_MONO2 equ	$21
    201  080d		       00 31	   MODE_MONOPORT1 equ	$31
    202  080d		       00 32	   MODE_MONOPORT2 equ	$32
    203  080d		       00 40	   MODE_ARP1  equ	$40
    204  080d		       00 41	   MODE_ARP2  equ	$41
    205  080d		       00 42	   MODE_ARP3  equ	$42
    206  080d		       00 43	   MODE_ARP4  equ	$43
    207  080d		       00 44	   MODE_ARP5  equ	$44
    208  080d		       00 01	   MODE_5THS  equ	$01
    209  080d		       00 02	   MODE_5PORT equ	$02
    210  080d							;- - - - - - - - - - -
    211  080d
    212  080d		       00 10	   PORT_MASK  equ	$10
    213  080d		       00 20	   MONO_MASK  equ	$20
    214  080d		       00 40	   ARP_MASK   equ	$40
    215  080d		       00 08	   CHAN6_MASK equ	$08
    216  080d
    217  080d
    218  080d		       70 1d	   soundMode  equ	$701D
    219  080d		       70 1e	   arpSpeed   equ	$701E
    220  080d
    221  080d		       70 1f	   dispOn     equ	$701F
    222  080d
    223  080d		       70 20	   VICMode    equ	$7020
    224  080d
    225  080d		       70 21	   patPtr     equ	$7021
    226  080d
    227  080d		       70 22	   keyOffset  equ	$7022
    228  080d
    229  080d		       70 24	   volModeRAM equ	$7024
    230  080d
    231  080d		       70 25	   shiftL1    equ	$7025
    232  080d		       70 26	   shiftH1    equ	$7026
    233  080d		       70 27	   shiftL2    equ	$7027
    234  080d		       70 28	   shiftH2    equ	$7028
    235  080d
    236  080d							;$7025 - $7028 free
    237  080d
    238  080d		       70 29	   paddle     equ	$7029	; determines whether paddle controls filter or not
    239  080d
    240  080d		       70 30	   WaveType   equ	$7030
    241  080d		       70 37	   WaveType2  equ	$7037
    242  080d		       70 3e	   WaveType3  equ	$703E
    243  080d
    244  080d		       70 3f	   LFObend    equ	$703F
    245  080d		       70 40	   bender     equ	$7040
    246  080d
    247  080d		       70 43	   pitchTmpL  equ	$7043
    248  080d		       70 44	   pitchTmpH  equ	$7044
    249  080d
    250  080d		       70 45	   videoMode  equ	$7045
    251  080d
    252  080d		       70 46	   textTemp   equ	$7046
    253  080d
    254  080d		       70 47	   patchSetY  equ	$7047
    255  080d
    256  080d		       70 48	   LFORate    equ	$7048
    257  080d		       70 49	   LFODepth   equ	$7049
    258  080d
    259  080d		       70 50	   videoModeNum equ	$7050
    260  080d
    261  080d		       70 51	   portLastNote equ	$7051	;-$7053   3 bytes
    262  080d		       70 54	   portLastDir equ	$7054	;-$7056	 3 bytes
    263  080d
    264  080d		       70 57	   filter     equ	$7057
    265  080d
    266  080d		       70 58	   keyTimer   equ	$7058
    267  080d
    268  080d		       70 59	   bendSpd    equ	$7059
    269  080d
    270  080d		       70 5a	   SIDeditAddr equ	$705A
    271  080d		       70 5b	   SIDeditValue equ	$705B
    272  080d
    273  080d		       70 5c	   filterDisable equ	$705C
    274  080d
    275  080d		       70 5d	   lastKey    equ	$705D
    276  080d
    277  080d		       70 60	   hexKeyMode equ	$7060
    278  080d
    279  080d		       70 61	   NTSCmode   equ	$7061
    280  080d
    281  080d		       70 62	   temp16L    equ	$7062
    282  080d		       70 63	   temp16H    equ	$7063
    283  080d
    284  080d		       70 64	   saveX      equ	$7064
    285  080d
    286  080d							;EchoBuffer	equ 1184 ; 256 bytes
    287  080d
    288  080d		       70 65	   keyTemp    equ	$7065
    289  080d
    290  080d		       70 66	   lastOsc    equ	$7066
    291  080d
    292  080d		       70 67	   fullScreenMode equ	$7067
    293  080d
    294  080d		       70 68	   videoText  equ	$7068
    295  080d
    296  080d		       70 69	   attack     equ	$7069
    297  080d		       70 6a	   release    equ	$706A
    298  080d		       70 6b	   octave     equ	$706B
    299  080d		       70 6c	   filterStatus equ	$706C
    300  080d
    301  080d		       70 6d	   helpColor  equ	$706D
    302  080d		       70 6e	   helpYIn    equ	$706E
    303  080d		       70 6f	   helpYOut   equ	$706F
    304  080d
    305  080d		       70 70	   helpMode   equ	$7070
    306  080d
    307  080d		       70 71	   tuneSetting equ	$7071
    308  080d
    309  080d		       70 72	   hexDispTemp equ	$7072
    310  080d
    311  080d		       70 73	   sidTemp1   equ	$7073
    312  080d		       70 74	   sidTemp2   equ	$7074
    313  080d
    314  080d		       70 75	   customPatchSaved equ	$7075
    315  080d
    316  080d		       70 76	   paddleTop  equ	$7076
    317  080d		       70 77	   paddleBottom equ	$7077
    318  080d
    319  080d		       70 78	   paddleX    equ	$7078
    320  080d		       70 79	   paddleY    equ	$7079
    321  080d
    322  080d		       70 7a	   paddle2    equ	$707A
    323  080d		       70 7b	   lastPad2   equ	$707B
    324  080d
    325  080d		       70 7c	   debugOffset equ	$707C
    326  080d		       70 7d	   savedMidiStatus equ	$707D
    327  080d		       70 7e	   firstDataByte equ	$707E
    328  080d		       70 7f	   tempVelocity equ	$707F
    329  080d		       70 80	   bufferSize equ	$7080
    330  080d		       70 81	   noteTempA  equ	$7081
    331  080d		       70 82	   noteTempB  equ	$7082
    332  080d
    333  080d		       70 83	   benderAutoreset equ	$7083
    334  080d		       70 84	   polyphony  equ	$7084
    335  080d
    336  080d		       70 85	   arpOffset  equ	$7085
    337  080d
    338  080d		       70 86	   fxType     equ	$7086
    339  080d		       70 87	   modValue1  equ	$7087
    340  080d		       70 89	   modDirection equ	$7089
    341  080d		       70 8a	   modCounter equ	$708A
    342  080d		       70 8b	   modLFOMinValue equ	$708B
    343  080d		       70 8a	   modLFOMaxValue equ	$708A
    344  080d
    345  080d		       00 00	   MOD_NONE   equ	0
    346  080d		       00 01	   MOD_FILT_LFO equ	1
    347  080d		       00 02	   MOD_FILT_ENV equ	2
    348  080d		       00 03	   MOD_FILT3  equ	3
    349  080d		       00 04	   MOD_FILT4  equ	4
    350  080d		       00 05	   MOD_FILT5  equ	5
    351  080d		       00 06	   MOD_PW_LFO equ	6
    352  080d		       00 07	   MOD_PW2    equ	7
    353  080d
    354  080d		       70 8b	   noteOffCount equ	$708B
    355  080d		       70 8c	   noteOnCount equ	$708C
    356  080d
    357  080d		       70 8d	   hexDispColor equ	$708D
    358  080d
    359  080d		       70 8e	   midiBendValue equ	$708E
    360  080d
    361  080d		       70 8f	   temp2      equ	$708F
    362  080d
    363  080d
    364  080d		       70 97	   resonance  equ	$7097
    365  080d
    366  080d		       70 98	   resetValue equ	$7098
    367  080d
    368  080d		       70 99	   lastNoteCount equ	$7099
    369  080d		       70 9a	   lastNote   equ	$709A
    370  080d
    371  080d		       70 9b	   keyCount   equ	$709B
    372  080d
    373  080d		       70 9c	   filterModValue equ	$709C
    374  080d		       70 9d	   filterSetValue equ	$709D
    375  080d		       70 9e	   pwModValue equ	$709E
    376  080d		       70 9f	   pwSetValue equ	$709F
    377  080d
    378  080d		       70 f0	   midiTuning equ	$70F0
    379  080d		       70 f1	   benderTuning equ	$70F1
    380  080d		       70 f2	   lfoTuning  equ	$70F2
    381  080d		       70 f3	   systemTuning equ	$70F3
    382  080d		       70 f4	   masterTuning equ	$70F4
    383  080d		       70 f5	   finalTuning equ	$70F5
    384  080d		       70 f6	   noteShift  equ	$70F6
    385  080d
    386  080d		       70 f7	   midiMode   equ	$70F7
    387  080d
    388  080d
    389  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    390  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    391  080d							; BUFFERS
    392  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    393  080d							;- - - - - - - - - - - - - - - - - - - - - - - - - - - -
    394  080d
    395  080d		       00 08	   NOTE_BUF_SIZE equ	8
    396  080d		       70 a0	   noteNumArray equ	$70A0
    397  080d		       70 b0	   playNoteArray equ	$70B0
    398  080d
    399  080d							;noteVelArray equ $70C0
    400  080d
    401  080d		       70 d0	   kbBuffer   equ	$70D0
    402  080d		       70 e0	   lastKbBuffer equ	$70E0
    403  080d
    404  080d		       70 e1	   tempA      equ	$70E1
    405  080d		       70 e2	   tempX      equ	$70E2
    406  080d		       70 e3	   tempY      equ	$70E3
    407  080d
    408  080d
    409  080d							;-----------------------------------------------
    410  080d
    411  080d							; SID editor custom preset data...
    412  080d		       71 00	   sidData    equ	$7100	; 32 bytes -- location to save SID register writes since it is read only
    413  080d
    414  080d		       71 20	   sidSaveData equ	$7120	; 32 bytes -- location to save edited SID patch
    415  080d		       71 41	   savePaddle equ	$7141
    416  080d		       71 42	   saveOctave equ	$7142
    417  080d		       71 43	   saveSoundMode equ	$7143
    418  080d		       71 43	   saveFXType equ	$7143
    419  080d		       71 44	   saveArpSpeed equ	$7144
    420  080d		       71 46	   saveLFODepth equ	$7146
    421  080d		       71 47	   saveLFORate equ	$7147
    422  080d		       71 48	   saveVolume equ	$7148
    423  080d		       71 49	   saveVolMode equ	$7149
    424  080d		       71 4a	   saveFilter equ	$714A
    425  080d
    426  080d							;--------------------------------------------------
    427  080d
    428  080d		       71 50	   midiEnabled equ	$7150
    429  080d		       71 51	   dummyMidiIncrementer equ	$7151
    430  080d
    431  080d		       70 52	   sidEditSaveTemp1 equ	$7052
    432  080d		       70 54	   sidEditSaveTemp5 equ	$7054
    433  080d
    434  080d							;pulseModulationValue equ $7056
    435  080d							;pulseMidiValue equ $7057
------- FILE cynthcart2.0.1.asm
    316  080d
    317  080d							; *********************************************
    318  080d							; Start of program
    319  080d							; *********************************************
    320  080d				   Startup
    321  080d
    322  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    323  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    324  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    325  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    326  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    327  080d							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    328  080d							; switch to (upper?) lowercase mode
    329  080d		       a9 17		      lda	#23
    330  080f		       8d 18 d0 	      sta	$d018
    331  0812
    332  0812							; clear screen and show info
    333  0812							;	ldx #0
    334  0812							;	stx $d020
    335  0812							;	stx $d021
    336  0812							;loop1:	; clear screen...
    337  0812							;	lda #32
    338  0812							;	sta $0400,x
    339  0812							;	sta $0400+250,x
    340  0812							;	sta $0400+500,x
    341  0812							;	sta $0400+750,x
    342  0812							;	lda #14
    343  0812							;	sta $d800,x
    344  0812							;	sta $d800+250,x
    345  0812							;	sta $d800+500,x
    346  0812							;	sta $d800+750,x
    347  0812							;	inx
    348  0812							;	cpx #250
    349  0812							;	bne loop1
    350  0812							;	ldx #0
    351  0812							;loop2:	; show info...
    352  0812							;	lda #1
    353  0812							;	sta $0400+10*40,x
    354  0812							;	inx
    355  0812							;	cpx #80
    356  0812							;	bne loop2
    357  0812
    358  0812							; init SID...
    359  0812		       a9 00		      lda	#0
    360  0814		       a2 00		      ldx	#0
    361  0816		       9d 00 d4    initSid    sta	$d400,x
    362  0819		       e8		      inx
    363  081a		       e0 19		      cpx	#25
    364  081c		       d0 f8		      bne	initSid
    365  081e		       a9 0f		      lda	#15
    366  0820		       8d 18 d4 	      sta	$d418
    367  0823		       a9 01		      lda	#1
    368  0825		       8d 03 d4 	      sta	$d403
    369  0828
    370  0828							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    371  0828							;lock: jmp lock
    372  0828							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    373  0828
    374  0828					      IF	ENABLE_MIDI_COMMANDS=1
    375  0828		       20 c9 39 	      jsr	midiDetect	; AUTODETECT MIDI IF NOT KERBEROS BUILD
    376  082b				  -	      ELSE
    377  082b				  -	      lda	#0
    378  082b					      ENDIF
    379  082b		       8d 50 71 	      sta	midiEnabled
    380  082e		       20 41 3a 	      jsr	midiInit
    381  0831							;ENDIF
    382  0831
    383  0831							; Set default hex color
    384  0831		       a9 0e		      lda	#$E
    385  0833		       8d 8d 70 	      sta	hexDispColor
    386  0836
    387  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    388  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    389  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    390  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    391  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    392  0836							;=- =- =- =- =- =- =- =- =- =- =- =- =- =-
    393  0836
    394  0836				   skipTest
    395  0836
    396  0836							; Copy program into RAM if running from cartridge...
    397  0836				  -	      IF	MODE=CART_OBSOLETE
    398  0836				  -	      ldx	#0
    399  0836				  -RAMTextCopy
    400  0836				  -	      lda	RAMText,x
    401  0836				  -	      beq	quitRAMTextCopy
    402  0836				  -	      cmp	#64
    403  0836				  -	      bmi	showSpaceRAM
    404  0836				  -	      sbc	#64
    405  0836				  -showSpaceRAM
    406  0836				  -	      sta	1024,x
    407  0836				  -	      inx
    408  0836				  -	      jmp	RAMTextCopy
    409  0836				  -RAMText
    410  0836				  -	      byte	"COPYING TO RAM...",0
    411  0836				  -quitRAMTextCopy
    412  0836				  -			;------------
    413  0836				  -	      ldx	#8*4
    414  0836				  -	      lda	#<copyStart
    415  0836				  -	      sta	copyPtrS
    416  0836				  -	      lda	#>copyStart
    417  0836				  -	      sta	copyPtrS+1
    418  0836				  -	      lda	#<ramStart
    419  0836				  -	      sta	copyPtrD
    420  0836				  -	      lda	#>ramStart
    421  0836				  -	      sta	copyPtrD+1
    422  0836				  -ramCopy1
    423  0836				  -	      ldy	#0
    424  0836				  -ramCopy2
    425  0836				  -	      lda	(copyPtrS),y
    426  0836				  -	      sta	(copyPtrD),y
    427  0836				  -	      dey
    428  0836				  -	      bne	ramCopy2
    429  0836				  -	      inc	copyPtrS+1
    430  0836				  -	      inc	copyPtrD+1
    431  0836				  -	      dex
    432  0836				  -	      bne	ramCopy1
    433  0836				  -	      jmp	ramStart
    434  0836				  -copyStart
    435  0836				  -	      rorg	$3000	; RAM destination
    436  0836				  -ramStart
    437  0836					      ENDIF
    438  0836
    439  0836				  -	      IF	MODE=CART_OBSOLETE
    440  0836				  -			; System Startup Stuff
    441  0836				  -			; (not needed if starting from disk)
    442  0836				  -	      sei
    443  0836				  -	      jsr	$FF84	; initialize I/O devices
    444  0836				  -	      jsr	$FF87	; initalise memory pointers
    445  0836				  -	      jsr	$FF8A	; restore I/O vectors
    446  0836				  -	      jsr	$FF81	; initalise screen and keyboard
    447  0836				  -	      cli
    448  0836					      ENDIF
    449  0836
    450  0836				  -	      IF	MODE=KERNEL_OBSOLETE
    451  0836				  -	      org	$A483
    452  0836					      ENDIF
    453  0836
    454  0836		       ad 11 d0 	      LDA	$D011	; Disable VIC-II (This has to be done because of
    455  0839		       29 ef		      AND	#$EF	; badlines
    456  083b		       8d 11 d0 	      STA	$D011
    457  083e
    458  083e							; Disable RESTORE key
    459  083e		       a9 c1		      lda	#193
    460  0840		       8d 18 03 	      sta	792
    461  0843
    462  0843		       a9 00		      lda	#0
    463  0845		       8d 20 d0 	      sta	BACK_COLOR
    464  0848		       8d 21 d0 	      sta	BORD_COLOR
    465  084b
    466  084b							;*****************************
    467  084b							; Detect PAL/NTSC
    468  084b							;*****************************
    469  084b							;palntsc:
    470  084b		       78		      sei		; disable interrupts
    471  084c				   wait
    472  084c		       ad 12 d0 	      lda	$d012
    473  084f		       d0 fb		      bne	wait	; wait for rasterline 0 or 256
    474  0851				   wait1
    475  0851		       ad 11 d0 	      lda	$d011	; Is rasterbeam in the area
    476  0854		       10 fb		      bpl	wait1	; 0-255? if yes, wait
    477  0856				   wait2
    478  0856		       a0 00		      ldy	#$00
    479  0858				   synch1
    480  0858		       ad 12 d0 	      lda	$d012
    481  085b		       c9 37		      cmp	#$37	; top PAL rasterline
    482  085d		       d0 f9		      bne	synch1
    483  085f		       ad 12 d0 	      lda	$d012	; if next is 0, then PAL
    484  0862				   synch2
    485  0862		       cd 12 d0 	      cmp	$d012
    486  0865		       f0 fb		      beq	synch2
    487  0867		       ad 12 d0 	      lda	$d012
    488  086a		       58		      cli		; enable interrupts
    489  086b
    490  086b		       8d 61 70 	      sta	NTSCmode
    491  086e
    492  086e
    493  086e
    494  086e
    495  086e							;****************************************************
    496  086e							; init screen and variables
    497  086e							;****************************************************
    498  086e		       a9 00		      lda	#0
    499  0870		       8d 97 70 	      sta	resonance
    500  0873		       8d 8c 70 	      sta	noteOnCount
    501  0876		       8d 8b 70 	      sta	noteOffCount
    502  0879		       20 cd 10 	      jsr	setFullScreenMode
    503  087c		       20 75 0a 	      jsr	variableInit
    504  087f		       20 c4 0b 	      jsr	displayInit
    505  0882
    506  0882							; Clear note buffer...
    507  0882		       a2 08		      ldx	#8
    508  0884		       a9 ff		      lda	#255
    509  0886				   clearBufferLoop
    510  0886		       ca		      dex
    511  0887		       9d a0 70 	      sta	noteNumArray,x
    512  088a							;sta noteAgeArray,x
    513  088a							;sta noteVelArray,x
    514  088a		       d0 fa		      bne	clearBufferLoop
    515  088c
    516  088c
    517  088c				  -	      IF	DEBUG_DISPLAY=1
    518  088c				  -	      ldx	#>debugOverlay	;low/MSB
    519  088c				  -	      ldy	#<debugOverlay	;high/LSB
    520  088c				  -	      jsr	displayPage
    521  088c					      ENDIF
    522  088c
    523  088c		       a9 00		      lda	#0
    524  088e		       a0 00		      ldy	#0
    525  0890		       20 79 13 	      jsr	setPatch
    526  0893
    527  0893		       a9 00		      lda	#0
    528  0895		       8d f0 70 	      sta	midiTuning
    529  0898
    530  0898		       a9 ff		      lda	#$FF
    531  089a		       20 d3 11 	      jsr	setMidiMode
    532  089d							;sta midiMode
    533  089d
    534  089d							;===========================================
    535  089d							;===========================================
    536  089d							;===========================================
    537  089d							; Main Loop
    538  089d							;===========================================
    539  089d							;===========================================
    540  089d							;===========================================
    541  089d				   Loop
    542  089d							; Increment frame counter
    543  089d		       ee 03 70 	      inc	Frame
    544  08a0		       ad 03 70 	      lda	Frame
    545  08a3		       29 3f		      and	#%00111111
    546  08a5		       d0 03		      bne	SkipHFrame
    547  08a7		       ee 02 70 	      inc	FrameH
    548  08aa				   SkipHFrame
    549  08aa
    550  08aa
    551  08aa		       20 e8 08 	      jsr	processLFO
    552  08ad		       20 47 0d 	      jsr	processFX
    553  08b0
    554  08b0					      IF	ENABLE_MIDI_COMMANDS=1
    555  08b0		       20 30 1c 	      jsr	processMIDI
    556  08b3					      ENDIF
    557  08b3
    558  08b3		       20 a5 1a 	      jsr	readKeyboard
    559  08b6		       20 a7 09 	      jsr	processBender
    560  08b9		       20 d6 14 	      jsr	processSoundDriver
    561  08bc		       20 e4 09 	      jsr	processPaddles
    562  08bf		       20 fd 0a 	      jsr	processVideoMode
    563  08c2		       20 c8 08 	      jsr	updateFilterAndPW
    564  08c5		       4c 9d 08 	      jmp	Loop
    565  08c8							;-------- BOTTOM OF MAIN LOOP ---------------------------
    566  08c8							;--------------------------------------------------------
    567  08c8							;\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
    568  08c8
    569  08c8				   updateFilterAndPW
    570  08c8		       ad 9c 70 	      lda	filterModValue
    571  08cb		       38		      sec
    572  08cc		       e9 7f		      sbc	#127
    573  08ce		       30 0a		      bmi	negativeFilterMod
    574  08d0							; Positive
    575  08d0		       6d 9d 70 	      adc	filterSetValue
    576  08d3		       90 0f		      bcc	doSetFilter
    577  08d5		       a9 ff		      lda	#255
    578  08d7		       4c e4 08 	      jmp	doSetFilter
    579  08da
    580  08da				   negativeFilterMod
    581  08da							; Negative
    582  08da		       6d 9d 70 	      adc	filterSetValue
    583  08dd		       b0 05		      bcs	doSetFilter
    584  08df		       a9 00		      lda	#0
    585  08e1		       4c e4 08 	      jmp	doSetFilter
    586  08e4
    587  08e4							;and #$F0
    588  08e4				   doSetFilter
    589  08e4		       20 be 12 	      jsr	setFilter
    590  08e7							; TODO: add PW setting
    591  08e7		       60		      rts
    592  08e8
    593  08e8
    594  08e8							;-------------------------------
    595  08e8							; LFO
    596  08e8							;-------------------------------
    597  08e8				   processLFO
    598  08e8							; Set current LFO modulation
    599  08e8							; into (pitch) shift variables
    600  08e8
    601  08e8							;---------------------------
    602  08e8							; get pitch bend from paddle2
    603  08e8		       ad 7a 70 	      lda	paddle2
    604  08eb		       c9 04		      cmp	#4
    605  08ed		       d0 06		      bne	noPadBend
    606  08ef		       ad 79 70 	      lda	paddleY
    607  08f2		       8d 40 70 	      sta	bender
    608  08f5				   noPadBend
    609  08f5
    610  08f5							;----------------------------
    611  08f5							; get depth from paddle2
    612  08f5		       ad 7a 70 	      lda	paddle2
    613  08f8		       c9 03		      cmp	#3
    614  08fa		       d0 0a		      bne	noPadLFO
    615  08fc		       ad 79 70 	      lda	paddleY
    616  08ff		       4a		      lsr
    617  0900		       4a		      lsr
    618  0901		       4a		      lsr
    619  0902		       a8		      tay
    620  0903		       4c 0c 09 	      jmp	skipFixedLFODepth
    621  0906							;---------------------
    622  0906							; calculate LFO depth
    623  0906							; increases per octave
    624  0906				   noPadLFO
    625  0906		       ae 49 70 	      ldx	LFODepth
    626  0909		       bc b7 33 	      ldy	LFODepthArray,x
    627  090c				   skipFixedLFODepth
    628  090c		       ad 22 70 	      lda	keyOffset	; current octave offset
    629  090f		       c9 0c		      cmp	#12
    630  0911		       30 08		      bmi	endDepth
    631  0913		       c8		      iny
    632  0914		       c9 24		      cmp	#36
    633  0916		       d0 03		      bne	endDepth
    634  0918		       98		      tya
    635  0919		       0a		      asl
    636  091a		       a8		      tay
    637  091b				   endDepth		; y now contains the depth value
    638  091b
    639  091b
    640  091b							; figure out LFO position
    641  091b		       ad 02 70 	      lda	FrameH
    642  091e		       ae 48 70 	      ldx	LFORate
    643  0921		       f0 0e		      beq	LFOSkip
    644  0923		       ad 03 70 	      lda	Frame
    645  0926		       ca		      dex
    646  0927		       ca		      dex
    647  0928		       ca		      dex
    648  0929		       f0 06		      beq	LFOSkip
    649  092b		       4a		      lsr
    650  092c		       e8		      inx
    651  092d		       f0 02		      beq	LFOSkip
    652  092f		       4a		      lsr
    653  0930		       4a		      lsr
    654  0931				   LFOSkip
    655  0931		       4a		      lsr
    656  0932
    657  0932		       29 0f		      and	#$0F
    658  0934		       aa		      tax
    659  0935		       bd db 33 	      lda	LFOArrH,x
    660  0938		       8d 26 70 	      sta	shiftH1
    661  093b		       d0 10		      bne	negativeLFO
    662  093d
    663  093d		       18		      clc
    664  093e		       bd cb 33 	      lda	LFOArrL,x
    665  0941				   depthLoop
    666  0941		       7d cb 33 	      adc	LFOArrL,x
    667  0944		       88		      dey
    668  0945		       d0 fa		      bne	depthLoop
    669  0947		       8d 25 70 	      sta	shiftL1
    670  094a		       4c 62 09 	      jmp	endLFO
    671  094d
    672  094d				   negativeLFO
    673  094d		       bd cb 33 	      lda	LFOArrL,x
    674  0950				   depthLoopN
    675  0950		       7d cb 33 	      adc	LFOArrL,x
    676  0953		       88		      dey
    677  0954		       d0 fa		      bne	depthLoopN
    678  0956		       8d 0c 70 	      sta	temp
    679  0959		       a9 ff		      lda	#255
    680  095b		       38		      sec
    681  095c		       ed 0c 70 	      sbc	temp
    682  095f		       8d 25 70 	      sta	shiftL1
    683  0962				   endLFO
    684  0962
    685  0962							; if depth=0 then cancel LFO
    686  0962		       ad 7a 70 	      lda	paddle2
    687  0965		       c9 03		      cmp	#3
    688  0967		       f0 0d		      beq	doLFO
    689  0969		       ad 49 70 	      lda	LFODepth
    690  096c		       d0 08		      bne	doLFO
    691  096e		       a9 00		      lda	#0
    692  0970		       8d 25 70 	      sta	shiftL1
    693  0973		       8d 26 70 	      sta	shiftH1
    694  0976				   doLFO
    695  0976
    696  0976		       ad 70 70 	      lda	helpMode	; do show LFO if helpMode on
    697  0979		       d0 05		      bne	showLFO
    698  097b		       ad 67 70 	      lda	fullScreenMode
    699  097e		       d0 15		      bne	dontErase	; don't show LFO if in full screen mode
    700  0980							;--------
    701  0980							; Show it
    702  0980				   showLFO
    703  0980		       bd eb 33 	      lda	LFOdisp,x
    704  0983		       aa		      tax
    705  0984		       a9 07		      lda	#CYNTHCART_HIGHLIGHT_COLOR
    706  0986							;adc #10
    707  0986
    708  0986							;lda #160
    709  0986							;sta 1063,x
    710  0986		       9d ff d7 	      sta	55296-1,x
    711  0989
    712  0989							;clear the previous one
    713  0989							;lda #32
    714  0989		       a9 02		      lda	#CYNTHCART_COLOR
    715  098b							;sta 1064,x
    716  098b		       9d 00 d8 	      sta	55296+0,x
    717  098e		       e0 01		      cpx	#1
    718  0990		       f0 03		      beq	dontErase
    719  0992							;sta 1062,x
    720  0992		       9d fe d7 	      sta	55296-2,x
    721  0995				   dontErase
    722  0995
    723  0995							; set up shift for second SID
    724  0995							; chip, pitch a tad higher for
    725  0995							; awesome chorus effect
    726  0995		       18		      clc
    727  0996		       ad 25 70 	      lda	shiftL1
    728  0999		       69 04		      adc	#SID2OFFSET
    729  099b		       8d 27 70 	      sta	shiftL2
    730  099e		       ad 26 70 	      lda	shiftH1
    731  09a1		       69 00		      adc	#0
    732  09a3		       8d 28 70 	      sta	shiftH2
    733  09a6
    734  09a6							; LFO->filter
    735  09a6							;	lda shiftL1
    736  09a6							;	clc
    737  09a6							;	adc #128
    738  09a6							;	sta SID1+SFILTH
    739  09a6							;	sta SID2+SFILTH
    740  09a6
    741  09a6				   skipLFO
    742  09a6		       60		      rts
    743  09a7
    744  09a7
    745  09a7
    746  09a7
    747  09a7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    748  09a7							; PROCESS BENDER
    749  09a7							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    750  09a7				   processBender
    751  09a7							; Update space-bar pitch bend...
    752  09a7		       ad 83 70 	      lda	benderAutoreset
    753  09aa		       f0 13		      beq	endBenderReset
    754  09ac		       ad 40 70 	      lda	bender
    755  09af		       d0 08		      bne	doBenderReset
    756  09b1		       a9 00		      lda	#0
    757  09b3		       8d 83 70 	      sta	benderAutoreset
    758  09b6		       4c bf 09 	      jmp	endBenderReset
    759  09b9				   doBenderReset
    760  09b9		       ce 40 70 	      dec	bender
    761  09bc		       ce 40 70 	      dec	bender
    762  09bf				   endBenderReset
    763  09bf
    764  09bf
    765  09bf							; Insert bender into LFO offset...
    766  09bf		       ad 25 70 	      lda	shiftL1
    767  09c2		       38		      sec
    768  09c3		       ed 40 70 	      sbc	bender
    769  09c6		       8d 25 70 	      sta	shiftL1
    770  09c9		       ad 26 70 	      lda	shiftH1
    771  09cc		       e9 00		      sbc	#0
    772  09ce		       8d 26 70 	      sta	shiftH1
    773  09d1
    774  09d1		       ad 27 70 	      lda	shiftL2
    775  09d4		       38		      sec
    776  09d5		       ed 40 70 	      sbc	bender
    777  09d8		       8d 27 70 	      sta	shiftL2
    778  09db		       ad 28 70 	      lda	shiftH2
    779  09de		       e9 00		      sbc	#0
    780  09e0		       8d 28 70 	      sta	shiftH2
    781  09e3		       60		      rts
    782  09e4
    783  09e4							;DEBUG -- disable LFO/bender
    784  09e4							;	lda #0
    785  09e4							;	sta shiftL1
    786  09e4							;	sta shiftL2
    787  09e4							;	sta shiftH1
    788  09e4							;	sta shiftH2
    789  09e4
    790  09e4							;----------------------------
    791  09e4
    792  09e4
    793  09e4
    794  09e4
    795  09e4
    796  09e4							;-------------------------------------
    797  09e4							; Reading paddles from Prog Ref Guide
    798  09e4							;-------------------------------------
    799  09e4				   processPaddles
    800  09e4				   pdlrd0		; entry point for one pair (condition x 1st)
    801  09e4							; -  -  -  -  -
    802  09e4							;sei				; disable interrupts
    803  09e4		       a9 e0		      lda	#224	; disable keyboard scan
    804  09e6		       8d 02 dc 	      sta	56322	; disable keyboard scan
    805  09e9							; -  -  -  -  -
    806  09e9		       ad 02 dc 	      lda	Ciddra	; get current value of ddr
    807  09ec		       8d 06 70 	      sta	Buffer	; save it away
    808  09ef		       a9 c0		      lda	#$c0
    809  09f1		       8d 02 dc 	      sta	Ciddra	; set port a for input
    810  09f4		       a9 80		      lda	#$80
    811  09f6
    812  09f6				   pdlrd1
    813  09f6		       8d 00 dc 	      sta	PortA	; address a pair of paddles
    814  09f9		       a0 80		      ldy	#$80	; wait a while
    815  09fb				   pdlrd2
    816  09fb		       ea		      nop
    817  09fc		       88		      dey
    818  09fd		       10 fc		      bpl	pdlrd2
    819  09ff
    820  09ff		       ae 19 d4 	      ldx	SID1+25	; get x value
    821  0a02		       8e 78 70 	      stx	paddleX
    822  0a05		       ac 1a d4 	      ldy	SID1+26	; get y value
    823  0a08		       8c 79 70 	      sty	paddleY
    824  0a0b
    825  0a0b		       ad 00 dc 	      lda	PortA	; Read paddle fire buttons
    826  0a0e		       09 50		      ora	#80	; make it the same as other pair
    827  0a10		       8d 09 70 	      sta	Button	; bit 2 is pdl x, bit 3 is pdl y
    828  0a13
    829  0a13		       ad 06 70 	      lda	Buffer
    830  0a16		       8d 02 dc 	      sta	Ciddra	; restore previous value of ddr
    831  0a19							; -  -  -  -  -
    832  0a19							;cli			; enable interrupts
    833  0a19		       a9 ff		      lda	#255	; enable keyboard scan
    834  0a1b		       8d 02 dc 	      sta	56322	; enable keyboard scan
    835  0a1e							; -  -  -  -  -
    836  0a1e
    837  0a1e							;-------------------------------------
    838  0a1e							; Auto paddle on - turn on paddle control if it's wiggled...
    839  0a1e		       ad 29 70 	      lda	paddle
    840  0a21		       d0 21		      bne	noPaddleAutoOn	; skip this if paddles are on
    841  0a23		       e0 a0		      cpx	#160
    842  0a25		       90 05		      bcc	noPaddleTop
    843  0a27		       a9 01		      lda	#1
    844  0a29		       8d 76 70 	      sta	paddleTop
    845  0a2c				   noPaddleTop
    846  0a2c		       e0 60		      cpx	#96
    847  0a2e		       b0 05		      bcs	noPaddleBottom
    848  0a30		       a9 01		      lda	#1
    849  0a32		       8d 77 70 	      sta	paddleBottom
    850  0a35				   noPaddleBottom
    851  0a35							;-----------
    852  0a35		       ad 76 70 	      lda	paddleTop	; if both paddle regions have
    853  0a38		       f0 0a		      beq	noPaddleAutoOn	; been hit, then...
    854  0a3a		       ad 77 70 	      lda	paddleBottom
    855  0a3d		       f0 05		      beq	noPaddleAutoOn
    856  0a3f		       a9 01		      lda	#1	; turn paddle on
    857  0a41		       20 0b 11 	      jsr	setPaddles
    858  0a44				   noPaddleAutoOn
    859  0a44
    860  0a44							;-------------------------------------
    861  0a44							; check to see if paddle control is on
    862  0a44		       ad 29 70 	      lda	paddle
    863  0a47		       f0 04		      beq	processPaddle2
    864  0a49
    865  0a49							; paddle1 -> filter
    866  0a49		       8a		      txa
    867  0a4a		       8d 9d 70 	      sta	filterSetValue
    868  0a4d							;jsr setFilterFromA
    869  0a4d
    870  0a4d
    871  0a4d							;sta SID1+SFILTH
    872  0a4d							;sta sidData+SFILTH
    873  0a4d							;clc
    874  0a4d							;adc #SID_SYMPHONY_FILTER_OFFSET
    875  0a4d							;bcc noPaddleRoll
    876  0a4d							;lda #255
    877  0a4d							;noPaddleRoll:
    878  0a4d							;sta SID2+SFILTH
    879  0a4d							;noPaddleControl
    880  0a4d
    881  0a4d							;-------------------------------------
    882  0a4d							; paddle 2
    883  0a4d
    884  0a4d							;	paddle 2 -> Pulse Width
    885  0a4d				   processPaddle2
    886  0a4d		       ad 7a 70 	      lda	paddle2
    887  0a50		       c9 01		      cmp	#1
    888  0a52		       d0 15		      bne	skipPW
    889  0a54		       ad 79 70 	      lda	paddleY
    890  0a57		       c9 f5		      cmp	#245	; check for top limit (= no sound)
    891  0a59		       90 05		      bcc	notPTop
    892  0a5b		       a9 f5		      lda	#245	; limit to maximum
    893  0a5d		       8d 79 70 	      sta	paddleY
    894  0a60				   notPTop
    895  0a60		       ad 79 70 	      lda	paddleY
    896  0a63		       20 38 10 	      jsr	setPulseWidth
    897  0a66							;-------------
    898  0a66							;inc 1024+80
    899  0a66		       ad 79 70 	      lda	paddleY
    900  0a69				   skipPW
    901  0a69		       60		      rts
    902  0a6a							;END paddle ------------------------------
    903  0a6a
    904  0a6a
    905  0a6a
    906  0a6a
    907  0a6a
    908  0a6a							; All notes off
    909  0a6a				   midiPanic
    910  0a6a		       a2 08		      ldx	#NOTE_BUF_SIZE
    911  0a6c		       a9 ff		      lda	#255
    912  0a6e				   midiPanicLoop
    913  0a6e		       9d a0 70 	      sta	noteNumArray,x
    914  0a71		       ca		      dex
    915  0a72		       10 fa		      bpl	midiPanicLoop
    916  0a74		       60		      rts
    917  0a75
    918  0a75
    919  0a75
    920  0a75
    921  0a75
    922  0a75
    923  0a75
    924  0a75							; ***************************
    925  0a75							; Variable Setup
    926  0a75							; ***************************
    927  0a75				   variableInit
    928  0a75		       a9 00		      lda	#0
    929  0a77		       8d 7a 70 	      sta	paddle2
    930  0a7a		       8d 5c 70 	      sta	filterDisable
    931  0a7d		       8d 6c 70 	      sta	filterStatus
    932  0a80		       8d 58 70 	      sta	keyTimer
    933  0a83		       8d 40 70 	      sta	bender
    934  0a86		       8d 70 70 	      sta	helpMode
    935  0a89		       8d 21 70 	      sta	patPtr
    936  0a8c		       8d 03 70 	      sta	Frame
    937  0a8f		       8d 02 70 	      sta	FrameH
    938  0a92		       8d 05 70 	      sta	EchoCur
    939  0a95		       8d 75 70 	      sta	customPatchSaved
    940  0a98		       8d 76 70 	      sta	paddleTop
    941  0a9b		       8d 77 70 	      sta	paddleBottom
    942  0a9e
    943  0a9e		       a9 02		      lda	#2
    944  0aa0		       8d 7b 70 	      sta	lastPad2	; default paddle2 setting is LFO Depth
    945  0aa3
    946  0aa3		       a9 04		      lda	#4	; set normal tuning
    947  0aa5		       8d 71 70 	      sta	tuneSetting
    948  0aa8
    949  0aa8		       a9 00		      lda	#0
    950  0aaa		       20 2c 11 	      jsr	setLFODepth	;********************************
    951  0aad		       a9 00		      lda	#0
    952  0aaf		       20 42 11 	      jsr	setLFORate	;********************************
    953  0ab2
    954  0ab2							; set up tuning array pointers
    955  0ab2		       a9 35		      lda	#<tuningL4
    956  0ab4		       85 22		      sta	tunePtrL
    957  0ab6		       a9 37		      lda	#>tuningL4
    958  0ab8		       85 23		      sta	tunePtrL+1
    959  0aba
    960  0aba		       a9 35		      lda	#<tuningH4
    961  0abc		       85 24		      sta	tunePtrH
    962  0abe		       a9 37		      lda	#>tuningH4
    963  0ac0		       85 25		      sta	tunePtrH+1
    964  0ac2
    965  0ac2		       a9 02		      lda	#2
    966  0ac4		       8d 20 70 	      sta	VICMode
    967  0ac7		       a9 00		      lda	#0
    968  0ac9		       8d 1d 70 	      sta	soundMode
    969  0acc							;lda #40
    970  0acc							;sta portSpd
    971  0acc
    972  0acc							; Video Mode
    973  0acc		       a9 03		      lda	#3
    974  0ace		       a0 02		      ldy	#2
    975  0ad0		       20 fd 10 	      jsr	setVideoMode	;********************************
    976  0ad3
    977  0ad3							; Default full volume
    978  0ad3		       a9 0f		      lda	#$0F
    979  0ad5		       8d 1c 70 	      sta	volume
    980  0ad8
    981  0ad8							; Echo?
    982  0ad8		       a9 70		      lda	#$70
    983  0ada		       8d 04 70 	      sta	EchoPtr
    984  0add
    985  0add		       a0 00		      ldy	#0
    986  0adf		       20 79 13 	      jsr	setPatch	;set bass sound
    987  0ae2
    988  0ae2							; Set up starting portamento values
    989  0ae2		       a2 0c		      ldx	#12
    990  0ae4		       bd fb 33 	      lda	NSoundLArr,x
    991  0ae7		       8d 16 70 	      sta	pitchLA
    992  0aea		       8d 17 70 	      sta	pitchLB
    993  0aed		       8d 18 70 	      sta	pitchLC
    994  0af0							;sta lastKeyA ;;;;;;;;;;;;;;;;;;;;;;;;;;REWRITE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    995  0af0							;sta lastKeyB
    996  0af0							;sta lastKeyC
    997  0af0		       bd 43 34 	      lda	NSoundHArr,x
    998  0af3		       8d 19 70 	      sta	pitchHA
    999  0af6		       8d 1a 70 	      sta	pitchHB
   1000  0af9		       8d 1b 70 	      sta	pitchHC
   1001  0afc							;----------
   1002  0afc		       60		      rts
   1003  0afd
------- FILE cynth_display.asm LEVEL 2 PASS 2
      0  0afd					      include	"cynth_display.asm"
      1  0afd
      2  0afd							; ***************************
      3  0afd							; Process Video Mode
      4  0afd							; ***************************
      5  0afd
      6  0afd				   processVideoMode
      7  0afd							; Turn off Vic when no notes are playing
      8  0afd		       ad 70 70 	      lda	helpMode
      9  0b00		       d0 2e		      bne	vicOn
     10  0b02
     11  0b02		       ad 20 70 	      lda	VICMode
     12  0b05		       f0 1e		      beq	vicOff
     13  0b07		       c9 02		      cmp	#2
     14  0b09		       f0 25		      beq	vicOn
     15  0b0b		       ad 1f 70 	      lda	dispOn
     16  0b0e		       d0 20		      bne	vicOn
     17  0b10		       ad a0 70 	      lda	noteNumArray+0
     18  0b13							;lda KeyA
     19  0b13
     20  0b13		       c9 ff		      cmp	#255
     21  0b15		       d0 19		      bne	vicOn
     22  0b17		       ad a1 70 	      lda	noteNumArray+1
     23  0b1a							;lda KeyB
     24  0b1a		       c9 ff		      cmp	#255
     25  0b1c		       d0 12		      bne	vicOn
     26  0b1e		       ad a2 70 	      lda	noteNumArray+2
     27  0b21							;lda KeyC
     28  0b21		       c9 ff		      cmp	#255
     29  0b23		       d0 0b		      bne	vicOn
     30  0b25				   vicOff
     31  0b25							; Vic off
     32  0b25		       ad 11 d0 	      lda	$d011
     33  0b28		       29 ef		      and	#$EF
     34  0b2a		       8d 11 d0 	      sta	$D011
     35  0b2d
     36  0b2d		       4c 38 0b 	      jmp	endVic
     37  0b30				   vicOn
     38  0b30							; Vic on
     39  0b30		       ad 11 d0 	      lda	$d011
     40  0b33		       09 10		      ora	#$10
     41  0b35		       8d 11 d0 	      sta	$d011
     42  0b38
     43  0b38				   endVic
     44  0b38		       a9 00		      lda	#0
     45  0b3a		       8d 1f 70 	      sta	dispOn
     46  0b3d
     47  0b3d		       ad a0 70 	      lda	noteNumArray+0
     48  0b40							;lda KeyA
     49  0b40		       8d 0c 70 	      sta	temp
     50  0b43		       20 59 0b 	      jsr	drawPattern
     51  0b46		       ad a1 70 	      lda	noteNumArray+1
     52  0b49							;lda KeyB
     53  0b49		       8d 0c 70 	      sta	temp
     54  0b4c		       20 59 0b 	      jsr	drawPattern
     55  0b4f		       ad a2 70 	      lda	noteNumArray+2
     56  0b52							;lda KeyC
     57  0b52		       8d 0c 70 	      sta	temp
     58  0b55		       20 59 0b 	      jsr	drawPattern
     59  0b58
     60  0b58		       60		      rts
     61  0b59							;jmp Loop
     62  0b59							;====================================================
     63  0b59							; bottom of main loop
     64  0b59							;====================================================
     65  0b59
     66  0b59
     67  0b59							; ***************************
     68  0b59							; code to draw colored character patterns
     69  0b59							; ***************************
     70  0b59							;PTRNTEXTBASE equ 1224
     71  0b59		       04 00	   PTRNTEXTBASE equ	1224-40*5
     72  0b59							;PTRNCOLORBASE equ 55496
     73  0b59		       d8 00	   PTRNCOLORBASE equ	55496-40*5
     74  0b59
     75  0b59
     76  0b59				   drawPattern
     77  0b59							; don't draw video when in help mode
     78  0b59		       ad 70 70 	      lda	helpMode
     79  0b5c		       f0 01		      beq	continueVideo
     80  0b5e		       60		      rts
     81  0b5f				   continueVideo
     82  0b5f							;---------
     83  0b5f							; setup
     84  0b5f		       ae 21 70 	      ldx	patPtr
     85  0b62		       e8		      inx
     86  0b63		       e0 28		      cpx	#40
     87  0b65		       d0 02		      bne	noPatReset
     88  0b67		       a2 00		      ldx	#0
     89  0b69				   noPatReset
     90  0b69		       8e 21 70 	      stx	patPtr
     91  0b6c							;---------
     92  0b6c		       a2 05		      ldx	#5
     93  0b6e							; main pattern loop
     94  0b6e				   patternLoop
     95  0b6e				  -	      if	DEBUG_DISABLE_VIDEO_MODE=1
     96  0b6e				  -	      rts		; DEBUG! disable patterns
     97  0b6e					      endif
     98  0b6e
     99  0b6e		       bd 0c 29 	      lda	patOffset,x
    100  0b71							;	clc
    101  0b71		       6d 21 70 	      adc	patPtr
    102  0b74		       a8		      tay
    103  0b75							;	clc
    104  0b75		       ad 0c 70 	      lda	temp
    105  0b78		       c9 ff		      cmp	#255
    106  0b7a		       f0 0a		      beq	skipExtraColors
    107  0b7c		       ad 03 70 	      lda	Frame
    108  0b7f		       2d 45 70 	      and	videoMode
    109  0b82		       18		      clc
    110  0b83		       6d 0c 70 	      adc	temp
    111  0b86				   skipExtraColors
    112  0b86		       69 be		      adc	#190
    113  0b88		       8d 8f 70 	      sta	temp2
    114  0b8b		       ad 0c 70 	      lda	temp
    115  0b8e		       c9 ff		      cmp	#255
    116  0b90		       d0 05		      bne	reloadValue
    117  0b92		       a9 7f		      lda	#127
    118  0b94		       4c 9a 0b 	      jmp	afterReloadValue
    119  0b97				   reloadValue
    120  0b97		       ad 8f 70 	      lda	temp2
    121  0b9a				   afterReloadValue
    122  0b9a		       91 2b		      sta	(lowTextPtr),y
    123  0b9c		       99 c8 04 	      sta	PTRNTEXTBASE+200,y
    124  0b9f		       99 90 05 	      sta	PTRNTEXTBASE+400,y
    125  0ba2		       99 58 06 	      sta	PTRNTEXTBASE+600,y
    126  0ba5		       c0 f8		      cpy	#248
    127  0ba7		       30 03		      bmi	noTopText
    128  0ba9		       99 20 07 	      sta	PTRNTEXTBASE+800,y
    129  0bac				   noTopText
    130  0bac							;sbc #13
    131  0bac		       69 0c		      adc	#12
    132  0bae		       91 2d		      sta	(lowColorPtr),y
    133  0bb0		       99 c8 d8 	      sta	PTRNCOLORBASE+200,y
    134  0bb3		       99 90 d9 	      sta	PTRNCOLORBASE+400,y
    135  0bb6		       99 58 da 	      sta	PTRNCOLORBASE+600,y
    136  0bb9		       c0 f8		      cpy	#248
    137  0bbb		       30 03		      bmi	noTopColor
    138  0bbd		       99 20 db 	      sta	PTRNCOLORBASE+800,y
    139  0bc0				   noTopColor
    140  0bc0		       ca		      dex
    141  0bc1		       10 ab		      bpl	patternLoop
    142  0bc3		       60		      rts
    143  0bc4							;--------------------- end of draw patterns
    144  0bc4
    145  0bc4
    146  0bc4
    147  0bc4							; ***************************
    148  0bc4							; Display Setup
    149  0bc4							; ***************************
    150  0bc4				   displayInit
    151  0bc4
    152  0bc4		       a9 15		      lda	#21
    153  0bc6		       8d 18 d0 	      sta	53272	; UPPERCASE mode
    154  0bc9
    155  0bc9							; draw static text at the top of the screen
    156  0bc9		       a2 30		      ldx	#>mainColorText	;low/MSB
    157  0bcb		       a0 f1		      ldy	#<mainColorText	;high/LSB
    158  0bcd		       20 da 0c 	      jsr	displayPage
    159  0bd0
    160  0bd0							; Draw bottom text (version number+PAL/NTSC setting)
    161  0bd0		       03 dd	   BOTTOMTEXT equ	40*24+29
    162  0bd0
    163  0bd0		       20 b8 0f 	      jsr	showHelpMessage
    164  0bd3
    165  0bd3							; SHOW BETA MESSAGE IF IN BETA MODE
    166  0bd3		       a2 0c		      ldx	#12
    167  0bd5				   betaInfoLoop
    168  0bd5		       bd 81 33 	      lda	betaInfo,x
    169  0bd8		       c9 40		      cmp	#64
    170  0bda		       30 02		      bmi	showSpaceBeta
    171  0bdc		       e9 40		      sbc	#64
    172  0bde				   showSpaceBeta
    173  0bde		       9d b2 07 	      sta	1024+BOTTOMTEXT-40-3,x
    174  0be1		       ca		      dex
    175  0be2		       10 f1		      bpl	betaInfoLoop
    176  0be4
    177  0be4							; choose which text to show from PAL/NTSC test at startup
    178  0be4		       a2 00		      ldx	#0
    179  0be6		       a0 00		      ldy	#0
    180  0be8		       ad 61 70 	      lda	NTSCmode
    181  0beb		       f0 02		      beq	showPAL
    182  0bed		       a2 0c		      ldx	#12
    183  0bef				   showPAL
    184  0bef							; Show version number and NTSC/PAL designation...
    185  0bef				   TextLoop2
    186  0bef		       bd 69 33 	      lda	bottomText,x
    187  0bf2		       f0 12		      beq	endText2
    188  0bf4		       c9 40		      cmp	#64
    189  0bf6		       30 02		      bmi	showSpace2
    190  0bf8		       e9 40		      sbc	#64
    191  0bfa				   showSpace2
    192  0bfa		       99 dd 07 	      sta	1024+BOTTOMTEXT,y
    193  0bfd		       a9 0b		      lda	#11
    194  0bff		       99 dd db 	      sta	55296+BOTTOMTEXT,y	; color non-static text
    195  0c02				   notBlank2
    196  0c02		       e8		      inx
    197  0c03		       c8		      iny
    198  0c04		       d0 e9		      bne	TextLoop2
    199  0c06				   endText2
    200  0c06
    201  0c06					      IF	DEVICE_CONFIG=KERBEROS
    202  0c06		       a9 0b		      lda	#11	; "K"
    203  0c08		       8d e6 07 	      sta	2022
    204  0c0b					      ENDIF
    205  0c0b				  -	      IF	DEVICE_CONFIG=EMU
    206  0c0b				  -	      lda	#5	; "E"
    207  0c0b				  -	      sta	2022
    208  0c0b					      ENDIF
    209  0c0b				  -	      IF	DEVICE_CONFIG=SIDSYMPHONY
    210  0c0b				  -	      lda	#19	; "S"
    211  0c0b				  -	      sta	2022
    212  0c0b					      ENDIF
    213  0c0b
    214  0c0b		       20 d6 11 	      jsr	showMidiMode
    215  0c0e
    216  0c0e							;---------------------------------------------
    217  0c0e							; Display current sound parameter values
    218  0c0e
    219  0c0e							; set tuning text
    220  0c0e		       ac 71 70 	      ldy	tuneSetting
    221  0c11		       20 b7 10 	      jsr	ksetTune
    222  0c14
    223  0c14							; Video Mode
    224  0c14		       ad 45 70 	      lda	videoMode
    225  0c17		       ac 68 70 	      ldy	videoText
    226  0c1a		       20 fd 10 	      jsr	setVideoMode	;********************************
    227  0c1d
    228  0c1d		       ad 49 70 	      lda	LFODepth
    229  0c20		       20 2c 11 	      jsr	setLFODepth	;********************************
    230  0c23		       ad 48 70 	      lda	LFORate
    231  0c26		       20 42 11 	      jsr	setLFORate	;********************************
    232  0c29
    233  0c29		       ad 29 70 	      lda	paddle
    234  0c2c		       20 0b 11 	      jsr	setPaddles
    235  0c2f
    236  0c2f		       ad 57 70 	      lda	filter
    237  0c32		       8d 9d 70 	      sta	filterSetValue
    238  0c35							;jsr setFilter
    239  0c35
    240  0c35		       20 29 13 	      jsr	setMode
    241  0c38
    242  0c38		       20 01 13 	      jsr	setFX
    243  0c3b
    244  0c3b		       ad 69 70 	      lda	attack
    245  0c3e		       20 3d 12 	      jsr	showAttack
    246  0c41
    247  0c41		       20 d6 11 	      jsr	showMidiMode
    248  0c44
    249  0c44		       ad 6a 70 	      lda	release
    250  0c47		       20 90 11 	      jsr	showRelease
    251  0c4a
    252  0c4a		       ac 6c 70 	      ldy	filterStatus
    253  0c4d		       20 a2 10 	      jsr	showFiltOnOff
    254  0c50
    255  0c50		       20 55 12 	      jsr	setVolume
    256  0c53
    257  0c53		       ad 6b 70 	      lda	octave
    258  0c56		       20 a5 12 	      jsr	setOctave
    259  0c59
    260  0c59		       20 8b 14 	      jsr	showPatchName
    261  0c5c
    262  0c5c		       ad 7a 70 	      lda	paddle2
    263  0c5f		       20 16 10 	      jsr	ksetPad2
    264  0c62
    265  0c62		       60		      rts
    266  0c63							;---------------------------------------------------
    267  0c63
    268  0c63							;************************************
    269  0c63							; update text
    270  0c63							;************************************
    271  0c63							; Show text out of the textData array.
    272  0c63							; x=textData, y=screen position
    273  0c63				   updateText
    274  0c63		       ad 70 70 	      lda	helpMode
    275  0c66		       f0 01		      beq	doUpdateText
    276  0c68		       60		      rts
    277  0c69				   doUpdateText
    278  0c69							;	lda helpMode
    279  0c69							;	bne doUpdateText
    280  0c69							;	rts
    281  0c69							;doUpdateText:
    282  0c69		       18		      clc
    283  0c6a		       a9 04		      lda	#4
    284  0c6c		       8d 46 70 	      sta	textTemp
    285  0c6f				   updateTextLoop
    286  0c6f		       bd 21 32 	      lda	textData,x
    287  0c72		       c9 40		      cmp	#64
    288  0c74		       30 02		      bmi	showSpaceU
    289  0c76		       e9 40		      sbc	#64
    290  0c78				   showSpaceU
    291  0c78		       99 00 04 	      sta	1024,y
    292  0c7b		       e8		      inx
    293  0c7c		       c8		      iny
    294  0c7d		       ce 46 70 	      dec	textTemp
    295  0c80		       d0 ed		      bne	updateTextLoop
    296  0c82		       60		      rts
    297  0c83
    298  0c83
    299  0c83							;************************************
    300  0c83							; clrScr - Clear Screen
    301  0c83							;************************************
    302  0c83				   clrScr
    303  0c83		       a2 00		      ldx	#0
    304  0c85		       a9 20		      lda	#32
    305  0c87				   clrScrLoop
    306  0c87		       9d 00 04 	      sta	$400,x
    307  0c8a		       9d 00 05 	      sta	$500,x
    308  0c8d		       9d 00 06 	      sta	$600,x
    309  0c90		       9d 00 07 	      sta	$700,x
    310  0c93		       ca		      dex
    311  0c94		       d0 f1		      bne	clrScrLoop
    312  0c96		       60		      rts
    313  0c97
    314  0c97
    315  0c97							;************************************
    316  0c97							; DisplayHex - draw hex value on screen
    317  0c97							;************************************
    318  0c97							; note uses helpWritePointer so can't be
    319  0c97							; used within displayPage routine
    320  0c97							; X = horizontal location
    321  0c97							; Y = vertical location
    322  0c97							; A = value
    323  0c97							; hexDispColor = color
    324  0c97				   displayHex
    325  0c97							; figure out screen location
    326  0c97							; and store in word pointer
    327  0c97		       8e 72 70 	      stx	hexDispTemp
    328  0c9a		       aa		      tax		; save the hex value in X
    329  0c9b		       b9 15 29 	      lda	lineOffsetL,y
    330  0c9e		       18		      clc
    331  0c9f		       6d 72 70 	      adc	hexDispTemp
    332  0ca2		       85 31		      sta	helpWritePointerL
    333  0ca4		       85 33		      sta	helpColorPointerL
    334  0ca6
    335  0ca6		       b9 2f 29 	      lda	lineOffsetM,y
    336  0ca9		       69 00		      adc	#0
    337  0cab		       85 32		      sta	helpWritePointerM
    338  0cad		       18		      clc
    339  0cae		       69 d4		      adc	#$D4
    340  0cb0		       85 34		      sta	helpColorPointerM
    341  0cb2							;--------------------
    342  0cb2		       8e 72 70 	      stx	hexDispTemp	; save the hex value to be displayed
    343  0cb5		       8a		      txa
    344  0cb6		       29 0f		      and	#$0F	; isolate the LS nibble
    345  0cb8		       aa		      tax
    346  0cb9		       bd bb 33 	      lda	hexDisplay,x	; get character to display
    347  0cbc		       a0 01		      ldy	#1
    348  0cbe		       91 31		      sta	(helpWritePointerL),y
    349  0cc0							;lda #$E
    350  0cc0		       ad 8d 70 	      lda	hexDispColor
    351  0cc3		       91 33		      sta	(helpColorPointerL),y
    352  0cc5							;-------------------
    353  0cc5		       ad 72 70 	      lda	hexDispTemp
    354  0cc8		       4a		      lsr		; get the MS nibble
    355  0cc9		       4a		      lsr
    356  0cca		       4a		      lsr
    357  0ccb		       4a		      lsr
    358  0ccc		       aa		      tax
    359  0ccd		       bd bb 33 	      lda	hexDisplay,x	; get character to display
    360  0cd0		       a0 00		      ldy	#0
    361  0cd2		       91 31		      sta	(helpWritePointerL),y
    362  0cd4							;lda #$E
    363  0cd4		       ad 8d 70 	      lda	hexDispColor
    364  0cd7		       91 33		      sta	(helpColorPointerL),y
    365  0cd9							;-------------------
    366  0cd9		       60		      rts
    367  0cda
    368  0cda
    369  0cda							;************************************
    370  0cda							; DisplayPage - display an entire
    371  0cda							; page of help info with color support
    372  0cda							;************************************
    373  0cda							; X = LSB of data address
    374  0cda							; Y = MSB of data address
    375  0cda							; data format:
    376  0cda							; line_number, color, text, 0
    377  0cda							; line_number, color, text, 0
    378  0cda							; 255
    379  0cda				   displayPage
    380  0cda		       84 2f		      sty	helpReadPointerL
    381  0cdc		       86 30		      stx	helpReadPointerM
    382  0cde
    383  0cde							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    384  0cde							;lda filterSetValue
    385  0cde							;sta sidEditSaveTemp1
    386  0cde
    387  0cde		       a9 01		      lda	#1
    388  0ce0		       8d 6d 70 	      sta	helpColor	; default to white
    389  0ce3				   helpLoop
    390  0ce3		       a0 00		      ldy	#0
    391  0ce5							; get line number and set up output pointers
    392  0ce5		       b1 2f		      lda	(helpReadPointerL),y
    393  0ce7		       c9 ff		      cmp	#255
    394  0ce9		       f0 5b		      beq	quitHelp
    395  0ceb		       aa		      tax
    396  0cec		       bd 2f 29 	      lda	lineOffsetM,x
    397  0cef		       85 32		      sta	helpWritePointerM
    398  0cf1		       18		      clc
    399  0cf2		       69 d4		      adc	#$D4
    400  0cf4		       85 34		      sta	helpColorPointerM
    401  0cf6		       bd 15 29 	      lda	lineOffsetL,x
    402  0cf9		       85 31		      sta	helpWritePointerL
    403  0cfb		       85 33		      sta	helpColorPointerL
    404  0cfd							;--------------------
    405  0cfd		       a0 01		      ldy	#1
    406  0cff		       8c 6e 70 	      sty	helpYIn
    407  0d02		       a0 00		      ldy	#0
    408  0d04		       8c 6f 70 	      sty	helpYOut
    409  0d07				   helpTextLoop
    410  0d07							; get the first character
    411  0d07		       ac 6e 70 	      ldy	helpYIn
    412  0d0a		       b1 2f		      lda	(helpReadPointerL),y
    413  0d0c		       f0 28		      beq	quitTextLoop
    414  0d0e		       c8		      iny
    415  0d0f		       8c 6e 70 	      sty	helpYIn
    416  0d12							; see if it's a color command
    417  0d12		       c9 80		      cmp	#128
    418  0d14		       10 17		      bpl	setColor	;---
    419  0d16		       c9 40		      cmp	#64
    420  0d18		       30 02		      bmi	showSpaceHelp
    421  0d1a		       e9 40		      sbc	#64
    422  0d1c							;lda #126
    423  0d1c				   showSpaceHelp
    424  0d1c							; write the color and character to the screen
    425  0d1c		       ac 6f 70 	      ldy	helpYOut
    426  0d1f		       91 31		      sta	(helpWritePointerL),y
    427  0d21		       ad 6d 70 	      lda	helpColor
    428  0d24		       91 33		      sta	(helpColorPointerL),y
    429  0d26		       c8		      iny
    430  0d27		       8c 6f 70 	      sty	helpYOut
    431  0d2a		       4c 07 0d 	      jmp	helpTextLoop
    432  0d2d				   setColor
    433  0d2d		       38		      sec
    434  0d2e		       e9 80		      sbc	#128
    435  0d30		       8d 6d 70 	      sta	helpColor
    436  0d33		       4c 07 0d 	      jmp	helpTextLoop
    437  0d36							;---------------
    438  0d36				   quitTextLoop
    439  0d36							; update the input pointer
    440  0d36		       c8		      iny
    441  0d37		       98		      tya
    442  0d38		       18		      clc
    443  0d39		       65 2f		      adc	helpReadPointerL
    444  0d3b		       85 2f		      sta	helpReadPointerL
    445  0d3d		       a5 30		      lda	helpReadPointerM
    446  0d3f		       69 00		      adc	#0
    447  0d41		       85 30		      sta	helpReadPointerM
    448  0d43		       4c e3 0c 	      jmp	helpLoop	;/\/\/\/\/\
    449  0d46				   quitHelp
    450  0d46
    451  0d46							; PREVENT FILTER BEING MESSED UP (WHY IS THIS NEEDED?)
    452  0d46							;lda sidEditSaveTemp1
    453  0d46							;sta filterSetValue
    454  0d46
    455  0d46		       60		      rts		; END OF DISPLAY PAGE
------- FILE cynthcart2.0.1.asm
------- FILE cynth_modulation.asm LEVEL 2 PASS 2
      0  0d47					      include	"cynth_modulation.asm"
      1  0d47
      2  0d47
      3  0d47							;-------------------------------------
      4  0d47							; Process FX
      5  0d47							;-------------------------------------
      6  0d47							;fxType equ $7086
      7  0d47							;modValue1 equ $7087
      8  0d47							;modDirection equ $7089
      9  0d47							;modCounter equ $708A
     10  0d47							;modMinValue equ $708B
     11  0d47							;modMaxValue equ $708A
     12  0d47							; - - - - - - - - - -
     13  0d47							;MOD_NONE equ 0
     14  0d47							;MOD_PW_LFO equ 1
     15  0d47							;MOD_FILT_LFO equ 2
     16  0d47							;MOD_FILT_OPEN equ 3
     17  0d47							;MOD_FILT_CLOSE equ 4
     18  0d47							;MOD_FILT_WOW equ 5
     19  0d47
     20  0d47				   processFX
     21  0d47		       ad 86 70 	      lda	fxType
     22  0d4a		       d0 0b		      bne	doFX
     23  0d4c		       a9 7f		      lda	#127	; Set default mod values...
     24  0d4e		       8d 9e 70 	      sta	pwModValue
     25  0d51		       8d 9c 70 	      sta	filterModValue
     26  0d54		       4c 7f 0d 	      jmp	quitFX
     27  0d57							; - - - - - - - -
     28  0d57				   doFX
     29  0d57		       c9 06		      cmp	#MOD_PW_LFO
     30  0d59		       d0 03		      bne	notModPulseLFO
     31  0d5b		       4c 69 0e 	      jmp	modPulseLFO	;------->
     32  0d5e				   notModPulseLFO
     33  0d5e		       c9 01		      cmp	#MOD_FILT_LFO
     34  0d60		       d0 03		      bne	notModFiltLFO
     35  0d62		       4c 55 0e 	      jmp	modFiltLFO	;------->
     36  0d65				   notModFiltLFO
     37  0d65		       c9 02		      cmp	#MOD_FILT_ENV
     38  0d67		       d0 03		      bne	noModFiltEnv
     39  0d69		       4c 25 0e 	      jmp	modFiltEnv	;------->
     40  0d6c				   noModFiltEnv
     41  0d6c		       c9 03		      cmp	#MOD_FILT3
     42  0d6e		       f0 10		      beq	modFilt3	;------->
     43  0d70		       c9 04		      cmp	#MOD_FILT4
     44  0d72		       f0 67		      beq	modFilt4	;------->
     45  0d74		       c9 05		      cmp	#MOD_FILT5
     46  0d76		       f0 76		      beq	modFilt5	;------->
     47  0d78		       c9 07		      cmp	#MOD_PW2
     48  0d7a		       d0 03		      bne	quitFX
     49  0d7c		       4c 01 0e 	      jmp	modPW2	;------->
     50  0d7f				   quitFX
     51  0d7f		       60		      rts
     52  0d80
     53  0d80
     54  0d80							;---------------------
     55  0d80				   modFilt3		; - Fast, high-to-low filter sweep (for synth bass, etc)
     56  0d80		       ad 03 70 	      lda	Frame
     57  0d83		       ad 87 70 	      lda	modValue1
     58  0d86		       29 f8		      and	#%11111000
     59  0d88		       f0 0b		      beq	noDecModValue2
     60  0d8a		       ae 87 70 	      ldx	modValue1
     61  0d8d		       ca		      dex
     62  0d8e		       ca		      dex
     63  0d8f		       ca		      dex
     64  0d90		       ca		      dex
     65  0d91		       ca		      dex
     66  0d92		       8e 87 70 	      stx	modValue1
     67  0d95				   noDecModValue2
     68  0d95		       ad 87 70 	      lda	modValue1
     69  0d98		       8d 9c 70 	      sta	filterModValue
     70  0d9b							;jsr setFilterFromA
     71  0d9b							;rts ; DEBUG!!
     72  0d9b
     73  0d9b		       a9 b4		      lda	#180
     74  0d9d		       8d 98 70 	      sta	resetValue
     75  0da0							;jmp filtEnvReset ;---- end
     76  0da0
     77  0da0				   filtEnvResetFast
     78  0da0		       ad 1d 70 	      lda	soundMode
     79  0da3		       c9 20		      cmp	#MODE_MONO1
     80  0da5		       f0 22		      beq	handleMonoMode
     81  0da7		       c9 21		      cmp	#MODE_MONO2
     82  0da9		       f0 1e		      beq	handleMonoMode
     83  0dab
     84  0dab							; Reset filter envelope when new notes appear in buffer (POLY VERSION)
     85  0dab		       a2 05		      ldx	#5
     86  0dad		       a0 00		      ldy	#0
     87  0daf				   countNotesLoop
     88  0daf		       bd a0 70 	      lda	noteNumArray,x
     89  0db2		       c9 ff		      cmp	#255
     90  0db4		       d0 01		      bne	skipCountingNote
     91  0db6		       c8		      iny
     92  0db7				   skipCountingNote
     93  0db7		       ca		      dex
     94  0db8		       10 f5		      bpl	countNotesLoop
     95  0dba		       cc 99 70 	      cpy	lastNoteCount
     96  0dbd		       f0 09		      beq	noNewNotes
     97  0dbf		       8c 99 70 	      sty	lastNoteCount
     98  0dc2		       ad 98 70 	      lda	resetValue	; Reset filter envelope
     99  0dc5		       8d 87 70 	      sta	modValue1
    100  0dc8				   noNewNotes
    101  0dc8		       60		      rts
    102  0dc9
    103  0dc9				   handleMonoMode
    104  0dc9		       ac a0 70 	      ldy	noteNumArray+0
    105  0dcc		       cc 9a 70 	      cpy	lastNote
    106  0dcf		       f0 09		      beq	sameOldNote
    107  0dd1		       8c 9a 70 	      sty	lastNote
    108  0dd4		       ad 98 70 	      lda	resetValue	; Reset filter envelope
    109  0dd7		       8d 87 70 	      sta	modValue1
    110  0dda				   sameOldNote
    111  0dda		       60		      rts
    112  0ddb
    113  0ddb							; Reset filter env when no notes are held...
    114  0ddb							;	ldx #5
    115  0ddb							;filtEnvResetLoop2
    116  0ddb							;lda noteNumArray,x
    117  0ddb							;cmp #255
    118  0ddb							;bne quitFiltEnv2
    119  0ddb							;dex
    120  0ddb							;bpl filtEnvResetLoop2
    121  0ddb							;lda resetValue
    122  0ddb							;sta modValue1
    123  0ddb							;quitFiltEnv2:
    124  0ddb							;rts
    125  0ddb
    126  0ddb							;---------------------
    127  0ddb				   modFilt4		; Filter chopper FAST
    128  0ddb		       ad 03 70 	      lda	Frame
    129  0dde		       29 08		      and	#%1000
    130  0de0		       f0 06		      beq	filterClosed
    131  0de2		       a9 e6		      lda	#230
    132  0de4		       8d 9c 70 	      sta	filterModValue
    133  0de7		       60		      rts
    134  0de8							;jmp setFilterFromA
    135  0de8				   filterClosed
    136  0de8		       a9 00		      lda	#0
    137  0dea		       8d 9c 70 	      sta	filterModValue
    138  0ded		       60		      rts
    139  0dee							;jmp setFilterFromA
    140  0dee
    141  0dee
    142  0dee							;---------------------
    143  0dee				   modFilt5		; Filter chopper MEDIUM
    144  0dee		       ad 03 70 	      lda	Frame
    145  0df1		       29 02		      and	#%10
    146  0df3		       f0 06		      beq	filterClosed2
    147  0df5		       a9 96		      lda	#150
    148  0df7							;jmp setFilterFromA
    149  0df7		       8d 9c 70 	      sta	filterModValue
    150  0dfa		       60		      rts
    151  0dfb				   filterClosed2
    152  0dfb		       a9 32		      lda	#50
    153  0dfd							;jmp setFilterFromA
    154  0dfd		       8d 9c 70 	      sta	filterModValue
    155  0e00		       60		      rts
    156  0e01
    157  0e01							;---------------------
    158  0e01				   modPW2		; PW Envelope
    159  0e01		       ad 03 70 	      lda	Frame
    160  0e04		       ad 87 70 	      lda	modValue1
    161  0e07							;and #%11111000
    162  0e07		       29 e0		      and	#%11100000
    163  0e09		       f0 0b		      beq	noDecModValue3
    164  0e0b		       ae 87 70 	      ldx	modValue1
    165  0e0e		       ca		      dex
    166  0e0f		       ca		      dex
    167  0e10		       ca		      dex
    168  0e11		       ca		      dex
    169  0e12		       ca		      dex
    170  0e13		       8e 87 70 	      stx	modValue1
    171  0e16				   noDecModValue3
    172  0e16		       ad 87 70 	      lda	modValue1
    173  0e19		       20 38 10 	      jsr	setPulseWidth
    174  0e1c
    175  0e1c		       a9 b4		      lda	#180
    176  0e1e		       8d 98 70 	      sta	resetValue
    177  0e21
    178  0e21		       4c a0 0d 	      jmp	filtEnvResetFast
    179  0e24		       60		      rts
    180  0e25
    181  0e25
    182  0e25
    183  0e25
    184  0e25							;---------------------
    185  0e25				   modFiltEnv
    186  0e25		       ad 03 70 	      lda	Frame
    187  0e28		       29 01		      and	#%1
    188  0e2a		       f0 01		      beq	doEnvLFO
    189  0e2c		       60		      rts
    190  0e2d				   doEnvLFO
    191  0e2d		       ad 87 70 	      lda	modValue1
    192  0e30		       c9 ff		      cmp	#255
    193  0e32		       f0 03		      beq	noIncreaseModValue
    194  0e34		       ee 87 70 	      inc	modValue1
    195  0e37				   noIncreaseModValue
    196  0e37		       ad 87 70 	      lda	modValue1
    197  0e3a		       8d 9c 70 	      sta	filterModValue
    198  0e3d							;jsr setFilterFromA
    199  0e3d		       a9 00		      lda	#0
    200  0e3f		       8d 98 70 	      sta	resetValue
    201  0e42							; jmp filtEnvReset
    202  0e42
    203  0e42				   filtEnvReset
    204  0e42		       a2 05		      ldx	#5
    205  0e44				   filtEnvResetLoop
    206  0e44		       bd a0 70 	      lda	noteNumArray,x
    207  0e47		       c9 ff		      cmp	#255
    208  0e49		       d0 09		      bne	quitFiltEnv
    209  0e4b		       ca		      dex
    210  0e4c		       10 f6		      bpl	filtEnvResetLoop
    211  0e4e							;lda #0
    212  0e4e		       ad 98 70 	      lda	resetValue
    213  0e51		       8d 87 70 	      sta	modValue1
    214  0e54				   quitFiltEnv
    215  0e54		       60		      rts
    216  0e55
    217  0e55							;---------------------
    218  0e55				   modFiltLFO
    219  0e55		       a9 96		      lda	#150
    220  0e57		       8d 8b 70 	      sta	modLFOMinValue
    221  0e5a		       a9 fe		      lda	#254
    222  0e5c		       8d 8a 70 	      sta	modLFOMaxValue
    223  0e5f		       20 8d 0e 	      jsr	doModulationLFO
    224  0e62		       ad 87 70 	      lda	modValue1
    225  0e65		       8d 9c 70 	      sta	filterModValue
    226  0e68							;jsr setFilterFromA
    227  0e68		       60		      rts
    228  0e69
    229  0e69
    230  0e69
    231  0e69							;---------------------
    232  0e69				   modPulseLFO
    233  0e69
    234  0e69							; Reset into range if way off value...
    235  0e69		       ad 87 70 	      lda	modValue1
    236  0e6c		       30 05		      bmi	noResetValue
    237  0e6e		       a9 c8		      lda	#200
    238  0e70		       8d 87 70 	      sta	modValue1
    239  0e73				   noResetValue
    240  0e73
    241  0e73							;inc 1025 ; DEBUG!
    242  0e73		       a9 96		      lda	#150
    243  0e75		       8d 8b 70 	      sta	modLFOMinValue
    244  0e78		       a9 fe		      lda	#254
    245  0e7a		       8d 8a 70 	      sta	modLFOMaxValue
    246  0e7d		       20 8d 0e 	      jsr	doModulationLFO
    247  0e80		       ae 87 70 	      ldx	modValue1
    248  0e83		       8e 79 70 	      stx	paddleY
    249  0e86
    250  0e86		       ad 87 70 	      lda	modValue1
    251  0e89		       20 38 10 	      jsr	setPulseWidth
    252  0e8c		       60		      rts
    253  0e8d
    254  0e8d							; Process special LFO for modulation
    255  0e8d							; Store modLFOMaxValue and modLFOMinValue first
    256  0e8d				   doModulationLFO
    257  0e8d		       ad 03 70 	      lda	Frame
    258  0e90		       29 07		      and	#%111
    259  0e92		       f0 01		      beq	doModLFO
    260  0e94		       60		      rts
    261  0e95				   doModLFO
    262  0e95		       ad 89 70 	      lda	modDirection
    263  0e98		       f0 12		      beq	LFODown
    264  0e9a				   LFOUp
    265  0e9a		       ae 87 70 	      ldx	modValue1
    266  0e9d		       e8		      inx
    267  0e9e		       8e 87 70 	      stx	modValue1
    268  0ea1							;jsr setPWValue
    269  0ea1		       8e 79 70 	      stx	paddleY
    270  0ea4							;jsr setPulseWidth
    271  0ea4		       ae 87 70 	      ldx	modValue1
    272  0ea7
    273  0ea7		       e0 f5		      cpx	#245
    274  0ea9		       f0 0d		      beq	switchDirections
    275  0eab		       60		      rts
    276  0eac
    277  0eac				   LFODown
    278  0eac		       ae 87 70 	      ldx	modValue1
    279  0eaf		       ca		      dex
    280  0eb0		       8e 87 70 	      stx	modValue1
    281  0eb3		       e0 96		      cpx	#150
    282  0eb5		       f0 01		      beq	switchDirections
    283  0eb7		       60		      rts
    284  0eb8
    285  0eb8				   switchDirections
    286  0eb8		       ad 89 70 	      lda	modDirection
    287  0ebb		       18		      clc
    288  0ebc		       69 01		      adc	#1
    289  0ebe		       29 01		      and	#1
    290  0ec0		       8d 89 70 	      sta	modDirection
    291  0ec3		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_setshow.asm LEVEL 2 PASS 2
      0  0ec4					      include	"cynth_setshow.asm"
      1  0ec4
      2  0ec4							;-------------------------------------------
      3  0ec4							; new key-based set functions
      4  0ec4							;-------------------------------------------
      5  0ec4
      6  0ec4				   ksavePatch
      7  0ec4		       a9 01		      lda	#1
      8  0ec6		       8d 75 70 	      sta	customPatchSaved
      9  0ec9							;-------------------
     10  0ec9		       a9 1e		      lda	#SAVED_PATCH_MESSAGE
     11  0ecb		       8d 47 70 	      sta	patchSetY
     12  0ece		       20 8b 14 	      jsr	showPatchName
     13  0ed1							;----------------
     14  0ed1		       a2 19		      ldx	#$19
     15  0ed3				   saveLoop
     16  0ed3		       bd 00 71 	      lda	sidData,x
     17  0ed6		       9d 20 71 	      sta	sidSaveData,x
     18  0ed9		       ca		      dex
     19  0eda		       10 f7		      bpl	saveLoop
     20  0edc							;----------------
     21  0edc		       ad 29 70 	      lda	paddle
     22  0edf		       8d 41 71 	      sta	savePaddle
     23  0ee2		       ad 6b 70 	      lda	octave
     24  0ee5		       8d 42 71 	      sta	saveOctave
     25  0ee8		       ad 1d 70 	      lda	soundMode
     26  0eeb		       8d 43 71 	      sta	saveSoundMode
     27  0eee		       ad 86 70 	      lda	fxType
     28  0ef1		       8d 43 71 	      sta	saveFXType
     29  0ef4		       ad 1e 70 	      lda	arpSpeed
     30  0ef7		       8d 44 71 	      sta	saveArpSpeed
     31  0efa		       ad 49 70 	      lda	LFODepth
     32  0efd		       8d 46 71 	      sta	saveLFODepth
     33  0f00		       ad 48 70 	      lda	LFORate
     34  0f03		       8d 47 71 	      sta	saveLFORate
     35  0f06		       ad 1c 70 	      lda	volume
     36  0f09		       8d 48 71 	      sta	saveVolume
     37  0f0c		       ad 24 70 	      lda	volModeRAM
     38  0f0f		       8d 49 71 	      sta	saveVolMode
     39  0f12		       ad 57 70 	      lda	filter
     40  0f15		       8d 4a 71 	      sta	saveFilter
     41  0f18							;----------------
     42  0f18		       60		      rts
     43  0f19
     44  0f19				   kloadPatch
     45  0f19							; don't load patch if none has been saved
     46  0f19		       ad 75 70 	      lda	customPatchSaved
     47  0f1c		       d0 01		      bne	contLoadPatch
     48  0f1e		       60		      rts
     49  0f1f				   contLoadPatch
     50  0f1f							; Maybe show this name with direct text instead?...
     51  0f1f							;lda #SAVED_PATCH_MESSAGE
     52  0f1f							;sta patchSetY
     53  0f1f							;jsr showPatchName
     54  0f1f							;----------------
     55  0f1f		       a9 1f		      lda	#CUSTOM_PATCH_NUMBER
     56  0f21		       8d 47 70 	      sta	patchSetY
     57  0f24		       20 8b 14 	      jsr	showPatchName
     58  0f27							;-----------------------
     59  0f27		       ad 49 71 	      lda	saveVolMode
     60  0f2a		       8d 24 70 	      sta	volModeRAM
     61  0f2d							;.....................
     62  0f2d		       ad 48 71 	      lda	saveVolume
     63  0f30		       8d 1c 70 	      sta	volume
     64  0f33							;.....................
     65  0f33		       ad 41 71 	      lda	savePaddle
     66  0f36		       20 0b 11 	      jsr	setPaddles
     67  0f39							;.....................
     68  0f39		       ad 42 71 	      lda	saveOctave
     69  0f3c		       20 a5 12 	      jsr	setOctave
     70  0f3f							;.....................
     71  0f3f		       ad 43 71 	      lda	saveSoundMode
     72  0f42		       8d 1d 70 	      sta	soundMode
     73  0f45							;lda saveArpSpeed
     74  0f45		       20 29 13 	      jsr	setMode
     75  0f48							;.....................
     76  0f48		       ad 43 71 	      lda	saveFXType
     77  0f4b		       8d 86 70 	      sta	fxType
     78  0f4e		       20 01 13 	      jsr	setFX
     79  0f51							;.....................
     80  0f51		       ad 46 71 	      lda	saveLFODepth
     81  0f54		       20 2c 11 	      jsr	setLFODepth
     82  0f57							;.....................
     83  0f57		       ad 47 71 	      lda	saveLFORate
     84  0f5a		       20 42 11 	      jsr	setLFORate
     85  0f5d							;.....................
     86  0f5d		       ad 4a 71 	      lda	saveFilter
     87  0f60		       8d 57 70 	      sta	filter
     88  0f63							;----------------
     89  0f63		       a2 19		      ldx	#$19
     90  0f65				   loadLoop
     91  0f65		       bd 20 71 	      lda	sidSaveData,x
     92  0f68		       9d 00 d4 	      sta	SID1,x
     93  0f6b		       9d 20 d4 	      sta	SID2,x
     94  0f6e		       9d 00 71 	      sta	sidData,x
     95  0f71		       ca		      dex
     96  0f72		       10 f1		      bpl	loadLoop
     97  0f74							;----------------
     98  0f74		       ad 04 71 	      lda	sidData+SV1WAVE
     99  0f77		       8d 30 70 	      sta	WaveType
    100  0f7a		       ad 0b 71 	      lda	sidData+SV2WAVE
    101  0f7d		       8d 37 70 	      sta	WaveType2
    102  0f80		       ad 12 71 	      lda	sidData+SV3WAVE
    103  0f83		       8d 3e 70 	      sta	WaveType3
    104  0f86							;----------------
    105  0f86		       60		      rts
    106  0f87
    107  0f87				   khelp
    108  0f87							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    109  0f87		       ad 9d 70 	      lda	filterSetValue
    110  0f8a		       8d 52 70 	      sta	sidEditSaveTemp1
    111  0f8d
    112  0f8d
    113  0f8d		       a9 00		      lda	#0
    114  0f8f		       8d 20 d0 	      sta	53280	; CLEAR RED ERROR BACKGROUND IF SHOWN
    115  0f92
    116  0f92		       20 83 0c 	      jsr	clrScr
    117  0f95		       a9 28		      lda	#KEYTIME
    118  0f97		       8d 58 70 	      sta	keyTimer
    119  0f9a		       ad 70 70 	      lda	helpMode
    120  0f9d		       49 01		      eor	#1
    121  0f9f							;sta helpMode
    122  0f9f		       20 f9 10 	      jsr	setHelpMode
    123  0fa2		       20 c4 0b 	      jsr	displayInit
    124  0fa5		       ad 70 70 	      lda	helpMode
    125  0fa8		       f0 0e		      beq	showHelpMessage
    126  0faa							;---------------
    127  0faa							; Show full help page...
    128  0faa		       a2 2d		      ldx	#>normalHelp	;low/MSB
    129  0fac		       a0 05		      ldy	#<normalHelp	;high/LSB
    130  0fae		       20 da 0c 	      jsr	displayPage	; <--- Draw full help page
    131  0fb1
    132  0fb1							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    133  0fb1		       ad 52 70 	      lda	sidEditSaveTemp1
    134  0fb4		       8d 9d 70 	      sta	filterSetValue
    135  0fb7		       60		      rts
    136  0fb8
    137  0fb8							; \/ Show help message at bottom of screen
    138  0fb8				   showHelpMessage
    139  0fb8							; Show help key...
    140  0fb8		       a2 00		      ldx	#0
    141  0fba				   helpMessageLoop
    142  0fba		       bd e7 2c 	      lda	helpMessage,x
    143  0fbd		       f0 11		      beq	endHelpMsgLoop
    144  0fbf		       c9 40		      cmp	#64
    145  0fc1		       30 02		      bmi	showSpace99
    146  0fc3		       e9 40		      sbc	#64
    147  0fc5				   showSpace99
    148  0fc5		       9d c0 07 	      sta	1024+24*40,x
    149  0fc8		       a9 0b		      lda	#11
    150  0fca		       9d c0 db 	      sta	55296+24*40,x	; color non-static text
    151  0fcd		       e8		      inx
    152  0fce		       d0 ea		      bne	helpMessageLoop
    153  0fd0				   endHelpMsgLoop
    154  0fd0
    155  0fd0		       20 d6 11 	      jsr	showMidiMode
    156  0fd3
    157  0fd3
    158  0fd3							;	jsr displayInit
    159  0fd3
    160  0fd3
    161  0fd3							; PREVENT MESSING UP FILTER (WHY IS THIS NEEDED?)
    162  0fd3		       ad 52 70 	      lda	sidEditSaveTemp1
    163  0fd6		       8d 9d 70 	      sta	filterSetValue
    164  0fd9
    165  0fd9							;	ldx #39
    166  0fd9							;	lda #32
    167  0fd9							;clearLastRow:
    168  0fd9							;	sta 1024+23*40,x
    169  0fd9							;	dex
    170  0fd9							;	bpl clearLastRow
    171  0fd9		       60		      rts
    172  0fda
    173  0fda				   kclearModulation
    174  0fda		       a9 00		      lda	#0
    175  0fdc		       20 fe 12 	      jsr	ksetFX
    176  0fdf		       a9 00		      lda	#0
    177  0fe1		       20 2c 11 	      jsr	setLFODepth
    178  0fe4		       a9 00		      lda	#0
    179  0fe6		       4c 42 11 	      jmp	setLFORate
    180  0fe9
    181  0fe9
    182  0fe9							;ksetBlackBG
    183  0fe9							;	lda #0
    184  0fe9							;	sta 53281
    185  0fe9							;	sta 53280
    186  0fe9							;	rts
    187  0fe9
    188  0fe9							;ksetBlueBG
    189  0fe9							;	lda #6
    190  0fe9							;	sta 53281
    191  0fe9							;	lda #14
    192  0fe9							;	sta 53280
    193  0fe9							;	rts
    194  0fe9
    195  0fe9
    196  0fe9				   ksetPalNtsc
    197  0fe9		       8d 61 70 	      sta	NTSCmode
    198  0fec		       4c c4 0b 	      jmp	displayInit
    199  0fef
    200  0fef							; bend the bender down
    201  0fef				   bendBender
    202  0fef		       ad 40 70 	      lda	bender
    203  0ff2		       c9 fc		      cmp	#252
    204  0ff4		       f0 11		      beq	notBender
    205  0ff6		       ee 40 70 	      inc	bender
    206  0ff9		       ee 40 70 	      inc	bender
    207  0ffc		       ee 40 70 	      inc	bender
    208  0fff		       ee 40 70 	      inc	bender
    209  1002		       a9 01		      lda	#1
    210  1004		       8d 83 70 	      sta	benderAutoreset
    211  1007				   notBender
    212  1007		       60		      rts
    213  1008
    214  1008							; set VIC video chip mode
    215  1008				   setVIC
    216  1008		       8d 20 70 	      sta	VICMode
    217  100b		       60		      rts
    218  100c
    219  100c							; set paddle on/off
    220  100c				   ksetPaddles
    221  100c		       20 0b 11 	      jsr	setPaddles
    222  100f		       ad 57 70 	      lda	filter
    223  1012		       8d 9d 70 	      sta	filterSetValue
    224  1015							;jmp setFilter
    225  1015		       60		      rts
    226  1016
    227  1016				   ksetPad2
    228  1016		       8d 7a 70 	      sta	paddle2
    229  1019		       c9 00		      cmp	#0
    230  101b		       f0 03		      beq	skipLastPadSave
    231  101d		       8d 7b 70 	      sta	lastPad2	; save last pad2 setting (other than "OFF")
    232  1020				   skipLastPadSave
    233  1020		       0a		      asl
    234  1021		       0a		      asl
    235  1022		       18		      clc
    236  1023		       69 64		      adc	#PAD2VALTEXT	; add in offset into value text array
    237  1025		       aa		      tax
    238  1026		       a0 c4		      ldy	#PAD2TEXT	; screen position
    239  1028		       4c 63 0c 	      jmp	updateText
    240  102b
    241  102b				   ksetFilter
    242  102b		       a2 00		      ldx	#0
    243  102d		       8e 29 70 	      stx	paddle	; turn off paddle controller first (why?)
    244  1030							;jsr setFilter
    245  1030		       8d 9d 70 	      sta	filterSetValue
    246  1033		       a9 00		      lda	#0
    247  1035		       4c 0b 11 	      jmp	setPaddles
    248  1038
    249  1038
    250  1038							;------------------
    251  1038							; Set pulse width
    252  1038							;------------------
    253  1038							; MIDI CONTROLLER	      <- 1 1 1	1 1 1 1
    254  1038							; PULSE WIDTH	      1 1 1 1  1 1 1 1	1 1 1 1
    255  1038							; -----------------------------------------------
    256  1038				   setPulseWidth
    257  1038							; write pulse high byte
    258  1038		       aa		      tax
    259  1039		       4a		      lsr
    260  103a		       4a		      lsr
    261  103b		       4a		      lsr
    262  103c		       4a		      lsr
    263  103d							;sta 1025+40 ; DEBUG!
    264  103d		       8d 03 d4 	      sta	SID1+SV1PWH
    265  1040		       8d 0a d4 	      sta	SID1+SV2PWH
    266  1043		       8d 11 d4 	      sta	SID1+SV3PWH
    267  1046		       8d 23 d4 	      sta	SID2+SV1PWH
    268  1049		       8d 2a d4 	      sta	SID2+SV2PWH
    269  104c		       8d 31 d4 	      sta	SID2+SV3PWH
    270  104f		       8d 03 71 	      sta	sidData+SV1PWH
    271  1052		       8d 0a 71 	      sta	sidData+SV2PWH
    272  1055		       8d 11 71 	      sta	sidData+SV3PWH
    273  1058
    274  1058							; write pulse low byte
    275  1058		       8a		      txa
    276  1059		       0a		      asl
    277  105a		       0a		      asl
    278  105b		       0a		      asl
    279  105c		       0a		      asl
    280  105d							;asl ; extra ?
    281  105d		       09 0f		      ora	#$0F
    282  105f							;sta 1024+40 ; DEBUG!
    283  105f		       8d 02 d4 	      sta	SID1+SV1PWL
    284  1062		       8d 09 d4 	      sta	SID1+SV2PWL
    285  1065		       8d 10 d4 	      sta	SID1+SV3PWL
    286  1068		       8d 22 d4 	      sta	SID2+SV1PWL
    287  106b		       8d 29 d4 	      sta	SID2+SV2PWL
    288  106e		       8d 30 d4 	      sta	SID2+SV3PWL
    289  1071		       8d 02 71 	      sta	sidData+SV1PWL
    290  1074		       8d 09 71 	      sta	sidData+SV2PWL
    291  1077		       8d 10 71 	      sta	sidData+SV3PWL
    292  107a		       60		      rts
    293  107b
    294  107b
    295  107b							;setAllOscillators:
    296  107b							;sta SID1+0,y
    297  107b							;sta SID1+7,y
    298  107b							;sta SID1+14,y
    299  107b							;sta SID2+0,y
    300  107b							;sta SID2+7,y
    301  107b							;sta SID2+14,y
    302  107b							;sta sidData+0,y
    303  107b							;sta sidData+7,y
    304  107b							;sta sidData+14,y
    305  107b							;rts
    306  107b
    307  107b
    308  107b
    309  107b				   kfiltOnOff
    310  107b		       8c 6c 70 	      sty	filterStatus
    311  107e				   setResonance
    312  107e		       ac 6c 70 	      ldy	filterStatus
    313  1081							;------------------
    314  1081							;lda sidData+SFILTC
    315  1081		       ad 97 70 	      lda	resonance
    316  1084		       19 ab 10 	      ora	filtOrValue,y
    317  1087		       39 ae 10 	      and	filtAndValue,y
    318  108a		       8d 17 d4 	      sta	SID1+SFILTC
    319  108d		       8d 17 71 	      sta	sidData+SFILTC
    320  1090							;------------------
    321  1090		       ad 17 71 	      lda	sidData+SFILTC
    322  1093		       19 ab 10 	      ora	filtOrValue,y
    323  1096		       39 ae 10 	      and	filtAndValue,y
    324  1099		       8d 37 d4 	      sta	SID2+SFILTC
    325  109c							;------------------
    326  109c		       b9 b1 10 	      lda	filtDisableValue,y
    327  109f		       8d 5c 70 	      sta	filterDisable
    328  10a2							;------------------
    329  10a2				   showFiltOnOff
    330  10a2		       b9 b4 10 	      lda	filtTextValue,y
    331  10a5		       aa		      tax
    332  10a6		       a0 4c		      ldy	#FILTERTEXT2
    333  10a8		       4c 63 0c 	      jmp	updateText
    334  10ab
    335  10ab
    336  10ab				   filtOrValue
    337  10ab		       0f 00 00 	      byte.b	$0F,0,0
    338  10ae				   filtAndValue
    339  10ae		       ff f0 f0 	      byte.b	$FF,$F0,$F0
    340  10b1				   filtDisableValue
    341  10b1		       00 00 01 	      byte.b	0,0,1
    342  10b4				   filtTextValue
    343  10b4		       04 00 60 	      byte.b	4,0,DISABLED
    344  10b7
    345  10b7				   ksetTune
    346  10b7		       8c 71 70 	      sty	tuneSetting
    347  10ba
    348  10ba		       98		      tya
    349  10bb		       38		      sec
    350  10bc		       e9 04		      sbc	#4
    351  10be		       8d f3 70 	      sta	systemTuning	; Store value in +/- cents for master tuning
    352  10c1
    353  10c1							;lda tuneArrPtrLL,y
    354  10c1							;sta tunePtrL
    355  10c1							;lda tuneArrPtrLH,y
    356  10c1							;sta tunePtrL+1
    357  10c1							;lda tuneArrPtrHL,y
    358  10c1							;sta tunePtrH
    359  10c1							;lda tuneArrPtrHH,y
    360  10c1							;sta tunePtrH+1
    361  10c1		       98		      tya
    362  10c2		       0a		      asl
    363  10c3		       0a		      asl
    364  10c4		       18		      clc
    365  10c5		       69 14		      adc	#TUNING
    366  10c7		       aa		      tax
    367  10c8		       a0 57		      ldy	#TUNINGTEXT
    368  10ca		       4c 63 0c 	      jmp	updateText
    369  10cd
    370  10cd
    371  10cd				   setFullScreenMode
    372  10cd		       8d 67 70 	      sta	fullScreenMode
    373  10d0		       c9 00		      cmp	#0
    374  10d2		       f0 11		      beq	notFullScreen
    375  10d4							;--------
    376  10d4		       a9 00		      lda	#<(PTRNTEXTBASE)
    377  10d6		       85 2b		      sta	lowTextPtr
    378  10d8		       a9 04		      lda	#>(PTRNTEXTBASE)
    379  10da		       85 2c		      sta	lowTextPtr+1
    380  10dc		       a9 00		      lda	#<(PTRNCOLORBASE)
    381  10de		       85 2d		      sta	lowColorPtr
    382  10e0		       a9 d8		      lda	#>(PTRNCOLORBASE)
    383  10e2		       85 2e		      sta	lowColorPtr+1
    384  10e4		       60		      rts
    385  10e5							;--------
    386  10e5				   notFullScreen
    387  10e5		       a9 c8		      lda	#<(PTRNTEXTBASE+200)
    388  10e7		       85 2b		      sta	lowTextPtr
    389  10e9		       a9 04		      lda	#>(PTRNTEXTBASE+200)
    390  10eb		       85 2c		      sta	lowTextPtr+1
    391  10ed		       a9 c8		      lda	#<(PTRNCOLORBASE+200)
    392  10ef		       85 2d		      sta	lowColorPtr
    393  10f1		       a9 d8		      lda	#>(PTRNCOLORBASE+200)
    394  10f3		       85 2e		      sta	lowColorPtr+1
    395  10f5		       20 c4 0b 	      jsr	displayInit
    396  10f8		       60		      rts
    397  10f9
    398  10f9				   setHelpMode
    399  10f9		       8d 70 70 	      sta	helpMode
    400  10fc		       60		      rts
    401  10fd
    402  10fd							;--------------------------------
    403  10fd							; Set Video Mode
    404  10fd							;--------------------------------
    405  10fd				   setVideoMode
    406  10fd		       8d 45 70 	      sta	videoMode
    407  1100		       8c 68 70 	      sty	videoText
    408  1103		       98		      tya
    409  1104		       18		      clc
    410  1105		       69 30		      adc	#"0"
    411  1107		       8d bc 04 	      sta	1024+VIDEOTEXT
    412  110a		       60		      rts
    413  110b
    414  110b							;--------------------------------
    415  110b							; Set Paddles
    416  110b							;--------------------------------
    417  110b				   setPaddles
    418  110b		       8d 29 70 	      sta	paddle
    419  110e		       0a		      asl
    420  110f		       d0 0c		      bne	noFilterReset
    421  1111		       ae 57 70 	      ldx	filter
    422  1114		       8e 16 d4 	      stx	SID1+SFILTH
    423  1117		       8e 36 d4 	      stx	SID2+SFILTH
    424  111a		       8d 16 71 	      sta	sidData+SFILTH
    425  111d				   noFilterReset
    426  111d		       a0 00		      ldy	#0
    427  111f		       8c 76 70 	      sty	paddleTop
    428  1122		       8c 77 70 	      sty	paddleBottom
    429  1125				   showPaddle
    430  1125		       0a		      asl
    431  1126		       aa		      tax
    432  1127		       a0 9c		      ldy	#PADDLETEXT
    433  1129		       4c 63 0c 	      jmp	updateText
    434  112c
    435  112c
    436  112c							;--------------------------------
    437  112c							; Set LFO Depth
    438  112c							;--------------------------------
    439  112c				   setLFODepth
    440  112c		       8d 49 70 	      sta	LFODepth
    441  112f							;showLFO:
    442  112f		       ac 70 70 	      ldy	helpMode
    443  1132		       f0 01		      beq	doShowLFO
    444  1134		       60		      rts
    445  1135				   doShowLFO
    446  1135		       a0 6c		      ldy	#LFODEPTHTEXT
    447  1137		       18		      clc
    448  1138		       69 30		      adc	#"0"
    449  113a		       99 00 04 	      sta	1024,y
    450  113d		       a9 20		      lda	#32
    451  113f		       a2 08		      ldx	#8
    452  1141		       60		      rts
    453  1142
    454  1142
    455  1142							;--------------------------------
    456  1142							; Set LFO Rate
    457  1142							;--------------------------------
    458  1142				   setLFORate
    459  1142		       8d 48 70 	      sta	LFORate
    460  1145				   showLFORate
    461  1145		       ac 70 70 	      ldy	helpMode
    462  1148		       f0 01		      beq	doShowLFORate
    463  114a		       60		      rts
    464  114b				   doShowLFORate
    465  114b		       a0 94		      ldy	#LFORATETEXT
    466  114d		       18		      clc
    467  114e		       69 30		      adc	#"0"
    468  1150		       99 00 04 	      sta	1024,y
    469  1153							;lda #32
    470  1153		       a9 02		      lda	#CYNTHCART_COLOR
    471  1155		       a2 08		      ldx	#8
    472  1157				   LFOClear
    473  1157							;sta 1064,x
    474  1157		       9d 00 d8 	      sta	55296,x
    475  115a		       ca		      dex
    476  115b		       10 fa		      bpl	LFOClear
    477  115d		       60		      rts
    478  115e
    479  115e							;--------------------------------
    480  115e							; Set Release for each OSC2 indpendently
    481  115e							;--------------------------------
    482  115e							; A = release OSC2 value
    483  115e				   setReleaseOSC2
    484  115e							;sta release
    485  115e		       8d 0d d4 	      sta	SID1+SV2SR
    486  1161		       8d 2d d4 	      sta	SID2+SV2SR
    487  1164		       8d 0d 71 	      sta	sidData+SV2SR
    488  1167		       60		      rts
    489  1168							;jmp showRelease
    490  1168							;----------------
    491  1168
    492  1168							;--------------------------------
    493  1168							; Set Release for each OSC3 indpendently
    494  1168							;--------------------------------
    495  1168							; A = release OSC2 value
    496  1168				   setReleaseOSC3
    497  1168							;sta release
    498  1168		       8d 14 d4 	      sta	SID1+SV3SR
    499  116b		       8d 34 d4 	      sta	SID2+SV3SR
    500  116e		       8d 14 71 	      sta	sidData+SV3SR
    501  1171		       60		      rts
    502  1172							;jmp showRelease
    503  1172							;----------------
    504  1172							;--------------------------------
    505  1172							; Set Release
    506  1172							;--------------------------------
    507  1172							; A = release OSC1 value
    508  1172							; X = release OSC2 value
    509  1172							; Y = release OSC3 value
    510  1172				   setRelease
    511  1172		       8d 6a 70 	      sta	release
    512  1175		       8d 06 d4 	      sta	SID1+SV1SR
    513  1178		       8d 0d d4 	      sta	SID1+SV2SR
    514  117b		       8d 14 d4 	      sta	SID1+SV3SR
    515  117e		       8d 26 d4 	      sta	SID2+SV1SR
    516  1181		       8d 2d d4 	      sta	SID2+SV2SR
    517  1184		       8d 34 d4 	      sta	SID2+SV3SR
    518  1187		       8d 06 71 	      sta	sidData+SV1SR
    519  118a		       8d 0d 71 	      sta	sidData+SV2SR
    520  118d		       8d 14 71 	      sta	sidData+SV3SR
    521  1190							;----------------
    522  1190				   showRelease
    523  1190		       ac 70 70 	      ldy	helpMode
    524  1193		       f0 01		      beq	doShowRelease
    525  1195		       60		      rts
    526  1196				   doShowRelease
    527  1196		       29 0f		      and	#$0F
    528  1198		       a8		      tay
    529  1199		       b9 c3 11 	      lda	sixteenToTen,y
    530  119c		       18		      clc
    531  119d		       69 30		      adc	#"0"
    532  119f		       8d 8a 04 	      sta	1024+RELTEXT
    533  11a2		       60		      rts
    534  11a3
    535  11a3		       a0 8a		      ldy	#RELTEXT
    536  11a5		       a9 e0		      lda	#REL_SHORT
    537  11a7		       cd 6a 70 	      cmp	release
    538  11aa		       30 05		      bmi	notRel0
    539  11ac		       a9 30		      lda	#"0"
    540  11ae		       4c bf 11 	      jmp	setReleaseText
    541  11b1				   notRel0
    542  11b1		       a9 e9		      lda	#REL_MED
    543  11b3		       cd 6a 70 	      cmp	release
    544  11b6		       30 05		      bmi	notRel1
    545  11b8		       a9 31		      lda	#"1"
    546  11ba		       4c bf 11 	      jmp	setReleaseText
    547  11bd				   notRel1
    548  11bd		       a9 32		      lda	#"2"
    549  11bf				   setReleaseText
    550  11bf		       99 00 04 	      sta	1024,y
    551  11c2		       60		      rts
    552  11c3
    553  11c3				   sixteenToTen
    554  11c3		       00 01 01 02*	      byte.b	0,1,1,2, 3,3,4,4, 5,5,6,6, 7,8,8,9
    555  11d3
    556  11d3
    557  11d3				   setMidiMode
    558  11d3		       8d f7 70 	      sta	midiMode
    559  11d6				   showMidiMode
    560  11d6		       a9 2f		      lda	#47
    561  11d8		       8d e1 07 	      sta	2017
    562  11db		       ad 50 71 	      lda	midiEnabled
    563  11de		       d0 01		      bne	doShowMidiMode
    564  11e0		       60		      rts
    565  11e1				   doShowMidiMode
    566  11e1		       a9 2f		      lda	#47
    567  11e3		       8d dc 07 	      sta	2012
    568  11e6		       8d d7 07 	      sta	2007
    569  11e9		       ae f7 70 	      ldx	midiMode
    570  11ec		       30 19		      bmi	showOmni
    571  11ee							;sta 2010
    572  11ee				   showChannel
    573  11ee		       a9 20		      lda	#32
    574  11f0		       8d d8 07 	      sta	2008
    575  11f3		       a9 03		      lda	#3
    576  11f5		       8d d9 07 	      sta	2009
    577  11f8		       a9 08		      lda	#8
    578  11fa		       8d da 07 	      sta	2010
    579  11fd		       a9 31		      lda	#49
    580  11ff		       18		      clc
    581  1200		       6d f7 70 	      adc	midiMode
    582  1203		       8d db 07 	      sta	2011
    583  1206		       60		      rts
    584  1207				   showOmni
    585  1207		       a9 0f		      lda	#15
    586  1209		       8d d8 07 	      sta	2008
    587  120c		       a9 0d		      lda	#13
    588  120e		       8d d9 07 	      sta	2009
    589  1211		       a9 0e		      lda	#14
    590  1213		       8d da 07 	      sta	2010
    591  1216		       a9 09		      lda	#9
    592  1218		       8d db 07 	      sta	2011
    593  121b
    594  121b		       20 e2 12 	      jsr	showAdapter
    595  121e		       60		      rts
    596  121f
    597  121f							;--------------------------------
    598  121f							; Set Attack
    599  121f							;--------------------------------
    600  121f							; A = Attack value
    601  121f				   setAttack
    602  121f		       8d 69 70 	      sta	attack
    603  1222		       8d 0c d4 	      sta	SID1+SV2AD
    604  1225		       8d 13 d4 	      sta	SID1+SV3AD
    605  1228		       8d 2c d4 	      sta	SID2+SV2AD
    606  122b		       8d 33 d4 	      sta	SID2+SV3AD
    607  122e		       8d 05 d4 	      sta	SID1+SV1AD
    608  1231		       8d 25 d4 	      sta	SID2+SV1AD
    609  1234		       8d 0c 71 	      sta	sidData+SV2AD
    610  1237		       8d 13 71 	      sta	sidData+SV3AD
    611  123a		       8d 05 71 	      sta	sidData+SV1AD
    612  123d							;----------------
    613  123d				   showAttack
    614  123d		       ac 70 70 	      ldy	helpMode
    615  1240		       f0 01		      beq	doShowAttack
    616  1242		       60		      rts
    617  1243				   doShowAttack
    618  1243		       4a		      lsr
    619  1244		       4a		      lsr
    620  1245		       4a		      lsr
    621  1246		       4a		      lsr
    622  1247		       a8		      tay
    623  1248		       b9 c3 11 	      lda	sixteenToTen,y
    624  124b		       18		      clc
    625  124c		       69 30		      adc	#"0"
    626  124e		       8d 62 04 	      sta	1024+ATKTEXT
    627  1251		       60		      rts
    628  1252
    629  1252
    630  1252							;-----------------------------------
    631  1252							; Set Volume to A (for key command)
    632  1252							;-----------------------------------
    633  1252				   ksetVolume
    634  1252		       8d 1c 70 	      sta	volume
    635  1255
    636  1255
    637  1255							;-----------------------------------
    638  1255							; Set Volume
    639  1255							;-----------------------------------
    640  1255				   setVolume
    641  1255		       ad 24 70 	      lda	volModeRAM
    642  1258		       29 f0		      and	#$F0
    643  125a		       0d 1c 70 	      ora	volume
    644  125d		       8d 18 d4 	      sta	SID1+SVOLMODE
    645  1260		       8d 38 d4 	      sta	SID2+SVOLMODE
    646  1263		       8d 18 71 	      sta	sidData+SVOLMODE
    647  1266				   showVolume
    648  1266		       ac 70 70 	      ldy	helpMode
    649  1269		       f0 01		      beq	doShowVolume
    650  126b		       60		      rts
    651  126c				   doShowVolume
    652  126c		       29 0f		      and	#$0F
    653  126e		       aa		      tax
    654  126f		       bd c3 11 	      lda	sixteenToTen,x
    655  1272		       18		      clc
    656  1273		       69 30		      adc	#"0"
    657  1275		       8d a7 04 	      sta	1024+VOLTEXT
    658  1278		       60		      rts
    659  1279
    660  1279		       aa		      tax
    661  127a		       bd c3 11 	      lda	sixteenToTen,x
    662  127d		       aa		      tax
    663  127e		       a0 a7		      ldy	#VOLTEXT
    664  1280		       a9 07		      lda	#VOLLOW
    665  1282		       20 63 0c 	      jsr	updateText
    666  1285		       60		      rts
    667  1286
    668  1286
    669  1286							; set volume text
    670  1286		       a0 a7		      ldy	#VOLTEXT
    671  1288		       a9 07		      lda	#VOLLOW
    672  128a		       cd 1c 70 	      cmp	volume
    673  128d		       30 05		      bmi	notLow
    674  128f		       a2 50		      ldx	#VLOW
    675  1291		       4c 63 0c 	      jmp	updateText
    676  1294				   notLow
    677  1294		       a9 0b		      lda	#VOLMED
    678  1296		       cd 1c 70 	      cmp	volume
    679  1299		       30 05		      bmi	notMed
    680  129b		       a2 54		      ldx	#VMED
    681  129d		       4c 63 0c 	      jmp	updateText
    682  12a0				   notMed
    683  12a0		       a2 58		      ldx	#VHIGH
    684  12a2		       4c 63 0c 	      jmp	updateText
    685  12a5							;-------------------------------------
    686  12a5
    687  12a5
    688  12a5							;-----------------------------------
    689  12a5							; Set Octave
    690  12a5							;-----------------------------------
    691  12a5				   setOctave
    692  12a5		       8d 6b 70 	      sta	octave
    693  12a8		       aa		      tax
    694  12a9		       bd f7 28 	      lda	octaveTable,x
    695  12ac		       8d 22 70 	      sta	keyOffset
    696  12af				   showOctave
    697  12af		       ac 70 70 	      ldy	helpMode
    698  12b2		       f0 01		      beq	doShowOctave
    699  12b4		       60		      rts
    700  12b5				   doShowOctave
    701  12b5		       8a		      txa
    702  12b6		       18		      clc
    703  12b7		       69 30		      adc	#"0"
    704  12b9		       aa		      tax
    705  12ba		       8d 7f 04 	      sta	1024+OCTAVETEXT
    706  12bd		       60		      rts
    707  12be
    708  12be							;-----------------------------------
    709  12be							; Set Filter
    710  12be							;-----------------------------------
    711  12be				   setFilter
    712  12be		       8d 16 d4 	      sta	SID1+SFILTH
    713  12c1		       8d 36 d4 	      sta	SID2+SFILTH
    714  12c4		       8d 16 71 	      sta	sidData+SFILTH
    715  12c7
    716  12c7		       8d 57 70 	      sta	filter
    717  12ca				   showFilter
    718  12ca		       ac 70 70 	      ldy	helpMode
    719  12cd		       f0 01		      beq	testFullScreenMode
    720  12cf							;beq doShowFilter
    721  12cf		       60		      rts
    722  12d0				   testFullScreenMode
    723  12d0		       ac 67 70 	      ldy	fullScreenMode
    724  12d3		       f0 01		      beq	doShowFilter
    725  12d5		       60		      rts
    726  12d6				   doShowFilter
    727  12d6		       4a		      lsr
    728  12d7		       4a		      lsr
    729  12d8		       4a		      lsr
    730  12d9		       4a		      lsr
    731  12da		       4a		      lsr
    732  12db		       18		      clc
    733  12dc		       69 30		      adc	#"0"
    734  12de				   endFilter
    735  12de		       8d 75 04 	      sta	1024+FILTERTEXT
    736  12e1		       60		      rts
    737  12e2
    738  12e2
    739  12e2							;-----------------------------------
    740  12e2							; Set Midi mode
    741  12e2							;-----------------------------------
    742  12e2				   showAdapter
    743  12e2							; Draw name of new sound mode on screen...
    744  12e2		       ad 50 71 	      lda	midiEnabled
    745  12e5		       0a		      asl
    746  12e6		       0a		      asl
    747  12e7		       0a		      asl
    748  12e8							;lda modeNameOffsets,x
    749  12e8							;lda fxNames,x
    750  12e8		       aa		      tax
    751  12e9		       a0 00		      ldy	#0
    752  12eb				   drawMidiModeLoop
    753  12eb							;lda modeNamesPolyphony,x
    754  12eb		       bd c5 29 	      lda	midiModeNames,x
    755  12ee		       c9 40		      cmp	#64
    756  12f0		       30 02		      bmi	showSpaceZMidiMode
    757  12f2		       e9 40		      sbc	#64
    758  12f4				   showSpaceZMidiMode
    759  12f4		       99 cf 07 	      sta	1024+40*24+15,y
    760  12f7		       e8		      inx
    761  12f8		       c8		      iny
    762  12f9		       c0 08		      cpy	#8
    763  12fb		       d0 ee		      bne	drawMidiModeLoop
    764  12fd							; - - - - -
    765  12fd							;inx ; Get polyphony value at end of name string...
    766  12fd							;inx
    767  12fd							;lda modeNamesPolyphony,x
    768  12fd							;sta polyphony
    769  12fd
    770  12fd							;lda #8
    771  12fd							;sta bufferSize
    772  12fd
    773  12fd		       60		      rts
    774  12fe
    775  12fe
    776  12fe
    777  12fe							;-----------------------------------
    778  12fe							; Set FX mode with A,Y (for key command)
    779  12fe							;-----------------------------------
    780  12fe				   ksetFX
    781  12fe		       8d 86 70 	      sta	fxType
    782  1301							;-----------------------------------
    783  1301							; Set FX mode
    784  1301							;-----------------------------------
    785  1301				   setFX
    786  1301		       ad 70 70 	      lda	helpMode
    787  1304		       f0 01		      beq	doShowFX
    788  1306		       60		      rts
    789  1307				   doShowFX
    790  1307							;lda fxType
    791  1307
    792  1307							; Draw name of new sound mode on screen...
    793  1307		       ad 86 70 	      lda	fxType
    794  130a		       0a		      asl
    795  130b		       0a		      asl
    796  130c		       0a		      asl
    797  130d							;lda modeNameOffsets,x
    798  130d							;lda fxNames,x
    799  130d		       aa		      tax
    800  130e		       a0 00		      ldy	#0
    801  1310				   drawModeLoopFX
    802  1310							;lda modeNamesPolyphony,x
    803  1310		       bd ed 29 	      lda	fxNames,x
    804  1313		       c9 40		      cmp	#64
    805  1315		       30 02		      bmi	showSpaceZFX
    806  1317		       e9 40		      sbc	#64
    807  1319				   showSpaceZFX
    808  1319		       99 af 04 	      sta	1024+FXTEXT,y
    809  131c		       e8		      inx
    810  131d		       c8		      iny
    811  131e		       c0 05		      cpy	#5
    812  1320		       d0 ee		      bne	drawModeLoopFX
    813  1322							; - - - - -
    814  1322							;inx ; Get polyphony value at end of name string...
    815  1322							;inx
    816  1322							;lda modeNamesPolyphony,x
    817  1322							;sta polyphony
    818  1322
    819  1322							;lda #8
    820  1322							;sta bufferSize
    821  1322
    822  1322		       60		      rts
    823  1323
    824  1323
    825  1323
    826  1323				   portSpeedTable
    827  1323		       06 07 09 	      byte.b	6,7,9
    828  1326							;byte 5,7,9
    829  1326
    830  1326							;-----------------------------------
    831  1326							; set port with A,Y (for key command)
    832  1326							;-----------------------------------
    833  1326				   ksetMode
    834  1326							;sta portOn
    835  1326		       8d 1d 70 	      sta	soundMode
    836  1329							;sty portSpd
    837  1329							; . . . . . . . . . .
    838  1329							;-----------------------------------
    839  1329							; Set sound mode
    840  1329							;-----------------------------------
    841  1329				   setMode
    842  1329				   showModeName
    843  1329		       ac 70 70 	      ldy	helpMode
    844  132c		       f0 01		      beq	doShowModeName
    845  132e		       60		      rts
    846  132f				   doShowModeName
    847  132f
    848  132f		       ad 1d 70 	      lda	soundMode	; This probably needs work
    849  1332
    850  1332							; Draw name of new sound mode on screen...
    851  1332		       ae 1d 70 	      ldx	soundMode
    852  1335		       bd 19 33 	      lda	modeNameOffsets,x
    853  1338		       aa		      tax
    854  1339		       a0 00		      ldy	#0
    855  133b				   drawModeLoop
    856  133b		       bd 99 32 	      lda	modeNamesPolyphony,x
    857  133e		       c9 40		      cmp	#64
    858  1340		       30 02		      bmi	showSpaceZ
    859  1342		       e9 40		      sbc	#64
    860  1344				   showSpaceZ
    861  1344		       99 2d 04 	      sta	1024+MODETEXT,y
    862  1347		       e8		      inx
    863  1348		       c8		      iny
    864  1349		       c0 05		      cpy	#5
    865  134b		       d0 ee		      bne	drawModeLoop
    866  134d							; - - - - -
    867  134d		       e8		      inx		; Get polyphony value at end of name string...
    868  134e		       e8		      inx
    869  134f		       bd 99 32 	      lda	modeNamesPolyphony,x
    870  1352		       8d 84 70 	      sta	polyphony
    871  1355
    872  1355		       a9 08		      lda	#8
    873  1357		       8d 80 70 	      sta	bufferSize
    874  135a
    875  135a
    876  135a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    877  135a							;sta 1024+161 ;DEBUG
    878  135a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    879  135a
    880  135a
    881  135a							; set up pointer to portamento speed array
    882  135a							; (which is the tuning array)
    883  135a							;lda portSpd
    884  135a							;clc
    885  135a							;adc #4
    886  135a
    887  135a							; New version of code above...
    888  135a		       ad 1d 70 	      lda	soundMode
    889  135d		       29 0f		      and	#$0F	; Get portamento speed
    890  135f		       a8		      tay
    891  1360		       b9 23 13 	      lda	portSpeedTable,y
    892  1363
    893  1363							;clc
    894  1363							;asl ; X2
    895  1363							;adc #5
    896  1363
    897  1363		       a8		      tay
    898  1364							;	ldy #5 ; portSpd DEBUG
    899  1364		       b9 8f 33 	      lda	tuneArrPtrLL,y
    900  1367		       85 35		      sta	portPtrL
    901  1369		       b9 99 33 	      lda	tuneArrPtrLH,y
    902  136c		       85 36		      sta	portPtrL+1
    903  136e		       b9 a3 33 	      lda	tuneArrPtrHL,y
    904  1371		       85 47		      sta	portPtrH
    905  1373		       b9 ad 33 	      lda	tuneArrPtrHH,y
    906  1376		       85 48		      sta	portPtrH+1
    907  1378		       60		      rts
    908  1379
    909  1379
    910  1379							;----------------------------------------
    911  1379							; subroutine to set up patch
    912  1379							; (patch # stored in Y)
    913  1379							;----------------------------------------
    914  1379				   setPatch
    915  1379		       8c 47 70 	      sty	patchSetY
    916  137c
    917  137c		       b9 07 28 	      lda	patchVol,y
    918  137f		       8d 1c 70 	      sta	volume
    919  1382
    920  1382		       b9 cb 27 	      lda	patchPaddle,y
    921  1385		       20 0b 11 	      jsr	setPaddles
    922  1388
    923  1388							;.....................
    924  1388		       20 6a 0a 	      jsr	midiPanic
    925  138b							;.....................
    926  138b
    927  138b							; Reset modulation values
    928  138b		       a9 7f		      lda	#127
    929  138d		       8d 9c 70 	      sta	filterModValue
    930  1390		       8d 9e 70 	      sta	pwModValue
    931  1393
    932  1393		       ac 47 70 	      ldy	patchSetY
    933  1396		       b9 e9 27 	      lda	newPatchFiltCut,y
    934  1399		       8d 9d 70 	      sta	filterSetValue
    935  139c							;jsr setFilter
    936  139c
    937  139c							;lda patchFilt,y
    938  139c							;sta SID1+SV1PWL
    939  139c
    940  139c
    941  139c		       ac 47 70 	      ldy	patchSetY
    942  139f		       b9 da 26 	      lda	patchSoundMode,y
    943  13a2		       8d 1d 70 	      sta	soundMode
    944  13a5		       20 29 13 	      jsr	setMode
    945  13a8
    946  13a8		       ac 47 70 	      ldy	patchSetY
    947  13ab		       b9 25 28 	      lda	patchPWL,y
    948  13ae		       8d 02 d4 	      sta	SID1+SV1PWL
    949  13b1		       8d 09 d4 	      sta	SID1+SV2PWL
    950  13b4		       8d 10 d4 	      sta	SID1+SV3PWL
    951  13b7		       8d 22 d4 	      sta	SID2+SV1PWL
    952  13ba		       8d 29 d4 	      sta	SID2+SV2PWL
    953  13bd		       8d 30 d4 	      sta	SID2+SV3PWL
    954  13c0		       8d 02 71 	      sta	sidData+SV1PWL
    955  13c3		       8d 09 71 	      sta	sidData+SV2PWL
    956  13c6		       8d 10 71 	      sta	sidData+SV3PWL
    957  13c9
    958  13c9		       ac 47 70 	      ldy	patchSetY
    959  13cc		       b9 43 28 	      lda	patchPWH,y
    960  13cf		       8d 03 d4 	      sta	SID1+SV1PWH
    961  13d2		       8d 0a d4 	      sta	SID1+SV2PWH
    962  13d5		       8d 11 d4 	      sta	SID1+SV3PWH
    963  13d8		       8d 23 d4 	      sta	SID2+SV1PWH
    964  13db		       8d 2a d4 	      sta	SID2+SV2PWH
    965  13de		       8d 31 d4 	      sta	SID2+SV3PWH
    966  13e1		       8d 03 71 	      sta	sidData+SV1PWH
    967  13e4		       8d 0a 71 	      sta	sidData+SV2PWH
    968  13e7		       8d 11 71 	      sta	sidData+SV3PWH
    969  13ea
    970  13ea		       ac 47 70 	      ldy	patchSetY
    971  13ed		       b9 61 28 	      lda	patchWave1,y
    972  13f0		       8d 30 70 	      sta	WaveType
    973  13f3		       b9 7f 28 	      lda	patchWave2,y
    974  13f6		       8d 37 70 	      sta	WaveType2
    975  13f9		       b9 9d 28 	      lda	patchWave3,y
    976  13fc		       8d 3e 70 	      sta	WaveType3
    977  13ff
    978  13ff		       ac 47 70 	      ldy	patchSetY
    979  1402		       b9 17 27 	      lda	patchLFO,y
    980  1405		       29 0f		      and	#$0F
    981  1407		       8c 0c 70 	      sty	temp
    982  140a		       20 42 11 	      jsr	setLFORate
    983  140d		       ac 0c 70 	      ldy	temp
    984  1410		       b9 17 27 	      lda	patchLFO,y
    985  1413		       29 f0		      and	#$F0
    986  1415		       4a		      lsr
    987  1416		       4a		      lsr
    988  1417		       4a		      lsr
    989  1418		       4a		      lsr
    990  1419							;lda #2
    991  1419		       20 2c 11 	      jsr	setLFODepth
    992  141c
    993  141c		       ac 0c 70 	      ldy	temp
    994  141f		       b9 53 27 	      lda	patchAD,y
    995  1422							;lda #0 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!
    996  1422							;lda #$F0
    997  1422		       20 1f 12 	      jsr	setAttack
    998  1425		       ac 47 70 	      ldy	patchSetY
    999  1428
   1000  1428		       ac 0c 70 	      ldy	temp
   1001  142b		       b9 71 27 	      lda	patchSR1,y
   1002  142e		       20 72 11 	      jsr	setRelease
   1003  1431		       ac 0c 70 	      ldy	temp
   1004  1434		       b9 8f 27 	      lda	patchSR2,y
   1005  1437		       20 5e 11 	      jsr	setReleaseOSC2
   1006  143a		       b9 ad 27 	      lda	patchSR3,y
   1007  143d		       20 68 11 	      jsr	setReleaseOSC3
   1008  1440
   1009  1440		       ac 47 70 	      ldy	patchSetY
   1010  1443
   1011  1443		       b9 bb 28 	      lda	patchFilt,y
   1012  1446		       ae 5c 70 	      ldx	filterDisable
   1013  1449		       f0 02		      beq	skipFilterDisable
   1014  144b		       29 f0		      and	#$F0
   1015  144d				   skipFilterDisable
   1016  144d		       8d 17 d4 	      sta	SID1+SFILTC
   1017  1450		       8d 37 d4 	      sta	SID2+SFILTC
   1018  1453		       8d 17 71 	      sta	sidData+SFILTC
   1019  1456		       29 01		      and	#$01
   1020  1458		       f0 07		      beq	skipFilterOnText
   1021  145a		       a0 4c		      ldy	#FILTERTEXT2
   1022  145c		       a2 04		      ldx	#4
   1023  145e		       20 63 0c 	      jsr	updateText
   1024  1461				   skipFilterOnText
   1025  1461		       ac 47 70 	      ldy	patchSetY
   1026  1464
   1027  1464		       b9 d9 28 	      lda	patchVolMode,y
   1028  1467		       29 f0		      and	#$F0
   1029  1469		       0d 1c 70 	      ora	volume
   1030  146c		       8d 24 70 	      sta	volModeRAM
   1031  146f		       20 55 12 	      jsr	setVolume
   1032  1472		       ac 47 70 	      ldy	patchSetY
   1033  1475
   1034  1475		       b9 35 27 	      lda	patchOctave,y
   1035  1478		       20 a5 12 	      jsr	setOctave
   1036  147b		       ac 47 70 	      ldy	patchSetY
   1037  147e
   1038  147e		       b9 f9 26 	      lda	patchFX,y
   1039  1481		       8d 86 70 	      sta	fxType
   1040  1484		       20 01 13 	      jsr	setFX
   1041  1487
   1042  1487		       20 8b 14 	      jsr	showPatchName
   1043  148a
   1044  148a		       60		      rts
   1045  148b							;------------------------ end of setpatch
   1046  148b
   1047  148b				   showPatchName
   1048  148b		       ad 70 70 	      lda	helpMode
   1049  148e		       f0 01		      beq	doShowPatchName
   1050  1490		       60		      rts
   1051  1491				   doShowPatchName
   1052  1491		       ad 47 70 	      lda	patchSetY
   1053  1494		       29 f0		      and	#%11110000
   1054  1496		       d0 1f		      bne	patchNameSecondBank
   1055  1498							;tay
   1056  1498		       ac 47 70 	      ldy	patchSetY
   1057  149b		       c8		      iny
   1058  149c		       98		      tya
   1059  149d		       0a		      asl
   1060  149e		       0a		      asl
   1061  149f		       0a		      asl
   1062  14a0		       0a		      asl
   1063  14a1		       a8		      tay
   1064  14a2		       88		      dey
   1065  14a3		       a2 0f		      ldx	#15
   1066  14a5				   patchText
   1067  14a5		       b9 da 24 	      lda	patchName,y
   1068  14a8		       c9 40		      cmp	#64
   1069  14aa		       30 03		      bmi	pshowSpace
   1070  14ac		       38		      sec
   1071  14ad		       e9 40		      sbc	#64
   1072  14af				   pshowSpace
   1073  14af		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1074  14b2		       88		      dey
   1075  14b3		       ca		      dex
   1076  14b4		       10 ef		      bpl	patchText
   1077  14b6		       60		      rts
   1078  14b7
   1079  14b7				   patchNameSecondBank
   1080  14b7							;tay
   1081  14b7		       ac 47 70 	      ldy	patchSetY
   1082  14ba		       c8		      iny
   1083  14bb		       98		      tya
   1084  14bc		       0a		      asl
   1085  14bd		       0a		      asl
   1086  14be		       0a		      asl
   1087  14bf		       0a		      asl
   1088  14c0		       a8		      tay
   1089  14c1		       88		      dey
   1090  14c2		       a2 0f		      ldx	#15
   1091  14c4				   patchText2
   1092  14c4		       b9 da 25 	      lda	patchName2,y
   1093  14c7		       c9 40		      cmp	#64
   1094  14c9		       30 03		      bmi	pshowSpace2
   1095  14cb		       38		      sec
   1096  14cc		       e9 40		      sbc	#64
   1097  14ce				   pshowSpace2
   1098  14ce		       9d 12 04 	      sta	1024+PATCHTEXT,x
   1099  14d1		       88		      dey
   1100  14d2		       ca		      dex
   1101  14d3		       10 ef		      bpl	patchText2
   1102  14d5		       60		      rts
   1103  14d6
   1104  14d6
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sound.asm LEVEL 2 PASS 2
      0  14d6					      include	"cynth_sound.asm"
      1  14d6				   processSoundDriver
      2  14d6							; determine whether to use portamento player
      3  14d6							; or regular player...
      4  14d6		       ad 1d 70 	      lda	soundMode
      5  14d9		       f0 28		      beq	polyMode
      6  14db		       29 20		      and	#MONO_MASK
      7  14dd		       f0 03		      beq	nextSoundModeCheck1
      8  14df		       4c 23 15 	      jmp	playMono
      9  14e2				   nextSoundModeCheck1
     10  14e2		       ad 1d 70 	      lda	soundMode
     11  14e5		       29 10		      and	#PORT_MASK
     12  14e7		       f0 03		      beq	nextSoundModeCheck2
     13  14e9		       4c 92 19 	      jmp	playPort
     14  14ec				   nextSoundModeCheck2
     15  14ec		       ad 1d 70 	      lda	soundMode
     16  14ef		       29 40		      and	#ARP_MASK
     17  14f1		       f0 03		      beq	nextSoundModeCheck3
     18  14f3		       4c e3 15 	      jmp	playArp
     19  14f6				   nextSoundModeCheck3
     20  14f6		       ad 1d 70 	      lda	soundMode
     21  14f9		       29 08		      and	#CHAN6_MASK
     22  14fb		       f0 03		      beq	nextSoundModeCheck4
     23  14fd		       4c 62 16 	      jmp	play6Chan
     24  1500				   nextSoundModeCheck4
     25  1500		       4c 7e 15 	      jmp	playFifths	; Otherwise, it's a 5ths mode
     26  1503							;lda soundMode
     27  1503							;cmp #MODE_5THS
     28  1503							;bne endSoundMode
     29  1503							;jmp playFifths
     30  1503							;endSoundMode:
     31  1503							;brk ; Shouldn't ever reach this point in code
     32  1503
     33  1503
     34  1503							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     35  1503							; POLYPHONIC STEREO SOUND DRIVER (DEFAULT)
     36  1503							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     37  1503				   polyMode
     38  1503		       a2 02		      ldx	#2
     39  1505				   polyCopyLoop
     40  1505		       bd a0 70 	      lda	noteNumArray,x
     41  1508		       9d b0 70 	      sta	playNoteArray,x
     42  150b		       ca		      dex
     43  150c		       10 f7		      bpl	polyCopyLoop
     44  150e
     45  150e		       ad a0 70 	      lda	noteNumArray+0	; Duplicate notes on second SID for stereo
     46  1511		       8d b3 70 	      sta	playNoteArray+3
     47  1514		       ad a1 70 	      lda	noteNumArray+1
     48  1517		       8d b4 70 	      sta	playNoteArray+4
     49  151a		       ad a2 70 	      lda	noteNumArray+2
     50  151d		       8d b5 70 	      sta	playNoteArray+5
     51  1520
     52  1520		       4c 88 18 	      jmp	sixVoicePlayer
     53  1523
     54  1523							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     55  1523							; MONO-STACK SOUND DRIVER
     56  1523							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
     57  1523				   playMono
     58  1523		       ad a0 70 	      lda	noteNumArray
     59  1526				   playMonoWithA
     60  1526		       8d 0c 70 	      sta	temp
     61  1529		       8d b0 70 	      sta	playNoteArray+0
     62  152c		       c9 ff		      cmp	#255
     63  152e		       f0 29		      beq	monoMute
     64  1530		       ae 1d 70 	      ldx	soundMode
     65  1533							;dex
     66  1533							;beq noRaiseOctave
     67  1533		       e0 21		      cpx	#MODE_MONO2
     68  1535		       f0 07		      beq	noRaiseOctave	; Skip shifting the octave in MONO2 mode
     69  1537		       e0 32		      cpx	#MODE_MONOPORT2
     70  1539		       f0 03		      beq	noRaiseOctave
     71  153b							;-------------------------------------
     72  153b		       18		      clc
     73  153c		       69 0c		      adc	#12
     74  153e				   noRaiseOctave
     75  153e		       8d b1 70 	      sta	playNoteArray+1
     76  1541							;lda noteNumArray
     77  1541		       ad 0c 70 	      lda	temp
     78  1544		       ae 1d 70 	      ldx	soundMode
     79  1547		       e0 21		      cpx	#MODE_MONO2
     80  1549		       f0 08		      beq	noDropOctave	; Skip shifting the octave in MONO2 mode
     81  154b		       38		      sec
     82  154c		       e9 0c		      sbc	#12
     83  154e		       b0 03		      bcs	noDropOctave	; If no borrow occurred then continue...
     84  1550		       ad 0c 70 	      lda	temp	; Borrow occurred, so don't drop octave
     85  1553							;-------------------------------------
     86  1553				   noDropOctave
     87  1553		       8d b2 70 	      sta	playNoteArray+2
     88  1556		       4c 5f 15 	      jmp	doubleToStereo
     89  1559				   monoMute
     90  1559		       8d b1 70 	      sta	playNoteArray+1
     91  155c		       8d b2 70 	      sta	playNoteArray+2
     92  155f
     93  155f				   doubleToStereo
     94  155f		       ad b0 70 	      lda	playNoteArray+0
     95  1562		       8d b3 70 	      sta	playNoteArray+3
     96  1565		       ad b1 70 	      lda	playNoteArray+1
     97  1568		       8d b4 70 	      sta	playNoteArray+4
     98  156b		       ad b2 70 	      lda	playNoteArray+2
     99  156e		       8d b5 70 	      sta	playNoteArray+5
    100  1571
    101  1571							;;- NEW! ------------------------------;;
    102  1571		       ad 1d 70 	      lda	soundMode
    103  1574		       29 10		      and	#PORT_MASK
    104  1576		       f0 03		      beq	continueToSixVoice7
    105  1578		       4c 9d 19 	      jmp	portPlayer	; SKIP TO PLAYER
    106  157b							;jmp playPort ; ORIGINAL
    107  157b							;;-------------------------------------;;
    108  157b
    109  157b				   continueToSixVoice7
    110  157b		       4c 88 18 	      jmp	sixVoicePlayer
    111  157e
    112  157e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    113  157e							; 5THS SOUND DRIVER (DEFAULT)
    114  157e							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    115  157e				   playFifths
    116  157e							;jmp polyMode ; DEBUG!
    117  157e		       20 ed 20 	      jsr	doSort
    118  1581		       a2 02		      ldx	#2
    119  1583				   fifthsCopyLoop
    120  1583		       bd a0 70 	      lda	noteNumArray,x
    121  1586		       9d b0 70 	      sta	playNoteArray,x
    122  1589		       ca		      dex
    123  158a		       10 f7		      bpl	fifthsCopyLoop
    124  158c							; Add 5th
    125  158c		       ad b0 70 	      lda	playNoteArray
    126  158f		       c9 ff		      cmp	#255
    127  1591		       f0 26		      beq	end5ths
    128  1593		       ad b1 70 	      lda	playNoteArray+1
    129  1596		       c9 ff		      cmp	#255
    130  1598		       d0 0c		      bne	checkThird
    131  159a							; Found a note and an empty slot, put 5th in second slot
    132  159a		       ad b0 70 	      lda	playNoteArray
    133  159d		       18		      clc
    134  159e		       69 07		      adc	#7
    135  15a0		       8d b1 70 	      sta	playNoteArray+1
    136  15a3		       4c b9 15 	      jmp	end5ths
    137  15a6
    138  15a6				   checkThird
    139  15a6		       ad b2 70 	      lda	playNoteArray+2
    140  15a9		       c9 ff		      cmp	#255
    141  15ab		       d0 0c		      bne	end5ths	; No empty slot, so no 5th
    142  15ad							; Third slot is free, so put 5th is 3rd slot
    143  15ad		       ad b1 70 	      lda	playNoteArray+1
    144  15b0		       18		      clc
    145  15b1		       69 07		      adc	#7
    146  15b3		       8d b2 70 	      sta	playNoteArray+2
    147  15b6		       4c b9 15 	      jmp	end5ths
    148  15b9
    149  15b9				   end5ths
    150  15b9		       ad b0 70 	      lda	playNoteArray+0
    151  15bc		       8d b3 70 	      sta	playNoteArray+3
    152  15bf		       ad b1 70 	      lda	playNoteArray+1
    153  15c2		       8d b4 70 	      sta	playNoteArray+4
    154  15c5		       ad b2 70 	      lda	playNoteArray+2
    155  15c8		       8d b5 70 	      sta	playNoteArray+5
    156  15cb
    157  15cb		       ad 1d 70 	      lda	soundMode
    158  15ce		       c9 02		      cmp	#MODE_5PORT
    159  15d0		       f0 03		      beq	playPort5th
    160  15d2		       4c 88 18 	      jmp	sixVoicePlayer
    161  15d5				   playPort5th
    162  15d5		       4c 9d 19 	      jmp	portPlayer
    163  15d8
    164  15d8
    165  15d8
    166  15d8
    167  15d8				   arpSpeedTable
    168  15d8		       03 07 0f 07*	      byte.b	%11,%111,%1111,%111,%11,%1,%11,%111,%1111,%11111,%111111
    169  15e3
    170  15e3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    171  15e3							; ARP STEREO SOUND DRIVER
    172  15e3							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    173  15e3				   playArp
    174  15e3
    175  15e3							; Figure out arp speed setting...
    176  15e3		       ad 1d 70 	      lda	soundMode
    177  15e6		       29 0f		      and	#$0F
    178  15e8		       aa		      tax
    179  15e9		       bd d8 15 	      lda	arpSpeedTable,x
    180  15ec		       8d 0c 70 	      sta	temp
    181  15ef
    182  15ef		       ae 1d 70 	      ldx	soundMode
    183  15f2		       e0 43		      cpx	#MODE_ARP4
    184  15f4		       f0 35		      beq	playArpDown
    185  15f6		       e0 44		      cpx	#MODE_ARP5
    186  15f8		       f0 31		      beq	playArpDown
    187  15fa
    188  15fa							;***********
    189  15fa							; ARP UP
    190  15fa							;***********
    191  15fa							; Increment arpOffset pointer...
    192  15fa		       ad 03 70 	      lda	Frame
    193  15fd		       2d 0c 70 	      and	temp	; Arp speed
    194  1600		       d0 03		      bne	skipArpAdvance
    195  1602		       ee 85 70 	      inc	arpOffset
    196  1605				   skipArpAdvance
    197  1605
    198  1605							; Sort note buffer
    199  1605		       20 ed 20 	      jsr	doSort
    200  1608
    201  1608							; Count the number of notes...
    202  1608		       a2 00		      ldx	#0
    203  160a		       a9 ff		      lda	#255
    204  160c				   noteCount
    205  160c		       dd a0 70 	      cmp	noteNumArray,x
    206  160f		       f0 06		      beq	quitNoteCount
    207  1611		       e8		      inx
    208  1612		       ec 80 70 	      cpx	bufferSize
    209  1615		       d0 f5		      bne	noteCount
    210  1617				   quitNoteCount
    211  1617							; X now contains the note count
    212  1617
    213  1617							; Make sure arpOffset isn't past end...
    214  1617		       ca		      dex
    215  1618		       ec 85 70 	      cpx	arpOffset
    216  161b		       10 05		      bpl	noArpOffsetReset
    217  161d		       a9 00		      lda	#0	; Reset to zero
    218  161f		       8d 85 70 	      sta	arpOffset
    219  1622				   noArpOffsetReset
    220  1622
    221  1622							; Play single arp note...
    222  1622		       ac 85 70 	      ldy	arpOffset
    223  1625		       b9 a0 70 	      lda	noteNumArray,y
    224  1628
    225  1628		       4c 26 15 	      jmp	playMonoWithA
    226  162b
    227  162b							;lda soundMode
    228  162b							;and #PORT_MASK
    229  162b							;beq nextSoundModeCheck2
    230  162b							;jmp playPort
    231  162b
    232  162b
    233  162b							;***********
    234  162b							; ARP DOWN
    235  162b							;***********
    236  162b				   playArpDown
    237  162b							; Decrement arpOffset pointer...
    238  162b		       ad 03 70 	      lda	Frame
    239  162e		       2d 0c 70 	      and	temp	; Arp speed
    240  1631		       d0 03		      bne	skipArpAdvance2
    241  1633		       ce 85 70 	      dec	arpOffset
    242  1636				   skipArpAdvance2
    243  1636
    244  1636							; Sort note buffer
    245  1636		       20 ed 20 	      jsr	doSort
    246  1639
    247  1639							; Count the number of notes...
    248  1639		       a2 00		      ldx	#0
    249  163b		       a9 ff		      lda	#255
    250  163d				   noteCount2
    251  163d		       dd a0 70 	      cmp	noteNumArray,x
    252  1640		       f0 06		      beq	quitNoteCount2
    253  1642		       e8		      inx
    254  1643		       ec 80 70 	      cpx	bufferSize
    255  1646		       30 f5		      bmi	noteCount2
    256  1648				   quitNoteCount2
    257  1648							; X now contains the note count
    258  1648		       8e 0c 70 	      stx	temp
    259  164b
    260  164b							; Make sure arpOffset isn't at zero...
    261  164b		       ad 85 70 	      lda	arpOffset
    262  164e		       10 09		      bpl	noArpOffsetReset2
    263  1650		       ae 0c 70 	      ldx	temp	; Reset arpOffset to end of available notes
    264  1653		       f0 01		      beq	skipTempDecrement
    265  1655		       ca		      dex
    266  1656				   skipTempDecrement
    267  1656		       8e 85 70 	      stx	arpOffset
    268  1659				   noArpOffsetReset2
    269  1659
    270  1659							; Play single arp note...
    271  1659		       ac 85 70 	      ldy	arpOffset
    272  165c		       b9 a0 70 	      lda	noteNumArray,y
    273  165f
    274  165f		       4c 26 15 	      jmp	playMonoWithA
    275  1662
    276  1662
    277  1662							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    278  1662							; 6-CHANNEL MONO SOUND DRIVER
    279  1662							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    280  1662				   play6Chan
    281  1662		       ad a0 70 	      lda	noteNumArray+0
    282  1665		       8d b0 70 	      sta	playNoteArray+0
    283  1668		       ad a1 70 	      lda	noteNumArray+1
    284  166b		       8d b4 70 	      sta	playNoteArray+4
    285  166e		       ad a2 70 	      lda	noteNumArray+2
    286  1671		       8d b2 70 	      sta	playNoteArray+2
    287  1674
    288  1674		       ad a3 70 	      lda	noteNumArray+3
    289  1677		       8d b3 70 	      sta	playNoteArray+3
    290  167a		       ad a4 70 	      lda	noteNumArray+4
    291  167d		       8d b1 70 	      sta	playNoteArray+1
    292  1680		       ad a5 70 	      lda	noteNumArray+5
    293  1683		       8d b5 70 	      sta	playNoteArray+5
    294  1686
    295  1686		       4c 88 18 	      jmp	sixVoicePlayer
    296  1689
    297  1689
    298  1689				   retuneNoteShiftTable
    299  1689		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2
    300  16a2		       02 03 03 03*	      byte.b	2,3,3,3,3, 3,3,3,3,3, 3,4,4,4,4, 4,4,4,4,4, 4,5,5,5,5
    301  16bb		       05 05 05 05*	      byte.b	5,5,5,5,5, 5,6,6,6,6, 6,6,6,6,6, 6,7,7,7,7, 7,7,7,7,7
    302  16d4		       07 08 08 08*	      byte.b	7,8,8,8,8, 8,8,8,8,8, 8,9,9,9,9, 9,9,9,9,9, 9,$A,$A,$A
    303  16ec		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    304  16f2		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    305  170b		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    306  1724
    307  1724							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    308  1724							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
    309  1724							;byte 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, -1,-1,-1,-1,-1
    310  1724							;byte -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, -1,-1,-1,-1,-1, 0,0,0,0,0, 0,0,0,0,0
    311  1724		       f6 f6 f6 f6*	      byte.b	$F6,$F6,$F6,$F6,$F6, $F6,$F7,$F7,$F7,$F7, $F7,$F7,$F7,$F7,$F7, $F7,$F8,$F8,$F8,$F8, $F8,$F8,$F8,$F8,$F8
    312  173d		       f8 f9 f9 f9*	      byte.b	$F8,$F9,$F9,$F9,$F9, $F9,$F9,$F9,$F9,$F9, $F9,$FA,$FA,$FA,$FA, $FA,$FA,$FA,$FA,$FA, $FA,$FB,$FB,$FB,$FB
    313  1756		       fb fb fb fb*	      byte.b	$FB,$FB,$FB,$FB,$FB, $FB,$FC,$FC,$FC,$FC, $FC,$FC,$FC,$FC,$FC, $FC,$FD,$FD,$FD,$FD, $FD,$FD,$FD,$FD,$FD
    314  176f		       fd fe fe fe*	      byte.b	$FD,$FE,$FE,$FE,$FE, $FE,$FE,$FE,$FE,$FE, $FE,$FF,$FF,$FF,$FF, $FF,$FF,$FF,$FF,$FF, $FF,$00,$00,$00,$00
    315  1788
    316  1788				   retuneTable
    317  1788		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    318  17a1		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    319  17ba		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    320  17d3		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    321  17ec		       00 00 00 00*	      byte.b	0,0,0, 0,0,0	; FILLER 6
    322  17f2		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    323  180b		       00 00 00 00*	      byte.b	0,0,0,0,0, 0,1,1,1,1, 1,1,1,1,1, 1,2,2,2,2, 2,2,2,2,2	; FILLER 25
    324  1824		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    325  183d		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    326  1856		       00 01 02 03*	      byte.b	0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4
    327  186f		       05 fc fd fe*	      byte.b	5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    328  1888							;byte 5,-4,-3,-2,-1, 0,1,-4,-4,-4, -4,-4,-3,-2,-1, 0,1,2,3,4, 5,-4,-3,-2,-1
    329  1888
    330  1888							;************************************************
    331  1888							; 6-VOICE SOUND DRIVER
    332  1888							;************************************************
    333  1888				   sixVoicePlayer
    334  1888
    335  1888							;inc 1024 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    336  1888
    337  1888							; Calculate master tuning...
    338  1888		       ad f3 70 	      lda	systemTuning
    339  188b		       18		      clc
    340  188c		       6d f0 70 	      adc	midiTuning
    341  188f		       8d f4 70 	      sta	masterTuning
    342  1892		       a8		      tay
    343  1893
    344  1893							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    345  1893							; DEBUG - SHOW TUNING DATA
    346  1893				  -	      IF	DEBUG_DISPLAY=1
    347  1893				  -	      tya
    348  1893				  -	      sta	temp
    349  1893				  -	      ldy	#20
    350  1893				  -	      ldx	#20
    351  1893				  -	      jsr	displayHex
    352  1893				  -	      lda	temp
    353  1893				  -	      ldy	temp
    354  1893					      ENDIF
    355  1893							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  1893
    357  1893		       b9 88 17 	      lda	retuneTable,y	; Set tuning adjustment pointers based on final tuning...
    358  1896		       18		      clc
    359  1897		       69 04		      adc	#4	; Adjust current table format to tuning format (the table should be redone to fix this)
    360  1899
    361  1899							;inc 1025 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    362  1899
    363  1899							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    364  1899							; DEBUG - SHOW TUNING DATA
    365  1899				  -	      IF	DEBUG_DISPLAY=1
    366  1899				  -	      sta	temp
    367  1899				  -	      ldy	#21
    368  1899				  -	      ldx	#20
    369  1899				  -	      jsr	displayHex
    370  1899				  -	      lda	temp
    371  1899				  -	      ldy	temp
    372  1899					      ENDIF
    373  1899							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    374  1899
    375  1899		       a8		      tay
    376  189a		       b9 8f 33 	      lda	tuneArrPtrLL,y	; Set the tuning pointers...
    377  189d		       85 22		      sta	tunePtrL
    378  189f		       b9 99 33 	      lda	tuneArrPtrLH,y
    379  18a2		       85 23		      sta	tunePtrL+1
    380  18a4		       b9 a3 33 	      lda	tuneArrPtrHL,y
    381  18a7		       85 24		      sta	tunePtrH
    382  18a9		       b9 ad 33 	      lda	tuneArrPtrHH,y
    383  18ac		       85 25		      sta	tunePtrH+1
    384  18ae
    385  18ae							;inc 1026 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    386  18ae
    387  18ae							; Look up note shift from master tuning...
    388  18ae		       ac f4 70 	      ldy	masterTuning
    389  18b1		       b9 89 16 	      lda	retuneNoteShiftTable,y	; Offset the note based on the current tuning shift
    390  18b4		       8d f6 70 	      sta	noteShift
    391  18b7							; - - - - - - - - - - - - -
    392  18b7		       a2 05		      ldx	#5
    393  18b9				   shiftNoteLoop
    394  18b9		       bd b0 70 	      lda	playNoteArray,x
    395  18bc		       c9 ff		      cmp	#255
    396  18be		       f0 07		      beq	skipShiftNote
    397  18c0		       18		      clc
    398  18c1		       6d f6 70 	      adc	noteShift
    399  18c4		       9d b0 70 	      sta	playNoteArray,x
    400  18c7				   skipShiftNote
    401  18c7		       ca		      dex
    402  18c8		       10 ef		      bpl	shiftNoteLoop
    403  18ca
    404  18ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  18ca							; DEBUG - SHOW TUNING DATA
    406  18ca				  -	      IF	DEBUG_DISPLAY=1
    407  18ca				  -	      sta	temp
    408  18ca				  -	      ldy	#22
    409  18ca				  -	      ldx	#20
    410  18ca				  -	      jsr	displayHex
    411  18ca				  -	      lda	temp
    412  18ca				  -	      ldy	temp
    413  18ca					      ENDIF
    414  18ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    415  18ca
    416  18ca							; For each voice on SID #1...
    417  18ca		       a2 02		      ldx	#2
    418  18cc				   NsetRegsSidA
    419  18cc		       8e 0c 70 	      stx	temp	; save current voice number
    420  18cf		       bc b0 70 	      ldy	playNoteArray,x	; get next note to be played
    421  18d2		       bd 12 29 	      lda	voiceOffset,x	;
    422  18d5		       aa		      tax
    423  18d6		       c0 ff		      cpy	#255
    424  18d8		       d0 04		      bne	NsoundOnSidA
    425  18da		       a9 00		      lda	#0
    426  18dc		       f0 3f		      beq	NsoundOffSidA
    427  18de				   NsoundOnSidA
    428  18de
    429  18de							;inc 1027 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    430  18de
    431  18de							; load note and deal
    432  18de							; with tuning ------;
    433  18de		       ad 61 70 	      lda	NTSCmode	;
    434  18e1		       f0 14		      beq	palPlaySidA	;
    435  18e3				   ntscPlaySidA 		;
    436  18e3		       18		      clc		;
    437  18e4		       b9 fb 33 	      lda	NSoundLArr,y	;
    438  18e7		       71 22		      adc	(tunePtrL),y	;
    439  18e9		       8d 43 70 	      sta	pitchTmpL	;
    440  18ec		       b9 43 34 	      lda	NSoundHArr,y	;
    441  18ef		       71 24		      adc	(tunePtrH),y	;
    442  18f1		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    443  18f4		       4c 08 19 	      jmp	skipPalPlaySidA	;
    444  18f7							;- - - - - - - - -;
    445  18f7				   palPlaySidA		;
    446  18f7		       18		      clc		;
    447  18f8		       b9 8b 34 	      lda	PSoundLArr,y	;
    448  18fb		       71 22		      adc	(tunePtrL),y	;
    449  18fd		       8d 43 70 	      sta	pitchTmpL	;
    450  1900		       b9 de 34 	      lda	PSoundHArr,y	;
    451  1903		       71 24		      adc	(tunePtrH),y	;
    452  1905		       8d 44 70 	      sta	pitchTmpH	;
    453  1908				   skipPalPlaySidA		;;;;;
    454  1908
    455  1908							;inc 1024+40 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    456  1908							;lda shiftL1
    457  1908							;sta 1024+120
    458  1908							;lda shiftH1
    459  1908							;sta 1025+120
    460  1908
    461  1908							; play SID #1
    462  1908		       18		      clc
    463  1909		       ad 43 70 	      lda	pitchTmpL
    464  190c		       6d 25 70 	      adc	shiftL1	; add LFO/bend/tuning offset
    465  190f		       9d 00 d4 	      sta	SID1+SV1FL,x	; set low freq
    466  1912		       ad 44 70 	      lda	pitchTmpH
    467  1915		       6d 26 70 	      adc	shiftH1	; add LFO/bend/tuning offset
    468  1918		       9d 01 d4 	      sta	SID1+SV1FH,x	; set high freq
    469  191b
    470  191b		       a9 01		      lda	#1
    471  191d							; Set voice gates on or off
    472  191d				   NsoundOffSidA
    473  191d		       1d 30 70 	      ora	WaveType,x	; changed to Y
    474  1920		       9d 04 d4 	      sta	SID1+SV1WAVE,x	; SID 1 ONLY  changed to Y
    475  1923							;sta SID2+SV1WAVE,y ; changed to Y (why was this line disabled?)
    476  1923		       9d 04 71 	      sta	sidData+SV1WAVE,x	;BUG BUG BUG BUG BUG BUG  changed to Y
    477  1926		       ae 0c 70 	      ldx	temp
    478  1929		       ca		      dex
    479  192a		       30 03		      bmi	quitPlayLoop
    480  192c		       4c cc 18 	      jmp	NsetRegsSidA
    481  192f				   quitPlayLoop
    482  192f
    483  192f							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    484  192f							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    485  192f							; For each voice on SID #2...
    486  192f		       a2 02		      ldx	#2
    487  1931				   NsetRegsSidB
    488  1931		       8e 0c 70 	      stx	temp
    489  1934							;lda playNoteArray+3,x
    490  1934
    491  1934		       bc b3 70 	      ldy	playNoteArray+3,x	; get next note to be played
    492  1937		       bd 12 29 	      lda	voiceOffset,x
    493  193a
    494  193a		       aa		      tax
    495  193b		       c0 ff		      cpy	#255
    496  193d		       d0 04		      bne	NsoundOnSidB
    497  193f		       a9 00		      lda	#0
    498  1941		       f0 3f		      beq	NsoundOffSidB
    499  1943				   NsoundOnSidB
    500  1943
    501  1943							; load note and deal
    502  1943							; with tuning ------;
    503  1943		       ad 61 70 	      lda	NTSCmode	;
    504  1946		       f0 14		      beq	palPlaySidB	;
    505  1948				   ntscPlaySidB 		;
    506  1948		       18		      clc		;
    507  1949		       b9 fb 33 	      lda	NSoundLArr,y	;
    508  194c		       71 22		      adc	(tunePtrL),y	;
    509  194e		       8d 43 70 	      sta	pitchTmpL	;
    510  1951		       b9 43 34 	      lda	NSoundHArr,y	;
    511  1954		       71 24		      adc	(tunePtrH),y	;
    512  1956		       8d 44 70 	      sta	pitchTmpH	;	PAL/NTSC split
    513  1959		       4c 6d 19 	      jmp	skipPalPlaySidB	;
    514  195c				   palPlaySidB		;
    515  195c		       18		      clc		;
    516  195d		       b9 8b 34 	      lda	PSoundLArr,y	;
    517  1960		       71 22		      adc	(tunePtrL),y	;
    518  1962		       8d 43 70 	      sta	pitchTmpL	;
    519  1965		       b9 de 34 	      lda	PSoundHArr,y	;
    520  1968		       71 24		      adc	(tunePtrH),y	;
    521  196a		       8d 44 70 	      sta	pitchTmpH	;
    522  196d				   skipPalPlaySidB		;;;;;
    523  196d
    524  196d							; play SID #2
    525  196d		       18		      clc
    526  196e		       ad 43 70 	      lda	pitchTmpL
    527  1971		       6d 27 70 	      adc	shiftL2	; add LFO/bend/tuning offset
    528  1974		       9d 20 d4 	      sta	SID2+SV1FL,x	; set low freq
    529  1977		       ad 44 70 	      lda	pitchTmpH
    530  197a		       6d 28 70 	      adc	shiftH2	; add LFO/bend/tuning offset
    531  197d		       9d 21 d4 	      sta	SID2+SV1FH,x	; set high freq
    532  1980
    533  1980		       a9 01		      lda	#1
    534  1982							; Set voice gates on or off
    535  1982				   NsoundOffSidB
    536  1982		       1d 30 70 	      ora	WaveType,x	; changed to Y
    537  1985							;sta SID1+SV1WAVE,x ; changed to Y
    538  1985		       9d 24 d4 	      sta	SID2+SV1WAVE,x	; SID2 ONLY changed to Y
    539  1988		       9d 04 71 	      sta	sidData+SV1WAVE,x	; changed to Y
    540  198b		       ae 0c 70 	      ldx	temp
    541  198e		       ca		      dex
    542  198f		       10 a0		      bpl	NsetRegsSidB
    543  1991
    544  1991							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    545  1991							;~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-
    546  1991		       60		      rts
    547  1992
    548  1992
    549  1992
    550  1992							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    551  1992							; PORTAMENTO SOUND SETUP
    552  1992							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    553  1992				   playPort
    554  1992
    555  1992		       a2 02		      ldx	#2
    556  1994				   portCopyLoop
    557  1994		       bd a0 70 	      lda	noteNumArray,x
    558  1997		       9d b0 70 	      sta	playNoteArray,x
    559  199a		       ca		      dex
    560  199b		       10 f7		      bpl	portCopyLoop
    561  199d
    562  199d							;lda noteNumArray+0 ; Duplicate notes on second SID for stereo
    563  199d							;sta playNoteArray+3
    564  199d							;lda noteNumArray+1
    565  199d							;sta playNoteArray+4
    566  199d							;lda noteNumArray+2
    567  199d							;sta playNoteArray+5
    568  199d
    569  199d							;jmp sixVoicePlayer
    570  199d
    571  199d							;jmp portPlayer
    572  199d
    573  199d
    574  199d
    575  199d							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    576  199d							; PORTAMENTO 3-VOICE SOUND DRIVER
    577  199d							;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    578  199d				   portPlayer
    579  199d							; set up pointer to portamento speed array
    580  199d							; (which is the tuning array)
    581  199d		       a2 02		      ldx	#2
    582  199f				   portLoop
    583  199f		       bc b0 70 	      ldy	playNoteArray,x
    584  19a2							;ldy KeyA,x
    585  19a2		       c0 ff		      cpy	#255
    586  19a4		       d0 03		      bne	noPlayNote
    587  19a6		       4c b9 19 	      jmp	playNote
    588  19a9				   noPlayNote
    589  19a9		       ad 03 70 	      lda	Frame
    590  19ac		       29 01		      and	#1
    591  19ae		       f0 03		      beq	noPlayNote2
    592  19b0		       4c b9 19 	      jmp	playNote
    593  19b3				   noPlayNote2
    594  19b3
    595  19b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  19b3							; DEBUG - SHOW DATA
    597  19b3				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    598  19b3				  -	      lda	pitchHA,x	;
    599  19b3				  -	      stx	tempX
    600  19b3				  -	      sty	tempY
    601  19b3				  -	      sta	tempA
    602  19b3				  -			;- - - - -
    603  19b3				  -			;sta temp
    604  19b3				  -	      ldx	#20
    605  19b3				  -	      ldy	#6
    606  19b3				  -	      jsr	displayHex
    607  19b3				  -			;lda temp
    608  19b3				  -			;ldy temp
    609  19b3				  -			;- - - - -
    610  19b3				  -	      ldx	tempX
    611  19b3				  -	      ldy	tempY
    612  19b3				  -	      lda	tempA
    613  19b3					      ENDIF
    614  19b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    615  19b3
    616  19b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    617  19b3							; DEBUG - SHOW DATA
    618  19b3				  -	      IF	DEBUG_SHOW_PORTAMENTO=1
    619  19b3				  -	      lda	NSoundHArr,y	;
    620  19b3				  -	      stx	tempX
    621  19b3				  -	      sty	tempY
    622  19b3				  -	      sta	tempA
    623  19b3				  -			;- - - - -
    624  19b3				  -			;sta temp
    625  19b3				  -	      ldx	#20
    626  19b3				  -	      ldy	#7
    627  19b3				  -	      jsr	displayHex
    628  19b3				  -			;lda temp
    629  19b3				  -			;ldy temp
    630  19b3				  -			;- - - - -
    631  19b3				  -	      ldx	tempX
    632  19b3				  -	      ldy	tempY
    633  19b3				  -	      lda	tempA
    634  19b3					      ENDIF
    635  19b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    636  19b3
    637  19b3
    638  19b3		       20 11 1a 	      jsr	updatePortPosition
    639  19b6		       20 11 1a 	      jsr	updatePortPosition
    640  19b9
    641  19b9
    642  19b9				   playNote
    643  19b9
    644  19b9							;inc 1024+80 ; DEBUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    645  19b9
    646  19b9							; deal with tuning
    647  19b9		       18		      clc
    648  19ba		       bd 16 70 	      lda	pitchLA,x
    649  19bd		       71 22		      adc	(tunePtrL),y
    650  19bf		       8d 43 70 	      sta	pitchTmpL
    651  19c2		       bd 19 70 	      lda	pitchHA,x
    652  19c5		       71 24		      adc	(tunePtrH),y
    653  19c7		       8d 44 70 	      sta	pitchTmpH
    654  19ca
    655  19ca		       98		      tya		; Move the current key to ACC
    656  19cb		       bc 12 29 	      ldy	voiceOffset,x
    657  19ce		       c9 ff		      cmp	#255	; Check for note off
    658  19d0		       d0 04		      bne	soundOn
    659  19d2		       a9 00		      lda	#0
    660  19d4		       f0 28		      beq	soundOff
    661  19d6				   soundOn
    662  19d6
    663  19d6							;inc 1025+80 ; DEBUG !!!!!!!!!!!!!!!!!!!!
    664  19d6
    665  19d6							;lda shiftL1
    666  19d6							;sta 1024+120
    667  19d6							;lda shiftH1
    668  19d6							;sta 1025+120
    669  19d6
    670  19d6							; play SID #1
    671  19d6		       18		      clc
    672  19d7		       ad 43 70 	      lda	pitchTmpL
    673  19da		       6d 25 70 	      adc	shiftL1	; add in LFO/bend/tuning offset
    674  19dd		       99 00 d4 	      sta	SID1+SV1FL,y	; set low freq
    675  19e0		       ad 44 70 	      lda	pitchTmpH
    676  19e3		       6d 26 70 	      adc	shiftH1	; add in LFO/bend/tuning offset
    677  19e6		       99 01 d4 	      sta	SID1+SV1FH,y	; set high freq
    678  19e9
    679  19e9							; play SID #2
    680  19e9		       18		      clc
    681  19ea		       ad 43 70 	      lda	pitchTmpL
    682  19ed		       6d 27 70 	      adc	shiftL2	; add in LFO/bend/tuning offset
    683  19f0		       99 20 d4 	      sta	SID2+SV1FL,y	; set low freq
    684  19f3		       ad 44 70 	      lda	pitchTmpH
    685  19f6		       6d 28 70 	      adc	shiftH2	; add in LFO/bend/tuning offset
    686  19f9		       99 21 d4 	      sta	SID2+SV1FH,y	; set high freq
    687  19fc
    688  19fc				   afterDStep
    689  19fc
    690  19fc		       a9 01		      lda	#1
    691  19fe							; Set voice gates on or off
    692  19fe				   soundOff
    693  19fe							;ldy voiceOffset,x ; added this line for copying, but implemented above...
    694  19fe		       19 30 70 	      ora	WaveType,y
    695  1a01		       99 04 d4 	      sta	SID1+SV1WAVE,y
    696  1a04		       99 24 d4 	      sta	SID2+SV1WAVE,y
    697  1a07		       99 04 71 	      sta	sidData+SV1WAVE,y	; changed to Y
    698  1a0a
    699  1a0a		       ca		      dex
    700  1a0b		       30 03		      bmi	quitPort
    701  1a0d		       4c 9f 19 	      jmp	portLoop
    702  1a10				   quitPort
    703  1a10				   skipPort
    704  1a10		       60		      rts
    705  1a11							;--------------------------------------------------------------------
    706  1a11							;end of portamento play loop
    707  1a11							;--------------------------------------------------------------------
    708  1a11
    709  1a11
    710  1a11				   updatePortPosition
    711  1a11							;check portamn direction;
    712  1a11		       ad 61 70 	      lda	NTSCmode	;
    713  1a14		       f0 0c		      beq	palPortH	;
    714  1a16				   ntscPortH		;
    715  1a16		       bd 19 70 	      lda	pitchHA,x	;
    716  1a19		       d9 43 34 	      cmp	NSoundHArr,y	;
    717  1a1c		       f0 10		      beq	portCheckL	;
    718  1a1e		       30 2a		      bmi	portUp	; PAL/NTSC split
    719  1a20		       10 3e		      bpl	portDown	;
    720  1a22							;bpl portUp				; PAL/NTSC split
    721  1a22							;bmi portDown			;
    722  1a22				   palPortH		;
    723  1a22		       bd 19 70 	      lda	pitchHA,x	;
    724  1a25		       d9 de 34 	      cmp	PSoundHArr,y	;
    725  1a28		       f0 04		      beq	portCheckL	;
    726  1a2a		       30 1e		      bmi	portUp	;
    727  1a2c		       10 32		      bpl	portDown	;;;;;
    728  1a2e							;bpl portUp				;
    729  1a2e							;bmi portDown		;;;;;
    730  1a2e
    731  1a2e				   portCheckL
    732  1a2e
    733  1a2e							;check portamn lowbyte--;
    734  1a2e		       ad 61 70 	      lda	NTSCmode	;
    735  1a31		       f0 0d		      beq	palPortL	;
    736  1a33				   ntscPortL		;
    737  1a33		       bd 16 70 	      lda	pitchLA,x	;
    738  1a36		       d9 fb 33 	      cmp	NSoundLArr,y	;
    739  1a39		       f0 69		      beq	endPortUpdate
    740  1a3b							;beq playNote ; note on	;
    741  1a3b							;the stop so play	;
    742  1a3b		       b0 23		      bcs	portDown	; PAL/NTSC split
    743  1a3d							;bcs portUp			; PAL/NTSC split
    744  1a3d		       4c 4a 1a 	      jmp	skipPalPortL	;
    745  1a40				   palPortL		;
    746  1a40		       bd 16 70 	      lda	pitchLA,x	;
    747  1a43		       d9 8b 34 	      cmp	PSoundLArr,y	;
    748  1a46		       f0 5c		      beq	endPortUpdate
    749  1a48							;beq playNote ; note on	;
    750  1a48							;the stop so play	;
    751  1a48		       b0 16		      bcs	portDown	;
    752  1a4a							;bcs portUp				;
    753  1a4a				   skipPalPortL 		;;;;;
    754  1a4a
    755  1a4a
    756  1a4a				   portUp
    757  1a4a		       bd 16 70 	      lda	pitchLA,x
    758  1a4d		       18		      clc
    759  1a4e		       71 35		      adc	(portPtrL),y
    760  1a50		       9d 16 70 	      sta	pitchLA,x
    761  1a53		       bd 19 70 	      lda	pitchHA,x
    762  1a56		       71 47		      adc	(portPtrH),y
    763  1a58		       9d 19 70 	      sta	pitchHA,x
    764  1a5b							;inc 1025 ; DEBUG!!
    765  1a5b		       a9 00		      lda	#0	; indicate port direction
    766  1a5d		       4c 73 1a 	      jmp	oscCheck
    767  1a60				   portDown
    768  1a60		       bd 16 70 	      lda	pitchLA,x
    769  1a63		       38		      sec
    770  1a64		       f1 35		      sbc	(portPtrL),y
    771  1a66		       9d 16 70 	      sta	pitchLA,x
    772  1a69		       bd 19 70 	      lda	pitchHA,x
    773  1a6c		       f1 47		      sbc	(portPtrH),y
    774  1a6e		       9d 19 70 	      sta	pitchHA,x
    775  1a71							;inc 1024 ; DEBUG!!
    776  1a71		       a9 01		      lda	#1	; indicate port direction
    777  1a73
    778  1a73							; check for pitch oscillation
    779  1a73							; (which means it's at the correct note)
    780  1a73							; it's oscillating if: the port direction
    781  1a73							; has changed and the note hasn't.
    782  1a73				   oscCheck
    783  1a73		       dd 54 70 	      cmp	portLastDir,x
    784  1a76		       9d 54 70 	      sta	portLastDir,x	; save it for next time 'round
    785  1a79		       f0 29		      beq	skipOsc
    786  1a7b		       98		      tya
    787  1a7c		       dd 51 70 	      cmp	portLastNote,x
    788  1a7f		       9d 51 70 	      sta	portLastNote,x	; save it...
    789  1a82		       d0 20		      bne	skipOsc
    790  1a84
    791  1a84							; it's oscilating at;
    792  1a84							; the note, so lock ;
    793  1a84							; it onto the actual;
    794  1a84							; note				;
    795  1a84		       ad 61 70 	      lda	NTSCmode	;
    796  1a87		       f0 0f		      beq	palLock	;
    797  1a89				   ntscLock		;
    798  1a89		       b9 fb 33 	      lda	NSoundLArr,y	;
    799  1a8c		       9d 16 70 	      sta	pitchLA,x	;	PAL/NTSC split
    800  1a8f		       b9 43 34 	      lda	NSoundHArr,y	;
    801  1a92		       9d 19 70 	      sta	pitchHA,x	;
    802  1a95		       4c a4 1a 	      jmp	skipPalLock	;
    803  1a98				   palLock		;
    804  1a98		       b9 8b 34 	      lda	PSoundLArr,y	;
    805  1a9b		       9d 16 70 	      sta	pitchLA,x	;
    806  1a9e		       b9 de 34 	      lda	PSoundHArr,y	;
    807  1aa1		       9d 19 70 	      sta	pitchHA,x	;
    808  1aa4				   skipPalLock		;;;;;
    809  1aa4
    810  1aa4				   skipOsc
    811  1aa4				   endPortUpdate
    812  1aa4		       60		      rts
    813  1aa5
------- FILE cynthcart2.0.1.asm
------- FILE cynth_keyboard.asm LEVEL 2 PASS 2
      0  1aa5					      include	"cynth_keyboard.asm"
      1  1aa5							;------------------------------------------
      2  1aa5							; Read the keyboard
      3  1aa5							;------------------------------------------
      4  1aa5				   readKeyboard
      5  1aa5							; Keyboard read setup
      6  1aa5		       a9 7f		      lda	#127
      7  1aa7		       8d 0d dc 	      sta	56333
      8  1aaa
      9  1aaa							;------------------------------------------
     10  1aaa							; determine which keyset to use
     11  1aaa							; (raw/shift/commodorekey/runstop)
     12  1aaa							;------------------------------------------
     13  1aaa
     14  1aaa							; default is raw key functions (no modified keys)
     15  1aaa		       a9 e2		      lda	#<rawKeyFunctions	;-
     16  1aac		       85 c2		      sta	keyPtrL	;
     17  1aae		       a9 21		      lda	#>rawKeyFunctions	;
     18  1ab0		       85 c3		      sta	keyPtrH	;-
     19  1ab2
     20  1ab2							; Check for Shift/C=
     21  1ab2		       a9 bf		      lda	#~64	; (Right Shift)
     22  1ab4		       8d 00 dc 	      sta	56320
     23  1ab7		       ad 01 dc 	      lda	56321
     24  1aba		       29 10		      and	#16
     25  1abc		       d0 08		      bne	notAltKeys	;-
     26  1abe		       a9 56		      lda	#<shiftKeyFunctions	;
     27  1ac0		       85 c2		      sta	keyPtrL	;
     28  1ac2		       a9 23		      lda	#>shiftKeyFunctions	;-
     29  1ac4		       85 c3		      sta	keyPtrH
     30  1ac6				   notAltKeys
     31  1ac6		       a9 fd		      lda	#~2	; (Left Shift)
     32  1ac8		       8d 00 dc 	      sta	56320
     33  1acb		       ad 01 dc 	      lda	56321
     34  1ace		       29 80		      and	#128
     35  1ad0		       d0 0b		      bne	notAltKeys2	;-
     36  1ad2		       a9 56		      lda	#<shiftKeyFunctions	;
     37  1ad4		       85 c2		      sta	keyPtrL	;
     38  1ad6		       a9 23		      lda	#>shiftKeyFunctions	;-
     39  1ad8		       85 c3		      sta	keyPtrH
     40  1ada		       4c df 1b 	      jmp	doKeyCheck
     41  1add				   notAltKeys2
     42  1add		       a9 7f		      lda	#~128	; (C= key)
     43  1adf		       8d 00 dc 	      sta	56320
     44  1ae2		       ad 01 dc 	      lda	56321
     45  1ae5		       29 20		      and	#32
     46  1ae7		       d0 08		      bne	notAltKeys3
     47  1ae9		       a9 d2		      lda	#<commKeyFunctions	;-
     48  1aeb		       85 c2		      sta	keyPtrL	;
     49  1aed		       a9 23		      lda	#>commKeyFunctions	;
     50  1aef		       85 c3		      sta	keyPtrH	;-
     51  1af1				   notAltKeys3
     52  1af1		       a9 7f		      lda	#~128	; (Run Stop)
     53  1af3		       8d 00 dc 	      sta	56320
     54  1af6		       ad 01 dc 	      lda	56321
     55  1af9		       29 80		      and	#128
     56  1afb		       d0 08		      bne	notAltKeys4
     57  1afd		       a9 4e		      lda	#<runstopKeyFunctions	;-
     58  1aff		       85 c2		      sta	keyPtrL	;
     59  1b01		       a9 24		      lda	#>runstopKeyFunctions	;
     60  1b03		       85 c3		      sta	keyPtrH	;-
     61  1b05				   notAltKeys4
     62  1b05		       a9 7f		      lda	#~128	; (CTRL key)
     63  1b07		       8d 00 dc 	      sta	56320
     64  1b0a		       ad 01 dc 	      lda	56321
     65  1b0d		       29 04		      and	#4	; CTRL
     66  1b0f							;and #2 ; BACK ARROW
     67  1b0f		       d0 08		      bne	notAltKeys5
     68  1b11		       a9 da		      lda	#<CTRLKeyFunctions	;-
     69  1b13		       85 c2		      sta	keyPtrL	;
     70  1b15		       a9 22		      lda	#>CTRLKeyFunctions	;
     71  1b17		       85 c3		      sta	keyPtrH	;-
     72  1b19				   notAltKeys5
     73  1b19
     74  1b19							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75  1b19				  -	      if	DEBUG_DISABLE_KEY_TIMER=1
     76  1b19				  -	      lda	#0
     77  1b19				  -	      sta	keyTimer	; DEBUG!  Disable key timer
     78  1b19					      ENDIF
     79  1b19							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  1b19
     81  1b19							; handle keytimer
     82  1b19							; (to avoid accidental keypresses on shifted keys)
     83  1b19		       ad 58 70 	      lda	keyTimer
     84  1b1c		       f0 06		      beq	readKeys
     85  1b1e		       ce 58 70 	      dec	keyTimer
     86  1b21		       4c 24 1b 	      jmp	startCheck
     87  1b24				   readKeys
     88  1b24
     89  1b24							;********************************
     90  1b24							; Check for Notes Being Pressed
     91  1b24							;********************************
     92  1b24				   startCheck
     93  1b24		       a9 00		      lda	#0
     94  1b26		       8d 9b 70 	      sta	keyCount
     95  1b29
     96  1b29							; Save last notes and clear note buffer
     97  1b29		       ae 80 70 	      ldx	bufferSize
     98  1b2c							;dex
     99  1b2c		       e8		      inx
    100  1b2d		       e8		      inx
    101  1b2e				   clearKeys
    102  1b2e		       bd d0 70 	      lda	kbBuffer,x
    103  1b31				  -	      IF	DEBUG_DISPLAY=1
    104  1b31				  -	      sta	1024+40*20+5,x	; DEBUG SHOW DATA
    105  1b31					      ENDIF
    106  1b31		       9d e0 70 	      sta	lastKbBuffer,x
    107  1b34		       a9 ff		      lda	#255
    108  1b36		       9d d0 70 	      sta	kbBuffer,x
    109  1b39		       ca		      dex
    110  1b3a		       10 f2		      bpl	clearKeys
    111  1b3c
    112  1b3c							;lda #255
    113  1b3c							;sta KeyA
    114  1b3c							;sta KeyB
    115  1b3c							;sta KeyC
    116  1b3c
    117  1b3c		       ae 80 70 	      ldx	bufferSize
    118  1b3f							;dex
    119  1b3f		       e8		      inx
    120  1b40		       e8		      inx
    121  1b41		       a0 00		      ldy	#0
    122  1b43							; check for note keys being pressed
    123  1b43				   checkLoop
    124  1b43		       b9 72 21 	      lda	col,y
    125  1b46		       f0 1c		      beq	quitCheck
    126  1b48		       8d 00 dc 	      sta	56320
    127  1b4b		       ad 01 dc 	      lda	56321
    128  1b4e		       39 8b 21 	      and	row,y
    129  1b51		       d0 0e		      bne	notPressed
    130  1b53		       98		      tya
    131  1b54		       18		      clc
    132  1b55		       6d 22 70 	      adc	keyOffset
    133  1b58							;sta KeyA,x
    134  1b58		       9d d0 70 	      sta	kbBuffer,x
    135  1b5b		       ca		      dex
    136  1b5c		       ee 9b 70 	      inc	keyCount
    137  1b5f		       30 03		      bmi	quitCheck
    138  1b61				   notPressed
    139  1b61		       c8		      iny
    140  1b62		       d0 df		      bne	checkLoop
    141  1b64
    142  1b64				   quitCheck
    143  1b64							;-- -- -- -- -- -- -- -- -- -- -- -- --
    144  1b64							; Generate note on/offs from keyboard data
    145  1b64							;-- -- -- -- -- -- -- -- -- -- -- -- --
    146  1b64							; FIND NOTE ONS...
    147  1b64		       ae 80 70 	      ldx	bufferSize
    148  1b67							;dex
    149  1b67		       e8		      inx
    150  1b68		       e8		      inx
    151  1b69				   noteOnCheck
    152  1b69		       bd d0 70 	      lda	kbBuffer,x	; Get next note from current kb buffer
    153  1b6c		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    154  1b6f							;dey
    155  1b6f		       c8		      iny
    156  1b70		       c8		      iny
    157  1b71				   innerNoteOnCheck
    158  1b71		       d9 e0 70 	      cmp	lastKbBuffer,y
    159  1b74		       f0 12		      beq	checkNextNote
    160  1b76		       88		      dey
    161  1b77		       10 f8		      bpl	innerNoteOnCheck
    162  1b79							;Found new note-on!
    163  1b79							;inc 53280
    164  1b79		       8d 81 70 	      sta	noteTempA
    165  1b7c		       8e 82 70 	      stx	noteTempB
    166  1b7f		       20 67 1e 	      jsr	doNoteOn
    167  1b82		       ad 81 70 	      lda	noteTempA
    168  1b85		       ae 82 70 	      ldx	noteTempB
    169  1b88							; TODO: call note on function
    170  1b88				   checkNextNote
    171  1b88		       ca		      dex
    172  1b89		       10 de		      bpl	noteOnCheck
    173  1b8b
    174  1b8b							; FIND NOTE OFF...
    175  1b8b		       ae 80 70 	      ldx	bufferSize
    176  1b8e							;dex
    177  1b8e		       e8		      inx
    178  1b8f		       e8		      inx
    179  1b90				   noteOnCheck2
    180  1b90		       bd e0 70 	      lda	lastKbBuffer,x	; Get next note from last kb buffer
    181  1b93		       ac 80 70 	      ldy	bufferSize	; Set up loop to scan for note in lastKbBuffer...
    182  1b96							;dey
    183  1b96		       c8		      iny
    184  1b97		       c8		      iny
    185  1b98				   innerNoteOnCheck2
    186  1b98		       d9 d0 70 	      cmp	kbBuffer,y
    187  1b9b		       f0 12		      beq	checkNextNote2
    188  1b9d		       88		      dey
    189  1b9e		       10 f8		      bpl	innerNoteOnCheck2
    190  1ba0							;Found new note-on!
    191  1ba0							;inc 53280
    192  1ba0		       8d 81 70 	      sta	noteTempA
    193  1ba3		       8e 82 70 	      stx	noteTempB
    194  1ba6		       20 95 1e 	      jsr	doNoteOff
    195  1ba9		       ad 81 70 	      lda	noteTempA
    196  1bac		       ae 82 70 	      ldx	noteTempB
    197  1baf							; TODO: call note on function
    198  1baf				   checkNextNote2
    199  1baf		       ca		      dex
    200  1bb0		       10 de		      bpl	noteOnCheck2
    201  1bb2							;-- -- -- -- -- -- -- -- -- -- -- -- --
    202  1bb2							; End of note on/off generation
    203  1bb2							;-- -- -- -- -- -- -- -- -- -- -- -- --
    204  1bb2
    205  1bb2							; Skip key command check if 3 or more piano keys
    206  1bb2							; are held to avoid quirks with C64 keyboard
    207  1bb2							; matrix hardware.
    208  1bb2		       ae 9b 70 	      ldx	keyCount
    209  1bb5		       f0 0d		      beq	skipMinimalKeyboard
    210  1bb7							; default is raw key functions (no modified keys)
    211  1bb7		       a9 5e		      lda	#<minimalKeyFunctions	;-
    212  1bb9		       85 c2		      sta	keyPtrL	;
    213  1bbb		       a9 22		      lda	#>minimalKeyFunctions	;
    214  1bbd		       85 c3		      sta	keyPtrH	;-
    215  1bbf							; also disable keytimer...
    216  1bbf		       a9 00		      lda	#0
    217  1bc1		       8d 58 70 	      sta	keyTimer
    218  1bc4				   skipMinimalKeyboard
    219  1bc4
    220  1bc4							; Check key timer...
    221  1bc4		       ad 58 70 	      lda	keyTimer
    222  1bc7		       f0 01		      beq	contReadKeys
    223  1bc9		       60		      rts
    224  1bca				   contReadKeys
    225  1bca		       8e 66 70 	      stx	lastOsc
    226  1bcd
    227  1bcd							; Check for space bar (pitch bender)...
    228  1bcd		       a9 7f		      lda	#~$80
    229  1bcf		       8d 00 dc 	      sta	56320
    230  1bd2		       ad 01 dc 	      lda	56321
    231  1bd5		       29 10		      and	#$10
    232  1bd7		       d0 06		      bne	noSpace
    233  1bd9		       20 ef 0f 	      jsr	bendBender
    234  1bdc		       4c 2f 1c 	      jmp	skipKeyCheck
    235  1bdf				   noSpace
    236  1bdf
    237  1bdf
    238  1bdf				   doKeyCheck
    239  1bdf							;********************************
    240  1bdf							; Generic command key check
    241  1bdf							;********************************
    242  1bdf
    243  1bdf		       a2 3c		      ldx	#30*2	;28+1 keys to check, set and read value (2 bytes) for each key
    244  1be1				   keyChkLoop
    245  1be1		       bd a4 21 	      lda	commandKeys,x
    246  1be4		       8d 00 dc 	      sta	56320
    247  1be7		       ad 01 dc 	      lda	56321
    248  1bea		       3d a5 21 	      and	commandKeys+1,x
    249  1bed		       d0 3c		      bne	keyNotDown
    250  1bef
    251  1bef							; key down!
    252  1bef							;-----------
    253  1bef		       8a		      txa		;multiply x by 2
    254  1bf0		       0a		      asl		;  to get the offset
    255  1bf1		       a8		      tay		;  into the key functions array
    256  1bf2
    257  1bf2							; get address of function to call
    258  1bf2		       b1 c2		      lda	(keyPtrL),y
    259  1bf4		       8d 62 70 	      sta	temp16L
    260  1bf7		       c8		      iny
    261  1bf8		       b1 c2		      lda	(keyPtrL),y
    262  1bfa		       8d 63 70 	      sta	temp16H
    263  1bfd		       f0 2c		      beq	keyNotDown	;if the MSB address is zero, then there is
    264  1bff							;  no function assigned to this key so quit
    265  1bff
    266  1bff							; put return address onto stack to simulate JSR with a JMP()
    267  1bff		       a9 1c		      lda	#>returnAddress
    268  1c01		       48		      pha
    269  1c02		       a9 19		      lda	#<returnAddress
    270  1c04		       48		      pha
    271  1c05
    272  1c05							; save the value of X
    273  1c05		       8e 64 70 	      stx	saveX
    274  1c08
    275  1c08		       c8		      iny
    276  1c09		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for X
    277  1c0b		       8d 65 70 	      sta	keyTemp
    278  1c0e		       c8		      iny
    279  1c0f		       b1 c2		      lda	(keyPtrL),y	;get value to pass to function for A
    280  1c11		       a8		      tay
    281  1c12		       ad 65 70 	      lda	keyTemp
    282  1c15
    283  1c15							; indirect jump to function, which acts as a JSR since
    284  1c15							;   we pushed the return address onto the stack
    285  1c15		       6c 62 70 	      jmp	(temp16L)
    286  1c18
    287  1c18		       ea		      nop
    288  1c19				   returnAddress
    289  1c19		       ea		      nop
    290  1c1a
    291  1c1a		       ae 64 70 	      ldx	saveX	; restore X
    292  1c1d
    293  1c1d							; only set the keytimer when a raw key is used
    294  1c1d		       a5 c2		      lda	keyPtrL
    295  1c1f		       c9 e2		      cmp	#<rawKeyFunctions
    296  1c21		       f0 08		      beq	keyNotDown
    297  1c23
    298  1c23		       a9 28		      lda	#KEYTIME
    299  1c25		       8d 58 70 	      sta	keyTimer
    300  1c28							;-----------
    301  1c28		       4c 2f 1c 	      jmp	skipKeyCheck	; quit keycheck after a key is found
    302  1c2b
    303  1c2b				   keyNotDown
    304  1c2b		       ca		      dex
    305  1c2c		       ca		      dex
    306  1c2d		       10 b2		      bpl	keyChkLoop
    307  1c2f
    308  1c2f				   skipKeyCheck
    309  1c2f
    310  1c2f							; done
    311  1c2f		       60		      rts
------- FILE cynthcart2.0.1.asm
------- FILE cynth_midirecv.asm LEVEL 2 PASS 2
      0  1c30					      include	"cynth_midirecv.asm"
      1  1c30							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      2  1c30							; Read MIDI
      3  1c30							;=- =- =- =- =- =- =- =- =- =- =- =- -=
      4  1c30							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
      5  1c30					      IF	ENABLE_MIDI_COMMANDS=1
      6  1c30				   processMIDI
      7  1c30							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  1c30							; Debug - show main note buffer
      9  1c30				  -	      IF	DEBUG_DISPLAY=1
     10  1c30				  -	      lda	noteNumArray+0
     11  1c30				  -	      sta	1744+125
     12  1c30				  -	      lda	noteNumArray+1
     13  1c30				  -	      sta	1744+126
     14  1c30				  -	      lda	noteNumArray+2
     15  1c30				  -	      sta	1744+127
     16  1c30				  -	      lda	noteNumArray+3
     17  1c30				  -	      sta	1744+128
     18  1c30				  -
     19  1c30				  -	      lda	noteNumArray+4
     20  1c30				  -	      sta	1744+129
     21  1c30				  -	      lda	noteNumArray+5
     22  1c30				  -	      sta	1744+130
     23  1c30				  -	      lda	noteNumArray+6
     24  1c30				  -	      sta	1744+131
     25  1c30				  -	      lda	noteNumArray+7
     26  1c30				  -	      sta	1744+132
     27  1c30					      ENDIF
     28  1c30							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  1c30
     30  1c30							; get next MIDI byte
     31  1c30				   check
     32  1c30					      IF	ENABLE_MIDI_COMMANDS=1
     33  1c30		       ad 50 71 	      lda	midiEnabled
     34  1c33		       f0 03		      beq	skipMidiRead
     35  1c35		       20 c7 3a 	      jsr	midiRead	; Midi byte will be in A and Y
     36  1c38				   skipMidiRead
     37  1c38					      ENDIF
     38  1c38		       d0 03		      bne	continueReading
     39  1c3a		       4c b6 1e 	      jmp	endMIDI
     40  1c3d				   continueReading
     41  1c3d
     42  1c3d
     43  1c3d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  1c3d							; DEBUG - SHOW MIDI DATA
     45  1c3d				  -	      IF	DEBUG_DISPLAY=1
     46  1c3d				  -	      inc	1824+81
     47  1c3d				  -	      sta	temp
     48  1c3d				  -	      ldx	#34
     49  1c3d				  -	      ldy	debugOffset
     50  1c3d				  -	      iny
     51  1c3d				  -	      iny
     52  1c3d				  -	      iny
     53  1c3d				  -	      iny
     54  1c3d				  -	      iny
     55  1c3d				  -	      iny
     56  1c3d				  -	      jsr	displayHex
     57  1c3d				  -	      ldy	debugOffset
     58  1c3d				  -	      iny
     59  1c3d				  -	      tya
     60  1c3d				  -	      and	#$0F
     61  1c3d				  -	      sta	debugOffset
     62  1c3d				  -	      adc	#5
     63  1c3d				  -	      tay
     64  1c3d				  -	      lda	temp
     65  1c3d				  -	      ldy	temp
     66  1c3d					      ENDIF
     67  1c3d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  1c3d
     69  1c3d							; If bit 7 isn't set, then it's a running mode byte...
     70  1c3d		       10 68		      bpl	runningModeByte
     71  1c3f		       8d 7d 70 	      sta	savedMidiStatus	; Save MIDI status for potential running mode bytes
     72  1c42		       a8		      tay
     73  1c43		       29 f0		      and	#$F0
     74  1c45		       c9 f0		      cmp	#$F0
     75  1c47		       f0 0f		      beq	processSysex	;Skip saving status if it's sysex
     76  1c49							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     77  1c49
     78  1c49							;tya
     79  1c49
     80  1c49							; If bit 7 isn't set, then it's a running mode byte...
     81  1c49							;bpl runningModeByte
     82  1c49
     83  1c49
     84  1c49							;tay
     85  1c49							;and #$F0
     86  1c49							;cmp #$F0
     87  1c49							;beq processSysex ;Skip saving status if it's sysex
     88  1c49							;sta savedMidiStatus ; Save MIDI status for potential running mode bytes
     89  1c49							;skipSavingStatus ; <--- SEE WHAT CALLS THIS??? (ANSWER: NOTHING)
     90  1c49					      IF	ENABLE_MIDI_COMMANDS=1
     91  1c49		       20 ce 3a 	      jsr	midiReadWait	; Midi byte will be in A and Y
     92  1c4c					      ENDIF
     93  1c4c		       8d 7e 70 	      sta	firstDataByte	; Save second byte in MIDI sequence
     94  1c4f		       ad 7d 70 	      lda	savedMidiStatus
     95  1c52		       20 bf 1c 	      jsr	processMidiMessage	; handle the rest of the message...
     96  1c55		       4c 30 1c 	      jmp	check	; End of loop - - -
     97  1c58
     98  1c58				   processSysex
     99  1c58		       98		      tya		; Get systex byte
    100  1c59		       c9 f0		      cmp	#$F0	; ACTUAL SYSEX $F0
    101  1c5b		       d0 0a		      bne	checkF1
    102  1c5d				   sysexReadingLoop
    103  1c5d		       20 ce 3a 	      jsr	midiReadWait	; READ THE REST OF THE SYSEX UNTIL $F7...
    104  1c60		       c9 f7		      cmp	#$F7
    105  1c62		       d0 f9		      bne	sysexReadingLoop
    106  1c64		       4c 30 1c 	      jmp	check
    107  1c67							; - - - - - -
    108  1c67				   checkF1		; MIDI TIME CODE, HAS ONE EXTRA BYTE
    109  1c67		       c9 f1		      cmp	#$F1
    110  1c69		       d0 06		      bne	checkF2
    111  1c6b		       20 ce 3a 	      jsr	midiReadWait
    112  1c6e		       4c 30 1c 	      jmp	check
    113  1c71							; - - - - - -
    114  1c71				   checkF2		; SONG POSITION POINTER, 2 EXTRA BYTES
    115  1c71		       c9 f2		      cmp	#$F2
    116  1c73		       d0 09		      bne	checkF3
    117  1c75					      IF	ENABLE_MIDI_COMMANDS=1
    118  1c75		       20 ce 3a 	      jsr	midiReadWait
    119  1c78		       20 ce 3a 	      jsr	midiReadWait
    120  1c7b					      ENDIF
    121  1c7b		       4c 30 1c 	      jmp	check
    122  1c7e							; - - - - - -
    123  1c7e				   checkF3		; SONG SELECT, 1 EXTRA BYTE
    124  1c7e		       c9 f3		      cmp	#$F3
    125  1c80		       d0 09		      bne	checkF8
    126  1c82		       20 ce 3a 	      jsr	midiReadWait
    127  1c85		       4c 30 1c 	      jmp	check
    128  1c88							; - - - - - -
    129  1c88							; ALL OF THE REMAINING SYSTEM MESSAGES DON'T HAVE AN EXTRA BYTE
    130  1c88		       4c 30 1c 	      jmp	check
    131  1c8b
    132  1c8b
    133  1c8b				   checkF8
    134  1c8b		       c9 f8		      cmp	#$F8
    135  1c8d		       d0 03		      bne	checkFA
    136  1c8f							; NO EXTRA BYTES TO READ
    137  1c8f		       4c 30 1c 	      jmp	check
    138  1c92							; - - - - - -
    139  1c92				   checkFA
    140  1c92		       c9 fa		      cmp	#$FA
    141  1c94		       d0 03		      bne	checkFC
    142  1c96							; NO EXTRA BYTES TO READ
    143  1c96		       4c 30 1c 	      jmp	check
    144  1c99							; - - - - - -
    145  1c99				   checkFC
    146  1c99		       c9 fc		      cmp	#$FC
    147  1c9b		       d0 03		      bne	checkFF
    148  1c9d							; NO EXTRA BYTES TO READ
    149  1c9d		       4c 30 1c 	      jmp	check
    150  1ca0							; - - - - - -
    151  1ca0				   checkFF
    152  1ca0		       c9 ff		      cmp	#$FF
    153  1ca2		       d0 00		      bne	endSysex
    154  1ca4							;---- END SYSTEM/CLOCK ----
    155  1ca4				   endSysex
    156  1ca4		       4c 30 1c 	      jmp	check	; END, RESTART LOOP AND SEE IF THERE ARE ANY MORE MIDI MESSAGES...
    157  1ca7
    158  1ca7
    159  1ca7				   runningModeByte
    160  1ca7		       8d 7e 70 	      sta	firstDataByte	; save the data byte...
    161  1caa		       ad 7d 70 	      lda	savedMidiStatus	;  and load the last saved midi status byte
    162  1cad		       29 f0		      and	#$F0	; check for a system running byte (weird thing that happens with some midi adapters)
    163  1caf		       c9 f0		      cmp	#$F0
    164  1cb1		       d0 03		      bne	normalRunningMode
    165  1cb3							;lda firstDataByte  ; We'll ignore this running mode byte, so the data byte now becomes the status byte...
    166  1cb3							;jmp continueReading ; and jump back to the start of midi processing to process the data byte as the status byte...
    167  1cb3		       4c 30 1c 	      jmp	check
    168  1cb6							;-----------------------
    169  1cb6							;sta savedMidiStatus ; =-=-=-=- probably can delete these 3 lines \/
    170  1cb6							;jsr midiReadWait ; Now need to get a new "status byte"
    171  1cb6							;jmp runningModeByte
    172  1cb6
    173  1cb6				   normalRunningMode
    174  1cb6		       ad 7d 70 	      lda	savedMidiStatus	;  load the last saved midi status byte again
    175  1cb9		       20 bf 1c 	      jsr	processMidiMessage
    176  1cbc		       4c 30 1c 	      jmp	check
    177  1cbf
    178  1cbf				   processMidiMessage
    179  1cbf		       a8		      tay		; MIDI STATUS BYTE IS IN A, STASH IN Y
    180  1cc0
    181  1cc0							; CHECK CHANNEL NUMBER IF NOT IN OMNI MODE...
    182  1cc0		       ad f7 70 	      lda	midiMode
    183  1cc3		       30 16		      bmi	endChannelCheck	; IF NOT IN OMNI MODE THEN SKIP...
    184  1cc5		       98		      tya
    185  1cc6		       29 0f		      and	#$0F
    186  1cc8		       cd f7 70 	      cmp	midiMode	; IF EQUAL TO CURRENT CHANNEL SETTING
    187  1ccb		       f0 0e		      beq	endChannelCheck	; THEN CONTINUE TO NOTE PROCESSING...
    188  1ccd
    189  1ccd							;---------------------------------------------
    190  1ccd							; WRONG CHANNEL, SO PROCESS DUMMY NOTE/MESSAGE HERE
    191  1ccd							;---------------------------------------------
    192  1ccd		       98		      tya
    193  1cce		       09 40		      ora	#%01000000
    194  1cd0		       f0 05		      beq	twoParameters	; MESSAGE HAS TWO PARAMETERS
    195  1cd2		       98		      tya
    196  1cd3		       09 20		      ora	#%00100000
    197  1cd5		       f0 03		      beq	oneParameter	; MESSAGE HAS ONE PARAMETER
    198  1cd7
    199  1cd7				   twoParameters
    200  1cd7		       20 ce 3a 	      jsr	midiReadWait
    201  1cda				   oneParameter
    202  1cda							;jsr midiReadWait ; THIS ONE IS DISABLED BECAUSE IT'S ALREADY READ ANOTHER BYTE
    203  1cda		       60		      rts
    204  1cdb							;jmp check
    205  1cdb
    206  1cdb
    207  1cdb				   endChannelCheck
    208  1cdb							; Status byte should be in A
    209  1cdb							; Ignoring channel for now
    210  1cdb							;tay ; CHANGED THIS TO TYA BECAUSE MIDI STATUS IS NOW COMING IN Y
    211  1cdb		       98		      tya
    212  1cdc
    213  1cdc		       29 f0		      and	#$F0
    214  1cde		       c9 80		      cmp	#$80	; Note off
    215  1ce0		       d0 03		      bne	notNoteOff
    216  1ce2		       4c 83 1e 	      jmp	noteOff
    217  1ce5				   notNoteOff
    218  1ce5		       c9 90		      cmp	#$90	; Note on
    219  1ce7		       d0 03		      bne	notNoteOn
    220  1ce9		       4c 4d 1e 	      jmp	noteOn
    221  1cec				   notNoteOn
    222  1cec		       c9 e0		      cmp	#$E0	; Pitch bend
    223  1cee		       f0 3a		      beq	pitchBend
    224  1cf0		       c9 b0		      cmp	#$B0	; Control change
    225  1cf2		       d0 03		      bne	notControlChange
    226  1cf4		       4c 4a 1d 	      jmp	controlChange
    227  1cf7				   notControlChange
    228  1cf7		       c9 d0		      cmp	#$D0	; Channel pressure
    229  1cf9		       f0 2b		      beq	channelPressure
    230  1cfb		       c9 a0		      cmp	#$A0	; Key pressure
    231  1cfd		       f0 0f		      beq	keyPressure
    232  1cff		       c9 c0		      cmp	#$C0	; Patch change
    233  1d01		       f0 12		      beq	patchChange
    234  1d03							;cmp #$F0 ; Sysex
    235  1d03							;beq sysex
    236  1d03		       8d e4 07 	      sta	2020
    237  1d06		       a9 02		      lda	#2
    238  1d08		       8d 20 d0 	      sta	53280	; Error! Unknown midi message type (change screen border color to red)
    239  1d0b		       4c b6 1e 	      jmp	endMIDI
    240  1d0e
    241  1d0e
    242  1d0e				   keyPressure
    243  1d0e				  -	      IF	DEBUG_DISPLAY=1
    244  1d0e				  -	      inc	1824+86
    245  1d0e					      ENDIF
    246  1d0e		       ad 7e 70 	      lda	firstDataByte
    247  1d11					      IF	ENABLE_MIDI_COMMANDS=1
    248  1d11		       20 ce 3a 	      jsr	midiReadWait
    249  1d14					      ENDIF
    250  1d14		       60		      rts
    251  1d15
    252  1d15
    253  1d15
    254  1d15							;REL_SHORT equ $E0
    255  1d15							;REL_MED	equ $E9
    256  1d15							;REL_LONG equ $EE
    257  1d15
    258  1d15							;ATK_SHORT equ $00
    259  1d15							;ATK_MED	equ $90
    260  1d15							;ATK_LONG equ $E0
    261  1d15
    262  1d15				   patchChange
    263  1d15				  -	      IF	DEBUG_DISPLAY=1
    264  1d15				  -	      inc	1824+88
    265  1d15					      ENDIF
    266  1d15		       ac 7e 70 	      ldy	firstDataByte	; Patch number
    267  1d18		       10 02		      bpl	skipPatchDefault1	; If patch number is > 127
    268  1d1a		       a0 1d		      ldy	#MAX_PATCH_NUMBER	; then set to max number (~30)
    269  1d1c				   skipPatchDefault1
    270  1d1c		       c0 1e		      cpy	#MAX_PATCH_NUMBER+1
    271  1d1e		       30 02		      bmi	skipPatchDefault2	; If patch is less than MAX_PATCH_NUM
    272  1d20		       a0 00		      ldy	#0	; Saw Bass (because sending patch change zero doesn't work)
    273  1d22				   skipPatchDefault2
    274  1d22		       20 79 13 	      jsr	setPatch
    275  1d25		       60		      rts
    276  1d26
    277  1d26				   channelPressure
    278  1d26				  -	      IF	DEBUG_DISPLAY=1
    279  1d26				  -	      inc	1824+89
    280  1d26					      ENDIF
    281  1d26		       ad 7e 70 	      lda	firstDataByte
    282  1d29		       60		      rts
    283  1d2a
    284  1d2a				   pitchBend
    285  1d2a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    286  1d2a							; DEBUG - SHOW MIDI DATA
    287  1d2a				  -	      IF	DEBUG_DISPLAY=1
    288  1d2a				  -			;sta temp
    289  1d2a				  -	      ldx	#25
    290  1d2a				  -	      ldy	#22
    291  1d2a				  -	      jsr	displayHex
    292  1d2a				  -	      lda	temp
    293  1d2a				  -	      ldy	temp
    294  1d2a				  -	      inc	1824+90
    295  1d2a					      ENDIF
    296  1d2a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  1d2a
    298  1d2a		       ad 7e 70 	      lda	firstDataByte	; Get bend value...
    299  1d2d		       4a		      lsr
    300  1d2e		       4a		      lsr
    301  1d2f		       6d 7e 70 	      adc	firstDataByte	; Add it to a fraction of itself to scale the value up
    302  1d32		       38		      sec
    303  1d33		       e9 50		      sbc	#$50	; Center on zero
    304  1d35		       30 09		      bmi	negPitch	; If negative...
    305  1d37		       c9 46		      cmp	#70	; Max value
    306  1d39		       30 0b		      bmi	setTuningValue
    307  1d3b		       a9 46		      lda	#70	; Over max, so set to max value (50)
    308  1d3d		       4c 46 1d 	      jmp	setTuningValue
    309  1d40
    310  1d40		       00 ba	   NEG_TUNE_TEST_VALUE equ	186
    311  1d40				   negPitch
    312  1d40		       c9 ba		      cmp	#NEG_TUNE_TEST_VALUE	; Mimimum allowable value...
    313  1d42		       10 02		      bpl	setTuningValue
    314  1d44		       a9 ba		      lda	#NEG_TUNE_TEST_VALUE
    315  1d46
    316  1d46				   setTuningValue
    317  1d46		       8d f0 70 	      sta	midiTuning
    318  1d49
    319  1d49
    320  1d49							;	lda firstDataByte
    321  1d49
    322  1d49							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  1d49							; DEBUG - SHOW MIDI DATA
    324  1d49				  -	      IF	DEBUG_DISPLAY=1
    325  1d49				  -	      sta	temp
    326  1d49				  -	      ldx	#25
    327  1d49				  -	      ldy	#23
    328  1d49				  -	      jsr	displayHex
    329  1d49				  -	      lda	temp
    330  1d49				  -	      ldy	temp
    331  1d49					      ENDIF
    332  1d49							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    333  1d49
    334  1d49		       60		      rts
    335  1d4a
    336  1d4a
    337  1d4a				   controlChange
    338  1d4a				  -	      IF	DEBUG_DISPLAY=1
    339  1d4a				  -	      inc	1824+87
    340  1d4a					      ENDIF
    341  1d4a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  1d4a							; DEBUG - SHOW MIDI DATA
    343  1d4a				  -	      IF	DEBUG_DISPLAY=1
    344  1d4a				  -	      sta	temp
    345  1d4a				  -	      lda	firstDataByte
    346  1d4a				  -	      ldy	#21
    347  1d4a				  -	      ldx	#17
    348  1d4a				  -	      jsr	displayHex
    349  1d4a				  -	      lda	temp
    350  1d4a				  -	      ldy	temp
    351  1d4a					      ENDIF
    352  1d4a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  1d4a
    354  1d4a					      IF	ENABLE_MIDI_COMMANDS=1
    355  1d4a		       20 ce 3a 	      jsr	midiReadWait	; Read controller value
    356  1d4d					      ENDIF
    357  1d4d		       a8		      tay
    358  1d4e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    359  1d4e							; DEBUG - SHOW MIDI DATA
    360  1d4e				  -	      IF	DEBUG_DISPLAY=1
    361  1d4e				  -	      sta	temp
    362  1d4e				  -			;lda firstDataByte
    363  1d4e				  -	      ldy	#22
    364  1d4e				  -	      ldx	#17
    365  1d4e				  -	      jsr	displayHex
    366  1d4e				  -	      lda	temp
    367  1d4e				  -	      ldy	temp
    368  1d4e					      ENDIF
    369  1d4e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  1d4e		       ad 7e 70 	      lda	firstDataByte	; Get controller number
    371  1d51				  -	      IF	OFFSET_CONTROLLERS=1
    372  1d51				  -	      sec
    373  1d51				  -	      sbc	#1	; DEBUG! OFFSET CONTROLLERS FOR TESTING!! DEBUG!!!
    374  1d51					      ENDIF
    375  1d51							;and #$0F ; Repeat every 16 controllers
    376  1d51		       29 ef		      and	#%11101111	; Repeat every 16 controllers
    377  1d53		       d0 0a		      bne	notResonance
    378  1d55							;---- Resonance----
    379  1d55		       98		      tya
    380  1d56		       29 f0		      and	#$F0
    381  1d58		       8d 97 70 	      sta	resonance
    382  1d5b		       20 7e 10 	      jsr	setResonance
    383  1d5e		       60		      rts
    384  1d5f				   notResonance
    385  1d5f		       c9 01		      cmp	#1
    386  1d61		       d0 11		      bne	notModWheel
    387  1d63							;----Mod wheel (filter)----
    388  1d63		       98		      tya
    389  1d64		       0a		      asl
    390  1d65		       a8		      tay
    391  1d66		       8d 9d 70 	      sta	filterSetValue
    392  1d69		       ad 29 70 	      lda	paddle
    393  1d6c		       f0 05		      beq	skipTurnOffPaddle
    394  1d6e		       a9 00		      lda	#0	; turn paddle off
    395  1d70		       20 0b 11 	      jsr	setPaddles
    396  1d73				   skipTurnOffPaddle
    397  1d73
    398  1d73							;jsr ksetFilter
    399  1d73		       60		      rts
    400  1d74				   notModWheel
    401  1d74		       c9 02		      cmp	#2
    402  1d76		       d0 0e		      bne	notMode
    403  1d78							;---- Sound Mode----
    404  1d78		       98		      tya
    405  1d79		       4a		      lsr
    406  1d7a		       4a		      lsr
    407  1d7b		       4a		      lsr
    408  1d7c		       29 0f		      and	#$0F
    409  1d7e		       aa		      tax
    410  1d7f		       bd ca 24 	      lda	modeList,x
    411  1d82		       20 26 13 	      jsr	ksetMode
    412  1d85		       60		      rts
    413  1d86				   notMode
    414  1d86		       c9 03		      cmp	#3
    415  1d88		       d0 0b		      bne	notFX
    416  1d8a							;---- FX----
    417  1d8a		       98		      tya
    418  1d8b		       4a		      lsr
    419  1d8c		       4a		      lsr
    420  1d8d		       4a		      lsr
    421  1d8e		       4a		      lsr
    422  1d8f		       29 07		      and	#$07
    423  1d91		       20 fe 12 	      jsr	ksetFX
    424  1d94		       60		      rts
    425  1d95				   notFX
    426  1d95		       c9 04		      cmp	#4
    427  1d97		       d0 08		      bne	notAttack
    428  1d99							;--- Attack----
    429  1d99		       98		      tya
    430  1d9a		       0a		      asl
    431  1d9b		       29 f0		      and	#$F0
    432  1d9d		       20 1f 12 	      jsr	setAttack
    433  1da0		       60		      rts
    434  1da1				   notAttack
    435  1da1		       c9 05		      cmp	#5
    436  1da3		       d0 0c		      bne	notRelease
    437  1da5							;---- Release----
    438  1da5		       98		      tya
    439  1da6		       4a		      lsr
    440  1da7		       4a		      lsr
    441  1da8		       4a		      lsr
    442  1da9		       29 0f		      and	#$0F
    443  1dab		       09 f0		      ora	#$F0
    444  1dad		       20 72 11 	      jsr	setRelease
    445  1db0		       60		      rts
    446  1db1				   notRelease
    447  1db1		       c9 06		      cmp	#6
    448  1db3		       d0 2d		      bne	notPW
    449  1db5							;--- Pulse Width----
    450  1db5		       98		      tya
    451  1db6		       0a		      asl
    452  1db7		       09 10		      ora	#%10000
    453  1db9		       20 38 10 	      jsr	setPulseWidth
    454  1dbc		       ee 00 04 	      inc	1024
    455  1dbf		       ad 86 70 	      lda	fxType	; if pulse modulation is on...
    456  1dc2		       c9 07		      cmp	#MOD_PW2
    457  1dc4		       f0 04		      beq	fxReset
    458  1dc6		       c9 06		      cmp	#MOD_PW_LFO
    459  1dc8		       d0 0b		      bne	noFXReset
    460  1dca				   fxReset
    461  1dca		       ee 01 04 	      inc	1025
    462  1dcd		       a9 00		      lda	#0
    463  1dcf		       8d 86 70 	      sta	fxType
    464  1dd2		       20 01 13 	      jsr	setFX	; Turn off pulse modulation modes
    465  1dd5				   noFXReset
    466  1dd5		       ad 7a 70 	      lda	paddle2	; if paddle2 pulse width control is on...
    467  1dd8		       c9 01		      cmp	#1
    468  1dda		       d0 05		      bne	noPaddle2Reset	;
    469  1ddc		       a9 00		      lda	#0
    470  1dde							;sta paddle2 ; Turn off paddle 2 pulse control
    471  1dde		       20 16 10 	      jsr	ksetPad2
    472  1de1				   noPaddle2Reset
    473  1de1		       60		      rts
    474  1de2				   notPW
    475  1de2		       c9 07		      cmp	#7
    476  1de4		       d0 08		      bne	notVolume
    477  1de6							; ----Volume----
    478  1de6		       98		      tya
    479  1de7		       4a		      lsr
    480  1de8		       4a		      lsr
    481  1de9		       4a		      lsr
    482  1dea		       20 52 12 	      jsr	ksetVolume
    483  1ded		       60		      rts
    484  1dee				   notVolume
    485  1dee		       c9 08		      cmp	#8
    486  1df0		       d0 0b		      bne	notTremolo
    487  1df2							;---- Tremolo level----
    488  1df2		       98		      tya
    489  1df3		       4a		      lsr
    490  1df4		       4a		      lsr
    491  1df5		       4a		      lsr
    492  1df6		       4a		      lsr
    493  1df7		       29 03		      and	#$03
    494  1df9		       20 2c 11 	      jsr	setLFODepth
    495  1dfc		       60		      rts
    496  1dfd				   notTremolo
    497  1dfd		       c9 09		      cmp	#9
    498  1dff		       d0 0b		      bne	notTremRate
    499  1e01							;---- Tremolo level----
    500  1e01		       98		      tya
    501  1e02		       4a		      lsr
    502  1e03		       4a		      lsr
    503  1e04		       4a		      lsr
    504  1e05		       4a		      lsr
    505  1e06		       29 03		      and	#$03
    506  1e08		       20 42 11 	      jsr	setLFORate
    507  1e0b		       60		      rts
    508  1e0c				   notTremRate
    509  1e0c		       c9 0d		      cmp	#13
    510  1e0e		       d0 14		      bne	notWaveform
    511  1e10							;--- Waveform (all voices)---
    512  1e10		       98		      tya
    513  1e11		       4a		      lsr
    514  1e12		       4a		      lsr
    515  1e13		       4a		      lsr
    516  1e14		       29 03		      and	#$03
    517  1e16		       aa		      tax
    518  1e17		       bd 49 1e 	      lda	waveForms,x
    519  1e1a		       8d 37 70 	      sta	WaveType2
    520  1e1d		       8d 3e 70 	      sta	WaveType3
    521  1e20		       8d 30 70 	      sta	WaveType
    522  1e23		       60		      rts
    523  1e24				   notWaveform
    524  1e24		       c9 0e		      cmp	#14
    525  1e26		       d0 0e		      bne	notWaveform2
    526  1e28							;--- Waveform (voice 2 only)----
    527  1e28		       98		      tya
    528  1e29		       4a		      lsr
    529  1e2a		       4a		      lsr
    530  1e2b		       4a		      lsr
    531  1e2c		       29 03		      and	#$03
    532  1e2e		       aa		      tax
    533  1e2f		       bd 49 1e 	      lda	waveForms,x
    534  1e32		       8d 37 70 	      sta	WaveType2
    535  1e35		       60		      rts
    536  1e36				   notWaveform2
    537  1e36		       c9 0f		      cmp	#15
    538  1e38		       d0 0e		      bne	notWaveform3
    539  1e3a							;---- Waveform (voice 3 only)----
    540  1e3a		       98		      tya
    541  1e3b		       4a		      lsr
    542  1e3c		       4a		      lsr
    543  1e3d		       4a		      lsr
    544  1e3e		       29 03		      and	#$03
    545  1e40		       aa		      tax
    546  1e41		       bd 49 1e 	      lda	waveForms,x
    547  1e44		       8d 3e 70 	      sta	WaveType3
    548  1e47		       60		      rts
    549  1e48				   notWaveform3
    550  1e48		       60		      rts
    551  1e49
    552  1e49				   waveForms
    553  1e49		       10 20 40 80	      byte.b	$10,$20,$40,$80
    554  1e4d							;-  -	-  -  -  -  -  -
    555  1e4d
    556  1e4d							;IF ENABLE_MIDI_COMMANDS=1
    557  1e4d					      ENDIF
    558  1e4d
    559  1e4d
    560  1e4d
    561  1e4d							; note is in Y
    562  1e4d				   noteOn
    563  1e4d
    564  1e4d		       8d 0c 70 	      sta	temp
    565  1e50					      IF	ENABLE_MIDI_COMMANDS=1
    566  1e50		       20 ce 3a 	      jsr	midiReadWait	; Read velocity byte
    567  1e53					      ENDIF
    568  1e53		       8d 7f 70 	      sta	tempVelocity
    569  1e56		       d0 09		      bne	almostNoteOn
    570  1e58							; Zero-velocity, so it's really a note-off...
    571  1e58							;inc 53280
    572  1e58		       ad 7e 70 	      lda	firstDataByte
    573  1e5b		       38		      sec
    574  1e5c		       e9 0c		      sbc	#12	; Down one octave
    575  1e5e		       4c 95 1e 	      jmp	doNoteOff
    576  1e61				   almostNoteOn
    577  1e61							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    578  1e61							; DEBUG - SHOW MIDI DATA
    579  1e61				  -	      IF	DEBUG_DISPLAY=1
    580  1e61				  -	      sta	temp
    581  1e61				  -	      lda	noteOnCount
    582  1e61				  -	      and	#1
    583  1e61				  -	      asl
    584  1e61				  -	      asl
    585  1e61				  -	      asl
    586  1e61				  -	      ora	#$F4
    587  1e61				  -	      sta	hexDispColor
    588  1e61				  -	      lda	noteOnCount
    589  1e61				  -	      and	#%1111
    590  1e61				  -	      asl
    591  1e61				  -	      tax
    592  1e61				  -			;lda temp
    593  1e61				  -	      lda	savedMidiStatus
    594  1e61				  -	      ldy	#6
    595  1e61				  -	      jsr	displayHex
    596  1e61				  -	      lda	temp
    597  1e61				  -	      ldy	temp
    598  1e61				  -	      inc	1824+83	; DEBUG INDICATOR
    599  1e61					      ENDIF
    600  1e61							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    601  1e61		       ad 7e 70 	      lda	firstDataByte	; Get MIDI byte with note data
    602  1e64		       38		      sec
    603  1e65		       e9 0c		      sbc	#12	; Down one octave
    604  1e67				   doNoteOn
    605  1e67							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    606  1e67							; DEBUG - SHOW MIDI DATA
    607  1e67				  -	      IF	DEBUG_DISPLAY=1
    608  1e67				  -	      sta	temp
    609  1e67				  -	      lda	noteOnCount
    610  1e67				  -	      and	#%1111
    611  1e67				  -	      asl
    612  1e67				  -	      tax
    613  1e67				  -	      lda	temp
    614  1e67				  -	      ldy	#7
    615  1e67				  -	      jsr	displayHex
    616  1e67				  -	      lda	temp
    617  1e67				  -	      ldy	temp
    618  1e67					      ENDIF
    619  1e67							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    620  1e67
    621  1e67							; Find empty note slot...
    622  1e67		       ae 80 70 	      ldx	bufferSize	;3
    623  1e6a		       a8		      tay
    624  1e6b							;ldx #3 ; DEBUG!
    625  1e6b		       ca		      dex
    626  1e6c				   noteOnLoop
    627  1e6c		       bd a0 70 	      lda	noteNumArray,x
    628  1e6f		       c9 ff		      cmp	#255
    629  1e71		       f0 05		      beq	quitNoteOnLoop	; If slot is empty (==255)...
    630  1e73		       ca		      dex
    631  1e74		       10 f6		      bpl	noteOnLoop
    632  1e76		       a2 00		      ldx	#0
    633  1e78				   quitNoteOnLoop
    634  1e78
    635  1e78		       98		      tya
    636  1e79		       9d a0 70 	      sta	noteNumArray,x	; Store note in slot
    637  1e7c
    638  1e7c							;jsr midiReadWait ; Read velocity byte
    639  1e7c		       ad 7f 70 	      lda	tempVelocity
    640  1e7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    641  1e7f							; DEBUG - SHOW MIDI DATA
    642  1e7f				  -	      IF	DEBUG_DISPLAY=1
    643  1e7f				  -	      sta	temp
    644  1e7f				  -	      lda	noteOnCount
    645  1e7f				  -	      and	#%1111
    646  1e7f				  -	      asl
    647  1e7f				  -	      tax
    648  1e7f				  -	      lda	temp
    649  1e7f				  -	      ldy	#8
    650  1e7f				  -	      jsr	displayHex
    651  1e7f				  -	      lda	temp
    652  1e7f				  -	      ldy	temp
    653  1e7f					      ENDIF
    654  1e7f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    655  1e7f							;/----------------------
    656  1e7f		       ee 8c 70 	      inc	noteOnCount
    657  1e82		       60		      rts
    658  1e83
    659  1e83				   noteOff
    660  1e83							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  1e83							; DEBUG - SHOW MIDI DATA
    662  1e83				  -	      IF	DEBUG_DISPLAY=1
    663  1e83				  -	      sta	temp
    664  1e83				  -	      lda	noteOffCount
    665  1e83				  -	      and	#1
    666  1e83				  -			;eor #1
    667  1e83				  -	      asl
    668  1e83				  -	      asl
    669  1e83				  -	      asl
    670  1e83				  -	      ora	#$F4
    671  1e83				  -	      sta	hexDispColor
    672  1e83				  -	      lda	noteOffCount
    673  1e83				  -	      and	#%1111
    674  1e83				  -	      asl
    675  1e83				  -	      tax
    676  1e83				  -	      lda	temp
    677  1e83				  -	      ldy	#10
    678  1e83				  -	      jsr	displayHex
    679  1e83				  -	      lda	temp
    680  1e83				  -	      ldy	temp
    681  1e83					      ENDIF
    682  1e83							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    683  1e83
    684  1e83							;jmp endMIDI
    685  1e83
    686  1e83		       8d 0c 70 	      sta	temp
    687  1e86					      IF	ENABLE_MIDI_COMMANDS=1
    688  1e86		       20 ce 3a 	      jsr	midiReadWait	; Read velocity byte
    689  1e89					      ENDIF
    690  1e89		       8d 7f 70 	      sta	tempVelocity
    691  1e8c		       ad 0c 70 	      lda	temp
    692  1e8f
    693  1e8f		       ad 7e 70 	      lda	firstDataByte
    694  1e92		       38		      sec
    695  1e93		       e9 0c		      sbc	#12	; Down one octave
    696  1e95							;jsr midiReadWait ; Note number
    697  1e95
    698  1e95				   doNoteOff
    699  1e95							; Find matching note number to turn note off...
    700  1e95							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    701  1e95							; DEBUG - SHOW MIDI DATA
    702  1e95				  -	      IF	DEBUG_DISPLAY=1
    703  1e95				  -	      sta	temp
    704  1e95				  -	      lda	noteOffCount
    705  1e95				  -	      and	#%1111
    706  1e95				  -	      asl
    707  1e95				  -	      tax
    708  1e95				  -	      lda	temp
    709  1e95				  -	      ldy	#11
    710  1e95				  -	      jsr	displayHex
    711  1e95				  -	      lda	temp
    712  1e95				  -	      ldy	temp
    713  1e95					      ENDIF
    714  1e95							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    715  1e95
    716  1e95		       ae 80 70 	      ldx	bufferSize	;3
    717  1e98		       8d 0c 70 	      sta	temp
    718  1e9b							;ldx #3 ; DEBUG!
    719  1e9b		       ca		      dex
    720  1e9c				   killNoteLoop
    721  1e9c		       bd a0 70 	      lda	noteNumArray,x
    722  1e9f		       cd 0c 70 	      cmp	temp	; Note match?
    723  1ea2		       f0 06		      beq	foundNote	; Then go turn off note
    724  1ea4		       ca		      dex		; next slot
    725  1ea5		       10 f5		      bpl	killNoteLoop	; loop through all slots
    726  1ea7							;Not found, so ignore
    727  1ea7		       4c af 1e 	      jmp	endNoteOff
    728  1eaa
    729  1eaa				   foundNote
    730  1eaa		       a9 ff		      lda	#255
    731  1eac		       9d a0 70 	      sta	noteNumArray,x	; Turn off note
    732  1eaf
    733  1eaf				   endNoteOff
    734  1eaf		       ad 7f 70 	      lda	tempVelocity
    735  1eb2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    736  1eb2							; DEBUG - SHOW MIDI DATA
    737  1eb2				  -	      IF	DEBUG_DISPLAY=1
    738  1eb2				  -	      sta	temp
    739  1eb2				  -	      lda	noteOffCount
    740  1eb2				  -	      and	#%1111
    741  1eb2				  -	      asl
    742  1eb2				  -	      tax
    743  1eb2				  -	      lda	temp
    744  1eb2				  -	      ldy	#12
    745  1eb2				  -	      jsr	displayHex
    746  1eb2				  -	      lda	temp
    747  1eb2				  -	      ldy	temp
    748  1eb2					      ENDIF
    749  1eb2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    750  1eb2							;/----------------------
    751  1eb2		       ee 8b 70 	      inc	noteOffCount
    752  1eb5		       60		      rts
    753  1eb6
    754  1eb6
    755  1eb6				   endMIDI
    756  1eb6							;- . - . - . - . - . - . - . - . - . - . - . - . - . - .
    757  1eb6							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    758  1eb6							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    759  1eb6							; FILL EMPTY PLAYABLE NOTES WITH ANY
    760  1eb6							; NON-PLAYING NOTES IN THE BUFFER
    761  1eb6							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    762  1eb6							;jsr doSort
    763  1eb6
    764  1eb6		       ae 84 70 	      ldx	polyphony
    765  1eb9		       ca		      dex
    766  1eba							;ldx #2 ; DEBUG
    767  1eba				   noteScan
    768  1eba		       bd a0 70 	      lda	noteNumArray,x
    769  1ebd		       c9 ff		      cmp	#255	; Is note off?
    770  1ebf		       f0 06		      beq	searchCopyNote
    771  1ec1				   contNoteScan
    772  1ec1		       ca		      dex
    773  1ec2		       10 f6		      bpl	noteScan	; Loop...
    774  1ec4		       4c e3 1e 	      jmp	quitNoteScan	; Done, jump to end
    775  1ec7
    776  1ec7				   searchCopyNote
    777  1ec7							;ldy bufferSize
    778  1ec7							;dey
    779  1ec7							;ldy #3
    780  1ec7		       ac 84 70 	      ldy	polyphony
    781  1eca				   copyNoteLoop
    782  1eca		       b9 a0 70 	      lda	noteNumArray,y
    783  1ecd		       c9 ff		      cmp	#255
    784  1ecf		       d0 07		      bne	replaceNote
    785  1ed1		       c8		      iny
    786  1ed2		       c0 08		      cpy	#NOTE_BUF_SIZE
    787  1ed4		       f0 eb		      beq	contNoteScan
    788  1ed6		       d0 f2		      bne	copyNoteLoop
    789  1ed8
    790  1ed8				   replaceNote
    791  1ed8		       9d a0 70 	      sta	noteNumArray,x
    792  1edb		       a9 ff		      lda	#255
    793  1edd		       99 a0 70 	      sta	noteNumArray,y
    794  1ee0		       4c c1 1e 	      jmp	contNoteScan
    795  1ee3
    796  1ee3				   quitNoteScan
    797  1ee3		       60		      rts
    798  1ee4							;=- =- =- =- =- =- =- =- =- =- =- =- -=
    799  1ee4
    800  1ee4
    801  1ee4
------- FILE cynthcart2.0.1.asm
------- FILE cynth_sidedit.asm LEVEL 2 PASS 2
      0  1ee4					      include	"cynth_sidedit.asm"
      1  1ee4		       00 04	   HEX_DISP_OFFSET equ	4
      2  1ee4
      3  1ee4
      4  1ee4							;---------------------------------
      5  1ee4							; Wait until no hex key is down
      6  1ee4							; (doesn't check all keys, only hex keys!)
      7  1ee4				   waitForKeyRelease
      8  1ee4		       20 b4 20 	      jsr	readHexKey
      9  1ee7		       c9 ff		      cmp	#255
     10  1ee9		       d0 f9		      bne	waitForKeyRelease
     11  1eeb		       a2 ff		      ldx	#255	; Always 255
     12  1eed		       a0 60		      ldy	#96	; Delay amount
     13  1eef				   delay		; Delay a short time to avoid catching key bounce...
     14  1eef		       ca		      dex
     15  1ef0		       d0 fd		      bne	delay
     16  1ef2		       88		      dey
     17  1ef3		       d0 fa		      bne	delay
     18  1ef5		       60		      rts
     19  1ef6
     20  1ef6
     21  1ef6							;===============================================
     22  1ef6							; Allow the user to hex edit the SID registers
     23  1ef6							; directly.
     24  1ef6				   SIDEdit
     25  1ef6
     26  1ef6							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
     27  1ef6		       ae 9d 70 	      ldx	filterSetValue
     28  1ef9		       8e 54 70 	      stx	sidEditSaveTemp5
     29  1efc
     30  1efc		       8d 60 70 	      sta	hexKeyMode
     31  1eff
     32  1eff							;jsr beep
     33  1eff							;jsr beep
     34  1eff							;jsr beep
     35  1eff
     36  1eff		       20 83 0c 	      jsr	clrScr
     37  1f02		       20 c4 0b 	      jsr	displayInit
     38  1f05
     39  1f05							; X = low data address
     40  1f05							; Y = high data address
     41  1f05		       a2 2a		      ldx	#>hexEditHelp	;low/MSB
     42  1f07		       a0 35		      ldy	#<hexEditHelp	;high/LSB
     43  1f09		       20 da 0c 	      jsr	displayPage
     44  1f0c
     45  1f0c		       20 39 20 	      jsr	showSidValues
     46  1f0f
     47  1f0f
     48  1f0f							;enable keyboard interrupt
     49  1f0f							;	lda #129
     50  1f0f							;	sta 56333
     51  1f0f							; wait for all keys to be released first
     52  1f0f							;waitForNoKey:
     53  1f0f							;	lda 197
     54  1f0f							;	cmp #64
     55  1f0f							;	bne waitForNoKey
     56  1f0f
     57  1f0f
     58  1f0f							; clear top line
     59  1f0f		       a2 09		      ldx	#9
     60  1f11		       a9 20		      lda	#32
     61  1f13				   hexClearA
     62  1f13		       9d 00 04 	      sta	1024,x
     63  1f16		       ca		      dex
     64  1f17		       10 fa		      bpl	hexClearA
     65  1f19
     66  1f19							; display "sid edit" text
     67  1f19		       a2 5c		      ldx	#92
     68  1f1b		       a0 00		      ldy	#0
     69  1f1d		       20 63 0c 	      jsr	updateText
     70  1f20
     71  1f20							;jsr waitForKeyRelease
     72  1f20
     73  1f20							; get/display the first hex digit of the address to edit
     74  1f20		       a9 24		      lda	#36
     75  1f22		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     76  1f25		       20 a9 20 	      jsr	getHexKey
     77  1f28		       c9 10		      cmp	#16	; cancelled
     78  1f2a		       d0 03		      bne	notCancelled
     79  1f2c		       4c 21 20 	      jmp	waitKeyRelease
     80  1f2f				   notCancelled
     81  1f2f		       aa		      tax
     82  1f30		       0a		      asl
     83  1f31		       0a		      asl
     84  1f32		       0a		      asl
     85  1f33		       0a		      asl
     86  1f34		       8d 5a 70 	      sta	SIDeditAddr
     87  1f37		       bd bb 33 	      lda	hexDisplay,x
     88  1f3a		       8d 04 04 	      sta	1024+HEX_DISP_OFFSET
     89  1f3d
     90  1f3d							;sta 1024
     91  1f3d							;jsr waitForKeyRelease
     92  1f3d							;sta 1024
     93  1f3d
     94  1f3d							; get/display the second hex digit of the address to edit
     95  1f3d		       a9 24		      lda	#36
     96  1f3f		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
     97  1f42		       20 a9 20 	      jsr	getHexKey
     98  1f45		       c9 10		      cmp	#16	; cancelled
     99  1f47		       d0 03		      bne	notCancelled2
    100  1f49		       4c 21 20 	      jmp	waitKeyRelease
    101  1f4c				   notCancelled2
    102  1f4c		       aa		      tax
    103  1f4d		       0d 5a 70 	      ora	SIDeditAddr
    104  1f50		       8d 5a 70 	      sta	SIDeditAddr
    105  1f53		       bd bb 33 	      lda	hexDisplay,x
    106  1f56		       8d 05 04 	      sta	1025+HEX_DISP_OFFSET
    107  1f59
    108  1f59							; display a '>' between
    109  1f59		       a9 3e		      lda	#62
    110  1f5b		       8d 06 04 	      sta	1026+HEX_DISP_OFFSET
    111  1f5e
    112  1f5e							; get/display the first hex digit of the value to write
    113  1f5e		       a9 24		      lda	#36
    114  1f60		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    115  1f63		       20 a9 20 	      jsr	getHexKey
    116  1f66		       c9 10		      cmp	#16	; cancelled
    117  1f68		       d0 03		      bne	notCancelled3
    118  1f6a		       4c 21 20 	      jmp	waitKeyRelease
    119  1f6d				   notCancelled3
    120  1f6d		       aa		      tax
    121  1f6e		       0a		      asl
    122  1f6f		       0a		      asl
    123  1f70		       0a		      asl
    124  1f71		       0a		      asl
    125  1f72		       8d 5b 70 	      sta	SIDeditValue
    126  1f75		       bd bb 33 	      lda	hexDisplay,x
    127  1f78		       8d 07 04 	      sta	1027+HEX_DISP_OFFSET
    128  1f7b
    129  1f7b							; get/display the second hex digit of the value to write
    130  1f7b		       a9 24		      lda	#36
    131  1f7d		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    132  1f80		       20 a9 20 	      jsr	getHexKey
    133  1f83		       c9 10		      cmp	#16	; cancelled
    134  1f85		       d0 03		      bne	notCancelled4
    135  1f87		       4c 21 20 	      jmp	waitKeyRelease
    136  1f8a				   notCancelled4
    137  1f8a		       aa		      tax
    138  1f8b		       0d 5b 70 	      ora	SIDeditValue
    139  1f8e		       8d 5b 70 	      sta	SIDeditValue
    140  1f91		       bd bb 33 	      lda	hexDisplay,x
    141  1f94		       8d 08 04 	      sta	1028+HEX_DISP_OFFSET
    142  1f97
    143  1f97							; if <=$20 then write to all 3 SID oscillator regs
    144  1f97		       ae 5a 70 	      ldx	SIDeditAddr
    145  1f9a		       e0 20		      cpx	#$20
    146  1f9c		       30 2e		      bmi	normalWrite
    147  1f9e							;--------------
    148  1f9e		       ad 5b 70 	      lda	SIDeditValue
    149  1fa1		       9d e0 d3 	      sta	SID1-32,x
    150  1fa4		       9d 00 d4 	      sta	SID2-32,x
    151  1fa7		       9d e0 70 	      sta	sidData-32,x
    152  1faa		       9d e7 d3 	      sta	SID1-32+#$7,x
    153  1fad		       9d 07 d4 	      sta	SID2-32+#$7,x
    154  1fb0		       9d e7 70 	      sta	sidData-32+#$7,x
    155  1fb3		       9d ee d3 	      sta	SID1-32+#$E,x
    156  1fb6		       9d 0e d4 	      sta	SID2-32+#$E,x
    157  1fb9		       9d ee 70 	      sta	sidData-32+#$E,x
    158  1fbc		       e0 24		      cpx	#SV1WAVE+32
    159  1fbe		       d0 09		      bne	no3Wave
    160  1fc0		       8d 30 70 	      sta	WaveType
    161  1fc3		       8d 37 70 	      sta	WaveType2
    162  1fc6		       8d 3e 70 	      sta	WaveType3
    163  1fc9				   no3Wave
    164  1fc9		       4c 07 20 	      jmp	skipNormalWrite
    165  1fcc							;...............
    166  1fcc				   normalWrite
    167  1fcc							; write the value to both sids
    168  1fcc		       ae 5a 70 	      ldx	SIDeditAddr
    169  1fcf		       ad 5b 70 	      lda	SIDeditValue
    170  1fd2		       9d 00 d4 	      sta	SID1,x
    171  1fd5		       9d 20 d4 	      sta	SID2,x
    172  1fd8		       9d 00 71 	      sta	sidData,x
    173  1fdb
    174  1fdb		       e0 04		      cpx	#SV1WAVE
    175  1fdd		       d0 03		      bne	noWave1
    176  1fdf		       8d 30 70 	      sta	WaveType
    177  1fe2				   noWave1
    178  1fe2
    179  1fe2		       e0 0b		      cpx	#SV2WAVE
    180  1fe4		       d0 03		      bne	noWave2
    181  1fe6		       8d 37 70 	      sta	WaveType2
    182  1fe9				   noWave2
    183  1fe9
    184  1fe9		       e0 12		      cpx	#SV3WAVE
    185  1feb		       d0 03		      bne	noWave3
    186  1fed		       8d 3e 70 	      sta	WaveType3
    187  1ff0				   noWave3
    188  1ff0
    189  1ff0		       e0 16		      cpx	#SFILTH
    190  1ff2		       d0 03		      bne	noFiltSave
    191  1ff4		       8d 57 70 	      sta	filter
    192  1ff7				   noFiltSave
    193  1ff7
    194  1ff7							; turn off paddles if filter was adjusted
    195  1ff7		       e0 15		      cpx	#SFILTL
    196  1ff9		       f0 04		      beq	paddleOffhex
    197  1ffb		       e0 16		      cpx	#SFILTH
    198  1ffd		       d0 08		      bne	noPaddleOff
    199  1fff				   paddleOffhex
    200  1fff		       a9 00		      lda	#0
    201  2001		       8d 29 70 	      sta	paddle	; turn off paddle controller first
    202  2004		       20 25 11 	      jsr	showPaddle
    203  2007				   noPaddleOff
    204  2007
    205  2007				   skipNormalWrite
    206  2007		       ae 5a 70 	      ldx	SIDeditAddr
    207  200a		       ad 5b 70 	      lda	SIDeditValue
    208  200d
    209  200d							; check for a volume/mode change...
    210  200d							; if changed, write it to related variables too
    211  200d		       e0 18		      cpx	#SVOLMODE
    212  200f		       d0 10		      bne	noVolumeSetting
    213  2011		       8d 0c 70 	      sta	temp
    214  2014		       29 f0		      and	#$F0
    215  2016		       8d 24 70 	      sta	volModeRAM
    216  2019		       ad 0c 70 	      lda	temp
    217  201c		       29 0f		      and	#$0F
    218  201e		       8d 1c 70 	      sta	volume
    219  2021				   noVolumeSetting
    220  2021							;	lda volModeRAM
    221  2021							;	and #$F0
    222  2021							;	ora volume
    223  2021
    224  2021							; wait for key to be released before returning
    225  2021				   waitKeyRelease
    226  2021		       a5 c5		      lda	197
    227  2023		       c9 40		      cmp	#64
    228  2025		       d0 fa		      bne	waitKeyRelease
    229  2027
    230  2027							; reset volume (messed up from clicks)
    231  2027		       20 55 12 	      jsr	setVolume
    232  202a
    233  202a		       a9 00		      lda	#0
    234  202c							;sta helpMode
    235  202c		       20 f9 10 	      jsr	setHelpMode
    236  202f		       20 c4 0b 	      jsr	displayInit
    237  2032							; X = low data address
    238  2032							; Y = high data address
    239  2032							;	ldx #>hexEditHelp ;low/MSB
    240  2032							;	ldy #<hexEditHelp ;high/LSB
    241  2032							;	jsr displayPage
    242  2032							;	jsr showSidValues
    243  2032
    244  2032							; PREVENT SID EDIT FROM MESSING UP FILTER (WHY IS THIS NEEDED?)
    245  2032		       ad 54 70 	      lda	sidEditSaveTemp5
    246  2035		       8d 9d 70 	      sta	filterSetValue
    247  2038
    248  2038
    249  2038		       60		      rts		; EXIT HEX EDIT MODE
    250  2039							; -------------------------------------------------- /
    251  2039
    252  2039
    253  2039
    254  2039							;************************************
    255  2039				   showSidValues
    256  2039		       a0 02		      ldy	#2
    257  203b				   sidDispLoop1
    258  203b		       8c 73 70 	      sty	sidTemp1
    259  203e		       b9 00 71 	      lda	sidData,y
    260  2041		       8d 74 70 	      sta	sidTemp2
    261  2044		       98		      tya
    262  2045		       0a		      asl
    263  2046		       18		      clc
    264  2047		       69 04		      adc	#4
    265  2049		       a8		      tay
    266  204a		       ad 74 70 	      lda	sidTemp2
    267  204d		       a2 06		      ldx	#6
    268  204f		       20 97 0c 	      jsr	displayHex
    269  2052		       ac 73 70 	      ldy	sidTemp1
    270  2055							;---------------
    271  2055		       b9 07 71 	      lda	sidData+7,y
    272  2058		       8d 74 70 	      sta	sidTemp2
    273  205b		       98		      tya
    274  205c		       0a		      asl
    275  205d		       18		      clc
    276  205e		       69 04		      adc	#4
    277  2060		       a8		      tay
    278  2061		       ad 74 70 	      lda	sidTemp2
    279  2064		       a2 0a		      ldx	#10
    280  2066		       20 97 0c 	      jsr	displayHex
    281  2069		       ac 73 70 	      ldy	sidTemp1
    282  206c							;---------------
    283  206c		       b9 0e 71 	      lda	sidData+14,y
    284  206f		       8d 74 70 	      sta	sidTemp2
    285  2072		       98		      tya
    286  2073		       0a		      asl
    287  2074		       18		      clc
    288  2075		       69 04		      adc	#4
    289  2077		       a8		      tay
    290  2078		       ad 74 70 	      lda	sidTemp2
    291  207b		       a2 0e		      ldx	#14
    292  207d		       20 97 0c 	      jsr	displayHex
    293  2080		       ac 73 70 	      ldy	sidTemp1
    294  2083
    295  2083		       c8		      iny
    296  2084		       c0 07		      cpy	#7
    297  2086		       d0 b3		      bne	sidDispLoop1
    298  2088							;---------------
    299  2088							;---------------
    300  2088		       a0 15		      ldy	#$15
    301  208a				   sidDispLoop2
    302  208a		       8c 73 70 	      sty	sidTemp1
    303  208d		       b9 00 71 	      lda	sidData,y
    304  2090		       8d 74 70 	      sta	sidTemp2
    305  2093		       98		      tya
    306  2094		       38		      sec
    307  2095		       e9 02		      sbc	#2
    308  2097		       a8		      tay
    309  2098		       ad 74 70 	      lda	sidTemp2
    310  209b		       a2 05		      ldx	#5
    311  209d		       20 97 0c 	      jsr	displayHex
    312  20a0		       ac 73 70 	      ldy	sidTemp1
    313  20a3
    314  20a3		       c8		      iny
    315  20a4		       c0 19		      cpy	#$19
    316  20a6		       d0 e2		      bne	sidDispLoop2
    317  20a8							;---------------
    318  20a8		       60		      rts
    319  20a9
    320  20a9
    321  20a9
    322  20a9							;=======================================================================
    323  20a9							; waits for user to press a key (0-F) and returns
    324  20a9							; the value in A
    325  20a9				   getHexKey
    326  20a9		       20 e4 1e 	      jsr	waitForKeyRelease
    327  20ac				   getHexLoop
    328  20ac							;inc 1024
    329  20ac		       20 b4 20 	      jsr	readHexKey
    330  20af		       c9 ff		      cmp	#255	; No key pressed
    331  20b1		       f0 f9		      beq	getHexLoop
    332  20b3							;inc 1025
    333  20b3		       60		      rts
    334  20b4
    335  20b4
    336  20b4
    337  20b4							;=======================================================================
    338  20b4							; Returns the currently pressed hex key, or #255 if none
    339  20b4							; is currently pressed
    340  20b4				   readHexKey
    341  20b4
    342  20b4		       ad 60 70 	      lda	hexKeyMode	; this variable determines which key set is used
    343  20b7		       f0 1a		      beq	normalHexKey
    344  20b9
    345  20b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    346  20b9							; Use piano keys to enter hex numbers
    347  20b9				   pianoHexKey
    348  20b9		       a0 00		      ldy	#0
    349  20bb				   checkLoop2
    350  20bb		       b9 2a 21 	      lda	hexColPiano,y
    351  20be		       f0 10		      beq	quitCheck2
    352  20c0		       8d 00 dc 	      sta	56320
    353  20c3		       ad 01 dc 	      lda	56321
    354  20c6		       39 4e 21 	      and	hexRowPiano,y
    355  20c9		       d0 02		      bne	notPressed2
    356  20cb		       98		      tya
    357  20cc							;sta 1027
    358  20cc		       60		      rts
    359  20cd							;jmp quitCheck2
    360  20cd				   notPressed2
    361  20cd		       c8		      iny
    362  20ce		       d0 eb		      bne	checkLoop2
    363  20d0				   quitCheck2
    364  20d0		       a9 ff		      lda	#255	; no key pressed
    365  20d2		       60		      rts
    366  20d3							;jmp pianoHexKey
    367  20d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  20d3
    369  20d3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  20d3							; Use normal keys (0-9,A-F) to enter hex numbers
    371  20d3				   normalHexKey
    372  20d3		       a0 00		      ldy	#0
    373  20d5				   checkLoop3
    374  20d5		       b9 3c 21 	      lda	hexCol,y
    375  20d8		       f0 10		      beq	quitCheck3
    376  20da		       8d 00 dc 	      sta	56320
    377  20dd		       ad 01 dc 	      lda	56321
    378  20e0		       39 60 21 	      and	hexRow,y
    379  20e3		       d0 02		      bne	notPressed3
    380  20e5		       98		      tya
    381  20e6							;sta 1027
    382  20e6		       60		      rts
    383  20e7							;jmp quitCheck3
    384  20e7				   notPressed3
    385  20e7		       c8		      iny
    386  20e8		       d0 eb		      bne	checkLoop3
    387  20ea				   quitCheck3
    388  20ea		       a9 ff		      lda	#255	; no key pressed
    389  20ec		       60		      rts
    390  20ed
    391  20ed							;beep:
    392  20ed							;ldx #3
    393  20ed							;beepLoop:
    394  20ed							;	lda volModeRAM
    395  20ed							;	ora #$0F
    396  20ed							;	sta SID1+SVOLMODE
    397  20ed							;	sta SID2+SVOLMODE
    398  20ed							;	sta sidData+SVOLMODE
    399  20ed							;	jsr clickDelay
    400  20ed							;	lda volModeRAM
    401  20ed							;	and #$F0
    402  20ed							;	sta SID1+SVOLMODE
    403  20ed							;	sta SID2+SVOLMODE
    404  20ed							;	sta sidData+SVOLMODE
    405  20ed							;	dex
    406  20ed							;	bne beepLoop
    407  20ed							;	rts
    408  20ed
    409  20ed
    410  20ed							; ------------------------------------
    411  20ed							; delay for click (for beep) -- uses Y
    412  20ed							;clickDelay:
    413  20ed							;ldy #$10
    414  20ed							;sty temp
    415  20ed							;mainDelayLoop:
    416  20ed							;	ldy #0
    417  20ed							;innerDelayLoop:
    418  20ed							;	dey
    419  20ed							;	bne innerDelayLoop
    420  20ed							;	dec temp
    421  20ed							;	bne mainDelayLoop
    422  20ed							;	rts
    423  20ed
------- FILE cynthcart2.0.1.asm
   1011  20ed
------- FILE cynth_subroutines.asm LEVEL 2 PASS 2
      0  20ed					      include	"cynth_subroutines.asm"	; Extra subroutines - currently just note sorting routine
      1  20ed							;sorting subroutine coded by mats rosengren (mats.rosengren@esa.int)
      2  20ed							;
      3  20ed							; input:
      4  20ed							;zpadd  - start address of sequence to be sorted shall be put in zpadd, zpadd+1 (zero page)
      5  20ed							;			 should point to the byte just before the first byte to be sorted
      6  20ed							;			 ( "lda (zpadd),y" with 1<=y<=255)
      7  20ed							;nval	 - number of values,  1<= nval <= 255
      8  20ed							;			 value will be destroyed (set to zero)
      9  20ed							;
     10  20ed
     11  20ed
     12  20ed							;*=$6000			;code anywhere in ram or rom
     13  20ed
     14  20ed							;=====================================================================
     15  20ed							; CUSTOM SORT FOR NOTE ARRAY
     16  20ed				   doSort
     17  20ed		       a9 08		      lda	#8
     18  20ef		       8d 22 01 	      sta	nval
     19  20f2				   sort
     20  20f2		       ac 22 01 	      ldy	nval	;start of subroutine sort
     21  20f5		       b9 9f 70 	      lda	noteNumArray-1,y	;last value in (what is left of) sequence to be sorted
     22  20f8		       8d 27 01 	      sta	work3	;save value. will be over-written by largest number
     23  20fb		       4c 09 21 	      jmp	l2
     24  20fe				   l1
     25  20fe		       88		      dey
     26  20ff		       f0 11		      beq	l3
     27  2101		       b9 9f 70 	      lda	noteNumArray-1,y
     28  2104		       cd 26 01 	      cmp	work2
     29  2107		       90 f5		      bcc	l1
     30  2109				   l2
     31  2109		       8c 25 01 	      sty	work1	;index of potentially largest value
     32  210c		       8d 26 01 	      sta	work2	;potentially largest value
     33  210f		       4c fe 20 	      jmp	l1
     34  2112				   l3
     35  2112		       ac 22 01 	      ldy	nval	;where the largest value shall be put
     36  2115		       ad 26 01 	      lda	work2	;the largest value
     37  2118		       99 9f 70 	      sta	noteNumArray-1,y	;put largest value in place
     38  211b		       ac 25 01 	      ldy	work1	;index of free space
     39  211e		       ad 27 01 	      lda	work3	;the over-written value
     40  2121		       99 9f 70 	      sta	noteNumArray-1,y	;put the over-written value in the free space
     41  2124		       ce 22 01 	      dec	nval	;end of the shorter sequence still left
     42  2127		       d0 c9		      bne	sort	;start working with the shorter sequence
     43  2129		       60		      rts
     44  212a							;=====================================================================
     45  212a
     46  212a
     47  212a
     48  212a
     49  212a							;=====================================================================
     50  212a							; ORIGINAL VERSION
     51  212a							;originalSort:
     52  212a							;ldy nval			 ;start of subroutine sort
     53  212a							;;lda (zpadd),y		 ;last value in (what is left of) sequence to be sorted
     54  212a							;sta work3			;save value. will be over-written by largest number
     55  212a							;jmp l2
     56  212a							;l1:
     57  212a							;dey
     58  212a							;beq l3
     59  212a							;;lda (zpadd),y
     60  212a							;cmp work2
     61  212a							;bcc l1
     62  212a							;l2:
     63  212a							;sty work1			;index of potentially largest value
     64  212a							;sta work2			;potentially largest value
     65  212a							;jmp l1
     66  212a							;l3:
     67  212a							;ldy nval				;where the largest value shall be put
     68  212a							;lda work2			;the largest value
     69  212a							;;sta (zpadd),y		;put largest value in place
     70  212a							;ldy work1			;index of free space
     71  212a							;lda work3			;the over-written value
     72  212a							;;sta (zpadd),y		;put the over-written value in the free space
     73  212a							;dec nval				;end of the shorter sequence still left
     74  212a							;bne sort				;start working with the shorter sequence
     75  212a							;rts
     76  212a							;=====================================================================
     77  212a
     78  212a
------- FILE cynthcart2.0.1.asm
   1013  212a
------- FILE cynth_keycommands.asm LEVEL 2 PASS 2
      0  212a					      include	"cynth_keycommands.asm"	; key matrix tables and key command tables
      1  212a
      2  212a							;------------------------------------------
      3  212a							; Keyboard Reading Data
      4  212a							;------------------------------------------
      5  212a
      6  212a				   hexColPiano
      7  212a		       bf 7f fd fb*	      byte.b	$BF,$7F,$FD,$FB, $FB,$F7,$EF,$EF, $DF,$BF, $F7,$F7, $EF,$EF,$DF,$DF, $7F,0	; PIANO KEYBOARD
      8  213c				   hexCol
      9  213c		       ef 7f 7f fd*	      byte.b	$EF,$7F,$7F,$FD, $FD,$FB,$FB,$F7, $F7,$EF,~$02,~$08, ~$04,~$04,$FD,~$04, $7F,0
     10  214e							; 0   1   2   3     4	 5   6	 7     8   9	A   B	    C	D   E	F    SPACEBAR (cancel)
     11  214e				   hexRowPiano
     12  214e		       08 08 01 01*	      byte.b	$08,$08,$01,$01, $08,$01,$01,$08, $08,$01,$02,$40, $02,$40,$02,$40, $02,0	; PIANO KEYBOARD ($10 = space) ($02 = backarrow)
     13  2160				   hexRow
     14  2160		       08 01 08 01*	      byte.b	$08,$01,$08,$01, $08,$01,$08,$01, $08,$01,$04,$10, $10,$04,$40,$20, $02,0
     15  2172							; 0   1   2   3     4	 5   6	 7     8   9   A   B	 C   D	 E   F	   SPACEBAR (cancel)
     16  2172
     17  2172							;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
     18  2172							; Column activation data
     19  2172				   col			;	   x	     x		      x 	  x    A    x	 B
     20  2172		       7f 7f fd fd*	      byte.b	$7F, $7F, $FD, $FD, $FD, $FB, $FB, $FB, $FB, $F7, $F7, $F7
     21  217e		       ef ef ef ef*	      byte.b	$EF, $EF, $EF, $EF, $DF, $DF, $DF, $BF, $BF, $BF, $BF, $FE, 0
     22  218b							;    C    x	D    x	    E	 F    x 	  x	    x
     23  218b
     24  218b							; Row testing data
     25  218b				   row			;	   x	     x		      x 	  x    A    x	 B
     26  218b		       40 08 02 01*	      byte.b	$40, $08, $02, $01, $40, $02, $01, $40, $08, $02, $01, $40
     27  2197		       02 01 40 08*	      byte.b	$02, $01, $40, $08, $02, $40, $08, $02, $01, $40, $08, $01, 0
     28  21a4							;    C    x	D    x	    E	 F    x 	  x	    x
     29  21a4							;-----------------------------------------------
     30  21a4							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     31  21a4							;  Key  q  2  w  3    e  r  5	t    6	y  7  u
     32  21a4							;  Hex  1  2  3  4    5  6  7	8    9	10 11 12
     33  21a4							;-----------------------------------------------
     34  21a4							; Note  c  #  d  #    e  f  #	g    #	a  #  b
     35  21a4							;  Key  i  9  o  0    p  @  -	*    &	|  CL RE
     36  21a4							;  Hex  13 14 15 16   17 18 19 20   21 22 23 24
     37  21a4							;-----------------------------------------------
     38  21a4
     39  21a4				   commandKeys		; row, column
     40  21a4		       7f 10		      byte.b	~$80, $10	;spc 28
     41  21a6		       fd 04		      byte.b	~$02, $04	;A   0
     42  21a8		       fd 20		      byte.b	~$02, $20	;S   1
     43  21aa		       fb 04		      byte.b	~$04, $04	;D   2
     44  21ac		       fb 20		      byte.b	~$04, $20	;F   3
     45  21ae		       f7 04		      byte.b	~$08, $04	;G   4
     46  21b0		       f7 20		      byte.b	~$08, $20	;H   5
     47  21b2		       ef 04		      byte.b	~$10, $04	;J   6
     48  21b4		       ef 20		      byte.b	~$10, $20	;K   7
     49  21b6		       df 04		      byte.b	~$20, $04	;L   8
     50  21b8		       df 20		      byte.b	~$20, $20	;:   9
     51  21ba		       bf 04		      byte.b	~$40, $04	;;   10
     52  21bc		       bf 20		      byte.b	~$40, $20	;=   11
     53  21be		       fd 10		      byte.b	~$02, $10	;Z   12
     54  21c0		       fb 80		      byte.b	~$04, $80	;X   13
     55  21c2		       fb 10		      byte.b	~$04, $10	;C   14
     56  21c4		       f7 80		      byte.b	~$08, $80	;V   15
     57  21c6		       f7 10		      byte.b	~$08, $10	;B   16
     58  21c8		       ef 80		      byte.b	~$10, $80	;N   17
     59  21ca		       ef 10		      byte.b	~$10, $10	;M   18
     60  21cc		       df 80		      byte.b	~$20, $80	;,   19
     61  21ce		       df 10		      byte.b	~$20, $10	;.   20
     62  21d0		       bf 80		      byte.b	~$40, $80	;/   21
     63  21d2		       fe 80		      byte.b	~$01, $80	;u/d 22
     64  21d4		       fe 04		      byte.b	~$01, $04	;l/r 23
     65  21d6		       fe 10		      byte.b	~$01, $10	;F1  24
     66  21d8		       fe 20		      byte.b	~$01, $20	;F3  25
     67  21da		       fe 40		      byte.b	~$01, $40	;F5  26
     68  21dc		       fe 08		      byte.b	~$01, $08	;F7  27
     69  21de		       fe 02		      byte.b	~$01, $02	;ret 29
     70  21e0		       7f 02		      byte.b	~$80, $02	;Larr 30
     71  21e2							;byte ~$80, $04		;Larr 30
     72  21e2
     73  21e2				   rawKeyFunctions
     74  21e2							;    functionPointer, inputData:Y,A
     75  21e2		       ef 0f 00 00	      word.w	bendBender, $0000	;space
     76  21e6		       79 13 00 0a	      word.w	setPatch, $0A00	;A
     77  21ea		       79 13 00 0b	      word.w	setPatch, $0B00	;S
     78  21ee		       79 13 00 0c	      word.w	setPatch, $0C00	;D
     79  21f2		       79 13 00 0d	      word.w	setPatch, $0D00	;F
     80  21f6		       79 13 00 0e	      word.w	setPatch, $0E00	;G
     81  21fa		       79 13 00 0f	      word.w	setPatch, $0F00	;H
     82  21fe		       79 13 00 10	      word.w	setPatch, $1000	;J
     83  2202		       79 13 00 11	      word.w	setPatch, $1100	;K
     84  2206		       79 13 00 12	      word.w	setPatch, $1200	;L
     85  220a		       79 13 00 13	      word.w	setPatch, $1300	;:
     86  220e		       79 13 00 15	      word.w	setPatch, $1500	;;
     87  2212		       79 13 00 14	      word.w	setPatch, $1400	;=
     88  2216		       79 13 00 00	      word.w	setPatch, $0000	;Z
     89  221a		       79 13 00 01	      word.w	setPatch, $0100	;X
     90  221e		       79 13 00 02	      word.w	setPatch, $0200	;C
     91  2222		       79 13 00 03	      word.w	setPatch, $0300	;V
     92  2226		       79 13 00 04	      word.w	setPatch, $0400	;B
     93  222a		       79 13 00 05	      word.w	setPatch, $0500	;N
     94  222e		       79 13 00 06	      word.w	setPatch, $0600	;M
     95  2232		       79 13 00 07	      word.w	setPatch, $0700	;,
     96  2236		       79 13 00 08	      word.w	setPatch, $0800	;.
     97  223a		       79 13 00 09	      word.w	setPatch, $0900	;/
     98  223e		       26 13 00 00	      word.w	ksetMode, $0000	;up/down
     99  2242		       26 13 01 00	      word.w	ksetMode, $0001	;left/right
    100  2246		       a5 12 03 00	      word.w	setOctave, 3	;F1
    101  224a		       a5 12 02 00	      word.w	setOctave, 2	;F3
    102  224e		       a5 12 01 00	      word.w	setOctave, 1	;F5
    103  2252		       a5 12 00 00	      word.w	setOctave, 0	;F7
    104  2256		       87 0f 00 00	      word.w	khelp,0	;return
    105  225a		       19 0f 00 00	      word.w	kloadPatch,0	;Larrow
    106  225e
    107  225e				   minimalKeyFunctions
    108  225e							;    functionPointer, inputData:Y,A
    109  225e		       ef 0f 00 00	      word.w	bendBender, $0000	;space
    110  2262		       00 00 00 00	      word.w	0, 0	;A
    111  2266		       00 00 00 00	      word.w	0, 0	;S
    112  226a		       00 00 00 00	      word.w	0, 0	;D
    113  226e		       00 00 00 00	      word.w	0, 0	;F
    114  2272		       00 00 00 00	      word.w	0, 0	;G
    115  2276		       00 00 00 00	      word.w	0, 0	;H
    116  227a		       00 00 00 00	      word.w	0, 0	;J
    117  227e		       00 00 00 00	      word.w	0, 0	;K
    118  2282		       00 00 00 00	      word.w	0, 0	;L
    119  2286		       00 00 00 00	      word.w	0, 0	;:
    120  228a		       00 00 00 00	      word.w	0, 0	;;
    121  228e		       00 00 00 00	      word.w	0, 0	;=
    122  2292		       00 00 00 00	      word.w	0, 0	;Z
    123  2296		       00 00 00 00	      word.w	0, 0	;X
    124  229a		       00 00 00 00	      word.w	0, 0	;C
    125  229e		       00 00 00 00	      word.w	0, 0	;V
    126  22a2		       00 00 00 00	      word.w	0, 0	;B
    127  22a6		       00 00 00 00	      word.w	0, 0	;N
    128  22aa		       00 00 00 00	      word.w	0, 0	;M
    129  22ae		       00 00 00 00	      word.w	0, 0	;,
    130  22b2		       00 00 00 00	      word.w	0, 0	;.
    131  22b6		       00 00 00 00	      word.w	0, 0	;/
    132  22ba		       00 00 00 00	      word.w	0, 0	;up/down
    133  22be		       00 00 00 00	      word.w	0, 0	;left/right
    134  22c2		       a5 12 03 00	      word.w	setOctave, 3	;F1
    135  22c6		       a5 12 02 00	      word.w	setOctave, 2	;F3
    136  22ca		       a5 12 01 00	      word.w	setOctave, 1	;F5
    137  22ce		       a5 12 00 00	      word.w	setOctave, 0	;F7
    138  22d2		       00 00 00 00	      word.w	0,0	;return
    139  22d6		       00 00 00 00	      word.w	0,0	;Larrow
    140  22da
    141  22da				   CTRLKeyFunctions
    142  22da							;    functionPointer, inputData:Y,A
    143  22da		       00 00 00 00	      word.w	0, $0000	;space
    144  22de		       72 11 e0 00	      word.w	setRelease, REL_SHORT	;A
    145  22e2		       72 11 e9 00	      word.w	setRelease, REL_MED	;S
    146  22e6		       72 11 ee 00	      word.w	setRelease, REL_LONG	;D
    147  22ea		       26 13 00 00	      word.w	ksetMode, MODE_NORMAL	;F
    148  22ee		       26 13 01 00	      word.w	ksetMode, MODE_5THS	;G
    149  22f2		       26 13 02 00	      word.w	ksetMode, MODE_5PORT	;H
    150  22f6		       26 13 20 00	      word.w	ksetMode, MODE_MONO1	;J
    151  22fa		       26 13 40 00	      word.w	ksetMode, MODE_ARP1	;K
    152  22fe		       26 13 41 00	      word.w	ksetMode, MODE_ARP2	;L
    153  2302		       26 13 42 00	      word.w	ksetMode, MODE_ARP3	;:
    154  2306		       26 13 43 00	      word.w	ksetMode, MODE_ARP4	;;
    155  230a		       26 13 44 00	      word.w	ksetMode, MODE_ARP5	;=
    156  230e		       fe 12 00 00	      word.w	ksetFX, $0000	;Z
    157  2312		       fe 12 01 00	      word.w	ksetFX, $0001	;X
    158  2316		       fe 12 02 00	      word.w	ksetFX, $0002	;C
    159  231a		       fe 12 03 00	      word.w	ksetFX, $0003	;V
    160  231e		       fe 12 04 00	      word.w	ksetFX, $0004	;B
    161  2322		       fe 12 05 00	      word.w	ksetFX, $0005	;N
    162  2326		       fe 12 06 00	      word.w	ksetFX, $0006	;M
    163  232a		       fe 12 07 00	      word.w	ksetFX, $0007	;,
    164  232e		       fe 12 08 00	      word.w	ksetFX, $0008	;.
    165  2332							;word ksetFX,	$0009	;/
    166  2332		       26 13 21 00	      word.w	ksetMode, MODE_MONO2	;/
    167  2336		       26 13 31 00	      word.w	ksetMode, MODE_MONOPORT1	;up/down
    168  233a		       26 13 32 00	      word.w	ksetMode, MODE_MONOPORT2	;left/right
    169  233e		       52 12 0f 00	      word.w	ksetVolume, VOLHIGH	;F1
    170  2342		       52 12 0b 00	      word.w	ksetVolume, VOLMED	;F3
    171  2346		       52 12 07 00	      word.w	ksetVolume, VOLLOW	;F5
    172  234a		       52 12 00 00	      word.w	ksetVolume, VOLOFF	;F7
    173  234e		       26 13 08 00	      word.w	ksetMode, MODE_6CHAN	;return
    174  2352		       00 00 00 00	      word.w	0,0	;Larrow
    175  2356
    176  2356				   shiftKeyFunctions
    177  2356							;    functionPointer, inputData:Y,A
    178  2356		       00 00 00 00	      word.w	0, $0000	;space
    179  235a		       1f 12 00 00	      word.w	setAttack,ATK_SHORT	;A
    180  235e		       1f 12 90 00	      word.w	setAttack,ATK_MED	;S
    181  2362		       1f 12 e0 00	      word.w	setAttack,ATK_LONG	;D
    182  2366		       fd 10 08 01	      word.w	setVideoMode,$0108	;F
    183  236a		       fd 10 03 02	      word.w	setVideoMode,$0203	;G
    184  236e		       fd 10 15 03	      word.w	setVideoMode,$0315	;H
    185  2372		       08 10 02 00	      word.w	setVIC, 2	;J
    186  2376		       08 10 01 00	      word.w	setVIC, 1	;K
    187  237a		       08 10 00 00	      word.w	setVIC, 0	;L
    188  237e		       cd 10 01 00	      word.w	setFullScreenMode, $0001	;:
    189  2382		       cd 10 00 00	      word.w	setFullScreenMode, $0000	;;
    190  2386		       00 00 00 00	      word.w	0, $0000	;=
    191  238a		       42 11 00 00	      word.w	setLFORate,0	;Z
    192  238e		       42 11 01 00	      word.w	setLFORate,1	;X
    193  2392		       42 11 02 00	      word.w	setLFORate,2	;C
    194  2396		       42 11 03 00	      word.w	setLFORate,3	;V
    195  239a		       2c 11 00 00	      word.w	setLFODepth,0	;B
    196  239e		       2c 11 01 00	      word.w	setLFODepth,1	;N
    197  23a2		       2c 11 02 00	      word.w	setLFODepth,2	;M
    198  23a6		       2c 11 03 00	      word.w	setLFODepth,3	;,
    199  23aa		       00 00 00 00	      word.w	0, $0000	;.
    200  23ae		       00 00 00 00	      word.w	0, $0000	;/
    201  23b2		       0c 10 00 00	      word.w	ksetPaddles, 0	;up/down
    202  23b6		       0c 10 01 00	      word.w	ksetPaddles, 1	;left/right
    203  23ba		       26 13 12 00	      word.w	ksetMode, $0012	;F1 (Portamento slow)
    204  23be		       26 13 11 00	      word.w	ksetMode, $0011	;F3 (Portamento med)
    205  23c2		       26 13 10 00	      word.w	ksetMode, $0010	;F5 (Portamento fast)
    206  23c6		       26 13 00 00	      word.w	ksetMode, $0000	;F7 (Normal polyphonic)
    207  23ca		       da 0f 00 00	      word.w	kclearModulation,0	;return
    208  23ce		       00 00 00 00	      word.w	0,0	;Larrow
    209  23d2
    210  23d2				   commKeyFunctions
    211  23d2							;    functionPointer, inputData:Y,A
    212  23d2		       00 00 00 00	      word.w	0, $0000	;space
    213  23d6		       2b 10 00 00	      word.w	ksetFilter, $0000	;A
    214  23da		       2b 10 20 00	      word.w	ksetFilter, $0020	;S
    215  23de		       2b 10 40 00	      word.w	ksetFilter, $0040	;D
    216  23e2		       2b 10 60 00	      word.w	ksetFilter, $0060	;F
    217  23e6		       2b 10 80 00	      word.w	ksetFilter, $0080	;G
    218  23ea		       2b 10 a0 00	      word.w	ksetFilter, $00A0	;H
    219  23ee		       2b 10 c0 00	      word.w	ksetFilter, $00C0	;J
    220  23f2		       2b 10 e0 00	      word.w	ksetFilter, $00E0	;K
    221  23f6		       00 00 00 00	      word.w	0, $0000	;L
    222  23fa		       00 00 00 00	      word.w	0, $0000	;:
    223  23fe		       00 00 00 00	      word.w	0, $0000	;;
    224  2402		       00 00 00 00	      word.w	0, $0000	;=
    225  2406		       7b 10 00 00	      word.w	kfiltOnOff,$0000	;Z
    226  240a		       7b 10 00 01	      word.w	kfiltOnOff,$0100	;X
    227  240e		       7b 10 00 02	      word.w	kfiltOnOff,$0200	;C
    228  2412		       16 10 00 00	      word.w	ksetPad2, $0000	;V
    229  2416		       16 10 01 00	      word.w	ksetPad2, $0001	;B
    230  241a		       16 10 03 00	      word.w	ksetPad2, $0003	;N
    231  241e		       16 10 04 00	      word.w	ksetPad2, $0004	;M
    232  2422		       d3 11 ff ff	      word.w	setMidiMode, $FFFF	;,  OMNI
    233  2426		       d3 11 00 00	      word.w	setMidiMode, $0000	;.  CHANNEL 1
    234  242a		       d3 11 04 04	      word.w	setMidiMode, $0404	;/  CHANNEL 5
    235  242e		       00 00 00 00	      word.w	0, $0000	;up/down
    236  2432		       00 00 00 00	      word.w	0, $0000	;left/right
    237  2436		       e9 0f 01 00	      word.w	ksetPalNtsc,$0001	;F1
    238  243a		       e9 0f 00 00	      word.w	ksetPalNtsc,$0000	;F3
    239  243e							;word 0, $0000			;F1
    240  243e							;word 0, $0000			;F3
    241  243e		       00 00 00 00	      word.w	0, $0000	;F5
    242  2442		       00 00 00 00	      word.w	0, $0000	;F7
    243  2446		       00 00 00 00	      word.w	0,0	;return
    244  244a		       00 00 00 00	      word.w	0,0	;Larrow
    245  244e
    246  244e
    247  244e
    248  244e				   runstopKeyFunctions
    249  244e							;    functionPointer, inputData:Y,A
    250  244e		       00 00 00 00	      word.w	0, $0000	;space
    251  2452		       b7 10 00 00	      word.w	ksetTune,$0000	;A
    252  2456		       b7 10 00 01	      word.w	ksetTune,$0100	;S
    253  245a		       b7 10 00 02	      word.w	ksetTune,$0200	;D
    254  245e		       b7 10 00 03	      word.w	ksetTune,$0300	;F
    255  2462		       b7 10 00 04	      word.w	ksetTune,$0400	;G
    256  2466		       b7 10 00 05	      word.w	ksetTune,$0500	;H
    257  246a		       b7 10 00 06	      word.w	ksetTune,$0600	;J
    258  246e		       b7 10 00 07	      word.w	ksetTune,$0700	;K
    259  2472		       b7 10 00 08	      word.w	ksetTune,$0800	;L
    260  2476		       b7 10 00 09	      word.w	ksetTune,$0900	;:
    261  247a		       00 00 00 00	      word.w	0, $0000	;;
    262  247e							;word ksetTune,$0A00	;;
    263  247e		       00 00 00 00	      word.w	0, $0000	;=
    264  2482		       79 13 00 16	      word.w	setPatch, $1600	;Z
    265  2486		       79 13 00 17	      word.w	setPatch, $1700	;X
    266  248a		       79 13 00 18	      word.w	setPatch, $1800	;C
    267  248e		       79 13 00 19	      word.w	setPatch, $1900	;V
    268  2492		       79 13 00 1a	      word.w	setPatch, $1A00	;B
    269  2496		       79 13 00 1b	      word.w	setPatch, $1B00	;N
    270  249a		       79 13 00 1c	      word.w	setPatch, $1C00	;M
    271  249e		       79 13 00 1d	      word.w	setPatch, $1D00	;,
    272  24a2		       00 00 00 00	      word.w	0, $0000	;.
    273  24a6		       00 00 00 00	      word.w	0, $0000	;/
    274  24aa							;word ksetBlackBG, $0000	;.
    275  24aa							;word ksetBlueBG, $0000  ;/
    276  24aa		       00 00 00 00	      word.w	0, $0000	;up/down
    277  24ae		       00 00 00 00	      word.w	0, $0000	;left/right
    278  24b2		       f6 1e 00 00	      word.w	SIDEdit,$0000	;F1
    279  24b6		       c4 0e 00 00	      word.w	ksavePatch,0	;F3
    280  24ba		       00 00 00 00	      word.w	0,0	;F5
    281  24be		       f6 1e ff ff	      word.w	SIDEdit,$FFFF	;F7
    282  24c2		       00 00 00 00	      word.w	0,0	;return
    283  24c6		       00 00 00 00	      word.w	0,0	;Larrow
    284  24ca
    285  24ca				   modeList
    286  24ca		       00		      byte.b	MODE_NORMAL
    287  24cb		       01		      byte.b	MODE_5THS
    288  24cc		       02		      byte.b	MODE_5PORT
    289  24cd		       10		      byte.b	MODE_PORT1
    290  24ce		       11		      byte.b	MODE_PORT2
    291  24cf		       12		      byte.b	MODE_PORT3
    292  24d0		       20		      byte.b	MODE_MONO1
    293  24d1		       21		      byte.b	MODE_MONO2
    294  24d2		       31		      byte.b	MODE_MONOPORT1	; new
    295  24d3		       32		      byte.b	MODE_MONOPORT2	; new
    296  24d4		       40		      byte.b	MODE_ARP1
    297  24d5		       41		      byte.b	MODE_ARP2
    298  24d6		       42		      byte.b	MODE_ARP3
    299  24d7		       43		      byte.b	MODE_ARP4
    300  24d8		       44		      byte.b	MODE_ARP5
    301  24d9		       08		      byte.b	MODE_6CHAN	;16
    302  24da							;byte MODE_MONOPORT1
    303  24da							;byte MODE_MONOPORT2 ;16
------- FILE cynthcart2.0.1.asm
------- FILE cynth_data.asm LEVEL 2 PASS 2
      0  24da					      include	"cynth_data.asm"	; Screen text, data tables, note tuning tables, etc.
      1  24da
      2  24da
      3  24da		       00 1d	   MAX_PATCH_NUMBER equ	29
      4  24da
      5  24da
      6  24da				   patchName
      7  24da		       53 41 57 54*	      byte.b	"SAWTOOTH BASS   "	;0
      8  24ea		       47 52 49 54*	      byte.b	"GRITTY BASS	  "	;1
      9  24fa		       50 4f 52 54*	      byte.b	"PORTAMENTO 5THS "	;2
     10  250a		       53 41 57 20*	      byte.b	"SAW PORTAMENTO  "	;3
     11  251a		       50 55 4c 53*	      byte.b	"PULSE 5THS	  "	;4
     12  252a		       50 55 4c 53*	      byte.b	"PULSE HIGH PORT "	;5
     13  253a		       54 52 49 4e*	      byte.b	"TRINGL HIGH LONG"	;6
     14  254a		       54 52 49 41*	      byte.b	"TRIANGLE DROP   "	;7
     15  255a		       53 49 44 20*	      byte.b	"SID EXPLOSION   "	;8
     16  256a		       4d 55 54 45*	      byte.b	"MUTE		  "	;9
     17  257a		       46 49 4c 54*	      byte.b	"FILTER BASS	  "	;10 <--------- new patches start here
     18  258a		       53 57 45 45*	      byte.b	"SWEEP ARP	  "	;11
     19  259a		       50 4c 55 43*	      byte.b	"PLUCK ARP	  "	;12
     20  25aa		       53 4c 4f 57*	      byte.b	"SLOW ARP	  "	;13
     21  25ba		       46 49 4c 54*	      byte.b	"FILTER STACK 1  "	;14
     22  25ca		       46 49 4c 54*	      byte.b	"FILTER STACK 2  "	;15
     23  25da
     24  25da				   patchName2
     25  25da		       50 55 4c 53*	      byte.b	"PULSAR	  "	;16
     26  25ea		       56 49 42 52*	      byte.b	"VIBRATO LEAD	  "	;17
     27  25fa		       53 4c 4f 57*	      byte.b	"SLOW RISE	  "	;18
     28  260a		       42 45 4e 44*	      byte.b	"BENDING ECHO	  "	;19
     29  261a		       36 20 43 48*	      byte.b	"6 CHANNEL SAW   "	;20
     30  262a		       41 52 50 20*	      byte.b	"ARP LEAD	  "	;21 <--- LAST PATCH THAT'S ACTUALLY SET UP AND USED
     31  263a		       4c 41 53 45*	      byte.b	"LASER BASS	  "	;22
     32  264a		       54 52 4f 4d*	      byte.b	"TROMBONE BLAST  "	;23 ; THESE PATCHES ARE FOR FUTURE EXPANSION
     33  265a		       4e 4f 49 53*	      byte.b	"NOISY SQUARE ARP"	;24
     34  266a		       54 52 49 41*	      byte.b	"TRIANGLE SYNC   "	;25
     35  267a		       4d 4f 4e 4f*	      byte.b	"MONO SYNC ECHO  "	;26
     36  268a		       43 4c 45 41*	      byte.b	"CLEAN SAWTOOTH  "	;27 ; To ADD: TRI+SAW 30 30 30    TRI-RINGMOD 14 14 14    TRI+PULSE-RINGMOD 54 54 54
     37  269a		       43 4c 45 41*	      byte.b	"CLEAN TRIANGLE  "	;28
     38  26aa		       43 4c 45 41*	      byte.b	"CLEAN SQUARE	  "	;29
     39  26ba		       50 41 54 43*	      byte.b	"PATCH SAVED	  "	;30
     40  26ca		       43 55 53 54*	      byte.b	"CUSTOM PATCH	  "	;31
     41  26da
     42  26da
     43  26da							;SAVED_PATCH_MESSAGE equ 29
     44  26da							;CUSTOM_PATCH_NUMBER equ 30
     45  26da		       00 1e	   SAVED_PATCH_MESSAGE equ	MAX_PATCH_NUMBER+1
     46  26da		       00 1f	   CUSTOM_PATCH_NUMBER equ	MAX_PATCH_NUMBER+2
     47  26da
     48  26da
     49  26da				   patchSoundMode
     50  26da		       00		      byte.b	MODE_NORMAL	;0
     51  26db		       00		      byte.b	MODE_NORMAL	;1
     52  26dc		       02		      byte.b	MODE_5PORT	;2
     53  26dd		       11		      byte.b	MODE_PORT2	;3
     54  26de		       01		      byte.b	MODE_5THS	;4
     55  26df		       11		      byte.b	MODE_PORT2	;5
     56  26e0		       00		      byte.b	MODE_NORMAL	;6
     57  26e1		       20		      byte.b	MODE_MONO1	;7
     58  26e2		       10		      byte.b	MODE_PORT1	;8
     59  26e3		       00		      byte.b	MODE_NORMAL	;9
     60  26e4		       00		      byte.b	MODE_NORMAL	;10 <--- start of new 1.5.0 patches
     61  26e5		       40		      byte.b	MODE_ARP1	;11
     62  26e6		       41		      byte.b	MODE_ARP2	;12
     63  26e7		       42		      byte.b	MODE_ARP3	;13
     64  26e8		       20		      byte.b	MODE_MONO1	;14
     65  26e9		       21		      byte.b	MODE_MONO2	;15
     66  26ea		       00		      byte.b	MODE_NORMAL	;16
     67  26eb		       20		      byte.b	MODE_MONO1	;17
     68  26ec		       00		      byte.b	MODE_NORMAL	;18
     69  26ed		       12		      byte.b	MODE_PORT3	;19
     70  26ee		       08		      byte.b	MODE_6CHAN	;20
     71  26ef		       44		      byte.b	MODE_ARP5	;21
     72  26f0		       31		      byte.b	MODE_MONOPORT1	;22 <---- start of 2.0 patches
     73  26f1		       32		      byte.b	MODE_MONOPORT2	;23
     74  26f2		       40		      byte.b	MODE_ARP1	;24
     75  26f3		       32		      byte.b	MODE_MONOPORT2	;25
     76  26f4		       32		      byte.b	MODE_MONOPORT2	;26
     77  26f5		       00		      byte.b	MODE_NORMAL	;27
     78  26f6		       00		      byte.b	MODE_NORMAL	;28
     79  26f7		       00		      byte.b	MODE_NORMAL	;29
     80  26f8		       00		      byte.b	MODE_NORMAL	;30
     81  26f9
     82  26f9
     83  26f9							;     0     1	   2	 3     4     5	   6	 7     8     9
     84  26f9				   patchFX
     85  26f9		       00 05 00 00*	      byte.b	0, 5, 0, 0, 7, 6, 1, 3, 2, 0
     86  2703		       03 01 03 00*	      byte.b	3, 1, 3, 0, 2, 3, 4, 1, 1, 2
     87  270d		       00 03 01 03*	      byte.b	0, 3, 1, 3, 3, 0, 3, 0, 0, 0
     88  2717				   patchLFO		; (TREMOLO)
     89  2717		       11 02 02 13*	      byte.b	$11, $02, $02, $13, $13, $00, $01, $02, $13, $00
     90  2721		       00 22 13 11*	      byte.b	$00, $22, $13, $11, $10, $02, $00, $33, $10, $11
     91  272b		       10 12 13 00*	      byte.b	$10, $12, $13, $00, $00, $13, $13, $00, $00, $00
     92  2735				   patchOctave
     93  2735		       00 00 01 01*	      byte.b	0, 0, 1, 1, 1, 2, 3, 3, 0, 0
     94  273f		       01 02 03 01*	      byte.b	1, 2, 3, 1, 1, 2, 3, 3, 1, 3
     95  2749		       01 03 00 03*	      byte.b	1, 3, 0, 3, 3, 1, 1, 1, 3, 1
     96  2753				   patchAD
     97  2753		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, 0
     98  275d		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $E0, $A0
     99  2767		       00 00 00 00*	      byte.b	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    100  2771				   patchSR1
    101  2771		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    102  277b		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    103  2785		       f0 f5 f5 86*	      byte.b	$F0, $F5, $F5, $86, $F6, $F2, $F8, $F2, $F2, $F0
    104  278f				   patchSR2
    105  278f		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    106  2799		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    107  27a3		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $54, $F2, $F8, $F2, $F2, $F0
    108  27ad				   patchSR3
    109  27ad		       f0 f5 f0 f0*	      byte.b	$F0, $F5, $F0, $F0, $F8, $F0, $FE, $F6, $F0, 0
    110  27b7		       f0 fa f6 f6*	      byte.b	$F0, $Fa, $F6, $F6, $FA, $F9, $FE, $F7, $FF, $EE
    111  27c1		       f0 f5 f5 f6*	      byte.b	$F0, $F5, $F5, $F6, $F6, $F2, $F8, $F2, $F2, $F0
    112  27cb				   patchPaddle
    113  27cb		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    114  27d5		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    115  27df		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    116  27e9				   newPatchFiltCut
    117  27e9		       b0 90 c0 ff*	      byte.b	$B0, $90, $c0, $FF, $40, $50, $c0, $70, $80, 0
    118  27f3		       80 a0 c0 ff*	      byte.b	$80, $A0, $c0, $FF, $A0, $80, $c0, $c0, $80, $80
    119  27fd		       c0 f0 c0 b0*	      byte.b	$c0, $F0, $c0, $b0, $A0, $50, $50, $c0, $c0, $80
    120  2807				   patchVol
    121  2807		       0f 0f 0b 09*	      byte.b	$f, $F, $b, $9, $9, $7, $F, $C, $c, 0
    122  2811		       0f 0c 0f 0b*	      byte.b	$f, $c, $F, $b, $9, $7, $F, $c, $F, $8
    123  281b		       0f 0c 0b 09*	      byte.b	$f, $C, $b, $9, $F, $F, $C, $F, $F, $c
    124  2825				   patchPWL
    125  2825		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    126  282f		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    127  2839		       00 00 00 00*	      byte.b	0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    128  2843				   patchPWH
    129  2843		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 0
    130  284d		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    131  2857		       08 08 08 08*	      byte.b	8, 8, 8, 8, 8, 8, 8, 8, 8, 8
    132  2861
    133  2861				   patchWave1
    134  2861		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    135  286b		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    136  2875		       20 20 14 80*	      byte.b	$20, $20, $14, $80, $40, $12, $14, $20, $10, $40
    137  287f				   patchWave2
    138  287f		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    139  2889		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    140  2893		       20 20 14 20*	      byte.b	$20, $20, $14, $20, $80, $12, $14, $20, $10, $40
    141  289d				   patchWave3
    142  289d		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $10, $80, 0
    143  28a7		       20 20 20 20*	      byte.b	$20, $20, $20, $20, $40, $40, $10, $20, $20, $40
    144  28b1		       20 20 14 10*	      byte.b	$20, $20, $14, $10, $10, $12, $14, $20, $10, $40
    145  28bb
    146  28bb				   patchFilt
    147  28bb		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    148  28c5		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $0F, $0F, $EF, $EF
    149  28cf		       ef ef 0f 0f*	      byte.b	$EF, $EF, $0F, $0F, $EF, $EF, $EF, $0F, $0F, $EF
    150  28d9				   patchVolMode
    151  28d9		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    152  28e3		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $20, $20, $10, $10, $10, $10
    153  28ed		       10 10 10 10*	      byte.b	$10, $10, $10, $10, $10, $10, $20, $10, $10, $10
    154  28f7
    155  28f7				   octaveTable
    156  28f7		       00 0c 18 24*	      byte.b	0,12,24,36,48
    157  28fc
    158  28fc
    159  28fc				   pwLFO
    160  28fc		       10 30 50 70	      byte.b	%00010000, %00110000, %01010000, %01110000
    161  2900		       90 b0 d0 f0	      byte.b	%10010000, %10110000, %11010000, %11110000
    162  2904		       f0 d0 b0 90	      byte.b	%11110000, %11010000, %10110000, %10010000
    163  2908		       70 50 30 10	      byte.b	%01110000, %01010000, %00110000, %00010000
    164  290c
    165  290c				   patOffset
    166  290c		       00 28 50 78*	      byte.b	0,40,80,120,160,200
    167  2912
    168  2912				   voiceOffset
    169  2912		       00 07 0e 	      byte.b	$0,$7,$E
    170  2915
    171  2915
    172  2915
    173  2915							;---------------------------- displayPage
    174  2915
    175  2915							; This chart references each line
    176  2915							; on the standard character based screen.
    177  2915							; = value x 40 + 0x400
    178  2915				   lineOffsetL
    179  2915		       00		      byte.b	$00
    180  2916		       28 50 78 a0*	      byte.b	$28,$50,$78, $A0,$C8,$F0
    181  291c		       18 40 68 90*	      byte.b	$18,$40,$68, $90,$B8,$E0
    182  2922		       08 30 58 80*	      byte.b	$08,$30,$58, $80,$A8,$D0
    183  2928		       f8 20 48 70*	      byte.b	$F8,$20,$48, $70,$98,$C0
    184  292e		       e8		      byte.b	$E8
    185  292f				   lineOffsetM
    186  292f		       04		      byte.b	$04
    187  2930		       04 04 04 04*	      byte.b	$04,$04,$04, $04,$04,$04
    188  2936		       05 05 05 05*	      byte.b	$05,$05,$05, $05,$05,$05
    189  293c		       06 06 06 06*	      byte.b	$06,$06,$06, $06,$06,$06
    190  2942		       06 07 07 07*	      byte.b	$06,$07,$07, $07,$07,$07
    191  2948		       07		      byte.b	$07
    192  2949
    193  2949				   debugOverlay
    194  2949		       05 82 4e 4f*	      byte.b	5,$82,"NOTE ONS",0
    195  2954		       09 82 4e 4f*	      byte.b	9,$82,"NOTE OFFS",0
    196  2960		       0a 82 20 20*	      byte.b	10,$82,"				     MIDI",0
    197  298b		       0b 82 20 20*	      byte.b	11,$82,"				       IN",0
    198  29b6							;byte 6,$8d,"ASD",$8F,"=RELEASE-TIME ",$8d,":;=",$8F,"=VOLUME LOW/MED/HI",0
    199  29b6							;byte 7,$8d,"ZXCVBNMM,.",$8F,"=PATCH-SELECTION  ",$8d,"/",$8F,"=MUTE",0
    200  29b6							;byte 8,$8d,"SPACE",$8F,"=BENDER",$8d,"  CURSOR-KEYS",$8F,"=FIFTHS ON/OFF",0
    201  29b6							;byte 9,$8d,"FUNCTION-KEYS",$8F,"=OCTAVE",$8d,"  CTRL",$8F,"=CUSTOM-PATCH",0
    202  29b6		       13 82 42 55*	      byte.b	19,$82,"BUFFERS ETC",0
    203  29c4		       ff		      byte.b	255
    204  29c5
    205  29c5				   midiModeNames
    206  29c5		       20 20 20 20*	      byte.b	"	  "	;0
    207  29cd		       53 45 51 55*	      byte.b	"SEQUENTL"	;1
    208  29d5		       50 41 53 53*	      byte.b	"PASSPORT"	;2
    209  29dd		       20 20 20 44*	      byte.b	"   DATEL"	;3
    210  29e5		       4e 41 4d 45*	      byte.b	"NAMESOFT"	;4
    211  29ed
    212  29ed				   fxNames
    213  29ed		       4e 4f 4e 45*	      byte.b	"NONE	  "	;0
    214  29f5		       46 49 4c 54*	      byte.b	"FILT1   "	;1
    215  29fd		       46 49 4c 54*	      byte.b	"FILT2   "	;2
    216  2a05		       46 49 4c 54*	      byte.b	"FILT3   "	;3
    217  2a0d		       46 49 4c 54*	      byte.b	"FILT4   "	;4
    218  2a15		       46 49 4c 54*	      byte.b	"FILT5   "	;5
    219  2a1d		       50 55 4c 53*	      byte.b	"PULS1   "	;6
    220  2a25		       50 55 4c 53*	      byte.b	"PULS2   "	;7
    221  2a2d		       50 55 4c 53*	      byte.b	"PULS3   "	;8
    222  2a35
    223  2a35				   hexEditHelp
    224  2a35		       06 82 41 4c*	      byte.b	6,$82,"ALL OS1 OS2 OS3  7  6  5  4  3	2  1  0 ",0
    225  2a60		       07 81 24 32*	      byte.b	7,$81,"$22 $02 $09 $10",$87,"	+---PULSE-WIDTH-LOW---+",0
    226  2a8c		       08 8e 20 56*	      byte.b	8,$8E," VAL $	 $   $",0
    227  2a9d		       09 81 24 32*	      byte.b	9,$81,"$23 $03 $0A $11",$87,"	.  .  .  .  +PULS-HIGH+",0
    228  2ac9		       0a 8e 20 56*	      byte.b	10,$8E," VAL $   $   $",0
    229  2ada		       0b 81 24 32*	      byte.b	11,$81,"$24 $04 $0B $12",$87,"  NO SQ SA TR TE RI SY GT",0
    230  2b06		       0c 8e 20 56*	      byte.b	12,$8E," VAL $   $   $",0
    231  2b17		       0d 81 24 32*	      byte.b	13,$81,"$25 $05 $0C $13",$87,"  +-ATTACK--+ +--DECAY--+",0
    232  2b43		       0e 8e 20 56*	      byte.b	14,$8E," VAL $   $   $",0
    233  2b54		       0f 81 24 32*	      byte.b	15,$81,"$26 $06 $0D $14",$87,"  +-SUSTAIN-+ +-RELEASE-+",0
    234  2b80		       10 8e 20 56*	      byte.b	16,$8E," VAL $   $   $",0
    235  2b91		       11 82 2d 2d*	      byte.b	17,$82,"----------------------------------------",0
    236  2bbc		       12 82 41 4c*	      byte.b	18,$82,"ALL VAL  7  6	5  4  3  2  1  0 ",$8B,"  PRESS",0
    237  2be7		       13 81 24 31*	      byte.b	19,$81,"$15 ",$8E,"$	 ",$87,".  .  .  .  . +FILT-LO+",$8B,"	'_' TO",0
    238  2c15		       14 81 24 31*	      byte.b	20,$81,"$16 ",$8E,"$	 ",$87,"+-FILTER-CUTOFF-HIGH--+",$8B,"	CANCEL",0
    239  2c43		       15 81 24 31*	      byte.b	21,$81,"$17 ",$8E,"$	 ",$87,"+FILT-RES-+ FX F1 F2 F3",$8B,"	",0
    240  2c6b		       16 81 24 31*	      byte.b	22,$81,"$18 ",$8E,"$	 ",$87,"XX HP BP LP +-VOLUME--+",0
    241  2c90		       17 82 2d 2d*	      byte.b	23,$82,"----------------------------------------",0
    242  2cbb		       18 8b 45 4e*	      byte.b	24,$8B,"ENTER 2-DIGIT HEX ADDRESS THEN HEX VALUE",0
    243  2ce6		       ff		      byte.b	255
    244  2ce7
    245  2ce7				   helpMessage
    246  2ce7							;byte "RETURN FOR COMMANDS	     ",0
    247  2ce7							;byte "RETURN FOR HELP 	     ",0
    248  2ce7		       52 45 54 55*	      byte.b	"RETURN=HELP		       ",0
    249  2d05				   normalHelp
    250  2d05		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART -",$81,"KEY COMMANDS",$82,"-",$8B,"  RETURN TO EXIT012345",0
    251  2d39		       01 82 2d 2d*	      byte.b	1,$82,"----------------------------------------",0
    252  2d64		       02 83 51 57*	      byte.b	2,$83,"QWERTY",$8F," AND ",$83,"NUMBERS ROWS",$8F," ARE ",$81,"PIANO KEYS  ",0
    253  2d93		       03 83 41 53*	      byte.b	3,$83,"ASDF",$8F," AND",$83," ZXCV ROWS",$8F," SELECT",$81," SOUND PRESETS ",0
    254  2dc2		       04 83 53 50*	      byte.b	4,$83,"SPACE",$8F,"=BENDER",$83,"  CURSOR-KEYS",$8F,"=FIFTHS-ON/OFF",0
    255  2def		       05 83 46 55*	      byte.b	5,$83,"FUNCTION-KEYS",$8F,"=OCTAVE",$83," _",$8F,"=LOAD-CUSTOM-SOUND",0
    256  2e1d		       06 82 2d 2d*	      byte.b	6,$82,"----------------------------------------",0
    257  2e48		       07 81 50 52*	      byte.b	7,$81,"PRESS CTRL +",0
    258  2e57		       08 8d 41 53*	      byte.b	8,$8D,"ASD",$8F,"=RELEASE-TIME ",$8D,"FGHJKL:;",$8F,"=SOUND-MODE",0
    259  2e81		       09 8d 5a 58*	      byte.b	9,$8D,"ZXCVBNM",$8F,"=MOD-MODE ",$8D,"F1-F7",$8F,"=VOL HI/MED/LO/OFF",0
    260  2eaf		       0a 82 2d 2d*	      byte.b	10,$82,"---------------------------------------",0
    261  2ed9		       0b 81 50 52*	      byte.b	11,$81,"PRESS SHIFT +",0
    262  2ee9		       0c 8a 41 53*	      byte.b	12,$8A,"ASD",$8F,"=ATTACK  " ,$8A,"FGH",$8F,"=VID-STYLE" ,$8A," JKL",$8F,"=VID-ON/OFF"
    263  2f18		       00		      byte.b	0
    264  2f19		       0d 8a 5a 58*	      byte.b	13,$8A,"ZXCV",$8F,"=TREM-SPD " ,$8A,"BNM,",$8F,"=TREM-LEVL" ,$8A," ;:",$8F,"=VID-SIZE"
    265  2f48		       00		      byte.b	0
    266  2f49		       0e 8a 43 55*	      byte.b	14,$8A,"CURSOR-KEYS",$8F,"=PADDLE1-ON/OFF",0
    267  2f67		       0f 8a 46 31*	      byte.b	15, $8A,"F1-F7",$8F,"=PORTAMENTO ",$8A,"RETURN",$8F,"=CLEAR-MODULATION",0
    268  2f95		       10 82 2d 2d*	      byte.b	16,$82,"---------------------------------------",0
    269  2fbf		       11 81 50 52*	      byte.b	17,$81,"PRESS COMMODORE-KEY +",0
    270  2fd7		       12 8e 41 53*	      byte.b	18,$8E,"ASDFGHJK",$8F,"=FIXED-CUTOFF  ",$8E,",./",$8F,"=OMNI/CH1/CH5"
    271  3003		       00		      byte.b	0
    272  3004		       13 8e 5a 58*	      byte.b	19,$8E,"ZXC",$8F,"=FILT-ON/OFF/DISABLE",$8E," VBNM",$8F,"=PADDLE2"
    273  302d		       00		      byte.b	0
    274  302e		       14 82 2d 2d*	      byte.b	20,$82,"---------------------------------------",0
    275  3058		       15 81 50 52*	      byte.b	21,$81,"PRESS RUN-STOP +",0
    276  306b		       16 87 41 53*	      byte.b	22,$87,"ASDFGHJKL:;",$8F,"=TUNING" ,$87,"  ./",$8F,"=PAL/NTSC"
    277  308f		       00		      byte.b	0
    278  3090		       17 87 5a 58*	      byte.b	23,$87,"ZXCVBNM",$8F,"=",$81,"MORE",$8F,"-",$81,"PRESETS  ",$87,"F1",$8F,"=SID-EDIT-C64KEYS"
    279  30c1		       00		      byte.b	0
    280  30c2		       18 87 46 33*	      byte.b	24,$87,"F3",$8F,"=SAVE-CUSTOM-SOUND  ",$87,"F7",$8F,"=SID-EDIT-PIANO "
    281  30ef		       00		      byte.b	0
    282  30f0		       ff		      byte.b	255
    283  30f1
    284  30f1				   mainColorText
    285  30f1		       00 82 43 59*	      byte.b	0,$82,"CYNTHCART  ",$8F,"PRESET",$8C,"=",$81," 		      ",0
    286  3120		       01 8a 4d 4f*	      byte.b	1,$8A,"MODE",$8C,"=",$81,"X	",$83," ------",$8D,"-------",$8F,"----- ",$8D,"FILTR",$8C,"=",$81,"X	",0
    287  3153		       02 8f 54 55*	      byte.b	2,$8F,"TUNING",$8C,"=",$81,"X	 ",$83,"ATTACK",$8C,"=",$81,"X ",$87,"TREMOLO",$8C,"=",$81,"X ",$8D,"CUTOFF",$8C,"=",$81,"X  ",0
    288  3189		       03 8f 4f 43*	      byte.b	3,$8F,"OCTAVE",$8C,"=",$81,"X	 ",$83,"RELEAS",$8C,"=",$81,"X ",$87,"TRM-SPD",$8C,"=",$81,"X ",$8D,"PADD1",$8C,"=",$81,"X   ",0
    289  31bf		       04 8f 56 4f*	      byte.b	4,$8F,"VOLUME",$8C,"=",$81,"X	 ",$8F,"MOD",$8C,"=",$81,"XXXXX ",$8F," VIDEO",$8C,"=",$81,"X ",$8F,"PADD2",$8C,"=",$81,"X   ",0
    290  31f5		       17 82 20 20*	      byte.b	23,$82,"					 ",0
    291  3220
    292  3220							; OLD LAYOUT
    293  3220							;byte 0,$82,"CYNTHCART  ",$81,"PATCH",$8F,"=			    ",0
    294  3220							;byte 1,$87,"		 LFO:	  RATE",$8F,"=	   ",$87,"DEPTH",$8F,"=    ",0
    295  3220							;byte 2,$81,"FIFTHS",$8F,"=	",$83,"ATTACK",$8F,"=  ",$83,"RELEASE",$8F,"=  ",$8A,"MODE",$8F,"=     ",0
    296  3220							;byte 3,$8D,"PAD1",$8F,"=	",$8D,"CUTOFF",$8F,"=  ",$8D,"FILTR",$8F,"=    ",$81,"TUNE",$8F,"=    ",0
    297  3220							;byte 4,$81,"PAD2",$8F,"=	",$81,"OCTAVE",$8F,"=  ",$81,"VIDEO",$8F,"=    ",$81,"VOL",$8F,"=      ",0
    298  3220							;byte 255
    299  3220
    300  3220		       00 07	   CYNTHCART_HIGHLIGHT_COLOR equ	7
    301  3220		       00 02	   CYNTHCART_COLOR equ	2
    302  3220
    303  3220
    304  3220		       00 2d	   MODETEXT   equ	40*1+5
    305  3220		       00 57	   TUNINGTEXT equ	40*2+7
    306  3220		       00 7f	   OCTAVETEXT equ	40*3+7
    307  3220		       00 a7	   VOLTEXT    equ	40*4+7
    308  3220
    309  3220		       00 62	   ATKTEXT    equ	40*2+18
    310  3220		       00 8a	   RELTEXT    equ	40*3+18
    311  3220		       00 12	   PATCHTEXT  equ	40*0+18
    312  3220
    313  3220		       00 94	   LFORATETEXT equ	40*3+28
    314  3220		       00 6c	   LFODEPTHTEXT equ	40*2+28
    315  3220		       00 bc	   VIDEOTEXT  equ	40*4+28
    316  3220
    317  3220		       00 af	   FXTEXT     equ	40*4+15
    318  3220
    319  3220		       00 4c	   FILTERTEXT2 equ	40*1+36
    320  3220		       00 75	   FILTERTEXT equ	40*2+37
    321  3220		       00 9c	   PADDLETEXT equ	40*3+36
    322  3220		       00 c4	   PAD2TEXT   equ	40*4+36
    323  3220
    324  3220		       00 12	   SYNCTEXT   equ	40*0+18	; The sync feature is not currently used
    325  3220
    326  3220
    327  3220		       ff		      byte.b	255
    328  3221
    329  3221
    330  3221
    331  3221				   textData		; can contain 64 four byte texts
    332  3221		       4f 46 46 20	      byte.b	"OFF "	;0
    333  3225		       4f 4e 20 20	      byte.b	"ON  "	;4
    334  3229		       53 4c 4f 57	      byte.b	"SLOW"	;8
    335  322d		       4d 45 44 20	      byte.b	"MED "	;12
    336  3231		       46 41 53 54	      byte.b	"FAST"	;16
    337  3235		       2d 34 30 20	      byte.b	"-40 "	;20 tuning
    338  3239		       2d 33 30 20	      byte.b	"-30 "	;24
    339  323d		       2d 32 30 20	      byte.b	"-20 "	;28
    340  3241		       2d 31 30 20	      byte.b	"-10 "	;32
    341  3245		       30 20 20 20	      byte.b	"0   "	;36
    342  3249		       2b 31 30 20	      byte.b	"+10 "	;40
    343  324d		       2b 32 30 20	      byte.b	"+20 "	;44
    344  3251		       2b 33 30 20	      byte.b	"+30 "	;48
    345  3255		       2b 34 30 20	      byte.b	"+40 "	;52
    346  3259		       2b 35 30 20	      byte.b	"+50 "	;56
    347  325d		       50 4f 4c 59	      byte.b	"POLY"	;60 mode
    348  3261		       4d 4f 4e 4f	      byte.b	"MONO"	;64
    349  3265		       46 52 45 51	      byte.b	"FREQ"	;68 LFO dest
    350  3269		       46 49 4c 54	      byte.b	"FILT"	;72
    351  326d		       56 4f 4c 20	      byte.b	"VOL "	;76
    352  3271		       4c 4f 57 20	      byte.b	"LOW "	;80
    353  3275		       4d 45 44 20	      byte.b	"MED "	;84
    354  3279		       48 49 47 48	      byte.b	"HIGH"	;88
    355  327d		       53 49 44 3a	      byte.b	"SID:"	;92
    356  3281		       44 49 53 20	      byte.b	"DIS "	;96
    357  3285		       4f 46 46 20	      byte.b	"OFF "	;100 - paddle2 settings
    358  3289		       50 55 4c 53	      byte.b	"PULS"	;104
    359  328d		       58 58 58 58	      byte.b	"XXXX"	;108 - this one for future...
    360  3291		       4c 46 4f 20	      byte.b	"LFO "	;112
    361  3295		       42 45 4e 44	      byte.b	"BEND"	;116
    362  3299
    363  3299
    364  3299				   modeNamesPolyphony		; Name (7 bytes) + Polyphony (1 byte)
    365  3299		       50 4f 4c 59*	      byte.b	"POLY	 ",3	;$00 0
    366  32a1		       50 4f 52 54*	      byte.b	"PORT1  ",3	;$08 1
    367  32a9		       50 4f 52 54*	      byte.b	"PORT2  ",3	;$10 2
    368  32b1		       50 4f 52 54*	      byte.b	"PORT3  ",3	;$18 3
    369  32b9		       4d 4f 4e 4f*	      byte.b	"MONO1  ",1	;$20 4
    370  32c1		       4d 4f 4e 4f*	      byte.b	"MONO2  ",1	;$28 5
    371  32c9		       4d 4f 4e 50*	      byte.b	"MONP1  ",1	;$30 6
    372  32d1		       41 52 50 31*	      byte.b	"ARP1	 ",7	;$38 7
    373  32d9		       41 52 50 32*	      byte.b	"ARP2	 ",7	;$40 8
    374  32e1		       41 52 50 33*	      byte.b	"ARP3	 ",7	;$48 9
    375  32e9		       41 52 50 34*	      byte.b	"ARP4	 ",7	;$50 10
    376  32f1		       41 52 50 35*	      byte.b	"ARP5	 ",7	;$58 11
    377  32f9		       36 43 48 41*	      byte.b	"6CHAN  ",6	;$60 12
    378  3301		       35 54 48 53*	      byte.b	"5THS	 ",3	;$68 13
    379  3309		       35 50 4f 52*	      byte.b	"5PORT  ",3	;$70 14
    380  3311		       4d 4f 4e 50*	      byte.b	"MONP2  ",1	;$78 15
    381  3319
    382  3319				   modeNameOffsets
    383  3319							;     0   1   2   3	4   5	6   7	  8   9   A   B    C   D   E   F
    384  3319		       00 68 70 00*	      byte.b	$00,$68,$70,$00, $00,$00,$00,$00, $60,$00,$00,$00, $00,$00,$00,$00	;$00
    385  3329		       08 10 18 00*	      byte.b	$08,$10,$18,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$10
    386  3339		       20 28 30 00*	      byte.b	$20,$28,$30,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$20
    387  3349		       30 30 78 78*	      byte.b	$30,$30,$78,$78, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$30
    388  3359		       38 40 48 50*	      byte.b	$38,$40,$48,$50, $58,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00	;$40
    389  3369
    390  3369
    391  3369							; VERSION NUMBER
    392  3369				   bottomText
    393  3369		       20 50 41 4c*	      byte.b	" PAL V2.0.1",0
    394  3375		       4e 54 53 43*	      byte.b	"NTSC V2.0.1",0
    395  3381
    396  3381				  -	      IF	BETA_RELEASE=1
    397  3381				  -betaInfo
    398  3381				  -	      byte	"V2.0 BETA RC4",0	;13 bytes of text
    399  3381					      ELSE
    400  3381				   betaInfo
    401  3381		       20 20 20 20*	      byte.b	"	       ",0	;13 bytes of text
    402  338f					      ENDIF
    403  338f
    404  338f							; contant pointers into the textData array
    405  338f		       00 00	   ON	      equ	0
    406  338f		       00 04	   OFF	      equ	4
    407  338f		       00 08	   SLOW       equ	8
    408  338f		       00 0c	   MED	      equ	12
    409  338f		       00 10	   FAST       equ	16
    410  338f		       00 14	   TUNING     equ	20
    411  338f		       00 3c	   POLY       equ	60
    412  338f		       00 40	   MONO       equ	64
    413  338f		       00 44	   FREQ       equ	68
    414  338f		       00 48	   FILT       equ	72
    415  338f		       00 4c	   VOL	      equ	76
    416  338f		       00 50	   VLOW       equ	80
    417  338f		       00 54	   VMED       equ	84
    418  338f		       00 58	   VHIGH      equ	88
    419  338f		       00 60	   DISABLED   equ	96
    420  338f		       00 64	   PAD2VALTEXT equ	100
    421  338f
    422  338f
    423  338f
    424  338f
    425  338f				   tuneArrPtrLL
    426  338f		       31 c1 51 99*	      byte.b	<tuningL0, <tuningL1, <tuningL2, <tuningL3, <tuningL4, <tuningL5, <tuningL6, <tuningL7, <tuningL8, <tuningL9
    427  3399				   tuneArrPtrLH
    428  3399		       35 35 36 36*	      byte.b	>tuningL0, >tuningL1, >tuningL2, >tuningL3, >tuningL4, >tuningL5, >tuningL6, >tuningL7, >tuningL8, >tuningL9
    429  33a3				   tuneArrPtrHL
    430  33a3		       79 09 ed e1*	      byte.b	<tuningH0, <tuningH1, <tuningH2, <tuningH3, <tuningH4, <tuningH5, <tuningH6, <tuningH7, <tuningH8, <tuningH9
    431  33ad				   tuneArrPtrHH
    432  33ad		       35 36 36 36*	      byte.b	>tuningH0, >tuningH1, >tuningH2, >tuningH3, >tuningH4, >tuningH5, >tuningH6, >tuningH7, >tuningH8, >tuningH9
    433  33b7
    434  33b7				   LFODepthArray
    435  33b7		       00 02 05 0f	      byte.b	0,2,5,15
    436  33bb
    437  33bb
    438  33bb
    439  33bb
    440  33bb				   hexDisplay
    441  33bb		       30 31 32 33*	      byte.b	48,49,50,51,52, 53,54,55,56,57, 1,2,3,4,5, 6
    442  33cb
    443  33cb							;keyData ; numbers 0-9 and letters a-f
    444  33cb							;	byte 35,56,59,8,11, 16,19,24,27,32, 10,28,20,18,14, 21
    445  33cb
    446  33cb							; key set for piano keyboard: black keys + middle A-F on the white keys
    447  33cb							;	byte 51,59,8,16,19, 24,32,35,43,48, 25,30,33,38,41, 46
    448  33cb
    449  33cb							; array of LFO values
    450  33cb				   LFOArrL
    451  33cb		       00 01 02 03*	      byte.b	0,1,2,3, 2,1,0,1, 2,3,4,5, 4,3,2,1
    452  33db				   LFOArrH
    453  33db		       00 00 00 00*	      byte.b	0,0,0,0, 0,0,0,255, 255,255,255,255, 255,255,255,255	; more LFO depth
    454  33eb				   LFOdisp
    455  33eb		       06 07 08 09*	      byte.b	6,7,8,9, 8,7,6,5, 4,3,2,1, 2,3,4,5
    456  33fb
    457  33fb							; NTSC Note Table
    458  33fb				   NSoundLArr		;  |	   80	  |	 C-5	  |	8583	|      33     |     135     |
    459  33fb		       18 38 5a 7d*	      byte.b	24,56,90,125, 163,203,246,35, 83,134,187,244	; octave 2	  ;  |	    81	   |	  C#-5	   |	 9094	 |	35     |     134     |
    460  3407		       30 7a b4 fb*	      byte.b	48,122,180,251, 71,151,237,71, 167,12,119,233	; octave 3	  ;  |	    82	   |	  D-5	   |	 9634	 |	37     |     162     |
    461  3413		       61 e1 68 f7*	      byte.b	97,225,104,247, 143,47,218,142, 77,24,238,210	; octave 4	  ;  |	    83	   |	  D#-5	   |	10207	 |	39     |     223     |
    462  341f		       c3 c3 d1 ef*	      byte.b	195,195,209,239, 31,96,181,30, 156,49,223,165	; octave 5	  ;  |	    84	   |	  E-5	   |	10814	 |	42     |      62     |
    463  342b		       87 86 a2 df*	      byte.b	135,134,162,223, 62,193,107,60, 57,99,190,75	; octave 6	  ;  |	    85	   |	  F-5	   |	11457	 |	44     |     193     |
    464  3437		       0f 0c 45 bf*	      byte.b	15,12,69,191, 125,131,214,121, 115,199,124,151	; octave 7
    465  3443							;  |	   86	  |	 F#-5	  |    12139	|      47     |     107     |
    466  3443				   NSoundHArr		;  |	   87	  |	 G-5	  |    12860	|      50     |      60     |
    467  3443		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,2,3, 3,3,3,3	; octave 2		  ;  |	    88	   |	  G#-5	   |	13625	 |	53     |      57     |
    468  344f		       04 04 04 04*	      byte.b	4,4,4,4, 5,5,5,6, 6,7,7,7	; octave 3		  ;  |	    89	   |	  A-5	   |	14435	 |	56     |      99     |
    469  345b		       08 08 09 09*	      byte.b	8,8,9,9, 10,11,11,12, 13,14,14,15	; octave 4		  ;  |	    90	   |	  A#-5	   |	15294	 |	59     |     190     |
    470  3467		       10 11 12 13*	      byte.b	16,17,18,19, 21,22,23,25, 26,28,29,31	; octave 5		  ;  |	    91	   |	  B-5	   |	16203	 |	63     |      75     |
    471  3473		       21 23 25 27*	      byte.b	33,35,37,39, 42,44,47,50, 53,56,59,63	; octave 6		  ;  |	    96	   |	  C-6	   |	17167	 |	67     |      15     |
    472  347f		       43 47 4b 4f*	      byte.b	67,71,75,79, 84,89,94,100, 106,112,119,126	;octave 7
    473  348b
    474  348b							; PAL Note Table
    475  348b				   PSoundLArr
    476  348b		       2d 4e 71 96*	      byte.b	45,78,113,150, 190,231,20,66, 116,169,224,27
    477  3497		       5a 9c e2 2d*	      byte.b	90,156,226,45, 123,207,39,133, 232,81,193,55
    478  34a3		       b4 38 c4 59*	      byte.b	180,56,196,89, 247,158,78,10, 208,162,129,109
    479  34af		       67 70 89 b2*	      byte.b	103,112,137,178, 237,59,157,20, 160,69,3,219
    480  34bb		       cf e1 12 65*	      byte.b	207,225,18,101, 219,118,58,39, 65,138,5,181
    481  34c7		       9d c1 24 c9*	      byte.b	157,193,36,201, 182,237,115,78, 130,20,10,106
    482  34d3		       3b 82 48 93*	      byte.b	59,130,72,147, 107,218,231,156, 4,40,20
    483  34de
    484  34de				   PSoundHArr
    485  34de		       02 02 02 02*	      byte.b	2,2,2,2, 2,2,3,3, 3,3,3,4
    486  34ea		       04 04 04 05*	      byte.b	4,4,4,5, 5,5,6,6, 6,7,7,8
    487  34f6		       08 09 09 0a*	      byte.b	8,9,9,10, 10,11,12,13, 13,14,15,16
    488  3502		       11 12 13 14*	      byte.b	17,18,19,20, 21,23,24,26, 27,29,31,32
    489  350e		       22 24 27 29*	      byte.b	34,36,39,41, 43,46,49,52, 55,58,62,65
    490  351a		       45 49 4e 52*	      byte.b	69,73,78,82, 87,92,98,104, 110,117,124,131
    491  3526		       8b 93 9c a5*	      byte.b	139,147,156,165, 175,185,196,208, 221,234,248
------- FILE cynthcart2.0.1.asm
   1016  3531
   1017  3531							; Pitch offset data for alternate tuning modes
------- FILE cynth_tuning.asm LEVEL 2 PASS 2
      0  3531					      include	"cynth_tuning.asm"
      1  3531
      2  3531				   tuningL0
      3  3531		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
      4  353d		       e3 e9 e4 e2*	      byte.b	227,233,228,226,224,222,220,218,216,214,211,208
      5  3549		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,165,160
      6  3555		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,104,94,164,251,64
      7  3561		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
      8  356d		       68 50 36 1b*	      byte.b	104,80,54,27,254,223,191,156,120,82,41,254
      9  3579				   tuningH0
     10  3579		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     11  3585		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     12  3591		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     13  359d		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     14  35a9		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254
     15  35b5		       fe fe fe fe*	      byte.b	254,254,254,254,253,253,253,253,253,253,253,252
     16  35c1
     17  35c1				   tuningL1
     18  35c1		       f7 f6 f6 f5*	      byte.b	247,246,246,245,244,244,243,242,241,241,239,238
     19  35cd		       ea ef eb ea*	      byte.b	234,239,235,234,232,231,229,228,226,224,222,220
     20  35d9		       da d8 d6 d3*	      byte.b	218,216,214,211,208,205,202,199,196,192,188,184
     21  35e5		       b4 af ab a5*	      byte.b	180,175,171,165,160,154,148,142,135,187,60,112
     22  35f1		       67 5e 55 4a*	      byte.b	103,94,85,74,64,52,40,27,13,255,240,223
     23  35fd		       ce bc a9 94*	      byte.b	206,188,169,148,127,104,80,53,26,253,223,190
     24  3609				   tuningH1
     25  3609		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     26  3615		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     27  3621		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     28  362d		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     29  3639		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,254,254,254
     30  3645		       fe fe fe fe*	      byte.b	254,254,254,254,254,254,254,254,254,253,253,253
     31  3651
     32  3651				   tuningL2
     33  3651		       fa fa f9 f9*	      byte.b	250,250,249,249,248,248,247,247,246,246,245,244
     34  365d		       f2 f5 f2 f1*	      byte.b	242,245,242,241,240,239,238,237,236,235,234,232
     35  3669		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,214,211,208
     36  3675		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,210,126,160
     37  3681		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     38  368d		       34 28 1b 0e*	      byte.b	52,40,27,14,255,240,224,206,188,169,149,127
     39  3699							;tuningH2
     40  3699							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     41  3699							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     42  3699							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     43  3699							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     44  3699							; byte 255,255,255,255,255,255,255,255,255,255,255,255
     45  3699							; byte 255,255,255,255,254,254,254,254,254,254,254,254
     46  3699
     47  3699				   tuningL3
     48  3699		       fd fd fd fd*	      byte.b	253,253,253,253,252,252,252,252,251,251,251,250
     49  36a5		       f9 fb f9 f9*	      byte.b	249,251,249,249,248,248,247,247,246,246,245,244
     50  36b1		       f4 f3 f2 f1*	      byte.b	244,243,242,241,240,239,238,237,236,235,234,232
     51  36bd		       e7 e5 e4 e2*	      byte.b	231,229,228,226,224,222,220,218,216,233,191,208
     52  36c9		       cd ca c7 c4*	      byte.b	205,202,199,196,192,188,184,180,175,171,166,160
     53  36d5		       9a 94 8e 87*	      byte.b	154,148,142,135,128,120,112,103,94,85,75,64
     54  36e1				   tuningH3
     55  36e1		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     56  36ed				   tuningH2
     57  36ed		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     58  36f9		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     59  3705		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     60  3711		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     61  371d		       ff ff ff ff*	      byte.b	255,255,255,255,255,255,255,255,255,255,255,255
     62  3729		       ff ff ff ff*	      byte.b	255,255,255,255,254,254,254,254,254,254,254,254	; last line of tuningH2
     63  3735
     64  3735				   tuningL4
     65  3735				   tuningH4
     66  3735				   tuningH5
     67  3735		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     68  3741				   tuningH6
     69  3741		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     70  374d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     71  3759		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     72  3765		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     73  3771		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
     74  377d		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1	; last line of tuningH6
     75  3789							;tuningH4
     76  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     77  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     78  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     79  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     80  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     81  3789							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     82  3789
     83  3789				   tuningL5
     84  3789		       03 03 03 03*	      byte.b	3,3,3,3,4,4,4,4,5,5,5,6
     85  3795		       07 05 07 07*	      byte.b	7,5,7,7,8,8,9,9,10,10,11,12
     86  37a1		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
     87  37ad		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,23,65,48
     88  37b9		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,90,96
     89  37c5		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
     90  37d1
     91  37d1							;tuningH5
     92  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     93  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     94  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     95  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     96  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     97  37d1							; byte 0,0,0,0,0,0,0,0,0,0,0,0
     98  37d1
     99  37d1				   tuningL6
    100  37d1		       06 06 07 07*	      byte.b	6,6,7,7,8,8,9,9,10,10,11,12
    101  37dd		       0e 0b 0e 0f*	      byte.b	14,11,14,15,16,17,18,19,20,21,22,24
    102  37e9		       19 1b 1c 1e*	      byte.b	25,27,28,30,32,34,36,38,40,42,45,48
    103  37f5		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,46,130,96
    104  3801		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,153,162,171,181,192
    105  380d		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    106  3819							;tuningH6
    107  3819							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    108  3819							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    109  3819							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    110  3819							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    111  3819							; byte 0,0,0,0,0,0,0,0,0,0,0,0
    112  3819							; byte 0,0,0,0,1,1,1,1,1,1,1,1
    113  3819
    114  3819				   tuningL7
    115  3819		       09 0a 0a 0b*	      byte.b	9,10,10,11,12,12,13,14,15,15,17,18
    116  3825		       16 11 15 16*	      byte.b	22,17,21,22,24,25,27,28,30,32,34,36
    117  3831		       26 28 2a 2d*	      byte.b	38,40,42,45,48,51,54,57,60,64,68,72
    118  383d		       4c 51 55 5b*	      byte.b	76,81,85,91,96,102,108,114,121,69,196,144
    119  3849		       99 a2 ab b6*	      byte.b	153,162,171,182,192,204,216,229,243,1,16,33
    120  3855		       32 44 57 6c*	      byte.b	50,68,87,108,129,152,176,203,230,3,33,66
    121  3861				   tuningH7
    122  3861		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    123  386d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    124  3879		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    125  3885		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    126  3891		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,1,1,1
    127  389d		       01 01 01 01*	      byte.b	1,1,1,1,1,1,1,1,1,2,2,2
    128  38a9
    129  38a9				   tuningL8
    130  38a9		       0c 0d 0e 0f*	      byte.b	12,13,14,15,16,17,18,19,20,21,22,24
    131  38b5		       1d 17 1c 1e*	      byte.b	29,23,28,30,32,34,36,38,40,42,45,48
    132  38c1		       33 36 39 3c*	      byte.b	51,54,57,60,64,68,72,76,81,85,91,96
    133  38cd		       66 6c 72 79*	      byte.b	102,108,114,121,128,136,144,152,162,92,5,192
    134  38d9		       cc d8 e5 f2*	      byte.b	204,216,229,242,1,16,32,50,68,87,107,129
    135  38e5		       98 b0 ca e5*	      byte.b	152,176,202,229,2,33,65,100,136,174,215,2
    136  38f1				   tuningH8
    137  38f1		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    138  38fd		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    139  3909		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    140  3915		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    141  3921		       00 00 00 00*	      byte.b	0,0,0,0,1,1,1,1,1,1,1,1
    142  392d		       01 01 01 01*	      byte.b	1,1,1,1,2,2,2,2,2,2,2,3
    143  3939
    144  3939				   tuningL9
    145  3939		       10 11 11 13*	      byte.b	16,17,17,19,20,21,22,24,25,26,28,30
    146  3945		       25 1d 23 26*	      byte.b	37,29,35,38,40,43,45,48,50,53,57,60
    147  3951		       40 43 47 4c*	      byte.b	64,67,71,76,80,85,90,95,101,107,114,120
    148  395d		       80 87 8f 98*	      byte.b	128,135,143,152,160,170,180,191,202,115,71,241
    149  3969		       ff 0e 1e 2f*	      byte.b	255,14,30,47,65,85,104,126,149,173,198,226
    150  3975		       fe 1c 3d 5f*	      byte.b	254,28,61,95,131,169,209,253,42,90,141,195
    151  3981				   tuningH9
    152  3981		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    153  398d		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    154  3999		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    155  39a5		       00 00 00 00*	      byte.b	0,0,0,0,0,0,0,0,0,0,0,0
    156  39b1		       00 01 01 01*	      byte.b	0,1,1,1,1,1,1,1,1,1,1,1
    157  39bd		       01 02 02 02*	      byte.b	1,2,2,2,2,2,2,2,3,3,3,3
------- FILE cynthcart2.0.1.asm
   1019  39c9
   1020  39c9							; Frank's MIDI interface code
   1021  39c9				  -	      IF	USE_DUMMY_MIDI_LIBRARY=1
   1022  39c9				  -	      include	"cynth_midi_dummy.asm"
   1023  39c9					      ELSE
------- FILE cynth_midi.asm LEVEL 2 PASS 2
      0  39c9					      include	"cynth_midi.asm"
      1  39c9							; public MIDI interface routines:
      2  39c9							; midiDetect
      3  39c9							; midiInit
      4  39c9							; midiRead
      5  39c9							; midiWrite
      6  39c9
      7  39c9							; interface type for midiDetect and midiInit:
      8  39c9							; 0: no MIDI interface was detected
      9  39c9							; 1: Sequential Circuits Inc.
     10  39c9							; 2: Passport & Syntech
     11  39c9							; 3: DATEL/Siel/JMS
     12  39c9							; 4: Namesoft
     13  39c9
     14  39c9							;BUFFER_SIZE_MASK equ #$1F ; original size
     15  39c9		       00 ff	   BUFFER_SIZE_MASK equ	#$FF
     16  39c9
     17  39c9
     18  39c9					      processor	6502
     19  39c9
     20  39c9		       00 01	   TRUE       equ	1
     21  39c9		       00 00	   FALSE      equ	0
     22  39c9
     23  39c9		       dc 00	   PRA	      equ	$dc00	; CIA#1 (Port Register A)
     24  39c9		       dc 02	   DDRA       equ	$dc02	; CIA#1 (Data Direction Register A)
     25  39c9
     26  39c9		       dc 01	   PRB	      equ	$dc01	; CIA#1 (Port Register B)
     27  39c9		       dc 03	   DDRB       equ	$dc03	; CIA#1 (Data Direction Register B)
     28  39c9
     29  39c9							;loopCount equ 1104
     30  39c9							;irqCountTotal equ 1105
     31  39c9							;irqCountMidi equ 1106
     32  39c9							;irqCountTDREmpty equ 1107
     33  39c9							;saveY equ 1140
     34  39c9							;firstPass equ 1141
     35  39c9		       04 50	   statusSample1 equ	1104
     36  39c9		       04 51	   statusSample2 equ	1105
     37  39c9
     38  39c9		       00 00	   TEST_KEYBOARD equ	FALSE
     39  39c9		       00 00	   INCLUDE_DETECT_IRQ equ	FALSE
     40  39c9
     41  39c9							;=========================================================================
     42  39c9							; MIDI DETECT
     43  39c9							; =========================================================================
     44  39c9
     45  39c9							; detect MIDI interface, return type in accu
     46  39c9				   midiDetect		; TODO
     47  39c9							;lda #0
     48  39c9							;sta irqCountTotal
     49  39c9							;sta irqCountMidi
     50  39c9							;sta loopCount
     51  39c9
     52  39c9
     53  39c9
     54  39c9							; old code to manually set interface type
     55  39c9		       a9 03		      lda	#3	; DATEL (DEFAULT, THIS ONE SHOULD BE SELECTED UNLESS DEBUGGING)
     56  39cb							;lda #2 ; PASSPORT
     57  39cb							;lda #4 ; NAMESOFT (NOT SUPPORTED YET!)
     58  39cb							;lda #0 ; MIDI OFF
     59  39cb					      IF	DEVICE_CONFIG=KERBEROS
     60  39cb		       60		      rts		; <--DETECT FUNCTION DISABLED
     61  39cc					      ENDIF
     62  39cc
     63  39cc		       85 6e		      sta	midiInterfaceType
     64  39ce				   testingLoop
     65  39ce							; save interface type from ACC
     66  39ce		       a5 6e		      lda	midiInterfaceType
     67  39d0		       aa		      tax
     68  39d1		       ca		      dex
     69  39d2
     70  39d2		       78		      sei		; disable IRQ interrupts
     71  39d3							;cli ; enable IRQ interrupts
     72  39d3
     73  39d3							; init addresses
     74  39d3		       bd 24 3b 	      lda	midiControlOfs,x
     75  39d6		       85 64		      sta	midiControl
     76  39d8		       bd 28 3b 	      lda	midiStatusOfs,x
     77  39db		       85 66		      sta	midiStatus
     78  39dd		       bd 2c 3b 	      lda	midiTxOfs,x
     79  39e0		       85 68		      sta	midiTx
     80  39e2		       bd 30 3b 	      lda	midiRxOfs,x
     81  39e5		       85 6a		      sta	midiRx
     82  39e7		       a9 de		      lda	#$de
     83  39e9		       85 65		      sta	midiControl+1
     84  39eb		       85 67		      sta	midiStatus+1
     85  39ed		       85 69		      sta	midiTx+1
     86  39ef		       85 6b		      sta	midiRx+1
     87  39f1
     88  39f1							; send reset code to MIDI adapter
     89  39f1		       20 bb 3a 	      jsr	midiReset
     90  39f4
     91  39f4							; small delay
     92  39f4		       a2 00		      ldx	#0
     93  39f6				   detectDelay1
     94  39f6		       ca		      dex
     95  39f7		       d0 fd		      bne	detectDelay1
     96  39f9
     97  39f9							; read midi status
     98  39f9		       b1 66		      lda	(midiStatus),y
     99  39fb		       11 66		      ora	(midiStatus),y
    100  39fd		       11 66		      ora	(midiStatus),y
    101  39ff		       8d a0 04 	      sta	1024+160	; DEBUG
    102  3a02		       8d 50 04 	      sta	statusSample1
    103  3a05
    104  3a05							; enable IRQ/NMI
    105  3a05							;lda #3 ; MIDI reset (DEBUG)
    106  3a05		       a9 b4		      lda	#$B4	; $Bx turns on transmit interrupt as well as receive interrupt
    107  3a07							;lda #$34 ; transmit interrupt only
    108  3a07							;lda #$94 ; receive interrupt only (default)
    109  3a07		       1d 34 3b 	      ora	midiCr0Cr1,x
    110  3a0a		       91 64		      sta	(midiControl),y
    111  3a0c
    112  3a0c							; small delay
    113  3a0c		       a2 00		      ldx	#0
    114  3a0e				   detectDelay2
    115  3a0e		       ca		      dex
    116  3a0f		       d0 fd		      bne	detectDelay2
    117  3a11
    118  3a11							; read midi status
    119  3a11		       a0 00		      ldy	#0
    120  3a13		       b1 66		      lda	(midiStatus),y
    121  3a15		       11 66		      ora	(midiStatus),y
    122  3a17		       11 66		      ora	(midiStatus),y
    123  3a19		       8d a1 04 	      sta	1024+160+1	; DEBUG
    124  3a1c		       8d 51 04 	      sta	statusSample2
    125  3a1f
    126  3a1f				   lock 		; DEBUG!!!!!!!!!!!!!!!!!!!!
    127  3a1f							;inc 1065
    128  3a1f							;jmp lock ; DEBUG!!!!!!!!!!!!!!!!!!!!
    129  3a1f
    130  3a1f							; set the interface to DATEL or NO_MIDI based on results
    131  3a1f		       ad 50 04 	      lda	statusSample1
    132  3a22		       d0 08		      bne	midiNotDetected
    133  3a24		       ad 51 04 	      lda	statusSample2
    134  3a27		       f0 03		      beq	midiNotDetected
    135  3a29							;lda midiInterfaceType ; use current interface
    136  3a29							;cli
    137  3a29							;rts ; quit
    138  3a29		       4c 3a 3a 	      jmp	quitDetect
    139  3a2c				   midiNotDetected
    140  3a2c		       a6 6e		      ldx	midiInterfaceType
    141  3a2e		       ca		      dex
    142  3a2f		       86 6e		      stx	midiInterfaceType
    143  3a31							;cpx #1
    144  3a31		       f0 03		      beq	noMidi	; loop again to try next interface
    145  3a33		       4c ce 39 	      jmp	testingLoop
    146  3a36				   noMidi
    147  3a36		       a9 00		      lda	#0	; last interface, so no MIDI
    148  3a38		       85 6e		      sta	midiInterfaceType
    149  3a3a							;cli
    150  3a3a							;rts ; quit
    151  3a3a
    152  3a3a				   quitDetect
    153  3a3a		       20 bb 3a 	      jsr	midiReset
    154  3a3d		       a5 6e		      lda	midiInterfaceType
    155  3a3f		       58		      cli
    156  3a40		       60		      rts
    157  3a41
    158  3a41							;;------------------------------------====================================
    159  3a41
    160  3a41
    161  3a41							; =========================================================================
    162  3a41							; MIDI INIT
    163  3a41							; =========================================================================
    164  3a41
    165  3a41							; init MIDI interface, type in accu from midiDetect
    166  3a41				   midiInit
    167  3a41							;rts ; <-- MIDI DISABLED (DEBUG!!)
    168  3a41
    169  3a41
    170  3a41		       78		      sei		; disable IRQ interrupts
    171  3a42
    172  3a42		       85 6e		      sta	midiInterfaceType
    173  3a44		       aa		      tax
    174  3a45		       ca		      dex
    175  3a46
    176  3a46		       a9 ff		      lda	#$ff	; CIA#1 port A = outputs
    177  3a48		       8d 02 dc 	      sta	DDRA
    178  3a4b
    179  3a4b		       a9 00		      lda	#0	; CIA#1 port B = inputs
    180  3a4d		       8d 03 dc 	      sta	DDRB
    181  3a50
    182  3a50							; clear memory variables
    183  3a50		       a9 00		      lda	#0
    184  3a52		       85 71		      sta	keyPressed
    185  3a54		       85 6f		      sta	keyTestIndex
    186  3a56		       85 70		      sta	keyPressedIntern
    187  3a58
    188  3a58							; init addresses
    189  3a58		       bd 24 3b 	      lda	midiControlOfs,x
    190  3a5b		       85 64		      sta	midiControl
    191  3a5d		       bd 28 3b 	      lda	midiStatusOfs,x
    192  3a60		       85 66		      sta	midiStatus
    193  3a62		       bd 2c 3b 	      lda	midiTxOfs,x
    194  3a65		       85 68		      sta	midiTx
    195  3a67		       bd 30 3b 	      lda	midiRxOfs,x
    196  3a6a		       85 6a		      sta	midiRx
    197  3a6c		       a9 de		      lda	#$de
    198  3a6e		       85 65		      sta	midiControl+1
    199  3a70		       85 67		      sta	midiStatus+1
    200  3a72		       85 69		      sta	midiTx+1
    201  3a74		       85 6b		      sta	midiRx+1
    202  3a76
    203  3a76							; send reset code to MIDI adapter
    204  3a76		       20 bb 3a 	      jsr	midiReset
    205  3a79
    206  3a79							; clear ringbuffer
    207  3a79		       a9 00		      lda	#0
    208  3a7b		       85 6c		      sta	midiRingbufferReadIndex
    209  3a7d		       85 6d		      sta	midiRingbufferWriteIndex
    210  3a7f
    211  3a7f							; if the adapter uses NMI interrupts instead of IRQ
    212  3a7f		       bd 38 3b 	      lda	midiIrqType,x
    213  3a82		       d0 0a		      bne	midiSetIrq
    214  3a84
    215  3a84							; set NMI routine
    216  3a84		       a9 e4		      lda	#<midiNmi
    217  3a86		       8d 18 03 	      sta	$0318
    218  3a89		       a9 3a		      lda	#>midiNmi
    219  3a8b		       8d 19 03 	      sta	$0319
    220  3a8e
    221  3a8e							; set IRQ routine
    222  3a8e				   midiSetIrq
    223  3a8e							;---------------------------
    224  3a8e		       a9 fa		      lda	#<midiIrq
    225  3a90		       8d 14 03 	      sta	$0314
    226  3a93		       a9 3a		      lda	#>midiIrq
    227  3a95		       8d 15 03 	      sta	$0315
    228  3a98							;---------------------------
    229  3a98
    230  3a98							; enable IRQ/NMI
    231  3a98		       a9 94		      lda	#$94
    232  3a9a		       1d 34 3b 	      ora	midiCr0Cr1,x
    233  3a9d		       91 64		      sta	(midiControl),y
    234  3a9f
    235  3a9f		       58		      cli
    236  3aa0		       60		      rts
    237  3aa1
    238  3aa1							; =========================================================================
    239  3aa1
    240  3aa1				   midiRelease
    241  3aa1		       78		      sei
    242  3aa2		       20 bb 3a 	      jsr	midiReset
    243  3aa5		       a9 31		      lda	#$31
    244  3aa7		       8d 14 03 	      sta	$0314
    245  3aaa		       a9 ea		      lda	#$ea
    246  3aac		       8d 15 03 	      sta	$0315
    247  3aaf		       a9 47		      lda	#$47
    248  3ab1		       8d 18 03 	      sta	$0318
    249  3ab4		       a9 fe		      lda	#$fe
    250  3ab6		       8d 19 03 	      sta	$0319
    251  3ab9		       58		      cli
    252  3aba		       60		      rts
    253  3abb
    254  3abb							; MC68B50 master reset and IRQ off
    255  3abb				   midiReset
    256  3abb		       a0 00		      ldy	#0
    257  3abd		       a9 03		      lda	#3
    258  3abf		       91 64		      sta	(midiControl),y
    259  3ac1		       60		      rts
    260  3ac2
    261  3ac2				   midiCanRead
    262  3ac2		       a6 6c		      ldx	midiRingbufferReadIndex
    263  3ac4		       e4 6d		      cpx	midiRingbufferWriteIndex
    264  3ac6		       60		      rts
    265  3ac7
    266  3ac7							; read MIDI byte from ringbuffer
    267  3ac7				   midiRead
    268  3ac7		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    269  3ac9		       e4 6d		      cpx	midiRingbufferWriteIndex
    270  3acb		       d0 0a		      bne	processMidi	; Slocum: modified to not wait for data...
    271  3acd							;beq midiRead
    272  3acd		       60		      rts		; No new data, so return
    273  3ace
    274  3ace							; wait for MIDI byte and read it from ringbuffer
    275  3ace				   midiReadWait
    276  3ace		       a6 6c		      ldx	midiRingbufferReadIndex	; if the read and write pointers are different...
    277  3ad0		       e4 6d		      cpx	midiRingbufferWriteIndex
    278  3ad2		       d0 03		      bne	processMidi	; Slocum: modified to not wait for data...
    279  3ad4		       4c ce 3a 	      jmp	midiReadWait
    280  3ad7							;rts ; No new data, so return
    281  3ad7
    282  3ad7
    283  3ad7				   processMidi
    284  3ad7							; read next character from ringbuffer
    285  3ad7		       bd 00 7f 	      lda	midiRingbuffer,x
    286  3ada		       a8		      tay		; save next byte into y
    287  3adb		       e8		      inx		; increment buffer pointer...
    288  3adc		       8a		      txa
    289  3add							;and #31 ; wrap around at end
    290  3add		       29 ff		      and	#BUFFER_SIZE_MASK
    291  3adf		       85 6c		      sta	midiRingbufferReadIndex	; save it
    292  3ae1		       98		      tya		; the byte read from the buffer ends up in both y and a
    293  3ae2
    294  3ae2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    295  3ae2							; DEBUG - SHOW MIDI DATA
    296  3ae2				  -	      IF	DEBUG_SHOW_MIDI=1
    297  3ae2				  -			;IF DEBUG_DISPLAY=1
    298  3ae2				  -	      sta	temp
    299  3ae2				  -	      bpl	notStatusByte
    300  3ae2				  -	      lda	#$E
    301  3ae2				  -	      sta	hexDispColor
    302  3ae2				  -	      jmp	endColor
    303  3ae2				  -notStatusByte
    304  3ae2				  -	      lda	#$F
    305  3ae2				  -	      sta	hexDispColor
    306  3ae2				  -endColor
    307  3ae2				  -	      lda	debugOffset
    308  3ae2				  -	      and	#$F0
    309  3ae2				  -	      lsr
    310  3ae2				  -	      lsr
    311  3ae2				  -	      lsr
    312  3ae2				  -	      tax
    313  3ae2				  -			;ldx #34
    314  3ae2				  -	      lda	debugOffset
    315  3ae2				  -	      and	#$0F
    316  3ae2				  -	      tay
    317  3ae2				  -	      iny
    318  3ae2				  -	      iny
    319  3ae2				  -	      iny
    320  3ae2				  -	      iny
    321  3ae2				  -	      iny
    322  3ae2				  -	      iny
    323  3ae2				  -	      lda	temp
    324  3ae2				  -	      jsr	displayHex
    325  3ae2				  -	      inc	debugOffset
    326  3ae2				  -			;ldy debugOffset
    327  3ae2				  -			;iny
    328  3ae2				  -			;tya
    329  3ae2				  -			;and #$0F
    330  3ae2				  -			;sta debugOffset
    331  3ae2				  -			;adc #5
    332  3ae2				  -			;tay
    333  3ae2				  -	      lda	temp
    334  3ae2				  -	      ldy	temp
    335  3ae2					      ENDIF
    336  3ae2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    337  3ae2
    338  3ae2		       60		      rts
    339  3ae3
    340  3ae3							; write MIDI byte and wait for write complete
    341  3ae3		       60	   midiWrite  rts		; TODO
    342  3ae4
    343  3ae4							; NMI handler
    344  3ae4		       48	   midiNmi    pha
    345  3ae5		       8a		      txa
    346  3ae6		       48		      pha
    347  3ae7		       98		      tya
    348  3ae8		       48		      pha
    349  3ae9
    350  3ae9							; test if it was a NMI from the MIDI interface
    351  3ae9		       a0 00		      ldy	#0
    352  3aeb		       b1 66		      lda	(midiStatus),y
    353  3aed		       29 01		      and	#1
    354  3aef		       f0 03		      beq	midiNmiEnd
    355  3af1		       20 16 3b 	      jsr	midiStore
    356  3af4		       68	   midiNmiEnd pla
    357  3af5		       a8		      tay
    358  3af6		       68		      pla
    359  3af7		       aa		      tax
    360  3af8		       68		      pla
    361  3af9		       40		      rti
    362  3afa
    363  3afa							; IRQ handler
    364  3afa				   midiIrq
    365  3afa		       a6 6e		      ldx	midiInterfaceType
    366  3afc		       ca		      dex
    367  3afd		       bd 38 3b 	      lda	midiIrqType,x
    368  3b00		       f0 0e		      beq	midiIrqKey
    369  3b02
    370  3b02							; test if it was an IRQ from the MIDI interface
    371  3b02		       a0 00		      ldy	#0
    372  3b04		       b1 66		      lda	(midiStatus),y
    373  3b06		       29 01		      and	#1
    374  3b08		       f0 06		      beq	midiIrqKey
    375  3b0a		       20 16 3b 	      jsr	midiStore
    376  3b0d		       4c f4 3a 	      jmp	midiNmiEnd
    377  3b10
    378  3b10							; keyboard test
    379  3b10				   midiIrqKey
    380  3b10				  -	      IF	TEST_KEYBOARD=1
    381  3b10				  -	      jsr	keyboardTest
    382  3b10					      ENDIF
    383  3b10		       ad 0d dc 	      lda	$dc0d
    384  3b13		       4c f4 3a 	      jmp	midiNmiEnd
    385  3b16
    386  3b16							; get MIDI byte and store in ringbuffer
    387  3b16				   midiStore
    388  3b16		       b1 6a		      lda	(midiRx),y
    389  3b18		       a6 6d		      ldx	midiRingbufferWriteIndex
    390  3b1a		       9d 00 7f 	      sta	midiRingbuffer,x
    391  3b1d		       e8		      inx
    392  3b1e		       8a		      txa
    393  3b1f							;and #31
    394  3b1f		       29 ff		      and	#BUFFER_SIZE_MASK
    395  3b21		       85 6d		      sta	midiRingbufferWriteIndex
    396  3b23		       60		      rts
    397  3b24
    398  3b24							; MC68B50 control register (relative to $de00)
    399  3b24		       00 08 04 00 midiControlOfs .byte.b	0, 8, 4, 0
    400  3b28
    401  3b28							; MC68B50 status register
    402  3b28		       02 08 06 02 midiStatusOfs .byte.b	2, 8, 6, 2
    403  3b2c
    404  3b2c							; MC68B50 TX register
    405  3b2c		       01 09 05 01 midiTxOfs  .byte.b	1, 9, 5, 1
    406  3b30
    407  3b30							; MC68B50 RX register offset
    408  3b30		       03 09 07 03 midiRxOfs  .byte.b	3, 9, 7, 3
    409  3b34
    410  3b34							; counter divide bits CR0 and CR1 for the MC68B50
    411  3b34				   midiCr0Cr1
    412  3b34		       01 01 02 01	      .byte.b	1, 1, 2, 1
    413  3b38
    414  3b38							; 1=IRQ, 0=NMI
    415  3b38				   midiIrqType
    416  3b38		       01 01 01 00	      .byte.b	1, 1, 1, 0
    417  3b3c
    418  3b3c				  -	      IF	TEST_KEYBOARD=1
    419  3b3c				  -			; keyboard test
    420  3b3c				  -keyboardTest
    421  3b3c				  -	      ldx	keyTestIndex
    422  3b3c				  -	      lda	keys,x	; load colum
    423  3b3c				  -	      sta	PRA
    424  3b3c				  -	      inx
    425  3b3c				  -	      lda	PRB
    426  3b3c				  -	      and	keys,x	; mask row
    427  3b3c				  -	      inx
    428  3b3c				  -	      cmp	#0
    429  3b3c				  -	      bne	kbt2
    430  3b3c				  -	      lda	keys,x
    431  3b3c				  -	      cmp	#$80
    432  3b3c				  -	      bne	jump1
    433  3b3c				  -	      inc	shiftPressed
    434  3b3c				  -	      bne	kbt2
    435  3b3c				  -jump1
    436  3b3c				  -	      sta	keyPressedIntern
    437  3b3c				  -kbt2
    438  3b3c				  -	      inx
    439  3b3c				  -	      cpx	#18
    440  3b3c				  -	      bne	kbt3
    441  3b3c				  -	      ldx	keyPressedIntern
    442  3b3c				  -	      beq	jump2
    443  3b3c				  -	      lda	shiftPressed
    444  3b3c				  -	      beq	jump2
    445  3b3c				  -	      inx
    446  3b3c				  -jump2
    447  3b3c				  -	      stx	keyPressed
    448  3b3c				  -	      bne	jump3
    449  3b3c				  -	      lda	shiftPressed
    450  3b3c				  -	      beq	jump3
    451  3b3c				  -	      lda	#$40
    452  3b3c				  -	      sta	keyPressed
    453  3b3c				  -jump3
    454  3b3c				  -	      ldx	#0
    455  3b3c				  -	      stx	shiftPressed
    456  3b3c				  -	      stx	keyPressedIntern
    457  3b3c				  -kbt3
    458  3b3c				  -	      stx	keyTestIndex
    459  3b3c				  -	      rts
    460  3b3c				  -
    461  3b3c				  -keys
    462  3b3c				  -	      .byte	%11111110, %00010000, 1	; F1
    463  3b3c				  -	      .byte	%11111110, %00100000, 3	; F3
    464  3b3c				  -	      .byte	%11111110, %01000000, 5	; F5
    465  3b3c				  -	      .byte	%11111110, %00001000, 7	; F7
    466  3b3c				  -	      .byte	%10111111, %00010000, $80	; right shift
    467  3b3c				  -	      .byte	%10111101, %10000000, $80	; left shift
    468  3b3c					      ENDIF
------- FILE cynthcart2.0.1.asm
   1025  3b3c					      ENDIF
   1026  3b3c
   1027  3b3c
   1028  3b3c				  -	      IF	MODE=KERNEL_OBSOLETE
   1029  3b3c				  -	      org	$bfff
   1030  3b3c				  -	      byte	0
   1031  3b3c					      ENDIF
